RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; Basic Interpreter Entry points
    3 0000:             ;
    4 0000:             basic_list:   EQU 0e000h
    5 0000:             basic_run:    EQU 0e010h
    6 0000:             basic_cold:   EQU 0e020h
    7 0000:             basic_test:   EQU 0e030h
    8 0000:             basic_parse:  EQU 0e050h
    9 0000:             basic_copy:   EQU 0e060h
   10 0000:             ;
   11 0000:             ; Hardware info
   12 0000:             ;
   13 0000:             UARTA0:       EQU 000h
   14 0000:             UARTA1:       EQU 008h
   15 0000:             UARTA2:       EQU 010h
   16 0000:             UARTA3:       EQU 018h
   17 0000:             UARTA4:       EQU 020h
   18 0000:             UARTA5:       EQU 028h
   19 0000:             UARTA6:       EQU 030h
   20 0000:             UARTA7:       EQU 038h
   21 0000:             
   22 0000:             SWITCHLED:    EQU 001H
   23 0000:             LCDENABLE:    EQU 002H
   24 0000:             LCDREGISTER:  EQU 004H
   25 0000:             UARTCS:       EQU 040H
   26 0000:             TIL311:       EQU 080H
   27 0000:             
   28 0000:             CNTL-PORT:    EQU "P0"
   29 0000:             DATAPORT:     EQU "P1"
   30 0000:             
   31 0000:             ;
   32 0000:             ; MONITOR MODES
   33 0000:             ;
   34 0000:             NOMODE:       EQU 0
   35 0000:             EXAMINEMODE:  EQU 1
   36 0000:             DUMPMODE:     EQU 2
   37 0000:             BLOCKMODE:    EQU 3
   38 0000:             FILLMODE:     EQU 4
   39 0000:             
   40 0000:             ;
   41 0000:             ; Monitor variables 0x0f00 - 0x0fff
   42 0000:             ;
   43 0000:             monmode:        EQU 0f00h
   44 0000:             continue_addr:  EQU 0f02h
   45 0000:             line_buffer:    EQU 0f80h    ; 128 bytes long max
   46 0000:             
   47 0000:             
   48 0000:             ;
   49 0000:             ; Setup Stack, use R1 0eff -> down to 0c00 (but no checking)
   50 0000:             ;
   51 0000:             STACK: EQU 0EFFh
   52 0000:             
   53 0000:             ;
   54 0000:             ; remap eprom from 0x0000 to 0xf000 by initial access to 0xf003 via BRanch
   55 0000:             ;
   56 0000:                      ORG 0f000h
   57 f000: a0 f0 03             BR eprom
   58 f003:                      ORG 0f003h
   59 f003:             eprom:
   60 f003:             ;
   61 f003:             ; Setup Stack
   62 f003:             ;
   63 f003: 19 0e ff             MVIW R1,STACK
   64 f006:             
   65 f006:             ; test
   66 f006:             ;         brdev devon
   67 f006:             ;
   68 f006:             ;         off
   69 f006:             ;         halt
   70 f006:             ;devon:
   71 f006:             ;        on
   72 f006:             ;        halt
   73 f006:             
   74 f006:             ; SERIAL OUT SETUP
   75 f006:             ;
   76 f006: 70 58                OUTI  P0,(UARTA3!UARTCS)
   77 f008: 71 80                OUTI  P1,080H
   78 f00a:             
   79 f00a: 70 40                OUTI  P0,(UARTA0!UARTCS)
   80 f00c: 71 0c                OUTI  P1,12
   81 f00e:             
   82 f00e: 70 48                OUTI  P0,(UARTA1!UARTCS)
   83 f010: 71 00                OUTI  P1,00
   84 f012:             
   85 f012: 70 58                OUTI  P0,(UARTA3!UARTCS)
   86 f014: 71 03                OUTI  P1,03H
   87 f016:             
   88 f016:             ; Set intial monitor mode
   89 f016:             
   90 f016:             ;         MVIB R6,NOMODE
   91 f016:             
   92 f016: 0e 00                 LDAI NOMODE
   93 f018: ed 0f 00              STA MONMODE
   94 f01b:             ;
   95 f01b:             ; Main
   96 f01b:             ;
   97 f01b: 04 f8 71              JSR lblink
   98 f01e: 1f f8 97              MVIW R7,hello
   99 f021: 04 f7 f4              JSR stringout
  100 f024: 04 e0 20              JSR basic_cold   ; initialize basic interpreter
  101 f027:                                        ; hack should this pass in token buffer ptr
  102 f027:             ;
  103 f027:             ; additional proof of life
  104 f027:             ;
  105 f027:             ; show first 16 bytes of ROM & REGISTERS
  106 f027:             ;
  107 f027: 1f f0 00             MVIW R7,0f000h
  108 f02a: 04 f7 00             JSR showaddr
  109 f02d: 04 f7 7f             JSR show16
  110 f030: 04 f7 48             JSR showregs
  111 f033: 1f f8 b7             MVIW R7,CRLF
  112 f036: 04 f7 f4             JSR stringout
  113 f039:             ;
  114 f039:             ; show test code addr to use with go command
  115 f039:             ;
  116 f039: 1f f0 48             MVIW R7,tttt
  117 f03c: 04 f7 00             JSR showaddr
  118 f03f: 1f f8 b7             MVIW R7,CRLF
  119 f042: 04 f7 f4             JSR stringout
  120 f045:             ;
  121 f045:             ; if INPUT high start the monitor
  122 f045:             ;
  123 f045: a3 f4 6b             BRINH cmdloop
  124 f048:             ;
  125 f048:             ; else run test/code below at completetion blink OUT LED jump to cmdloop
  126 f048:             ;
  127 f048:             tttt:
  128 f048: 1f fe 84            MVIW R7,TESTMSG
  129 f04b: 04 f7 f4            JSR stringout
  130 f04e:             ;
  131 f04e:             ; Tests to be run at startup
  132 f04e:             ;
  133 f04e:             
  134 f04e:             ;
  135 f04e:             ; startup tests complete
  136 f04e:             ;
  137 f04e: a0 f4 6b            BR cmdloop
  138 f051:             ;
  139 f051:             ;
  140 f051:             ;
  141 f051:             alltests:
  142 f051:             ;         jsr shltest
  143 f051:             ;         JSR shrtest
  144 f051:             ;         jsr rshltest
  145 f051:             ;         jsr rshrtest
  146 f051:             ;         jsr cshltest
  147 f051:             ;         JSR cshrtest
  148 f051:             ;         JSR pshltest
  149 f051:             ;         JSR additest
  150 f051:             ;         JSR addictest
  151 f051:             ;         JSR subtest
  152 f051:             ;         JSR cmptest
  153 f051:             ;         JSR shrtest
  154 f051:             ;         JSR shltest
  155 f051:             ;         JSR rshrtest
  156 f051:             ;         JSR rshltest
  157 f051:             ;         JSR cshltest
  158 f051:             ;         JSR cshrtest
  159 f051:             ;         JSR accumtest
  160 f051:             ;         JSR pushpoptest
  161 f051:             ;         JSR ortest
  162 f051:             ;         JSR orttest
  163 f051:             ;         JSR additest
  164 f051:             ;         JSR movrrtest
  165 f051:             ;         JSR add16tests
  166 f051:             ;         jsr mem_indirect_tests
  167 f051:             ;         jsr mul16
  168 f051:             ;         jsr pushr_popr_tests
  169 f051:             ;         jsr sub16tests
  170 f051:             
  171 f051:             alltestsdone:
  172 f051: 04 f8 71              JSR lblink
  173 f054: a0 f0 51              BR alltestsdone
  174 f057:             
  175 f057:             ;
  176 f057:             ; Individual Tests
  177 f057:             ;
  178 f057:             
  179 f057:             ;
  180 f057:             ; 16 x 16 bit multiply test
  181 f057:             ;
  182 f057:             mul16:
  183 f057: 1c ff fa          mviw r4,0FFFAh
  184 f05a: 1d 00 02          mviw r5,0002h
  185 f05d:             
  186 f05d:             ;
  187 f05d:             ; test new memory based load/store instructions
  188 f05d:             ;
  189 f05d:             mem_indirect_tests:
  190 f05d:             
  191 f05d: 1b 20 00            MVIW R3,02000h
  192 f060:             clearmem:
  193 f060: 0e 00               LDAI 0
  194 f062: 4b                  STAVR R3
  195 f063: 53                  INCR R3
  196 f064: 23                  MVRLA R3
  197 f065: b3 ff               ANDI  0FFH
  198 f067: a2 f0 60            BRNZ clearmem
  199 f06a:             
  200 f06a:             ; initial dump
  201 f06a:             
  202 f06a:             ;
  203 f06a:             ; step 10
  204 f06a:             ;
  205 f06a: 0e 10               ldai 010h       ;counter
  206 f06c: 04 f0 c5            jsr mem_indirect_util
  207 f06f:             
  208 f06f:             ; str 0x5544 into 0x2000-1 with tested opcodes
  209 f06f:             
  210 f06f: 1c 20 00            MVIW R4,02000h
  211 f072: 0e 55               LDAI 055h
  212 f074: 4c                  STAVR R4
  213 f075: 54                  INCR R4
  214 f076: 0e 44               LDAI 044h
  215 f078: 4c                  STAVR R4
  216 f079:             
  217 f079:             ; step 11
  218 f079:             
  219 f079: 0e 11               ldai 011h
  220 f07b: 04 f0 c5            jsr mem_indirect_util
  221 f07e:             
  222 f07e:             ; load register R5 from memory 0x2000
  223 f07e:             
  224 f07e: f5 20 00            LDR R5,02000h
  225 f081: 0f 62               movrr r2,r6       ;move r2 to r6 for output purposes
  226 f083:                                       ;R2 is used by LDR/STR instuctions
  227 f083:             
  228 f083:             ; step 12
  229 f083:             
  230 f083: 0e 12               ldai 012h
  231 f085: 04 f0 c5            jsr mem_indirect_util
  232 f088:             
  233 f088:             ; store info in R5 into 0x2004-5
  234 f088:             ; step 13
  235 f088:             
  236 f088: fd 20 04            STR R5,2004h
  237 f08b: 0f 62               movrr r2,r6
  238 f08d:             
  239 f08d: 0e 13               ldai 013h
  240 f08f: 04 f0 c5            jsr mem_indirect_util
  241 f092:             
  242 f092:             ; load 0x66 into accumulator and store in 0x2006
  243 f092:             ; Save R2 into R6 for display
  244 f092:             ; step 14
  245 f092:             
  246 f092: 0e 66               LDAI 066h
  247 f094: ed 20 06            STA  02006h
  248 f097: 0f 62               movrr r2,r6
  249 f099: 0e 14               ldai 014h
  250 f09b: 04 f0 c5            jsr mem_indirect_util
  251 f09e:             
  252 f09e:             ; load accumulator from 0xf000
  253 f09e:             ; save R2 in R6 for display
  254 f09e:             ; store value in accumulator into 0x2008
  255 f09e:             ; step 15
  256 f09e:             
  257 f09e: ec f0 00            lda 0f000h
  258 f0a1:             
  259 f0a1:             ; store value from 0f000h to 2008h
  260 f0a1:             
  261 f0a1: ed 20 08            sta 02008h
  262 f0a4: 0f 62               movrr r2,r6
  263 f0a6: 0e 15               ldai 015h
  264 f0a8: 04 f0 c5            jsr mem_indirect_util
  265 f0ab:             ;
  266 f0ab:             ;  load 88 into tmp register and store t 200a
  267 f0ab:             ;  step 16
  268 f0ab:             ;
  269 f0ab: 0d 88               ldti 088h
  270 f0ad: ef 20 0a            stt 0200ah
  271 f0b0: 0f 62               movrr r2,r6
  272 f0b2: 0e 16               ldai 016h
  273 f0b4: 04 f0 c5            jsr mem_indirect_util
  274 f0b7:             ;
  275 f0b7:             ; load tmp from memory f001 and store to 200c
  276 f0b7:             ; step 17
  277 f0b7:             ;
  278 f0b7: ee f0 01            ldt 0f001h
  279 f0ba: ef 20 0c            stt 0200ch
  280 f0bd: 0f 62               movrr r2,r6
  281 f0bf: 0e 17               ldai 017h
  282 f0c1: 04 f0 c5            jsr mem_indirect_util
  283 f0c4: 05                  ret
  284 f0c5:             
  285 f0c5:             mem_indirect_util:
  286 f0c5: 09                  push
  287 f0c6: 1f 20 00            MVIW R7,02000h
  288 f0c9: 04 f7 00            JSR showaddr
  289 f0cc: 04 f7 7f            JSR show16
  290 f0cf: 04 f7 48            JSR showregs
  291 f0d2: 0a                  pop
  292 f0d3: 04 f7 c1            JSR showbytea
  293 f0d6: 1f f8 b7            MVIW R7,CRLF
  294 f0d9: 04 f7 f4            JSR stringout
  295 f0dc: 05                  ret
  296 f0dd:             ;
  297 f0dd:             ; 16 bit add carry tests
  298 f0dd:             ;
  299 f0dd:             add16tests:
  300 f0dd:             ;
  301 f0dd:             ; add r4 and r5
  302 f0dd:             ;
  303 f0dd:             
  304 f0dd: 1c ff fa          mviw r4,0FFFAh
  305 f0e0: 1d ff fc          mviw r5,0FFFCh
  306 f0e3: 04 f0 f9          jsr do_add16_util
  307 f0e6:             
  308 f0e6: 1c 56 89          mviw r4,05689h
  309 f0e9: 1d ab cd          mviw r5,0abcdh
  310 f0ec: 04 f0 f9          jsr do_add16_util
  311 f0ef:             
  312 f0ef: 1c ff fa          mviw r4,0FFFAh
  313 f0f2: 1d ff fe          mviw r5,0FFFEh
  314 f0f5: 04 f0 f9          jsr do_add16_util
  315 f0f8: 05                ret
  316 f0f9:             
  317 f0f9:             do_add16_util:
  318 f0f9: 04 f7 48          jsr showregs
  319 f0fc: 04 f1 03          jsr do_add16
  320 f0ff: 04 f7 48          jsr showregs
  321 f102: 05                ret
  322 f103:             
  323 f103:             do_add16:
  324 f103: 24                MVRLA R4
  325 f104: 0b                MVAT
  326 f105: 25                mvrla r5
  327 f106: b8                ADDT
  328 f107: 34                mvarl r4
  329 f108: 2c                mvrha r4
  330 f109: 0b                MVAT
  331 f10a: 2d                mvrha r5
  332 f10b: e3                addtc
  333 f10c: 3c                mvarh r4
  334 f10d: 05                ret
  335 f10e:             
  336 f10e:             ;
  337 f10e:             ; 16 bit sub  tests
  338 f10e:             ;
  339 f10e:             sub16tests:
  340 f10e:             ;
  341 f10e:             ; sub r4 from r5
  342 f10e:             ;
  343 f10e:             
  344 f10e: 1c 00 01          mviw r4,0001h
  345 f111: 1d 00 09          mviw r5,0009h
  346 f114: 04 f1 3c          jsr do_sub16_util
  347 f117:             
  348 f117: 1c 00 01          mviw r4,0001h
  349 f11a: 1d 01 00          mviw r5,0100h
  350 f11d: 04 f1 3c          jsr do_sub16_util
  351 f120:             
  352 f120: 1c 00 09          mviw r4,0009h
  353 f123: 1d 00 01          mviw r5,0001h
  354 f126: 04 f1 3c          jsr do_sub16_util
  355 f129:             
  356 f129:             
  357 f129: 1c 02 20          mviw r4,0220h
  358 f12c: 1d 01 10          mviw r5,0110h
  359 f12f: 04 f1 3c          jsr do_sub16_util
  360 f132:             
  361 f132: 1c 00 01          mviw r4,0001h
  362 f135: 1d ff fc          mviw r5,0FFFCh
  363 f138: 04 f1 3c          jsr do_sub16_util
  364 f13b:             
  365 f13b: 05                ret
  366 f13c:             
  367 f13c:             do_sub16_util:
  368 f13c: 04 f7 48          jsr showregs
  369 f13f: 04 f1 46          jsr do_sub16
  370 f142: 04 f7 48          jsr showregs
  371 f145: 05                ret
  372 f146:             ;
  373 f146:             ; 16 bit subtract of r4 from r5, return result in r5
  374 f146:             ;
  375 f146:             do_sub16:
  376 f146: 2c                mvrha r4
  377 f147: b5                inva
  378 f148: 3c                mvarh r4
  379 f149: 24                mvrla r4
  380 f14a: b5                inva
  381 f14b: 34                mvarl r4
  382 f14c: 54                incr r4
  383 f14d: 04 f7 48          jsr showregs
  384 f150: a0 f1 03          br do_add16
  385 f153:             ;
  386 f153:             ; pushr popr test
  387 f153:             ;
  388 f153:             ; requires testing changing r6 to r4
  389 f153:             ;
  390 f153:             pushr_popr_tests:
  391 f153: 1b 0f f0             MVIW R3,0ff0h  ;setup to show stack
  392 f156: 0f 51                movrr r1,r5    ;put a copy of stack ptr into r5
  393 f158: 04 f7 00             JSR showaddr
  394 f15b: 04 f7 7f             JSR show16
  395 f15e: 04 f7 48             JSR showregs
  396 f161: 1f f8 b7             MVIW R7,CRLF
  397 f164: 04 f7 f4             JSR stringout
  398 f167:             
  399 f167: 1c 12 34             mviw R4,01234h ;put a value into R4
  400 f16a: 0f 51                movrr r1,r5
  401 f16c: 1b 0f f0             MVIW R3,0ff0h
  402 f16f: 04 f7 00             JSR showaddr
  403 f172: 04 f7 7f             JSR show16
  404 f175: 04 f7 48             JSR showregs
  405 f178: 1f f8 b7             MVIW R7,CRLF
  406 f17b: 04 f7 f4             JSR stringout
  407 f17e:             
  408 f17e: 07 04                pushr r4
  409 f180: 0f 51                movrr r1,r5
  410 f182: 1b 0f f0             MVIW R3,0ff0h
  411 f185: 04 f7 00             JSR showaddr
  412 f188: 04 f7 7f             JSR show16
  413 f18b: 04 f7 48             JSR showregs
  414 f18e: 1f f8 b7             MVIW R7,CRLF
  415 f191: 04 f7 f4             JSR stringout
  416 f194:             
  417 f194: 1c 00 00             mviw r4,0h
  418 f197: 0f 51                movrr r1,r5
  419 f199: 1b 0f f0             MVIW R3,0ff0h
  420 f19c: 04 f7 00             JSR showaddr
  421 f19f: 04 f7 7f             JSR show16
  422 f1a2: 04 f7 48             JSR showregs
  423 f1a5: 1f f8 b7             MVIW R7,CRLF
  424 f1a8: 04 f7 f4             JSR stringout
  425 f1ab:             
  426 f1ab: 08 40                popr r4
  427 f1ad: 0f 51                movrr r1,r5
  428 f1af: 1b 0f f0             MVIW R3,0ff0h
  429 f1b2: 04 f7 00             JSR showaddr
  430 f1b5: 04 f7 7f             JSR show16
  431 f1b8: 04 f7 48             JSR showregs
  432 f1bb: 1f f8 b7             MVIW R7,CRLF
  433 f1be: 04 f7 f4             JSR stringout
  434 f1c1: 05                   ret
  435 f1c2:             
  436 f1c2:             ;
  437 f1c2:             ; Register to Register move test
  438 f1c2:             ;
  439 f1c2:             movrrtest:
  440 f1c2: 1f fe 76            MVIW   R7,MOVRRHELP
  441 f1c5: 04 f7 f4            JSR    stringout
  442 f1c8:             
  443 f1c8: 1b 12 34            MVIW R3,1234h
  444 f1cb: 1c 56 78            MVIW R4,5678h
  445 f1ce:             
  446 f1ce: 04 f1 f1            jsr showreg34
  447 f1d1:             
  448 f1d1: 0f 43               MOVRR R3,R4
  449 f1d3:             
  450 f1d3: 04 f1 f1            jsr showreg34
  451 f1d6:             
  452 f1d6: 1b 43 21            MVIW R3,4321h
  453 f1d9:             
  454 f1d9: 04 f1 f1            jsr SHOWREG34
  455 f1dc:             
  456 f1dc: 1c 12 34            MVIW R4,1234h
  457 f1df: 1d 56 78            MVIW R5,5678h
  458 f1e2:             
  459 f1e2: 04 f2 22            jsr showreg45
  460 f1e5:             
  461 f1e5: 0f 54               MOVRR R4,R5
  462 f1e7:             
  463 f1e7: 04 f2 22            jsr showreg45
  464 f1ea:             
  465 f1ea: 1c 43 21            MVIW R4,4321h
  466 f1ed:             
  467 f1ed: 04 f2 22            jsr showreg45
  468 f1f0:             
  469 f1f0: 05                  ret
  470 f1f1:             
  471 f1f1:             ;
  472 f1f1:             ; sho registers (hard coded)
  473 f1f1:             ;
  474 f1f1:             showreg34:              ; registers across two boards
  475 f1f1: 0e 00               LDAI 0h
  476 f1f3: 04 f7 ec            JSR ledout
  477 f1f6: 2b                  MVRHA r3
  478 f1f7: 04 f7 f0            JSR TIL311out
  479 f1fa: 04 f8 41            JSR switchtoggle
  480 f1fd: 0e 01               LDAI 1h
  481 f1ff: 04 f7 ec            JSR ledout
  482 f202: 23                  MVRLA r3
  483 f203: 04 f7 f0            JSR TIL311out
  484 f206: 04 f8 41            JSR switchtoggle
  485 f209: 0e 02               LDAI 2h
  486 f20b: 04 f7 ec            JSR ledout
  487 f20e: 2c                  MVRHA r4
  488 f20f: 04 f7 f0            JSR TIL311out
  489 f212: 04 f8 41            JSR switchtoggle
  490 f215: 0e 03               LDAI 3h
  491 f217: 04 f7 ec            JSR ledout
  492 f21a: 24                  MVRLA r4
  493 f21b: 04 f7 f0            JSR TIL311out
  494 f21e: 04 f8 41            JSR switchtoggle
  495 f221: 05                  ret
  496 f222:             
  497 f222:             showreg45:             ;register on same board
  498 f222: 0e 00               LDAI 0h
  499 f224: 04 f7 ec            JSR ledout
  500 f227: 2c                  MVRHA r4
  501 f228: 04 f7 f0            JSR TIL311out
  502 f22b: 04 f8 41            JSR switchtoggle
  503 f22e: 0e 01               LDAI 1h
  504 f230: 04 f7 ec            JSR ledout
  505 f233: 24                  MVRLA r4
  506 f234: 04 f7 f0            JSR TIL311out
  507 f237: 04 f8 41            JSR switchtoggle
  508 f23a: 0e 02               LDAI 2h
  509 f23c: 04 f7 ec            JSR ledout
  510 f23f: 2d                  MVRHA r5
  511 f240: 04 f7 f0            JSR TIL311out
  512 f243: 04 f8 41            JSR switchtoggle
  513 f246: 0e 03               LDAI 3h
  514 f248: 04 f7 ec            JSR ledout
  515 f24b: 25                  MVRLA r5
  516 f24c: 04 f7 f0            JSR TIL311out
  517 f24f: 04 f8 41            JSR switchtoggle
  518 f252: 05                  ret
  519 f253:             
  520 f253:             ;
  521 f253:             ; OR - OR accumulator immediate
  522 f253:             ;
  523 f253: 4f 52 20 54 
            45 53 54 53 
            20 2d 20 4f 
            52 20 49 4e 
            50 55 54 20 
            53 57 49 54 
            43 48 45 53 
            20 57 49 54 
            48 20 30 58 
            35 35 20 28 
            35 58 29 0a 
            0d 00       ORHELP: DB "OR tests - or input switches with 0x55 (5x)",0ah,0dh,0
  524 f281:             ortest:
  525 f281: 1f f2 53             MVIW   R7,ORHELP
  526 f284: 04 f7 f4             JSR    stringout
  527 f287: 13 05                MVIB   R3,5
  528 f289:             orloop:
  529 f289: 04 f8 41             JSR switchtoggle
  530 f28c: 70 01                OUTI P0,(SWITCHLED)
  531 f28e: 91                   INP P1
  532 f28f: b2 55                ORI  055H
  533 f291: 61                   OUTA  P1
  534 f292:             
  535 f292: 5b                   DECR R3
  536 f293: 23                   MVRLA R3
  537 f294: a2 f2 89             BRNZ orloop
  538 f297: 05                   RET
  539 f298:             
  540 f298:             ;
  541 f298:             ; ADDI - ADD accumulator with immediate
  542 f298:             ;
  543 f298:             additest:
  544 f298: 1f fe 23           MVIW   R7,ADDIHELP
  545 f29b: 04 f7 f4           JSR    stringout
  546 f29e: 13 05              MVIB   R3,5
  547 f2a0:             addiloop:
  548 f2a0: 04 f8 41           JSR switchtoggle
  549 f2a3: 70 01              OUTI P0,(SWITCHLED)
  550 f2a5: 91                 INP P1
  551 f2a6: b0 02              ADDI 02h
  552 f2a8: 61                 OUTA  P1
  553 f2a9:             
  554 f2a9: 5b                 DECR R3
  555 f2aa: 23                 MVRLA R3
  556 f2ab: a2 f2 a0           BRNZ addiloop
  557 f2ae: 05                 RET
  558 f2af:             
  559 f2af:             ;
  560 f2af:             ; ADDIC - ADD accumulator with immediate with carry
  561 f2af:             ;
  562 f2af:             addictest:
  563 f2af: 1f fe 47          MVIW   R7,ADDICHELP
  564 f2b2: 04 f7 f4          JSR    stringout
  565 f2b5: 13 05             MVIB   R3,5
  566 f2b7:             addicloop:
  567 f2b7: 04 f8 41          JSR switchtoggle
  568 f2ba: 70 01             OUTI P0,(SWITCHLED)
  569 f2bc: 91                INP P1
  570 f2bd: e2 02             ADDIC 02h
  571 f2bf: 61                OUTA  P1
  572 f2c0:             
  573 f2c0: 5b                DECR R3
  574 f2c1: 23                MVRLA R3
  575 f2c2: a2 f2 b7          BRNZ addicloop
  576 f2c5: 05                RET
  577 f2c6:             
  578 f2c6:             ;
  579 f2c6:             ; ORT - OR accumulator with tmp register
  580 f2c6:             ;
  581 f2c6:             orttest:
  582 f2c6: 1f fe 0b            MVIW   R7,ORTHELP
  583 f2c9: 04 f7 f4            JSR    stringout
  584 f2cc: 13 05               MVIB   R3,5
  585 f2ce:             ortloop:
  586 f2ce: 04 f8 41            JSR switchtoggle
  587 f2d1: 70 01               OUTI P0,(SWITCHLED)
  588 f2d3: 91                  INP P1
  589 f2d4: 0b                  MVAT
  590 f2d5: 04 f8 41            JSR switchtoggle
  591 f2d8: 70 01               OUTI P0,(SWITCHLED)
  592 f2da: 91                  INP P1
  593 f2db: ba                  ORT
  594 f2dc: 61                  OUTA  P1
  595 f2dd:             
  596 f2dd: 5b                  DECR R3
  597 f2de: 23                  MVRLA R3
  598 f2df: a2 f2 ce            BRNZ ortloop
  599 f2e2: 05                  RET
  600 f2e3:             ;
  601 f2e3:             ; push pop tests - push 3 values onto stack, pop 3values from stack
  602 f2e3:             ;
  603 f2e3:             pushpoptest:
  604 f2e3: 1f fd f0             MVIW   R7,PUSHPOPHELP
  605 f2e6: 04 f7 f4             JSR    stringout
  606 f2e9:             
  607 f2e9: 13 03                MVIB   R3,3
  608 f2eb:             ppenterloop:
  609 f2eb: 04 f8 41             JSR switchtoggle
  610 f2ee: 70 01                OUTI P0,(SWITCHLED)
  611 f2f0: 91                   INP P1
  612 f2f1: 09                   push
  613 f2f2:             
  614 f2f2: 5b                   DECR R3
  615 f2f3: 23                   MVRLA R3
  616 f2f4: a2 f2 eb             BRNZ ppenterloop
  617 f2f7:             
  618 f2f7: 13 03                MVIB   R3,3
  619 f2f9:             ppdisloop:
  620 f2f9: 04 f8 41            JSR switchtoggle
  621 f2fc: 70 01               OUTI P0,(SWITCHLED)
  622 f2fe: 0a                  POP
  623 f2ff: 61                  OUTA  P1
  624 f300: 5b                  DECR R3
  625 f301: 23                  MVRLA R3
  626 f302: a2 f2 f9            BRNZ ppdisloop
  627 f305:             
  628 f305: 05                  RET
  629 f306:             ;
  630 f306:             ; accumulator register Tests - move values between accumulator and register HI 8 bits
  631 f306:             ;                              move values between accumulator and register LO 8 bits
  632 f306:             ;
  633 f306:             accumtest:
  634 f306: 1f fd dd             MVIW   R7,accumhelp
  635 f309: 04 f7 f4             JSR    stringout
  636 f30c: 13 0a                MVIB   R3,10
  637 f30e:             accloop:
  638 f30e: 04 f8 41             JSR switchtoggle
  639 f311: 70 01                OUTI P0,(SWITCHLED)
  640 f313: 91                   INP P1
  641 f314: 3b                   MVARH R3
  642 f315: 53                   INCR R3
  643 f316: 2b                   MVRHA R3
  644 f317: 61                   OUTA P1
  645 f318: 04 f8 41             JSR switchtoggle
  646 f31b: 70 01                OUTI P0,(SWITCHLED)
  647 f31d: 91                   INP P1
  648 f31e: 33                   MVARL R3
  649 f31f: 53                   INCR R3
  650 f320: 23                   MVRLA R3
  651 f321: 61                   OUTA P1
  652 f322:             
  653 f322: 5b                   DECR R3
  654 f323: 23                   MVRLA R3
  655 f324: a2 f3 0e             BRNZ accloop
  656 f327: 05                   RET
  657 f328:             ;
  658 f328:             ; shift tests
  659 f328:             ;
  660 f328:             ; Shift left
  661 f328:             ;
  662 f328: 53 48 49 46 
            54 20 4c 45 
            46 54 20 2d 
            20 53 48 49 
            46 54 20 49 
            4e 50 55 54 
            20 53 57 49 
            54 43 48 45 
            53 20 28 35 
            58 29 0a 0d 
            00          SHIFT_LEFTHELP: DB "Shift Left - shift input switches (5x)",0ah,0dh,0
  663 f351:             shltest:
  664 f351: 1f f3 28             MVIW   R7,SHIFT_LEFTHELP
  665 f354: 04 f7 f4             JSR    stringout
  666 f357: 13 05                MVIB   R3,5
  667 f359:             shlloop:
  668 f359: 04 f8 41             JSR switchtoggle
  669 f35c: 70 01                OUTI P0,(SWITCHLED)
  670 f35e: 91                   INP P1
  671 f35f: b6                   SHL
  672 f360: 61                   OUTA  P1
  673 f361:             
  674 f361: 5b                   DECR R3
  675 f362: 23                   MVRLA R3
  676 f363: a2 f3 59             BRNZ shlloop
  677 f366: 05                   RET
  678 f367:             ;
  679 f367:             ; shift Right
  680 f367:             ;
  681 f367: 53 48 49 46 
            54 20 52 49 
            47 48 54 20 
            2d 20 53 48 
            49 46 54 20 
            49 4e 50 55 
            54 20 53 57 
            49 54 43 48 
            45 53 20 28 
            35 58 29 0a 
            0d 00       SHIFT_RIGHTHELP: DB "Shift Right - shift input switches (5x)",0ah,0dh,0
  682 f391:             shrtest:
  683 f391: 1f f3 67              MVIW   R7,SHIFT_RIGHTHELP
  684 f394: 04 f7 f4              JSR    stringout
  685 f397: 13 05                 MVIB   R3,5
  686 f399:             shrloop:
  687 f399: 04 f8 41              JSR switchtoggle
  688 f39c: 70 01                 OUTI P0,(SWITCHLED)
  689 f39e: 91                    INP P1
  690 f39f: b7                    SHR
  691 f3a0: 61                    OUTA  P1
  692 f3a1:             
  693 f3a1: 5b                    DECR R3
  694 f3a2: 23                    MVRLA R3
  695 f3a3: a2 f3 99              BRNZ shrloop
  696 f3a6: 05                    RET
  697 f3a7:             ;
  698 f3a7:             ; ring shift left
  699 f3a7:             ;
  700 f3a7:             rshltest:
  701 f3a7: 1f fd 74             MVIW   R7,RSHIFT_LEFTHELP
  702 f3aa: 04 f7 f4             JSR    stringout
  703 f3ad: 13 0a                MVIB   R3,10
  704 f3af:             rshlloop:
  705 f3af: 04 f8 41             JSR switchtoggle
  706 f3b2: 70 01                OUTI P0,(SWITCHLED)
  707 f3b4: 91                   INP P1
  708 f3b5: bd                   RSHL
  709 f3b6: 61                   OUTA  P1
  710 f3b7:             
  711 f3b7: 5b                   DECR R3
  712 f3b8: 23                   MVRLA R3
  713 f3b9: a2 f3 af             BRNZ rshlloop
  714 f3bc: 05                   RET
  715 f3bd:             ;
  716 f3bd:             ; ring shift right
  717 f3bd:             ;
  718 f3bd:             rshrtest:
  719 f3bd: 1f fd 86              MVIW   R7,RSHIFT_RIGHTHELP
  720 f3c0: 04 f7 f4              JSR    stringout
  721 f3c3: 13 0a                 MVIB   R3,10
  722 f3c5:             rshrloop:
  723 f3c5: 04 f8 41              JSR switchtoggle
  724 f3c8: 70 01                 OUTI P0,(SWITCHLED)
  725 f3ca: 91                    INP P1
  726 f3cb: be                    RSHR
  727 f3cc: 61                    OUTA  P1
  728 f3cd:             
  729 f3cd: 5b                    DECR R3
  730 f3ce: 23                    MVRLA R3
  731 f3cf: a2 f3 c5              BRNZ rshrloop
  732 f3d2: 05                    RET
  733 f3d3:             ;
  734 f3d3:             ; shift left and propagate sign bit
  735 f3d3:             ;
  736 f3d3:             pshltest:
  737 f3d3: 1f fd 99              MVIW   R7,PSHIFT_LEFTHELP
  738 f3d6: 04 f7 f4              JSR    stringout
  739 f3d9: 13 0a                 MVIB   R3,10
  740 f3db:             pshlloop:
  741 f3db: 04 f8 41              JSR switchtoggle
  742 f3de: 70 01                 OUTI P0,(SWITCHLED)
  743 f3e0: 91                    INP P1
  744 f3e1: bf                    PSHR
  745 f3e2: 61                    OUTA  P1
  746 f3e3:             
  747 f3e3: 5b                    DECR R3
  748 f3e4: 23                    MVRLA R3
  749 f3e5: a2 f3 db              BRNZ pshlloop
  750 f3e8: 05                    RET
  751 f3e9:             ;
  752 f3e9:             ; ring shift left through carry bit
  753 f3e9:             ;
  754 f3e9:             cshltest:
  755 f3e9: 1f fd ab              MVIW   R7,CSHIFT_LEFTHELP
  756 f3ec: 04 f7 f4              JSR    stringout
  757 f3ef: 13 0a                 MVIB   R3,10
  758 f3f1:             cshlloop:
  759 f3f1: 04 f8 41              JSR switchtoggle
  760 f3f4: 70 01                 OUTI P0,(SWITCHLED)
  761 f3f6: 91                    INP P1
  762 f3f7: e1                    CSHR
  763 f3f8: 61                    OUTA  P1
  764 f3f9:             
  765 f3f9: 5b                    DECR R3
  766 f3fa: 23                    MVRLA R3
  767 f3fb: a2 f3 f1              BRNZ cshlloop
  768 f3fe: 05                    RET
  769 f3ff:             ;
  770 f3ff:             ; ring shift right through carry bit
  771 f3ff:             ;
  772 f3ff:             cshrtest:
  773 f3ff: 1f fd be              MVIW   R7,CSHIFT_RIGHTHELP
  774 f402: 04 f7 f4              JSR    stringout
  775 f405: 13 0a                 MVIB   R3,10
  776 f407:             cshrloop:
  777 f407: 04 f8 41              JSR switchtoggle
  778 f40a: 70 01                 OUTI P0,(SWITCHLED)
  779 f40c: 91                    INP P1
  780 f40d: e1                    CSHR
  781 f40e: 61                    OUTA  P1
  782 f40f:             
  783 f40f: 5b                    DECR R3
  784 f410: 23                    MVRLA R3
  785 f411: a2 f4 07              BRNZ cshrloop
  786 f414: 05                    RET
  787 f415:             ;
  788 f415:             ; subtraction tests
  789 f415:             ;
  790 f415:             subtest:
  791 f415: 1f fd d2              MVIW   R7,SUBHELP
  792 f418: 04 f7 f4              JSR    stringout
  793 f41b: 13 0a                 MVIB   R3,10
  794 f41d:             subloop:
  795 f41d: 04 f8 41              JSR switchtoggle
  796 f420: 70 01                 OUTI P0,(SWITCHLED)
  797 f422: 91                    INP P1
  798 f423: b1 01                 SUBI  1
  799 f425: 61                    OUTA  P1
  800 f426:             
  801 f426: 5b                    DECR R3
  802 f427: 23                    MVRLA R3
  803 f428: a2 f4 1d              BRNZ subloop
  804 f42b: 05                    RET
  805 f42c:             ;
  806 f42c:             ; Compare Tests/compare input switches to 0x55 10 times
  807 f42c:             ;
  808 f42c:             cmptest:
  809 f42c: 1f fd 64              MVIW   R7,COMPAREHELP
  810 f42f: 04 f7 f4              JSR    stringout
  811 f432: 13 0a                 MVIB   R3,10
  812 f434: 0d 55                 LDTI   055H
  813 f436:             cmploop:
  814 f436: 04 f8 41              JSR switchtoggle
  815 f439: 70 01                 OUTI P0,(SWITCHLED)
  816 f43b: 91                    INP P1
  817 f43c: a9 f4 4a              BRGT OUTGT
  818 f43f: a8 f4 4f              BREQ OUTEQ
  819 f442: a7 f4 54              BRLT OUTLT
  820 f445:             ;Should not happen
  821 f445: 0e 3f                 LDAI '?'
  822 f447: a0 f4 59              BR cmpres
  823 f44a:             OUTGT:
  824 f44a: 0e 47                 LDAI 'G'
  825 f44c: a0 f4 59              BR cmpres
  826 f44f:             OUTEQ:
  827 f44f: 0e 45                 LDAI 'E'
  828 f451: a0 f4 59              BR cmpres
  829 f454:             OUTLT:
  830 f454: 0e 4c                 LDAI 'L'
  831 f456: a0 f4 59              BR cmpres
  832 f459:             
  833 f459:             cmpres:
  834 f459: 04 f8 02              JSR uartout
  835 f45c: 5b                    DECR R3
  836 f45d: 23                    MVRLA R3
  837 f45e: a2 f4 36              BRNZ cmploop
  838 f461: 05                    RET
  839 f462:             
  840 f462:             ;
  841 f462:             ; Monitor
  842 f462:             ;
  843 f462:             ; See help code below
  844 f462:             
  845 f462:             ;
  846 f462:             ; eumaltor eat 0x0a
  847 f462:             ;
  848 f462:             ;
  849 f462:             ; added for emulator eat cr
  850 f462:             ;
  851 f462:             eat_nl:
  852 f462: af f4 6a          BRDEV eat_nl_done
  853 f465: 09                PUSH
  854 f466: 04 f8 17          JSR uartin
  855 f469: 0a                pop
  856 f46a:             eat_nl_done:
  857 f46a: 05                ret
  858 f46b:             ;
  859 f46b:             ; Output Prompt
  860 f46b:             :
  861 f46b:             
  862 f46b:             cmdloop:
  863 f46b: 1f f8 b4          MVIW R7,PROMPT
  864 f46e: 04 f7 f4          JSR stringout
  865 f471:             ;
  866 f471:             ;
  867 f471:             ; Input test
  868 f471:             ;
  869 f471:             ;intest:
  870 f471:             ;      JSR uartin
  871 f471:             ;      jsr showbytea
  872 f471:             ;      BR intest
  873 f471:             ;
  874 f471:             ; end test
  875 f471:             ;
  876 f471: 04 f8 17          JSR uartin
  877 f474: 04 f6 f7          JSR toupper
  878 f477:             
  879 f477:             ;
  880 f477:             ; added for emulator eat cr
  881 f477:             ;
  882 f477: 04 f4 62          jsr eat_nl
  883 f47a: 0d 48             LDTI 'H'
  884 f47c: aa f4 8e          BRNEQ testexamine
  885 f47f: 1f f8 b7          MVIW R7,CRLF
  886 f482: 04 f7 f4          JSR stringout
  887 f485: 1f f9 5c          MVIW R7,helpmenu
  888 f488: 04 f7 f4          JSR stringout
  889 f48b: a0 f4 6b          BR cmdloop
  890 f48e:             
  891 f48e:             testexamine:
  892 f48e: 0d 30             LDTI '0'
  893 f490: a8 f5 14          BREQ cmd_exit
  894 f493: 0d 42             LDTI 'B'
  895 f495: a8 f5 52          BREQ dumpblock
  896 f498: 0d 43             LDTI 'C'
  897 f49a: a8 f5 46          BREQ cmd_basic_copy
  898 f49d: 0d 44             LDTI 'D'
  899 f49f: a8 f5 75          BREQ dump
  900 f4a2: 0d 45             LDTI 'E'
  901 f4a4: a8 f5 9b          BREQ examine
  902 f4a7: 0d 46             LDTI 'F'
  903 f4a9: a8 f5 fd          BREQ fillblock
  904 f4ac: 0d 47             LDTI 'G'
  905 f4ae: a8 f6 3d          BREQ go
  906 f4b1: 0d 4c             LDTI 'L'
  907 f4b3: a8 f5 40          BREQ cmd_basiclist
  908 f4b6: 0d 50             LDTI 'P'
  909 f4b8: a8 f5 1e          BREQ cmd_basicparse
  910 f4bb: 0d 52             LDTI 'R'
  911 f4bd: a8 f6 47          BREQ dumpreg
  912 f4c0: 0d 54             LDTI 'T'
  913 f4c2: a8 f6 52          BREQ tests
  914 f4c5: 0d 59             LDTI 'Y'
  915 f4c7: a8 f5 4c          BREQ cmd_basic_test
  916 f4ca: 0d 5a             LDTI 'Z'
  917 f4cc: a8 f5 18          BREQ cmd_basic
  918 f4cf: 0d 0d             LDTI 0Dh        ; hardware continue
  919 f4d1: a8 f4 ee          BREQ continue
  920 f4d4:             ;
  921 f4d4:             ; add for emulator
  922 f4d4:             ; hardware sends 0dh on CR but emulator sends 0dh 0ah
  923 f4d4:             ; code at top of loop eats the 0dh if running in emulator
  924 f4d4:             ; so continue on 0ah as well
  925 f4d4:             ;
  926 f4d4: 0d 0a             LDTI 0ah      ; emulator continue
  927 f4d6: a8 f4 ee          BREQ continue
  928 f4d9:             
  929 f4d9: 1f f8 b7          MVIW R7,CRLF
  930 f4dc:             
  931 f4dc: 04 f7 f4          JSR stringout
  932 f4df:             
  933 f4df: 1f f8 ba          MVIW R7,ERROR
  934 f4e2: 04 f7 f4          JSR stringout
  935 f4e5:             
  936 f4e5: 1f f9 5c          MVIW R7,helpmenu
  937 f4e8: 04 f7 f4          JSR stringout
  938 f4eb: a0 f4 6b          BR cmdloop
  939 f4ee:             ;
  940 f4ee:             continue:
  941 f4ee:             
  942 f4ee:             ;       MVRLA R6
  943 f4ee: ec 0f 00           LDA MONMODE
  944 f4f1:             
  945 f4f1: 0d 03              LDTI BLOCKMODE
  946 f4f3: a8 f5 69           BREQ dumpblockcont
  947 f4f6:             
  948 f4f6: 0d 02              LDTI DUMPMODE
  949 f4f8: a8 f5 8c           BREQ dumpcont
  950 f4fb:             
  951 f4fb: 0d 01              LDTI EXAMINEMODE
  952 f4fd: a8 f5 b2           BREQ examinecont
  953 f500:             
  954 f500: 0d 04              LDTI FILLMODE
  955 f502: a8 f6 14           BREQ fillcont
  956 f505: a0 f4 6b           BR cmdloop
  957 f508:             ;
  958 f508:             ;      ERROR
  959 f508:             ;
  960 f508: 1f f8 d2           MVIW R7,CONTINUEERROR
  961 f50b: 04 f7 f4           JSR stringout
  962 f50e: a0 f4 6b           BR cmdloop
  963 f511:             
  964 f511: a0 f5 11    stop:   BR stop
  965 f514:             
  966 f514:             cmd_exit:
  967 f514: af f5 11          BRDEV stop
  968 f517: 00                DB 0
  969 f518:             
  970 f518:             cmd_basic:
  971 f518: 04 e0 10           jsr basic_run
  972 f51b: a0 f4 6b           BR cmdloop
  973 f51e:             
  974 f51e:             cmd_basicparse:
  975 f51e:                     ;build input string
  976 f51e:                     ;point register to BUFFER
  977 f51e:                     ;loop fetch chars
  978 f51e:                     ;until CR
  979 f51e:                     ;be sure line ends with a NULL or CR
  980 f51e:                     ;what does parse require???
  981 f51e:             
  982 f51e: 1b 0f 80            mviw r3,line_buffer
  983 f521:             parse_inputloop:
  984 f521: 04 f8 17            jsr uartin
  985 f524: 4b                  stavr r3
  986 f525: 53                  incr r3
  987 f526: 0d 0a               ldti 0ah
  988 f528: aa f5 21            brneq parse_inputloop
  989 f52b: 1f 0f 80            mviw r7,line_buffer
  990 f52e: 04 e0 50            JSR BASIC_PARSE
  991 f531: 1f 04 00            mviw r7,0400H
  992 f534: 04 f7 99            jsr show256
  993 f537: a0 f4 6b            BR cmdloop
  994 f53a:             do_parse:
  995 f53a: 04 e0 50            JSR basic_parse
  996 f53d: a0 f4 6b            BR cmdloop
  997 f540:             
  998 f540:             cmd_basiclist:
  999 f540: 04 e0 00            JSR basic_list
 1000 f543: a0 f4 6b            BR cmdloop
 1001 f546:             
 1002 f546:             cmd_basic_copy:
 1003 f546: 04 e0 60            JSR basic_copy
 1004 f549: a0 f4 6b            BR cmdloop
 1005 f54c:             
 1006 f54c:             cmd_basic_test:
 1007 f54c: 04 e0 30            JSR basic_test
 1008 f54f: a0 f4 6b            BR cmdloop
 1009 f552:             
 1010 f552:             dumpblock:
 1011 f552:             ;      MVIB R6,BLOCKMODE
 1012 f552: 0d 03              LDTI BLOCKMODE
 1013 f554: ef 0f 00           STT monmode
 1014 f557:             
 1015 f557: 1f f8 f4           MVIW R7,DUMPBLOCKMSG
 1016 f55a: 04 f7 f4           JSR stringout
 1017 f55d: 04 f6 bb           jsr getaddress
 1018 f560: ff 0f 02           str r7,continue_addr
 1019 f563: 1f f8 b7           MVIW R7,CRLF
 1020 f566: 04 f7 f4           JSR stringout
 1021 f569:             
 1022 f569:             dumpblockcont:
 1023 f569: f7 0f 02           ldr r7,continue_addr
 1024 f56c: 04 f7 99           jsr show256
 1025 f56f: ff 0f 02           str r7,continue_addr
 1026 f572: a0 f4 6b           BR cmdloop
 1027 f575:             ;
 1028 f575:             ; dump 16 bytes on 16 byte boundry
 1029 f575:             ;
 1030 f575:             dump:
 1031 f575:             ;       MVIB R6,DUMPMODE
 1032 f575: 0d 02              LDTI DUMPMODE
 1033 f577: ef 0f 00           STT monmode
 1034 f57a: 1f f8 e7           MVIW R7,DUMPMSG
 1035 f57d: 04 f7 f4           JSR stringout
 1036 f580: 04 f6 bb           jsr getaddress
 1037 f583: ff 0f 02           str r7,continue_addr
 1038 f586: 1f f8 b7           MVIW R7,CRLF
 1039 f589: 04 f7 f4           JSR stringout
 1040 f58c:             
 1041 f58c:             dumpcont:
 1042 f58c: f7 0f 02           ldr r7,continue_addr
 1043 f58f: 04 f7 00           jsr showaddr
 1044 f592: 04 f7 7f           jsr show16
 1045 f595: ff 0f 02           str r7,continue_addr
 1046 f598: a0 f4 6b           BR cmdloop
 1047 f59b:             
 1048 f59b:             examine:
 1049 f59b:             ;       MVIB R6,EXAMINEMODE
 1050 f59b: 0d 01             LDTI EXAMINEMODE
 1051 f59d: ef 0f 00          STT monmode
 1052 f5a0: 1f f9 28          MVIW R7,EXAMINEMSG
 1053 f5a3: 04 f7 f4          JSR stringout
 1054 f5a6: 04 f6 bb          jsr getaddress
 1055 f5a9: ff 0f 02          str r7,continue_addr
 1056 f5ac: 1f f8 b7          MVIW R7,CRLF
 1057 f5af: 04 f7 f4          JSR stringout
 1058 f5b2:             
 1059 f5b2:             examinecont:
 1060 f5b2: f7 0f 02          ldr r7,continue_addr
 1061 f5b5: 04 f7 00          JSR showaddr
 1062 f5b8: 0e 20             LDAI ' '
 1063 f5ba: 04 f8 02          JSR uartout
 1064 f5bd:             
 1065 f5bd: 04 f8 17          JSR uartin
 1066 f5c0: 0d 1b             LDTI 01bh
 1067 f5c2: a8 f5 f4          BREQ examdone
 1068 f5c5: 0d 2d             LDTI '-'
 1069 f5c7: a8 f5 f4          BREQ examdone
 1070 f5ca: 0d 0d             LDTI 0dh
 1071 f5cc: a8 f5 e3          BREQ examnext
 1072 f5cf: 0d 0a             LDTI 0ah
 1073 f5d1: a8 f5 e3          BREQ examnext
 1074 f5d4: 04 f6 e7          JSR getnibblec
 1075 f5d7: b6                SHL
 1076 f5d8: b6                SHL
 1077 f5d9: b6                SHL
 1078 f5da: b6                SHL
 1079 f5db: 09                push
 1080 f5dc: 04 f6 e4          jsr getnibble
 1081 f5df: 0b                MVAT
 1082 f5e0: 0a                Pop
 1083 f5e1: ba                ORT
 1084 f5e2: 4f                STAVR R7
 1085 f5e3:             
 1086 f5e3:             examnext:
 1087 f5e3: 57                INCR R7
 1088 f5e4: ff 0f 02          str r7,continue_addr
 1089 f5e7: 0e 0a             LDAI 0ah
 1090 f5e9: 04 f8 02          JSR uartout
 1091 f5ec: 0e 0d             LDAI 0dh
 1092 f5ee: 04 f8 02          JSR uartout
 1093 f5f1: a0 f5 b2          BR examinecont
 1094 f5f4:             
 1095 f5f4:             examdone:
 1096 f5f4: 1f f8 b7          MVIW R7,CRLF
 1097 f5f7: 04 f7 f4          JSR stringout
 1098 f5fa: a0 f4 6b          BR cmdloop
 1099 f5fd:             
 1100 f5fd:             fillblock:
 1101 f5fd:             ;       MVIB R6,FILLMODE
 1102 f5fd: 0d 04              LDTI FILLMODE
 1103 f5ff: ef 0f 00           STT monmode
 1104 f602:             
 1105 f602: 1f f9 07           MVIW R7,FILLMSG
 1106 f605: 04 f7 f4           JSR stringout
 1107 f608: 04 f6 bb           jsr getaddress
 1108 f60b: ff 0f 02           STR r7,continue_addr
 1109 f60e: 1f f8 b7           MVIW R7,CRLF
 1110 f611: 04 f7 f4           JSR stringout
 1111 f614:             
 1112 f614:             fillcont:
 1113 f614: f7 0f 02          ldr r7,continue_addr
 1114 f617: 04 f7 00          jsr showaddr
 1115 f61a: 1f f8 b7          MVIW R7,CRLF
 1116 f61d: 04 f7 f4          JSR stringout
 1117 f620: f7 0f 02          ldr r7,continue_addr
 1118 f623:             morefill:
 1119 f623: 0e 00             LDAI 0
 1120 f625: 4f                STAVR R7
 1121 f626: 57                INCR R7
 1122 f627: 27                MVRLA R7
 1123 f628: b3 ff             ANDI  0FFH
 1124 f62a: a2 f6 23          BRNZ morefill
 1125 f62d: ff 0f 02          str r7,continue_addr
 1126 f630: 0e 0a             LDAI 0ah
 1127 f632: 04 f8 02          JSR uartout
 1128 f635: 0e 0d             LDAI 0dh
 1129 f637: 04 f8 02          JSR uartout
 1130 f63a: a0 f4 6b          BR cmdloop
 1131 f63d:             
 1132 f63d:             
 1133 f63d:             go:
 1134 f63d: 1f f9 1a          MVIW R7,GOMSG
 1135 f640: 04 f7 f4          JSR stringout
 1136 f643: 04 f6 bb          jsr getaddress
 1137 f646: df                BRVR R7
 1138 f647:             
 1139 f647:             dumpreg:
 1140 f647: 04 f7 48          JSR showregs
 1141 f64a:             ;      MVIB R6,NOMODE
 1142 f64a: 0d 00             LDTI NOMODE
 1143 f64c: ef 0f 00          STT monmode
 1144 f64f:             
 1145 f64f: a0 f4 6b          BR cmdloop
 1146 f652:             
 1147 f652:             tests:
 1148 f652:             ;      MVIB R6,NOMODE
 1149 f652: 0d 00             LDTI NOMODE
 1150 f654: ef 0f 00          STT monmode
 1151 f657: 1f f8 b7          MVIW R7,CRLF
 1152 f65a: 04 f7 f4          JSR stringout
 1153 f65d: 1b fe 94          MVIW R3,testmenu
 1154 f660: 1c 00 00          MVIW R4,0000h  ; counter
 1155 f663:             
 1156 f663:             testsloop:
 1157 f663:             
 1158 f663: 53                INCR R3
 1159 f664: 53                INCR R3
 1160 f665: 43                LDAVR R3
 1161 f666: 3f                MVARH R7
 1162 f667: 53                INCR  R3
 1163 f668: 43                LDAVR R3
 1164 f669: 37                MVARL R7
 1165 f66a: 53                INCR R3
 1166 f66b: 47                LDAVR R7
 1167 f66c: 0d 2d             LDTI '-'
 1168 f66e: a8 f6 87          BREQ testsloopdone
 1169 f671: 24                MVRLA R4
 1170 f672: 04 f7 c1          JSR showbytea
 1171 f675: 0e 2d             LDAI  '-'
 1172 f677: 04 f8 02          JSR uartout
 1173 f67a: 04 f7 f4          JSR stringout
 1174 f67d: 1f f8 b7          MVIW R7,CRLF
 1175 f680: 04 f7 f4          JSR stringout
 1176 f683: 54                INCR R4
 1177 f684: a0 f6 63          BR testsloop
 1178 f687:             
 1179 f687:             testsloopdone:
 1180 f687:             ; get test number
 1181 f687:             ; multiple by 4 and add to test list base
 1182 f687:             ; JSR via register holding info
 1183 f687:             ;
 1184 f687: 1f f9 49          MVIW R7,gettestpromopt
 1185 f68a: 04 f7 f4          JSR stringout
 1186 f68d:             
 1187 f68d: 04 f6 e4          JSR getnibble
 1188 f690: b6                SHL
 1189 f691: b6                SHL
 1190 f692: b6                SHL
 1191 f693: b6                SHL
 1192 f694: 09                push
 1193 f695: 04 f6 e4          jsr getnibble
 1194 f698: 0b                MVAT
 1195 f699: 0a                Pop
 1196 f69a: ba                ORT
 1197 f69b:             ; calculate test address
 1198 f69b: b6                shl
 1199 f69c: b6                shl
 1200 f69d: 04 f7 f0          JSR TIL311out
 1201 f6a0: 0b                MVAT
 1202 f6a1: 1b fe 94          MVIW R3,testmenu
 1203 f6a4: 23                MVRLA R3
 1204 f6a5: b8                ADDT
 1205 f6a6: 33                MVARL R3
 1206 f6a7: 04 f7 f0          JSR TIL311out
 1207 f6aa: a6 f6 b0          BRC menucarry
 1208 f6ad: a0 f6 b1          BR dotest
 1209 f6b0:             
 1210 f6b0:             menucarry:
 1211 f6b0: 53                incr r3
 1212 f6b1:             
 1213 f6b1:             dotest:
 1214 f6b1: 43                LDAVR R3
 1215 f6b2: 3f                MVARH R7
 1216 f6b3: 53                INCR  R3
 1217 f6b4: 43                LDAVR R3
 1218 f6b5: 37                MVARL R7
 1219 f6b6: 06 07             JSRUR R7
 1220 f6b8: a0 f4 6b          BR cmdloop
 1221 f6bb:             
 1222 f6bb:             getaddress:
 1223 f6bb:             ;
 1224 f6bb:             ; Read 4 char address and return in R7
 1225 f6bb:             ;
 1226 f6bb: 09                      Push
 1227 f6bc: 04 f6 e4                JSR getnibble
 1228 f6bf: b6                      SHL
 1229 f6c0: b6                      SHL
 1230 f6c1: b6                      SHL
 1231 f6c2: b6                      SHL
 1232 f6c3: b3 f0                   ANDI 0f0h
 1233 f6c5: 09                      Push
 1234 f6c6: 04 f6 e4                JSR getnibble
 1235 f6c9: b3 0f                   ANDI 0FH
 1236 f6cb: 0b                      MVAT
 1237 f6cc: 0a                      Pop
 1238 f6cd: ba                      ORT
 1239 f6ce: 3f                      MVARH R7
 1240 f6cf:             
 1241 f6cf: 04 f6 e4                JSR getnibble
 1242 f6d2: b6                      SHL
 1243 f6d3: b6                      shl
 1244 f6d4: b6                      shl
 1245 f6d5: b6                      shl
 1246 f6d6: b3 f0                   ANDI 0f0h
 1247 f6d8: 09                      push
 1248 f6d9: 04 f6 e4                JSR getnibble
 1249 f6dc: b3 0f                   ANDI 0FH
 1250 f6de: 0b                      MVAT
 1251 f6df: 0a                      pop
 1252 f6e0: ba                      ORT
 1253 f6e1: 37                      MVARL R7
 1254 f6e2: 0a                      POP
 1255 f6e3: 05                      RET
 1256 f6e4:             ;
 1257 f6e4:             ; getnibble return in accumulator
 1258 f6e4:             ;
 1259 f6e4:             getnibble:
 1260 f6e4: 04 f8 17              JSR uartin
 1261 f6e7:             getnibblec:
 1262 f6e7: 0d 39                 LDTI '9'
 1263 f6e9: a9 f6 ef              BRGT INAF
 1264 f6ec: b1 30                 SUBI '0'
 1265 f6ee: 05                    RET
 1266 f6ef: 04 f6 f7    INAF:     JSR toupper
 1267 f6f2: b1 41                 SUBI 'A'
 1268 f6f4: b0 0a                 ADDI 10
 1269 f6f6: 05                    RET
 1270 f6f7:             ;
 1271 f6f7:             ; value in accumulator convert to uppercase
 1272 f6f7:             ;
 1273 f6f7: 0d 5a       toupper:  LDTI 'Z'
 1274 f6f9: a9 f6 fd              BRGT lower
 1275 f6fc: 05                    RET
 1276 f6fd:             lower:
 1277 f6fd: b1 20                 SUBI 020h
 1278 f6ff: 05                    RET
 1279 f700:             ;
 1280 f700:             ; display R7 (old r3) followed by
 1281 f700:             ; ":" and " " for showaddr and nothing for shownum
 1282 f700:             ;
 1283 f700: 09          showaddr:   Push
 1284 f701: 2f                      MVRHA R7
 1285 f702: b7                      SHR
 1286 f703: b7                      SHR
 1287 f704: b7                      SHR
 1288 f705: b7                      SHR
 1289 f706: 04 f7 d2                JSR shownibble
 1290 f709: 2f                      MVRHA R7
 1291 f70a: b3 0f                   ANDI 0FH
 1292 f70c: 04 f7 d2                JSR shownibble
 1293 f70f: 27                      MVRLA R7
 1294 f710: b7                      SHR
 1295 f711: b7                      SHR
 1296 f712: b7                      SHR
 1297 f713: b7                      SHR
 1298 f714: 04 f7 d2                JSR shownibble
 1299 f717: 27                      MVRLA R7
 1300 f718: b3 0f                   ANDI 0FH
 1301 f71a: 04 f7 d2                JSR shownibble
 1302 f71d: 0e 3a                   LDAI ':'
 1303 f71f: 04 f8 02                JSR uartout
 1304 f722: 0e 20                   LDAI ' '
 1305 f724: 04 f8 02                JSR uartout
 1306 f727: 0a                      POP
 1307 f728: 05                      RET
 1308 f729:             
 1309 f729:             shownum:
 1310 f729: 09          showr7:     Push
 1311 f72a: 2f                      MVRHA R7
 1312 f72b: b7                      SHR
 1313 f72c: b7                      SHR
 1314 f72d: b7                      SHR
 1315 f72e: b7                      SHR
 1316 f72f: 04 f7 d2                JSR shownibble
 1317 f732: 2f                      MVRHA R7
 1318 f733: b3 0f                   ANDI 0FH
 1319 f735: 04 f7 d2                JSR shownibble
 1320 f738: 27                      MVRLA R7
 1321 f739: b7                      SHR
 1322 f73a: b7                      SHR
 1323 f73b: b7                      SHR
 1324 f73c: b7                      SHR
 1325 f73d: 04 f7 d2                JSR shownibble
 1326 f740: 27                      MVRLA R7
 1327 f741: b3 0f                   ANDI 0FH
 1328 f743: 04 f7 d2                JSR shownibble
 1329 f746: 0a                      POP
 1330 f747: 05                      RET
 1331 f748:             ;
 1332 f748:             ;
 1333 f748:             ;
 1334 f748:             showregs:
 1335 f748: 07 07                   pushr r7
 1336 f74a: 1f f8 b7                MVIW R7,CRLF
 1337 f74d: 04 f7 f4                JSR stringout
 1338 f750: 0f 70                   MOVRR r0,r7
 1339 f752: 04 f7 00                jsr showaddr
 1340 f755: 0f 71                   MOVRR r1,r7
 1341 f757: 04 f7 00                jsr showaddr
 1342 f75a: 0f 72                   MOVRR r2,r7
 1343 f75c: 04 f7 00                jsr showaddr
 1344 f75f: 0f 73                   MOVRR r3,r7
 1345 f761: 04 f7 00                jsr showaddr
 1346 f764: 0f 74                   MOVRR r4,r7
 1347 f766: 04 f7 00                jsr showaddr
 1348 f769: 0f 75                   MOVRR r5,r7
 1349 f76b: 04 f7 00                jsr showaddr
 1350 f76e: 0f 76                   MOVRR r6,r7
 1351 f770: 04 f7 00                jsr showaddr
 1352 f773: 08 70                   popr r7
 1353 f775: 04 f7 00                jsr showaddr
 1354 f778:             
 1355 f778: 1f f8 b7                MVIW R7,CRLF
 1356 f77b: 04 f7 f4                JSR stringout
 1357 f77e: 05                      RET
 1358 f77f:             ;
 1359 f77f:             ; display upto 16 bytes point to by R7 (old r3), stops on a 16 byte boundry
 1360 f77f:             ; increments R7
 1361 f77f:             ;
 1362 f77f: 04 f7 b0    show16:     JSR showbyte
 1363 f782: 57                      INCR R7
 1364 f783: 0e 20                   LDAI ' '
 1365 f785: 04 f8 02                JSR uartout
 1366 f788: 27                      MVRLA R7
 1367 f789: b3 0f                   ANDI 0FH
 1368 f78b: a2 f7 7f                BRNZ show16
 1369 f78e: 0e 0a                   LDAI 0ah
 1370 f790: 04 f8 02                JSR uartout
 1371 f793: 0e 0d                   LDAI 0dh
 1372 f795: 04 f8 02                JSR uartout
 1373 f798: 05                      RET
 1374 f799:             ;
 1375 f799:             ; display upto 256 bytes point to by R7 (old r3),
 1376 f799:             ; stops on a 256 byte boundry, increments R7
 1377 f799:             ;
 1378 f799:             show256:
 1379 f799: 09                    push
 1380 f79a:             show256loop:
 1381 f79a: 04 f7 00              jsr showaddr
 1382 f79d: 04 f7 7f              jsr show16
 1383 f7a0:             
 1384 f7a0:             ;         MVIW R7,CRLF
 1385 f7a0:             ;         JSR stringout
 1386 f7a0:             
 1387 f7a0: 27                    MVRLA R7
 1388 f7a1: b3 ff                 ANDI  0FFH
 1389 f7a3: a2 f7 9a              BRNZ show256loop
 1390 f7a6: 04 f8 02              JSR uartout
 1391 f7a9: 0e 0d                 LDAI 0dh
 1392 f7ab: 04 f8 02              JSR uartout
 1393 f7ae: 0a                    pop
 1394 f7af: 05                    RET
 1395 f7b0:             ;
 1396 f7b0:             ; Output ASCII representation of a BYTE pointed to by R7 (OLD r7)
 1397 f7b0:             ; or use showbytea in accumulator
 1398 f7b0:             ; both destructive for accumulator - no longer true with push/pop
 1399 f7b0:             :
 1400 f7b0: 09          showbyte:   PUSH
 1401 f7b1: 47                      LDAVR R7
 1402 f7b2: b7                      SHR
 1403 f7b3: b7                      SHR
 1404 f7b4: b7                      SHR
 1405 f7b5: b7                      SHR
 1406 f7b6: 04 f7 d2                JSR shownibble
 1407 f7b9: 47                      LDAVR R7
 1408 f7ba: b3 0f                   ANDI 0FH
 1409 f7bc: 04 f7 d2                JSR shownibble
 1410 f7bf: 0a                      POP
 1411 f7c0: 05                      RET
 1412 f7c1:             ;
 1413 f7c1: 09          showbytea:  PUSH
 1414 f7c2: 09                      PUSH
 1415 f7c3: b7                      SHR
 1416 f7c4: b7                      SHR
 1417 f7c5: b7                      SHR
 1418 f7c6: b7                      SHR
 1419 f7c7: 04 f7 d2                JSR shownibble
 1420 f7ca: 0a                      POP
 1421 f7cb: b3 0f                   ANDI 0FH
 1422 f7cd: 04 f7 d2                JSR shownibble
 1423 f7d0: 0a                      POP
 1424 f7d1: 05                      RET
 1425 f7d2:             ;
 1426 f7d2:             ; Display nibble in accumulator ((this looks wrong) destructive)
 1427 f7d2:             ;  destroys tmp register  - maybe add pusht - popt
 1428 f7d2:             ;
 1429 f7d2: 09          shownibble:  PUSH
 1430 f7d3: 0d 09                    LDTI 9
 1431 f7d5: a9 f7 df                 BRGT AF
 1432 f7d8: b0 30                    ADDI '0'
 1433 f7da: 04 f8 02                 JSR uartout
 1434 f7dd: 0a                       Pop
 1435 f7de: 05                       RET
 1436 f7df:             
 1437 f7df: b1 0a       AF:          SUBI 10
 1438 f7e1: b0 41                    ADDI 'A'
 1439 f7e3: 04 f8 02                 JSR uartout
 1440 f7e6: 0a                       Pop
 1441 f7e7: 05                       RET
 1442 f7e8:             ;
 1443 f7e8:             ; reading switches into accumulator
 1444 f7e8:             ;
 1445 f7e8:             switchin:
 1446 f7e8: 70 01               OUTI  P0,(SWITCHLED)
 1447 f7ea: 91                  INP   P1
 1448 f7eb: 05                  RET
 1449 f7ec:             ;
 1450 f7ec:             ;
 1451 f7ec:             ; output accumulator to LEDS or Hex displays (non distructive)
 1452 f7ec:             ;
 1453 f7ec:             ledout:
 1454 f7ec: 70 01               OUTI  P0,(SWITCHLED)
 1455 f7ee: 61                  OUTA  P1
 1456 f7ef: 05                  RET
 1457 f7f0:             ;
 1458 f7f0:             TIL311out:
 1459 f7f0: 70 80               OUTI  P0,(TIL311)
 1460 f7f2: 61                  OUTA  P1
 1461 f7f3: 05                  RET
 1462 f7f4:             ;
 1463 f7f4:             ; OLD: Output null terminated string pointed to by R2 to UART then send CR and LF
 1464 f7f4:             ; Advances R2 to end of string
 1465 f7f4:             ;
 1466 f7f4:             ; Output null terminated string pointed to by R7 to UART
 1467 f7f4:             ; Advances R7 to end of string
 1468 f7f4:             ;
 1469 f7f4:             stringout:
 1470 f7f4: 09                  Push
 1471 f7f5:             sloop:
 1472 f7f5: 47                  LDAVR R7
 1473 f7f6: a1 f8 00            BRZ sloopdone
 1474 f7f9: 04 f8 02            JSR uartout
 1475 f7fc: 57                  INCR R7
 1476 f7fd: a0 f7 f5            BR sloop
 1477 f800:             ;
 1478 f800:             ; (not done send CR and LF)
 1479 f800:             ;
 1480 f800:             sloopdone:
 1481 f800: 0a                  POP
 1482 f801: 05                  RET
 1483 f802:             ;
 1484 f802:             ; output accumulator to UART, wait for UART out available
 1485 f802:             ;
 1486 f802:             charout:
 1487 f802:             uartout:
 1488 f802:             ;
 1489 f802:             ; add for emulator, outputs via putch
 1490 f802:             ;
 1491 f802: af f8 07            BRDEV emulator2
 1492 f805: 62                  outa p2
 1493 f806: 05                  ret
 1494 f807:             ;
 1495 f807:             emulator2:
 1496 f807: 09                  PUSH
 1497 f808: 09                  push
 1498 f809:             ;
 1499 f809:             ; doubt 2nd push pop is needed, to be tested
 1500 f809:             ;
 1501 f809:             uartoutw:
 1502 f809:             ;
 1503 f809:             ; test uart out is available
 1504 f809:             ;
 1505 f809: 70 68               OUTI  P0,(UARTCS!UARTA5)
 1506 f80b: 91                  INP   p1
 1507 f80c: b3 40               ANDI  040h
 1508 f80e: a1 f8 09            BRZ   uartoutw
 1509 f811: 0a                  POP
 1510 f812: 70 40               OUTI  P0,UARTCS
 1511 f814: 61                  OUTA  P1
 1512 f815:             ;
 1513 f815:             ; may not be needed
 1514 f815: 0a                 Pop
 1515 f816: 05                 RET
 1516 f817:             
 1517 f817:             ;
 1518 f817:             ; wait for UART character available then input to accumulator
 1519 f817:             ;
 1520 f817:             ; Looks like this echos out character
 1521 f817:             ; should this be settable via a flag
 1522 f817:             ;
 1523 f817:             uartin:
 1524 f817:             ;
 1525 f817:             ; added for emulator, emulator P2 reads a char via getch
 1526 f817:             ;
 1527 f817: af f8 1c            BRDEV emulator3
 1528 f81a: 92                  inp p2
 1529 f81b: 05                  ret
 1530 f81c:             ;
 1531 f81c:             emulator3:
 1532 f81c:             ;
 1533 f81c:             ; wait for a charater available at input
 1534 f81c:             ;
 1535 f81c: 70 68               OUTI  P0,(UARTCS!UARTA5)
 1536 f81e: 91                  INP   p1
 1537 f81f: b3 01               ANDI  01h
 1538 f821: a1 f8 17            BRZ   uartin
 1539 f824: 70 40               OUTI  P0,(UARTCS)
 1540 f826: 91                  INP   P1
 1541 f827:             ;
 1542 f827:             ; emulator
 1543 f827:             ;
 1544 f827:             ;        ldti  0ah
 1545 f827:             ;        breq uartin
 1546 f827: 04 f8 02            JSR   uartout
 1547 f82a: 05                  RET
 1548 f82b:             ;
 1549 f82b:             ; long delay (approx 5 seconds)
 1550 f82b:             ; destroys r7
 1551 f82b:             ;
 1552 f82b:             LONGDELAY:
 1553 f82b: 09                  PUSH
 1554 f82c: 1f ff ff            MVIW R7,0FFFFh
 1555 f82f:             longdelayloop:
 1556 f82f: 5f                  DECR R7
 1557 f830: 2f                  MVRHA R7
 1558 f831: a2 f8 2f            BRNZ longdelayloop
 1559 f834: 0a                  POP
 1560 f835: 05                  RET
 1561 f836:             ;
 1562 f836:             ; short delay (approx 1 second)
 1563 f836:             ; destroys R7
 1564 f836:             ;
 1565 f836:             SHORTDELAY:
 1566 f836: 09                  PUSH
 1567 f837: 1f 33 ff            MVIW R7,033FFh
 1568 f83a:             shortdelayloop:
 1569 f83a: 5f                  DECR R7
 1570 f83b: 2f                  MVRHA R7
 1571 f83c: a2 f8 3a            BRNZ shortdelayloop
 1572 f83f: 0a                  POP
 1573 f840: 05                  RET
 1574 f841:             
 1575 f841:             ;
 1576 f841:             ; toggle input switch (with debounce)
 1577 f841:             ; destroys r7
 1578 f841:             ;
 1579 f841:             switchtoggle:
 1580 f841: 09                  Push
 1581 f842: a4 f8 42    offw:   BRINL offw
 1582 f845: 1f 01 ff            MVIW R7,01FFh
 1583 f848:             delaya:
 1584 f848: 5f                  DECR R7
 1585 f849: 2f                  MVRHA R7
 1586 f84a: a2 f8 48            BRNZ delaya
 1587 f84d: 01                  ON
 1588 f84e:             
 1589 f84e: a3 f8 4e    onw:    BRINH onw
 1590 f851: 1f 01 ff            MVIW R7,01FFh
 1591 f854:             delayb:
 1592 f854: 5f                  DECR R7
 1593 f855: 2f                  MVRHA R7
 1594 f856: a2 f8 54            BRNZ delayb
 1595 f859: 02                  OFF
 1596 f85a: 0a                  Pop
 1597 f85b: 05                  RET
 1598 f85c:             ;
 1599 f85c:             ; quick blink LED
 1600 f85c:             ;
 1601 f85c:             blink:
 1602 f85c:             ;
 1603 f85c:             ; added for emulator, return immediately to skip counting
 1604 f85c:             ; destroys r7
 1605 f85c:             ;
 1606 f85c:             ;       ret
 1607 f85c: 09                  Push
 1608 f85d: 01                  ON
 1609 f85e: 1f 03 ff            MVIW R7,03FFh
 1610 f861:             onloop:
 1611 f861: 5f                  DECR R7
 1612 f862: 2f                  MVRHA R7
 1613 f863: a2 f8 61            BRNZ onloop
 1614 f866:             
 1615 f866: 02                  OFF
 1616 f867: 1f 03 ff            MVIW R7,003FFh
 1617 f86a:             offloop:
 1618 f86a: 5f                  DECR R7
 1619 f86b: 2f                  MVRHA R7
 1620 f86c: a2 f8 6a            BRNZ offloop
 1621 f86f: 0a                  Pop
 1622 f870: 05                  RET
 1623 f871:             ;
 1624 f871:             ; long blink LED
 1625 f871:             ;
 1626 f871:             lblink:
 1627 f871:             ;
 1628 f871:             ; emulator change, return immediately to skip counting
 1629 f871:             ; destroys r7
 1630 f871:             ;
 1631 f871:             ;       ret
 1632 f871: 09                  Push
 1633 f872: 01                  ON
 1634 f873: 1f 18 ff            MVIW R7,018FFh
 1635 f876:             lonloop:
 1636 f876: 5f                  DECR R7
 1637 f877: 2f                  MVRHA R7
 1638 f878: a2 f8 76            BRNZ lonloop
 1639 f87b:             
 1640 f87b: 02                  OFF
 1641 f87c: 1f 18 ff            MVIW R7,018FFh
 1642 f87f:             loffloop:
 1643 f87f: 5f                  DECR R7
 1644 f880: 2f                  MVRHA R7
 1645 f881: a2 f8 7f            BRNZ loffloop
 1646 f884: 0a                  Pop
 1647 f885: 05                  RET
 1648 f886:             ;
 1649 f886:             ; blink n times in accumulator
 1650 f886:             ;
 1651 f886:             ; emulator change, return immediately to skip counting
 1652 f886:             ;
 1653 f886:             ;    ret
 1654 f886:             nblink:
 1655 f886: 09                  push
 1656 f887:             nblinkloop:
 1657 f887: 04 f7 f0            JSR TIL311out
 1658 f88a: a1 f8 95            BRZ nblinkdone
 1659 f88d: 04 f8 5c            JSR blink
 1660 f890: b1 01               subi 1
 1661 f892: a0 f8 87            BR nblinkloop
 1662 f895:             nblinkdone:
 1663 f895: 0a                  POP
 1664 f896: 05                  RET
 1665 f897:             
 1666 f897:             
 1667 f897:             ;
 1668 f897:             ; MONITOR STRINGS
 1669 f897:             ;
 1670 f897: 0a 0d 59 41 
            43 43 20 32 
            30 32 30 3a 
            20 48 45 4c 
            4c 4f 20 57 
            4f 52 4c 44 
            20 20 0a 0d 
            00          hello:  DB 0ah,0dh,"YACC 2020: hello world  ",0ah,0dh,0
 1671 f8b4: 3e 3e 00    PROMPT: DB ">>",0
 1672 f8b7: 0a 0d 00    CRLF: DB 0ah,0dh,0
 1673 f8ba: 55 4e 52 45 
            43 4f 47 49 
            4e 49 5a 45 
            44 20 43 4f 
            4d 4d 41 4e 
            44 0a 0d 00 ERROR: DB "UNRECOGINIZED COMMAND",0ah,0dh,0
 1674 f8d2: 43 4f 4e 54 
            49 4e 55 45 
            20 43 4d 44 
            20 45 52 52 
            4f 52 0a 0d 
            00          CONTINUEERROR: DB "CONTINUE CMD ERROR",0ah,0dh,0
 1675 f8e7: 0a 0d 44 55 
            4d 50 20 41 
            44 44 52 3a 
            00          DUMPMSG: DB 0ah,0dh,"DUMP ADDR:",0
 1676 f8f4: 0a 0d 44 55 
            4d 50 20 42 
            4c 4f 43 4b 
            20 41 44 44 
            52 3a 00    DUMPBLOCKMSG: DB 0ah,0dh,"DUMP BLOCK ADDR:",0
 1677 f907: 0a 0d 46 49 
            4c 4c 20 42 
            4c 4f 43 4b 
            20 41 44 44 
            52 3a 00    FILLMSG: DB 0ah,0dh,"FILL BLOCK ADDR:",0
 1678 f91a: 0a 0d 47 4f 
            20 41 44 44 
            52 45 53 53 
            3a 00       GOMSG: DB 0ah,0dh,"GO ADDRESS:",0
 1679 f928: 0a 0d 45 58 
            41 4d 49 4e 
            45 20 41 44 
            44 52 45 53 
            53 3a 00    EXAMINEMSG: DB 0ah,0Dh,"EXAMINE ADDRESS:",0
 1680 f93b: 43 4f 4e 54 
            49 4e 55 45 
            20 4d 4f 44 
            45 00       CONTMSG: DB "CONTINUE MODE",0
 1681 f949: 45 4e 54 45 
            52 20 54 45 
            53 54 20 4e 
            55 4d 42 45 
            52 3a 00    gettestpromopt: DB "Enter Test number:",0
 1682 f95c:             ;
 1683 f95c:             helpmenu:
 1684 f95c: 30 20 20 20 
            20 20 20 2d 
            20 45 58 49 
            54 20 4d 4f 
            4e 49 54 4f 
            52 20 28 45 
            4d 55 4c 41 
            54 4f 52 20 
            4f 4e 4c 59 
            29 0a 0d    DB "0      - Exit monitor (emulator only)",0ah,0dh
 1685 f983: 48 20 20 20 
            20 20 20 2d 
            20 54 48 49 
            53 20 48 45 
            4c 50 20 4d 
            45 4e 55 0a 
            0d 0a 0d    DB "H      - This help menu",0ah,0dh,0ah,0dh
 1686 f99e:             
 1687 f99e: 42 20 41 41 
            41 41 20 2d 
            20 53 48 4f 
            57 20 32 35 
            36 20 42 59 
            54 45 53 20 
            4f 46 20 4d 
            45 4d 4f 52 
            59 20 41 54 
            20 41 44 44 
            52 45 53 53 
            20 41 41 41 
            41 20 28 31 
            36 20 42 59 
            54 45 20 41 
            4c 49 47 4e 
            45 44 29 0a 
            0d          DB "B AAAA - Show 256 bytes of memory at address AAAA (16 byte aligned)",0ah,0dh
 1688 f9e3: 20 20 20 20 
            20 20 20 20 
            20 46 4f 4c 
            4c 4f 57 45 
            44 20 42 59 
            20 43 52 20 
            44 49 53 50 
            4c 41 59 20 
            4e 45 58 54 
            20 32 35 36 
            20 42 59 54 
            45 53 0a 0d DB "         followed by CR display next 256 bytes",0ah,0dh
 1689 fa13: 43 20 20 20 
            20 20 20 2d 
            20 43 4f 50 
            59 20 42 41 
            53 49 43 20 
            54 45 53 54 
            20 50 52 4f 
            47 52 41 4d 
            20 49 4e 54 
            4f 20 49 4e 
            54 45 52 50 
            52 45 54 45 
            52 20 42 55 
            46 46 45 52 
            0a 0d       DB "C      - Copy BASIC test program into interpreter buffer",0ah,0dh
 1690 fa4d: 44 20 41 41 
            41 41 20 2d 
            20 53 48 4f 
            57 20 31 36 
            20 42 59 54 
            45 53 20 4f 
            46 20 4d 45 
            4d 4f 52 59 
            20 41 54 20 
            41 44 44 52 
            45 53 53 20 
            41 41 41 41 
            20 28 31 36 
            20 42 59 54 
            45 20 41 4c 
            49 47 4e 45 
            44 29 0a 0d DB "D AAAA - Show 16 bytes of memory at address AAAA (16 byte aligned)",0ah,0dh
 1691 fa91: 20 20 20 20 
            20 20 20 20 
            20 46 4f 4c 
            4c 4f 57 45 
            44 20 42 59 
            20 43 52 20 
            44 49 53 50 
            4c 41 59 20 
            4e 45 58 54 
            20 31 36 20 
            42 59 54 45 
            53 0a 0d    DB "         followed by CR display next 16 bytes",0ah,0dh
 1692 fac0: 45 20 41 41 
            41 41 20 2d 
            20 53 48 4f 
            57 20 43 4f 
            4e 54 45 4e 
            54 53 20 4f 
            46 20 4c 4f 
            43 41 54 49 
            4f 4e 20 41 
            41 41 41 20 
            28 4f 55 54 
            50 55 54 20 
            41 41 41 41 
            3a 58 58 29 
            0a 0d       DB "E AAAA - show contents of location AAAA (Output AAAA:XX)",0ah,0dh
 1693 fafa: 20 20 20 20 
            20 20 20 20 
            20 49 46 20 
            46 4f 4c 4c 
            4f 57 45 44 
            20 42 59 20 
            41 53 43 49 
            49 2d 48 45 
            58 20 4d 4f 
            44 49 46 59 
            20 4c 4f 43 
            41 54 49 4f 
            4e 20 57 49 
            54 48 20 4e 
            45 57 20 56 
            41 4c 55 45 
            20 28 41 4e 
            44 20 52 45 
            44 49 53 50 
            4c 41 59 29 
            0a 0d       DB "         if followed by ASCII-HEX modify location with new value (and redisplay)",0ah,0DH
 1694 fb4c: 20 20 20 20 
            20 20 20 20 
            20 49 46 20 
            46 4f 4c 4c 
            4f 57 45 44 
            20 42 59 20 
            43 52 20 44 
            49 53 50 4c 
            41 59 20 4e 
            45 58 54 20 
            4c 4f 43 41 
            54 49 4f 4e 
            0a 0d       DB "         if followed by CR display next location",0ah,0dh
 1695 fb7e: 46 20 41 41 
            41 41 20 20 
            20 46 49 4c 
            4c 20 43 4f 
            4e 54 45 4e 
            54 53 20 32 
            35 36 20 42 
            59 54 45 53 
            20 4f 46 20 
            4d 45 4d 4f 
            52 59 20 41 
            54 20 41 44 
            44 52 45 53 
            53 20 41 41 
            41 41 20 57 
            49 54 48 20 
            30 28 31 36 
            20 42 59 54 
            45 20 41 4c 
            49 47 4e 45 
            44 29 20 57 
            49 54 48 20 
            30 0a 0d    DB "F AAAA   Fill contents 256 bytes of memory at address AAAA with 0(16 byte aligned) with 0",0ah,0dh
 1696 fbd9: 20 20 20 20 
            20 20 20 20 
            20 49 46 20 
            46 4f 4c 4c 
            4f 57 45 44 
            20 42 59 20 
            43 52 20 46 
            49 4c 4c 20 
            4e 45 58 54 
            20 32 35 36 
            20 42 59 54 
            45 53 0a 0d DB "         if followed by CR fill next 256 bytes",0ah,0dh
 1697 fc09: 47 20 41 41 
            41 41 20 2d 
            20 4a 55 4d 
            50 20 54 4f 
            20 28 41 4e 
            44 20 45 58 
            45 43 55 54 
            45 29 20 53 
            54 41 52 54 
            49 4e 47 20 
            41 54 20 41 
            41 41 41 0a 
            0d          DB "G AAAA - Jump to (and execute) starting at AAAA",0ah,0dh
 1698 fc3a: 20 20 20 20 
            20 20 20 20 
            20 43 4f 44 
            45 20 43 4f 
            55 4c 44 20 
            45 4e 44 20 
            49 4e 20 42 
            52 20 54 4f 
            20 30 58 46 
            30 30 30 48 
            20 54 4f 20 
            52 45 53 54 
            41 52 54 20 
            4d 4f 4e 49 
            54 4f 52 20 
            4f 52 20 52 
            45 54 20 49 
            46 20 43 41 
            4c 4c 45 44 
            20 56 49 41 
            20 4a 53 52 
            0a 0d       DB "         code could end in BR to 0xf000h to restart monitor or RET if called via JSR",0ah,0dh
 1699 fc90: 4c 20 20 20 
            20 20 20 2d 
            20 4c 49 53 
            54 20 43 55 
            52 52 45 4e 
            54 20 42 41 
            53 49 43 20 
            50 52 4f 47 
            52 41 4d 0a 
            0d          DB "L      - List current BASIC program",0ah,0dh
 1700 fcb5: 50 20 20 20 
            20 20 20 2d 
            20 45 4e 54 
            45 52 20 41 
            20 50 52 4f 
            47 52 41 4d 
            20 4c 49 4e 
            45 20 54 4f 
            20 42 41 53 
            49 43 20 50 
            52 4f 47 52 
            41 4d 0a 0d DB "P      - Enter a program line to BASIC program",0ah,0dh
 1701 fce5: 52 20 20 20 
            20 20 20 2d 
            20 53 48 4f 
            57 20 52 45 
            47 49 53 54 
            45 52 53 0a 
            0d          DB "R      - Show registers",0ah,0dh
 1702 fcfe: 54 20 20 20 
            20 20 20 2d 
            20 54 45 53 
            54 20 4d 45 
            4e 55 0a 0d DB "T      - Test menu",0ah,0DH
 1703 fd12: 59 20 20 20 
            20 20 20 2d 
            20 52 55 4e 
            20 42 41 53 
            49 43 20 54 
            45 53 54 20 
            43 4f 44 45 
            20 28 54 4d 
            50 29 0a 0d DB "Y      - run BASIC test code (tmp)",0ah,0DH
 1704 fd36: 5a 20 20 20 
            20 20 20 2d 
            20 52 55 4e 
            20 50 52 4f 
            47 52 41 4d 
            20 57 49 54 
            48 20 42 41 
            53 49 43 20 
            49 4e 54 45 
            52 50 52 45 
            54 45 52 0a 
            0d          DB "Z      - Run program with Basic interpreter",0ah,0DH
 1705 fd63: 00          DB 0
 1706 fd64:             ;
 1707 fd64:             ; TEST HELP MESSAGES
 1708 fd64:             ;
 1709 fd64: 43 4f 4d 50 
            41 52 45 20 
            54 45 53 54 
            53 0a 0d 00 COMPAREHELP: DB "Compare Tests",0ah,0dh,0
 1710 fd74: 52 49 4e 47 
            20 53 48 49 
            46 54 20 4c 
            45 46 54 0a 
            0d 00       RSHIFT_LEFTHELP: DB "Ring Shift Left",0ah,0dh,0
 1711 fd86: 52 49 4e 47 
            20 53 48 49 
            46 54 20 52 
            49 47 48 54 
            0a 0d 00    RSHIFT_RIGHTHELP: DB "Ring Shift Right",0ah,0dh,0
 1712 fd99: 50 52 4f 50 
            20 53 48 49 
            46 54 20 4c 
            45 46 54 0a 
            0d 00       PSHIFT_LEFTHELP: DB "PROP Shift Left",0ah,0dh,0
 1713 fdab: 43 41 52 52 
            59 20 53 48 
            49 46 54 20 
            4c 45 46 54 
            0a 0d 00    CSHIFT_LEFTHELP: DB "CARRY Shift Left",0ah,0dh,0
 1714 fdbe: 43 41 52 52 
            59 20 53 48 
            49 46 54 20 
            52 49 47 48 
            54 0a 0d 00 CSHIFT_RIGHTHELP: DB "CARRY Shift Right",0ah,0dh,0
 1715 fdd2: 53 55 42 54 
            52 41 43 54 
            0a 0d 00    SUBHELP: DB "SUBTRACT",0ah,0dh,0
 1716 fddd: 41 43 43 55 
            4d 55 4c 41 
            54 4f 52 20 
            54 45 53 54 
            0a 0d 00    accumhelp: DB "accumulator test",0ah,0dh,0
 1717 fdf0: 50 55 53 48 
            20 50 4f 50 
            20 45 4e 54 
            45 52 20 33 
            20 4e 55 4d 
            42 45 52 53 
            0a 0d 00    PUSHPOPHELP: DB "Push Pop enter 3 numbers",0ah,0dh,0
 1718 fe0b: 4f 52 20 54 
            4d 50 20 52 
            45 47 49 53 
            54 45 52 20 
            54 45 53 54 
            53 0a 0d 00 ORTHELP: DB "OR Tmp register tests",0ah,0dh,0
 1719 fe23: 41 44 44 20 
            49 4d 4d 45 
            44 49 41 54 
            45 20 30 32 
            48 20 54 4f 
            20 49 4e 50 
            55 54 20 4e 
            55 4d 42 45 
            52 0a 0d 00 ADDIHELP: DB "Add immediate 02h to input number",0ah,0dh,0
 1720 fe47: 41 44 44 20 
            49 4d 4d 45 
            44 49 41 54 
            45 20 57 49 
            54 48 20 43 
            41 52 52 59 
            20 30 32 48 
            20 54 4f 20 
            49 4e 50 55 
            54 20 4e 55 
            4d 42 45 52 
            0a 0d 00    ADDICHELP: DB "Add immediate with carry 02h to input number",0ah,0dh,0
 1721 fe76: 4d 4f 56 45 
            52 52 20 54 
            45 53 54 0a 
            0d 00       MOVRRHELP: DB "MOVERR TEST",0ah,0dh,0
 1722 fe84: 52 55 4e 20 
            54 45 53 54 
            20 43 4f 44 
            45 0a 0d 00 TESTMSG: DB "Run test code",0ah,0dh,0
 1723 fe94:             
 1724 fe94:             ;
 1725 fe94:             ; TEST MENU
 1726 fe94:             ;
 1727 fe94:             testmenu:
 1728 fe94: f2 81 fe e8       DW ortest,ormenu
 1729 fe98: f2 c6 fe eb       DW orttest,ortmenu
 1730 fe9c: f2 e3 fe ef       DW pushpoptest,pushpopmenu
 1731 fea0: f3 06 fe f8       DW accumtest,accummenu
 1732 fea4: f3 51 ff 11       DW shltest,shlmenu
 1733 fea8: f3 91 ff 15       DW shrtest,shrmenu
 1734 feac: f3 a7 ff 19       DW rshltest,rshlmenu
 1735 feb0: f3 bd ff 1e       DW rshrtest,rshrmenu
 1736 feb4: f3 e9 ff 23       DW cshltest,cshlmenu
 1737 feb8: f3 ff ff 28       DW cshrtest,cshrmenu
 1738 febc: f3 d3 ff 2d       DW pshltest,pshlmenu
 1739 fec0: f4 15 ff 32       DW subtest,submenu
 1740 fec4: f4 2c ff 36       DW cmptest,cmpmenu
 1741 fec8: f2 98 ff 45       DW additest,addimenu
 1742 fecc: f2 af ff 4a       DW addictest,addicmenu
 1743 fed0: f1 c2 ff 4f       DW movrrtest,movrrmenu
 1744 fed4: f0 dd ff 55       DW add16tests,add16menu
 1745 fed8: f0 5d ff 5b       DW mem_indirect_tests,mem_indirect_menu
 1746 fedc: f0 57 ff 68       DW mul16,mul16menu
 1747 fee0: f1 53 ff 6e       DW pushr_popr_tests,pushr_popr_menu
 1748 fee4: ff 79 ff 79       DW endmenu,endmenu
 1749 fee8:             
 1750 fee8:             ;
 1751 fee8:             ; TEST MENU STRINGS
 1752 fee8:             ;
 1753 fee8:             testmenustrings:
 1754 fee8: 4f 52 00    ormenu: DB "OR",0
 1755 feeb: 4f 52 54 00 ortmenu: DB "ORT",0
 1756 feef: 50 55 53 48 
            2f 50 4f 50 
            00          pushpopmenu: DB "PUSH/POP",0
 1757 fef8: 41 43 43 55 
            4d 55 4c 41 
            54 4f 52 20 
            3c 2d 3e 20 
            52 45 47 49 
            53 54 45 52 
            00          accummenu: DB "Accumulator <-> Register",0
 1758 ff11: 53 48 4c 00 shlmenu: DB "SHL",0
 1759 ff15: 53 48 52 00 shrmenu: DB "SHR",0
 1760 ff19: 52 53 48 4c 
            00          rshlmenu: DB "RSHL",0
 1761 ff1e: 52 53 48 52 
            00          rshrmenu: DB "RSHR",0
 1762 ff23: 43 53 48 4c 
            00          cshlmenu: DB "CSHL",0
 1763 ff28: 43 53 48 52 
            00          cshrmenu: DB "CSHR",0
 1764 ff2d: 50 53 48 4c 
            00          pshlmenu: DB "PSHL",0
 1765 ff32: 53 55 42 00 submenu: DB "SUB",0
 1766 ff36: 43 4f 4d 50 
            41 52 45 20 
            42 52 41 4e 
            43 48 00    cmpmenu: DB "Compare Branch",0
 1767 ff45: 41 44 44 49 
            00          addimenu: DB "ADDI",0
 1768 ff4a: 41 44 44 49 
            00          addicmenu: DB "ADDI",0
 1769 ff4f: 4d 4f 56 52 
            52 00       movrrmenu: DB "MOVRR",0
 1770 ff55: 41 44 44 31 
            36 00       add16menu: DB "add16",0
 1771 ff5b: 4d 45 4d 20 
            49 4e 44 49 
            52 45 43 54 
            00          mem_indirect_menu: DB "mem indirect",0
 1772 ff68: 4d 55 4c 31 
            36 00       mul16menu: DB "mul16",0
 1773 ff6e: 50 55 53 48 
            52 20 50 4f 
            50 52 00    pushr_popr_menu: DB "pushr popr",0
 1774 ff79: 2d 00       endmenu: DB "-",0
 1775 ff7b:             
 1776 ff7b:             ;
 1777 ff7b:             ; OLD
 1778 ff7b:             ;
 1779 ff7b:             ;
 1780 ff7b:             ;LCD
 1781 ff7b:             ;
 1782 ff7b:             ;xlcdtest:
 1783 ff7b:             ;        OUTI P0,(LCDENABLE)
 1784 ff7b:             
 1785 ff7b:             ;        MVIW R3,1fFFh
 1786 ff7b:             ;xdelay0:
 1787 ff7b:             ;        DECR R3
 1788 ff7b:             ;        MVRHA R3
 1789 ff7b:             ;        BRNZ xdelay0
 1790 ff7b:             
 1791 ff7b:             ;        OUTI P1,3CH
 1792 ff7b:             
 1793 ff7b:             ;        MVIW R3,1fFFh
 1794 ff7b:             ;xdelay1:
 1795 ff7b:             ;        DECR R3
 1796 ff7b:             ;        MVRHA R3
 1797 ff7b:             ;        BRNZ xdelay1
 1798 ff7b:             
 1799 ff7b:             ;        OUTI P1,01H
 1800 ff7b:             
 1801 ff7b:             ;        MVIW R3,1fFFh
 1802 ff7b:             ;xdelay2:
 1803 ff7b:             ;        DECR R3
 1804 ff7b:             ;        MVRHA R3
 1805 ff7b:             ;        BRNZ xdelay2
 1806 ff7b:             
 1807 ff7b:             ;        OUTI P1,0FH
 1808 ff7b:             
 1809 ff7b:             ;        MVIW R3,1fFFh
 1810 ff7b:             ;xdelay3:
 1811 ff7b:             ;        DECR R3
 1812 ff7b:             ;        MVRHA R3
 1813 ff7b:             ;        BRNZ xdelay3
 1814 ff7b:             
 1815 ff7b:             ;        OUTI P0,(LCDENABLE!LCDREGISTER)
 1816 ff7b:             
 1817 ff7b:             ;        MVIW R3,1fFFh
 1818 ff7b:             ;xdelay4:
 1819 ff7b:             ;        DECR R3
 1820 ff7b:             ;        MVRHA R3
 1821 ff7b:             ;        BRNZ xdelay4
 1822 ff7b:             
 1823 ff7b:             ;        OUTI P1,'A'
 1824 ff7b:             
 1825 ff7b:             ;xdelay5:
 1826 ff7b:             ;        DECR R3
 1827 ff7b:             ;        MVRHA R3
 1828 ff7b:             ;        BRNZ xdelay5
 1829 ff7b:             
 1830 ff7b:             ;        OUTI P1,'B'
 1831 ff7b:             
 1832 ff7b:             ;xaddtest:
 1833 ff7b:             ;      OUTI  P0,(SWITCHLED)
 1834 ff7b:             ;      INP   P1
 1835 ff7b:             ;      ADDI  001H
 1836 ff7b:             ;      OUTA  P1
 1837 ff7b:             
 1838 ff7b:             ;xandtest:
 1839 ff7b:             ;      OUTI  P0,(SWITCHLED)
 1840 ff7b:             ;      INP   P1
 1841 ff7b:             ;      ANDI  055H
 1842 ff7b:             ;      OUTA  P1
 1843 ff7b:             
 1844 ff7b:             ;xxortest:
 1845 ff7b:             ;     OUTI  P0,(SWITCHLED)
 1846 ff7b:             ;     INP   P1
 1847 ff7b:             ;     XORI  055H
 1848 ff7b:             ;     OUTA  P1
 1849 ff7b:             ;      JSRUR R2
 1850 ff7b:             
 1851 ff7b:             ;
 1852 ff7b:             ; BIOS ENTRY Points
 1853 ff7b:             ;
 1854 ff7b:                 org 0ffc0h
 1855 ffc0:             
 1856 ffc0:             e_stringout:
 1857 ffc0: 04 f7 f4        jsr stringout
 1858 ffc3: 05              ret
 1859 ffc4:             e_charout:
 1860 ffc4: 04 f8 02        jsr charout
 1861 ffc7: 05              ret
 1862 ffc8:             e_uartout:
 1863 ffc8: 04 f8 02        jsr uartout
 1864 ffcb: 05              ret
 1865 ffcc:             e_showaddr:
 1866 ffcc: 04 f7 00        jsr showaddr
 1867 ffcf: 05              ret
 1868 ffd0:             e_toupper:
 1869 ffd0: 04 f6 f7        jsr toupper
 1870 ffd3: 05              ret
 1871 ffd4:             e_showr7:
 1872 ffd4: 04 f7 29        jsr showr7
 1873 ffd7: 05              ret
 1874 ffd8:             e_showbyte:
 1875 ffd8: 04 f7 b0        jsr showbyte
 1876 ffdb: 05              ret
 1877 ffdc:             ;
 1878 ffdc:             ; The End
 1879 ffdc:             ;
 1880 ffdc:             
 1881 ffdc:             ZZZZ:
 1882 ffdc: 00            DB   0

f30eh: ACCLOOP          - <   637>    655 
fdddh: ACCUMHELP        - <  1716>    634 
fef8h: ACCUMMENU        - <  1757>   1731 
f306h: ACCUMTEST        - <   633>   1731   1731 
ff55h: ADD16MENU        - <  1770>   1744 
f0ddh: ADD16TESTS       - <   299>   1744   1744 
fe47h: ADDICHELP        - <  1720>    563 
f2b7h: ADDICLOOP        - <   566>    575 
ff4ah: ADDICMENU        - <  1768>   1742 
f2afh: ADDICTEST        - <   562>   1742   1742 
fe23h: ADDIHELP         - <  1719>    544 
f2a0h: ADDILOOP         - <   547>    556 
ff45h: ADDIMENU         - <  1767>   1741 
f298h: ADDITEST         - <   543>   1741   1741 
f7dfh: AF               - <  1437>   1431 
f051h: ALLTESTS         - <   141> 
f051h: ALLTESTSDONE     - <   171>    173 
e020h: BASIC_COLD       - <     6>    100 
e060h: BASIC_COPY       - <     9>   1003 
e000h: BASIC_LIST       - <     4>    999 
e050h: BASIC_PARSE      - <     8>    990    995 
e010h: BASIC_RUN        - <     5>    971 
e030h: BASIC_TEST       - <     7>   1007 
f85ch: BLINK            - <  1601>   1659 
0003h: BLOCKMODE        - <    37>    945   1012 
f802h: CHAROUT          - <  1486>   1860 
f060h: CLEARMEM         - <   192>    198 
f46bh: CMDLOOP          - <   862>    123    137    889    938    956    962 
          972    993    996   1000   1004   1008   1026   1046   1098   1130 
         1145   1220 
f518h: CMD_BASIC        - <   970>    917 
f540h: CMD_BASICLIST    - <   998>    907 
f51eh: CMD_BASICPARSE   - <   974>    909 
f546h: CMD_BASIC_COPY   - <  1002>    897 
f54ch: CMD_BASIC_TEST   - <  1006>    915 
f514h: CMD_EXIT         - <   966>    893 
f436h: CMPLOOP          - <   813>    837 
ff36h: CMPMENU          - <  1766>   1740 
f459h: CMPRES           - <   833>    822    825    828    831 
f42ch: CMPTEST          - <   808>   1740   1740 
0050h: CNTL-PORT        - <    28> 
fd64h: COMPAREHELP      - <  1709>    809 
f4eeh: CONTINUE         - <   940>    919    927 
f8d2h: CONTINUEERROR    - <  1674>    960 
0f02h: CONTINUE_ADDR    - <    44>   1018   1023   1025   1037   1042   1045 
         1055   1060   1088   1108   1113   1117   1125 
f93bh: CONTMSG          - <  1680> 
f8b7h: CRLF             - <  1672>    111    118    293    396    405    414 
          423    432    885    929   1019   1038   1056   1096   1109   1115 
         1151   1174   1336   1355 
fdabh: CSHIFT_LEFTHELP  - <  1713>    755 
fdbeh: CSHIFT_RIGHTHELP - <  1714>    773 
f3f1h: CSHLLOOP         - <   758>    767 
ff23h: CSHLMENU         - <  1762>   1736 
f3e9h: CSHLTEST         - <   754>   1736   1736 
f407h: CSHRLOOP         - <   776>    785 
ff28h: CSHRMENU         - <  1763>   1737 
f3ffh: CSHRTEST         - <   772>   1737   1737 
0050h: DATAPORT         - <    29> 
f848h: DELAYA           - <  1583>   1586 
f854h: DELAYB           - <  1591>   1594 
f6b1h: DOTEST           - <  1213>   1208 
f103h: DO_ADD16         - <   323>    319    384 
f0f9h: DO_ADD16_UTIL    - <   317>    306    310    314 
f53ah: DO_PARSE         - <   994> 
f146h: DO_SUB16         - <   375>    369 
f13ch: DO_SUB16_UTIL    - <   367>    346    350    354    359    363 
f575h: DUMP             - <  1030>    899 
f552h: DUMPBLOCK        - <  1010>    895 
f569h: DUMPBLOCKCONT    - <  1022>    946 
f8f4h: DUMPBLOCKMSG     - <  1676>   1015 
f58ch: DUMPCONT         - <  1041>    949 
0002h: DUMPMODE         - <    36>    948   1032 
f8e7h: DUMPMSG          - <  1675>   1034 
f647h: DUMPREG          - <  1139>    911 
f462h: EAT_NL           - <   851>    882 
f46ah: EAT_NL_DONE      - <   856>    852 
f807h: EMULATOR2        - <  1495>   1491 
f81ch: EMULATOR3        - <  1531>   1527 
ff79h: ENDMENU          - <  1774>   1748   1748   1748 
f003h: EPROM            - <    59>     57 
f8bah: ERROR            - <  1673>    933 
f5f4h: EXAMDONE         - <  1095>   1067   1069 
f59bh: EXAMINE          - <  1048>    901 
f5b2h: EXAMINECONT      - <  1059>    952   1093 
0001h: EXAMINEMODE      - <    35>    951   1050 
f928h: EXAMINEMSG       - <  1679>   1052 
f5e3h: EXAMNEXT         - <  1086>   1071   1073 
ffc4h: E_CHAROUT        - <  1859> 
ffcch: E_SHOWADDR       - <  1865> 
ffd8h: E_SHOWBYTE       - <  1874> 
ffd4h: E_SHOWR7         - <  1871> 
ffc0h: E_STRINGOUT      - <  1856> 
ffd0h: E_TOUPPER        - <  1868> 
ffc8h: E_UARTOUT        - <  1862> 
f5fdh: FILLBLOCK        - <  1100>    903 
f614h: FILLCONT         - <  1112>    955 
0004h: FILLMODE         - <    38>    954   1102 
f907h: FILLMSG          - <  1677>   1105 
f6bbh: GETADDRESS       - <  1222>   1017   1036   1054   1107   1136 
f6e4h: GETNIBBLE        - <  1259>   1080   1187   1193   1227   1234   1241 
         1248 
f6e7h: GETNIBBLEC       - <  1261>   1074 
f949h: GETTESTPROMOPT   - <  1681>   1184 
f63dh: GO               - <  1133>    905 
f91ah: GOMSG            - <  1678>   1134 
f897h: HELLO            - <  1670>     98 
f95ch: HELPMENU         - <  1683>    887    936 
f6efh: INAF             - <  1266>   1263 
f871h: LBLINK           - <  1626>     97    172 
0002h: LCDENABLE        - <    23> 
0004h: LCDREGISTER      - <    24> 
f7ech: LEDOUT           - <  1453>    476    481    486    491    499    504 
          509    514 
0f80h: LINE_BUFFER      - <    45>    982    989 
f87fh: LOFFLOOP         - <  1642>   1645 
f82bh: LONGDELAY        - <  1552> 
f82fh: LONGDELAYLOOP    - <  1555>   1558 
f876h: LONLOOP          - <  1635>   1638 
f6fdh: LOWER            - <  1276>   1274 
ff5bh: MEM_INDIRECT_MENU - <  1771>   1745 
f05dh: MEM_INDIRECT_TESTS - <   189>   1745   1745 
f0c5h: MEM_INDIRECT_UTIL - <   285>    206    220    231    240    250    264 
          273    282 
f6b0h: MENUCARRY        - <  1210>   1207 
0f00h: MONMODE          - <    43>     93    943   1013   1033   1051   1103 
         1143   1150 
f623h: MOREFILL         - <  1118>   1124 
fe76h: MOVRRHELP        - <  1721>    440 
ff4fh: MOVRRMENU        - <  1769>   1743 
f1c2h: MOVRRTEST        - <   439>   1743   1743 
f057h: MUL16            - <   182>   1746   1746 
ff68h: MUL16MENU        - <  1772>   1746 
f886h: NBLINK           - <  1654> 
f895h: NBLINKDONE       - <  1662>   1658 
f887h: NBLINKLOOP       - <  1656>   1661 
0000h: NOMODE           - <    34>     92   1142   1149 
f86ah: OFFLOOP          - <  1617>   1620 
f842h: OFFW             - <  1581>   1581 
f861h: ONLOOP           - <  1610>   1613 
f84eh: ONW              - <  1589>   1589 
f253h: ORHELP           - <   523>    525 
f289h: ORLOOP           - <   528>    537 
fee8h: ORMENU           - <  1754>   1728 
f281h: ORTEST           - <   524>   1728   1728 
fe0bh: ORTHELP          - <  1718>    582 
f2ceh: ORTLOOP          - <   585>    598 
feebh: ORTMENU          - <  1755>   1729 
f2c6h: ORTTEST          - <   581>   1729   1729 
f44fh: OUTEQ            - <   826>    818 
f44ah: OUTGT            - <   823>    817 
f454h: OUTLT            - <   829>    819 
f521h: PARSE_INPUTLOOP  - <   983>    988 
f2f9h: PPDISLOOP        - <   619>    626 
f2ebh: PPENTERLOOP      - <   608>    616 
f8b4h: PROMPT           - <  1671>    863 
fd99h: PSHIFT_LEFTHELP  - <  1712>    737 
f3dbh: PSHLLOOP         - <   740>    749 
ff2dh: PSHLMENU         - <  1764>   1738 
f3d3h: PSHLTEST         - <   736>   1738   1738 
fdf0h: PUSHPOPHELP      - <  1717>    604 
feefh: PUSHPOPMENU      - <  1756>   1730 
f2e3h: PUSHPOPTEST      - <   603>   1730   1730 
ff6eh: PUSHR_POPR_MENU  - <  1773>   1747 
f153h: PUSHR_POPR_TESTS - <   390>   1747   1747 
fd74h: RSHIFT_LEFTHELP  - <  1710>    701 
fd86h: RSHIFT_RIGHTHELP - <  1711>    719 
f3afh: RSHLLOOP         - <   704>    713 
ff19h: RSHLMENU         - <  1760>   1734 
f3a7h: RSHLTEST         - <   700>   1734   1734 
f3c5h: RSHRLOOP         - <   722>    731 
ff1eh: RSHRMENU         - <  1761>   1735 
f3bdh: RSHRTEST         - <   718>   1735   1735 
f328h: SHIFT_LEFTHELP   - <   662>    664 
f367h: SHIFT_RIGHTHELP  - <   681>    683 
f359h: SHLLOOP          - <   667>    676 
ff11h: SHLMENU          - <  1758>   1732 
f351h: SHLTEST          - <   663>   1732   1732 
f836h: SHORTDELAY       - <  1565> 
f83ah: SHORTDELAYLOOP   - <  1568>   1571 
f77fh: SHOW16           - <  1362>    109    289    394    403    412    421 
          430   1044   1368   1382 
f799h: SHOW256          - <  1378>    992   1024 
f79ah: SHOW256LOOP      - <  1380>   1389 
f700h: SHOWADDR         - <  1283>    108    117    288    393    402    411 
          420    429   1043   1061   1114   1339   1341   1343   1345   1347 
         1349   1351   1353   1381   1866 
f7b0h: SHOWBYTE         - <  1400>   1362   1875   1875 
f7c1h: SHOWBYTEA        - <  1413>    292   1170 
f7d2h: SHOWNIBBLE       - <  1429>   1289   1292   1298   1301   1316   1319 
         1325   1328   1406   1409   1419   1422 
f729h: SHOWNUM          - <  1309> 
f729h: SHOWR7           - <  1310>   1872 
f1f1h: SHOWREG34        - <   474>    446    450    454 
f222h: SHOWREG45        - <   497>    459    463    467 
f748h: SHOWREGS         - <  1334>    110    290    318    320    368    370 
          383    395    404    413    422    431   1140 
f399h: SHRLOOP          - <   686>    695 
ff15h: SHRMENU          - <  1759>   1733 
f391h: SHRTEST          - <   682>   1733   1733 
f7f5h: SLOOP            - <  1471>   1476 
f800h: SLOOPDONE        - <  1480>   1473 
0effh: STACK            - <    51>     63 
f511h: STOP             - <   964>    964    967 
f7f4h: STRINGOUT        - <  1469>     99    112    119    129    294    397 
          406    415    424    433    441    526    545    564    583    605 
          635    665    684    702    720    738    756    774    792    810 
          864    886    888    931    934    937    961   1016   1020   1035 
         1039   1053   1057   1097   1106   1110   1116   1135   1152   1173 
         1175   1185   1337   1356   1857 
f10eh: SUB16TESTS       - <   339> 
fdd2h: SUBHELP          - <  1715>    791 
f41dh: SUBLOOP          - <   794>    803 
ff32h: SUBMENU          - <  1765>   1739 
f415h: SUBTEST          - <   790>   1739   1739 
f7e8h: SWITCHIN         - <  1445> 
0001h: SWITCHLED        - <    22>    530    549    568    587    591    610 
          621    639    646    669    688    706    724    742    760    778 
          796    815   1446   1454 
f841h: SWITCHTOGGLE     - <  1579>    479    484    489    494    502    507 
          512    517    529    548    567    586    590    609    620    638 
          645    668    687    705    723    741    759    777    795    814 
f48eh: TESTEXAMINE      - <   891>    884 
fe94h: TESTMENU         - <  1727>   1153   1202 
fee8h: TESTMENUSTRINGS  - <  1753> 
fe84h: TESTMSG          - <  1722>    128 
f652h: TESTS            - <  1147>    913 
f663h: TESTSLOOP        - <  1156>   1177 
f687h: TESTSLOOPDONE    - <  1179>   1168 
0080h: TIL311           - <    26>   1459 
f7f0h: TIL311OUT        - <  1458>    478    483    488    493    501    506 
          511    516   1200   1206   1657 
f6f7h: TOUPPER          - <  1273>    877   1266   1869 
f048h: TTTT             - <   127>    116 
0000h: UARTA0           - <    13>     79 
0008h: UARTA1           - <    14>     82 
0010h: UARTA2           - <    15> 
0018h: UARTA3           - <    16>     76     85 
0020h: UARTA4           - <    17> 
0028h: UARTA5           - <    18>   1505   1535 
0030h: UARTA6           - <    19> 
0038h: UARTA7           - <    20> 
0040h: UARTCS           - <    25>     76     79     82     85   1505   1510 
         1535   1539 
f817h: UARTIN           - <  1523>    854    876    984   1065   1260   1538 
f802h: UARTOUT          - <  1487>    834   1063   1090   1092   1127   1129 
         1172   1303   1305   1365   1370   1372   1390   1392   1433   1439 
         1474   1546   1863 
f809h: UARTOUTW         - <  1501>   1508 
ffdch: ZZZZ             - <  1881> 

1882 Lines assembled
0 Errors
223 Labels
Object Code:3992 bytes

