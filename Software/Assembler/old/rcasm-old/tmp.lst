RC/asm v2.2
by Michael H. Riley

1802 -> Native
2 Classes read.
201 Patterns read.
    1 0000:             ;
    2 0000:             ; Define BIOS to generate code for use with ELFOS BIOS
    3 0000:             ;
    4 0000:             
    5 0000:             
    6 0000:             
    7 0000:             ;
    8 0000:             ; Define 6845VIDEOLOWER when video card (REV B and beyond) supports lower 
    9 0000:             ; case characters and there is no need to force characters to upper case
   10 0000:             ;
   11 0000:             
   12 0000:             
   13 0000:             
   14 0000:             ;
   15 0000:             ; Define BASIC if the is for use with Tiny basic and not for ELFOS 
   16 0000:             ;
   17 0000:             
   18 0000:             ;
   19 0000:             ; minimon is entry point in ELFOS  to jump to once bios has booted
   20 0000:             ; 
   21 0000:             
   22 0000:             minimon:	equ     0ff54h
   23 0000:             
   24 0000:             crtca:		equ	07800h		; CRTC Address register
   25 0000:             crtcd:		equ	crtca+1		; CRTC Data register
   26 0000:             cur_h:		equ     14		; Cursor postion high
   27 0000:             cur_l:		equ     15		; Cursor postion low
   28 0000:             
   29 0000:             vmem:		equ	07000h		; Start of video memory
   30 0000:             vmem_end:	equ     07800h		; End of video memory
   31 0000:             vmem_ch:	equ	vmem_end-2
   32 0000:             vmem_cl:	equ     vmem_end-1
   33 0000:             space:		equ	020h		; Ascii Space
   34 0000:             
   35 0000:             JUMPTBL:	equ	0ff00h
   36 0000:             basic_start:	equ	0f700h
   37 0000:             basic_end:	equ	0feffh
   38 0000:             basic_dest:	equ	00100h
   39 0000:             ;expline23:		equ     vmem+(80*23)
   40 0000:             line23:		equ     vmem+(64*15)
   41 0000:             basmon:		equ	0f500h
   42 0000:             
   43 0000:             		org 0f000h
   44 f000: f8 f0       boot:		ldi high boot	;Trigger Boot rom remap 
   45 f002: b0          		phi r0		; 
   46 f003: f8 78             		ldi high crtca  ; Register E set to CRTC Address register
   47 f005: be                		phi re          ;
   48 f006: f8 00       	        ldi low crtca   ;
   49 f008: ae          	        plo re          ;
   50 f009: f8 78             		ldi high crtcd  ; Register F set to CRTC Data register 
   51 f00b: bf          		phi rf          ;
   52 f00c: f8 01       	        ldi low crtcd   ;
   53 f00e: af                          plo rf          ;
   54 f00f: f8 f0       		ldi high vtable ; Register D set to vtable (CRTC parameters)
   55 f011: bd          		phi rd          ;
   56 f012: f8 42       		ldi low vtable  ; 
   57 f014: ad          		plo rd          ; 
   58 f015: f8 00       		ldi 00          ; Register C set to 0000
   59 f017: bc          		phi rc          ; Register C will be a counter used to point to the CRTC data register
   60 f018: ac          		plo rc          ;
   61 f019:             ;
   62 f019:             ; Load Video Paramters into CRTC
   63 f019:             ;
   64 f019: 8c          vload:          glo rc          ; Main loop, get counter register 
   65 f01a: 5e          	        str re          ; Store into CRTC address register
   66 f01b: 4d          	        lda rd          ; Get video paramter 
   67 f01c: 5f          	        str rf          ; Store into CRTC data register
   68 f01d: 1c                		inc rc          ; Increment counter
   69 f01e: 8c          	        glo rc          ; Has counter reached 010h
   70 f01f: fb 10       	        xri 010h        ;
   71 f021: 3a 19       	        bnz  vload      ; If not load next CRTC Video paramter
   72 f023:             ;
   73 f023:             ; Clear Video memory (with space charachter)
   74 f023:             ;
   75 f023:             
   76 f023: f8 70       		ldi high vmem   ; Register F set to start of Video memory
   77 f025: bf          		phi rf          ;
   78 f026: f8 00       		ldi low vmem    ;
   79 f028: af          		plo rf          ; 
   80 f029: f8 20       clear:          ldi space        ; Load D  space character
   81 f02b: 5f          		str rf          ; Sstore in Video memory
   82 f02c: 1f          		inc rf          ; Increment Register F to next video memory location
   83 f02d: 9f          		ghi rf          ; Check if past end of video memory
   84 f02e: fb 78       		xri high vmem_end ; Logical XOR D with value
   85 f030: 3a 29       		bnz clear       ; Short branch on D!=0
   86 f032:             ;
   87 f032:             ; Store cursor position in memory
   88 f032:             ;
   89 f032: f8 77       		ldi high vmem_ch
   90 f034: bf          		phi rf
   91 f035: f8 fe       		ldi low vmem_ch
   92 f037: af          		plo rf
   93 f038: f8 73       		ldi 073h	;;;
   94 f03a: 5f          		str rf
   95 f03b: 1f          		inc rf
   96 f03c: f8 c0       		ldi 0c0h	;;;
   97 f03e: 5f          		str rf
   98 f03f:             ;
   99 f03f:             ; Initialization complete jump to real start
  100 f03f:             ;
  101 f03f: c0 f2 09    		lbr  cold_entry      ; Long branch
  102 f042:             ;
  103 f042:             ; Video Paramters
  104 f042:             ;
  105 f042:             ;vtable:	 db 06dh,050h,055h,028h,01ch,01h,018h,01ah,00h,08h,060h,01fh,00h,00h,07h,30h
  106 f042:             
  107 f042:             ;vtable:		 db 80 ; R0 total number of horiz chars
  108 f042:             ;		 db 64 ; R1 number of horiz chars displayed 
  109 f042:             ;		 db 65 ; R2 Horiz sync position (chars)
  110 f042:             ;		 db 1ah ; R3 VSYNC/HSYNC Widths
  111 f042:             ;		 db 24 ; R4 Vert Total (chars)
  112 f042:             ;		 db 02 ; R5 Vert total Adjust (scan lines)
  113 f042:             ;		 db 16 ; R6 Vert displayed (chars)
  114 f042:             ;		 db 20 ; R7 Vert Sync position (chars)
  115 f042:             ;		 db 000 ; R8 mode contro;
  116 f042:             ;		 db 008 ; R9 scan lines/char
  117 f042:             ;		 db 040h ; R10 cursor start (scan line/char) + blink rate
  118 f042:             ;		 db 008h ; R11 cursor end (scan line/char)
  119 f042:             ;		 db 000h ; R12 display addr start high
  120 f042:             ;		 db 000h ; R13 display addr start low
  121 f042:             ;		 db 003h ; R14 Cursor position high
  122 f042:             ;		 db 0c0h ; R15 Cursor positon low
  123 f042:             
  124 f042: 5e          vtable:		 db 94 ; R0 total number of horiz chars
  125 f043: 40          		 db 64 ; R1 number of horiz chars displayed 
  126 f044: 4d          		 db 77 ; R2 Horiz sync position (chars)
  127 f045: 08          		 db 8 ; R3 VSYNC/HSYNC Widths
  128 f046: 1c          		 db 28 ; R4 Vert Total (chars)
  129 f047: 02          		 db 2 ; R5 Vert total Adjust (scan lines)
  130 f048: 10          		 db 16 ; R6 Vert displayed (chars)
  131 f049: 16          		 db 22 ; R7 Vert Sync position (chars)
  132 f04a: 00          		 db 0 ; R8 mode contro;
  133 f04b: 08          		 db 8 ; R9 scan lines/char
  134 f04c: 40          		 db 64 ; R10 cursor start (scan line/char) + blink rate
  135 f04d: 08          		 db 8 ; R11 cursor end (scan line/char)
  136 f04e: 00          		 db 0 ; R12 display addr start high
  137 f04f: 00          		 db 0 ; R13 display addr start low
  138 f050: 03          		 db 003h ; R14 Cursor position high
  139 f051: c0          		 db 0c0h ; R15 Cursor positon low
  140 f052:             ;
  141 f052:             ; Input/Output routines
  142 f052:             ;
  143 f052:             ; output a character
  144 f052:             ; Character to output in D
  145 f052:             ;
  146 f052: fa 7f       outchar: 	ani 07fh         ; Strip off high bit
  147 f054: ae          		plo re           ; Store Character to output in Register e.0
  148 f055: fb 7f       		xri 07fh         ; Check if character is is 07Fh (??? Why)
  149 f057: 32 eb       		bz  outnochar    ; If yes done 
  150 f059: 8e          		glo re
  151 f05a:             
  152 f05a:             
  153 f05a:             
  154 f05a:             
  155 f05a:             ;save registers
  156 f05a: e2          cont1:        	sex 2
  157 f05b: 8f          		glo rf
  158 f05c: 73          		stxd
  159 f05d: 9f          		ghi rf
  160 f05e: 73          		stxd
  161 f05f: 8e          		glo re
  162 f060: 73          		stxd
  163 f061: 9e          		ghi re
  164 f062: 73          		stxd	
  165 f063: 8c          		glo rc
  166 f064: 73          		stxd
  167 f065: 9c          		ghi rc
  168 f066: 73          		stxd	
  169 f067:             ;
  170 f067:             ; Get character position in RC
  171 f067:             ;
  172 f067: f8 77       		ldi high vmem_ch ; Register F points to CRTC Address register
  173 f069: bf          		phi rf         ; 
  174 f06a: f8 fe       		ldi low vmem_ch ;
  175 f06c: af          		plo rf         ; 
  176 f06d: 0f          		ldn rf	       ; Get cursor position high	
  177 f06e: bc          		phi rc         ; Store in RC.1
  178 f06f: 1f          		inc rf
  179 f070: 0f          		ldn rf	       ; Get cursor position low
  180 f071: ac          		plo rc	       ; Store in RC.0	
  181 f072:             
  182 f072:             
  183 f072: 8e          	        glo re           ; Check for a control Character below 020h
  184 f073: fa e0                       ani 0e0h         ; 
  185 f075: 3a bb       		bnz  normal      ; Normal character
  186 f077: 8e          		glo re           ; Check for carriage return 0dh
  187 f078: fb 0d       		xri 0dh          ;
  188 f07a: 32 88       		bz  cr           ; Process carriage return 
  189 f07c: 8e          		glo re           ; Check for line feed 0ah 
  190 f07d: fb 0a       		xri 0ah          ;
  191 f07f: 32 90       		bz  lf           ; Process line feed
  192 f081: 8e          		glo re           ; Check for backspace
  193 f082: fb 08       		xri 08h          ;
  194 f084: 32 b5       		bz  bs           ; process backspace
  195 f086: 30 de       		br  outdn		
  196 f088:             ;
  197 f088:             ; Process a carriage return
  198 f088:             ;
  199 f088: f8 73       cr:		ldi high line23  ; Set Register C to start of line 23
  200 f08a: bc          		phi rc         	 ;
  201 f08b: f8 c0       		ldi low line23   ;
  202 f08d: ac          		plo rc           ;
  203 f08e: 30 be       		br  update       ; Update cursor position
  204 f090:             ;
  205 f090:             ; Process a line feed  >>>>>>redo registers
  206 f090:             ;
  207 f090: f8 70       lf:		ldi high vmem  ; Set Register E to start of Video memory
  208 f092: be          		phi re         ; 
  209 f093: f8 00       		ldi low vmem   ;
  210 f095: ae          		plo re         ; 
  211 f096: f8 70       		ldi high vmem+64 ; set Register F to 2nd line of Video memory
  212 f098: bf          		phi rf         ; 
  213 f099: f8 40       		ldi low vmem+64 ; 
  214 f09b: af          		plo rf         ;
  215 f09c:             ; Scrool loop, copy all lines up one
  216 f09c: 4f          sloop:          lda rf         ; 
  217 f09d: 5e          		str re         ;
  218 f09e: 1e          		inc re         ;
  219 f09f: 9f          		ghi rf         ;
  220 f0a0: fb 78       		xri high vmem_end ; Is Register E past end of video memory
  221 f0a2: 3a 9c       		bnz  sloop     ; No, continue scrool loop
  222 f0a4:             ; Clear last line, Register D now point to first character position of last line
  223 f0a4: f8 73       		ldi high line23
  224 f0a6: be          		phi re
  225 f0a7: f8 c0       		ldi low line23
  226 f0a9: ae          		plo re	
  227 f0aa: f8 20       erl:		ldi space       ; Space Character
  228 f0ac: 5e          	        str re         ; 
  229 f0ad: 1e                 		inc re         ; 
  230 f0ae: 9e                  	ghi re         ; 
  231 f0af: fb 78                       xri high vmem_end ; Is register D past end of video memory
  232 f0b1: 3a aa               	bnz  erl       ; Continue erasing line
  233 f0b3:             ; Line feed done, return (Why not update cursor position)
  234 f0b3: 30 be       		br update
  235 f0b5:             ;
  236 f0b5:             ; Process Back Space
  237 f0b5:             ;
  238 f0b5: 2c          bs:             dec rc         ; Register C is character pointer
  239 f0b6: f8 20       		ldi space       ; Clear postion with a space character 
  240 f0b8: 5c          		str rc         ; 
  241 f0b9: 30 be       	        br  update     ; Update Cursor postion
  242 f0bb:             ;
  243 f0bb:             ; Process Normal Character
  244 f0bb:             ; 
  245 f0bb: 8e          normal:         glo re         ; Register F.1 contains character
  246 f0bc: 5c          		str rc         ; Store at register C, Character pointer
  247 f0bd: 1c                          inc rc         ; 
  248 f0be:             ;
  249 f0be:             ; Update Cursor position
  250 f0be:             ;
  251 f0be:             update: 
  252 f0be: f8 78       		ldi high crtca	
  253 f0c0: bf          		phi rf
  254 f0c1: f8 00       		ldi low crtca
  255 f0c3: af          		plo rf
  256 f0c4: f8 0e       		ldi cur_h      ; CRTC High cursor register 
  257 f0c6: 5f          		str rf         ; set CRTC Address register
  258 f0c7: 9c          		ghi rc         ; Get High portion of cursor postion
  259 f0c8: fa 3f       		ani 03fh       ; Strip off address, only want zero based character postion
  260 f0ca: 1f          		inc rf
  261 f0cb: 5f          		str rf	       ; Get cursor position high	
  262 f0cc: 2f          		dec rf
  263 f0cd: f8 0f       		ldi cur_l      ; CRTC low cursor register 
  264 f0cf: 5f          		str rf         ; set CRTC Address register
  265 f0d0: 1f          		inc rf
  266 f0d1: 8c          		glo rc
  267 f0d2: 5f          		str rf	       ; get cursor positon low	
  268 f0d3:             ;
  269 f0d3:             ; Store cursor position in memory
  270 f0d3:             ;
  271 f0d3: f8 77       		ldi high vmem_ch
  272 f0d5: bf          		phi rf
  273 f0d6: f8 fe       		ldi low vmem_ch
  274 f0d8: af          		plo rf
  275 f0d9: 9c          		ghi rc
  276 f0da: 5f          		str rf
  277 f0db: 1f          		inc rf
  278 f0dc: 8c          		glo rc
  279 f0dd: 5f          		str rf
  280 f0de:             ;
  281 f0de:             ;restore registers
  282 f0de:             ;
  283 f0de:             outdn:
  284 f0de: 60          		irx
  285 f0df: 72          		ldxa
  286 f0e0: bc          		phi rc
  287 f0e1: 72          		ldxa
  288 f0e2: ac          		plo rc
  289 f0e3: 72          		ldxa
  290 f0e4: be          		phi re
  291 f0e5: 72          		ldxa
  292 f0e6: ae          		plo re
  293 f0e7: 72          		ldxa
  294 f0e8: bf          		phi rf
  295 f0e9: f0          		ldx
  296 f0ea: af          		plo rf
  297 f0eb:             ;
  298 f0eb: d5          outnochar:		sep r5         ; Return
  299 f0ec:             ;
  300 f0ec:             ;
  301 f0ec:             ;
  302 f0ec:             		org 0f100h
  303 f100: 3e 00       inchar:         bn3  inchar    ; Wait for an input character
  304 f102: e2                  	sex 2
  305 f103: 69          		inp 1          ; Read character
  306 f104: 22          		dec r2         ; Decrement (R2) Save inputed character across call
  307 f105: d4          		sep r4         ; Output the character
  308 f106: f2 03       		dw out         ; 
  309 f108: 12          		inc r2         ; Increment (R2) restore inputed character
  310 f109: 02          		ldn r2         ; Get the input Character
  311 f10a: d5          		sep r5         ; Return
  312 f10b:             ;
  313 f10b:             ; Check for a break character
  314 f10b:             ;
  315 f10b: 36 12       brk:		b3  brkchk     ; Character is available
  316 f10d: f8 00       bno:		ldi 00         ; Clear DF 
  317 f10f: fe          		shl            ; 
  318 f110: 30 1b       	        br brkdone       ; Return
  319 f112:             ;
  320 f112:             ;
  321 f112:             ;
  322 f112:             brkchk:		
  323 f112: e2                  	sex 2
  324 f113: 69          		inp 1          ; Input to (R(X)) and D, N=001
  325 f114: fb 1b       		xri 01bh       ; Check for ESC
  326 f116: 3a 0d                       bnz bno        ; Not a break character
  327 f118: f8 ff       		ldi 0ffh       ; Set DF to 1
  328 f11a: fe          		shl            ; Shift left D
  329 f11b: d5          brkdone:	sep r5         ; Return
  330 f11c:             
  331 f11c:             
  332 f11c:             
  333 f11c:             
  334 f11c:             		org 0f200h
  335 f200: c0 f1 00    in:		lbr inchar
  336 f203: c0 f0 52    out:		lbr outchar
  337 f206: c0 f1 0b    break:		lbr brk 
  338 f209: c0 ff 54    cold_entry:	lbr minimon
  339 f20c:             
  340 f20c:             
  341 f20c:             

0100h: BASIC_DEST       - <    38> 
feffh: BASIC_END        - <    37> 
f700h: BASIC_START      - <    36> 
f500h: BASMON           - <    41> 
f10dh: BNO              - <   316>    326    326 
f000h: BOOT             - <    44>     44 
f206h: BREAK            - <   337> 
f10bh: BRK              - <   315>    337 
f112h: BRKCHK           - <   322>    315 
f11bh: BRKDONE          - <   329>    318    318 
f0b5h: BS               - <   238>    194    194 
f029h: CLEAR            - <    80>     85     85 
f209h: COLD_ENTRY       - <   338>    101 
f05ah: CONT1            - <   156> 
f088h: CR               - <   199>    188    188 
7800h: CRTCA            - <    24>     25     46     48    252    254 
7801h: CRTCD            - <    25>     50     52 
000eh: CUR_H            - <    26>    256 
000fh: CUR_L            - <    27>    263 
f0aah: ERL              - <   227>    232    232 
f200h: IN               - <   335> 
f100h: INCHAR           - <   303>    303    335 
ff00h: JUMPTBL          - <    35> 
f090h: LF               - <   207>    191    191 
73c0h: LINE23           - <    40>    199    201    223    225 
ff54h: MINIMON          - <    22>    338    338 
f0bbh: NORMAL           - <   245>    185    185 
f203h: OUT              - <   336>    308 
f052h: OUTCHAR          - <   146>    336 
f0deh: OUTDN            - <   283>    195    195 
f0ebh: OUTNOCHAR        - <   298>    149    149 
f09ch: SLOOP            - <   216>    221    221 
0020h: SPACE            - <    33>     80    227    239 
f0beh: UPDATE           - <   251>    203    203    234    234    241    241 
f019h: VLOAD            - <    64>     71     71 
7000h: VMEM             - <    29>     40     76     78    207    209    211 
          213 
77feh: VMEM_CH          - <    31>     89     91    172    174    271    273 
77ffh: VMEM_CL          - <    32> 
7800h: VMEM_END         - <    30>     31     32     84    220    231 
f042h: VTABLE           - <   124>     54     56 

341 Lines assembled
0 Errors
40 Labels
Object Code:276 bytes

