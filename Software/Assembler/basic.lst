RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             
   15 0000:             ;
   16 0000:             ; Basic interpreter tokens
   17 0000:             ;
   18 0000:             TOKENIZER_ERROR: EQU 00
   19 0000:             TOKENIZER_EOF: EQU 01
   20 0000:             TOKENIZER_NUMBER: EQU 02
   21 0000:             TOKENIZER_STRING: EQU 03
   22 0000:             TOKENIZER_VARIABLE: EQU 04
   23 0000:             TOKENIZER_LET: EQU 05
   24 0000:             TOKENIZER_PRINT: EQU 06
   25 0000:             TOKENIZER_IF: EQU 07
   26 0000:             TOKENIZER_THEN: EQU 08
   27 0000:             TOKENIZER_ELSE: EQU 09
   28 0000:             TOKENIZER_FOR: EQU 10
   29 0000:             TOKENIZER_TO: EQU 11
   30 0000:             TOKENIZER_NEXT: EQU 12
   31 0000:             TOKENIZER_GOTO: EQU 13
   32 0000:             TOKENIZER_GOSUB: EQU 14
   33 0000:             TOKENIZER_RETURN: EQU 15
   34 0000:             TOKENIZER_CALL: EQU 16
   35 0000:             TOKENIZER_REM: EQU 17
   36 0000:             TOKENIZER_PEEK: EQU 18
   37 0000:             TOKENIZER_POKE: EQU 19
   38 0000:             TOKENIZER_END: EQU 20
   39 0000:             TOKENIZER_COMMA: EQU 21
   40 0000:             TOKENIZER_SEMICOLON: EQU 22
   41 0000:             TOKENIZER_PLUS: EQU 23
   42 0000:             TOKENIZER_MINUS: EQU 24
   43 0000:             TOKENIZER_AND: EQU 25
   44 0000:             TOKENIZER_OR: EQU 26
   45 0000:             TOKENIZER_ASTR: EQU 27
   46 0000:             TOKENIZER_SLASH: EQU 28
   47 0000:             TOKENIZER_MOD: EQU 29
   48 0000:             TOKENIZER_HASH: EQU 30
   49 0000:             TOKENIZER_LEFTP: EQU 31
   50 0000:             TOKENIZER_RIGHTP: EQU 32
   51 0000:             TOKENIZER_LT: EQU 33
   52 0000:             TOKENIZER_GT: EQU 34
   53 0000:             TOKENIZER_EQ: EQU 35
   54 0000:             TOKENIZER_CR: EQU 36
   55 0000:             TOKENIZER_LINENUM: EQU 37
   56 0000:             
   57 0000:             ;
   58 0000:             ; BASIC interpreter user variables area
   59 0000:             ; currently 26 1-byte variables
   60 0000:             ; for now must be 0xAA00 (256 byte) aligned
   61 0000:             ;
   62 0000:             BASIC_VARS: EQU 0100h
   63 0000:             
   64 0000:             ;
   65 0000:             ; Basic interpreter internal variables
   66 0000:             ;
   67 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   68 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   69 0000:             bas_nxtptr:       EQU 0204h ;
   70 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   71 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   72 0000:             bas_currenttoken: EQU 020Ah ; used in parsing
   73 0000:             bas_tokenbuffer:  EQU 020Ch ; Pointer to start of token buffer
   74 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   75 0000:                                         ; this value should be + 1 end of buffer
   76 0000:                                         ; if buffer is 0x1000-0x1fff this is
   77 0000:                                         ; set to 0x2000. Used in moving buffer around
   78 0000:                                         ; in add and remove line
   79 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   80 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   81 0000:             bas_insertptr:    EQU 0214H
   82 0000:             
   83 0000:             ;
   84 0000:             ; for next statement stack ptr and stack data
   85 0000:             ;
   86 0000:             ; for next stack data
   87 0000:             ; format
   88 0000:             ;   2 bytes for variable id (only first byte used for now)
   89 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
   90 0000:             ;   2 bytes ptr to line after for instruction (format HL)
   91 0000:             ; later add step amount
   92 0000:             ;
   93 0000:             bas_forstackptr: EQU 0280h
   94 0000:             bas_forstack: EQU 0282h
   95 0000:             
   96 0000:             ;
   97 0000:             ; gosub stack ptr and data
   98 0000:             ;
   99 0000:             ; gosub STACK
  100 0000:             ; format
  101 0000:             ;   2 bytes return location ptr
  102 0000:             ;
  103 0000:             bas_gosubptr: EQU 02c0h
  104 0000:             bas_gosubstack: EQU 02c2h
  105 0000:             
  106 0000:             ;
  107 0000:             ; Basic interpreter text input line buffer
  108 0000:             ;
  109 0000:             parse_input_line: EQU 300h
  110 0000:             ;
  111 0000:             ; Basic interpreter tmp buffer to build up current token line
  112 0000:             ;
  113 0000:             parse_token_buffer: EQU 400h
  114 0000:             ;
  115 0000:             ; Basic interpreter token buffer
  116 0000:             ;
  117 0000:             bas_tok_buf_start: EQU 1000h
  118 0000:             ;
  119 0000:             ; Basic interpreter token buffer end + 1
  120 0000:             ;
  121 0000:             bas_tok_buf_end: EQU 2000h
  122 0000:             ; OR
  123 0000:             ;bas_tok_buf_end: EQU 1100h ;smaller for easy debugging - 256 byte buffer
  124 0000:             
  125 0000:             ;
  126 0000:             ; basic interpreter, add IO and peek/poke
  127 0000:             ;
  128 0000:             
  129 0000:             ;
  130 0000:             ; Basic Interpreter
  131 0000:             ;
  132 0000:             
  133 0000:             ;
  134 0000:             ; BASIC Entry Points
  135 0000:             ;
  136 0000:               ORG 0e000h
  137 e000:             ;
  138 e000:             ; list
  139 e000:             ;
  140 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  141 e003: 04 e5 43          JSR  basic_list
  142 e006: 05                Ret
  143 e007:             ;
  144 e007:                   ORG 0e010h
  145 e010:             ;
  146 e010:             ; run
  147 e010:             ;
  148 e010: 04 e4 60          jsr basic_run
  149 e013: 05                Ret
  150 e014:             
  151 e014:             ;
  152 e014:                   ORG 0e020h
  153 e020:             ;
  154 e020:             ; cold start
  155 e020:             ;
  156 e020:             ; Hack later pass in R7
  157 e020:             ;
  158 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  159 e023: 0e 01             ldai TOKENIZER_EOF          ;write EOF to start of buffer
  160 e025: 4f                stavr r7
  161 e026: ff 02 0c          STR R7,bas_tokenbuffer
  162 e029: 1f 20 00          mviw r7,bas_tok_buf_end
  163 e02c: ff 02 0e          str r7,bas_bufferendhi
  164 e02f: 05                Ret
  165 e030:             
  166 e030:             ;
  167 e030:                   ORG 0e030h
  168 e030:             ;
  169 e030:             ; tests - called from monitor - used to test snippets of code
  170 e030:             ;
  171 e030: 04 ff d4          jsr showr7
  172 e033: 1f 00 0a          mviw r7,0010
  173 e036: 04 eb ce          jsr basu_find
  174 e039: 04 ff d4          jsr showr7
  175 e03c: 1f 00 0a          mviw r7,0010
  176 e03f: 04 eb a6          jsr parse_removeline
  177 e042: 05                ret
  178 e043:             
  179 e043:             ;
  180 e043:                   org 0e050h
  181 e050:             ;
  182 e050:             ; parse line
  183 e050:             ;
  184 e050: 04 ea 94          jsr parse_line
  185 e053: 05                ret
  186 e054:             
  187 e054:             ;
  188 e054:                   ORG 0e060h
  189 e060:             ;
  190 e060:             ; Copy test program into token Buffer, copies 0x0400 bytes
  191 e060:             ;
  192 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  193 e063: 1e ee 00          mviw R6,BASIC_TEST
  194 e066: 1d 04 00          mviw R5,0400h
  195 e069:             
  196 e069:             bas_copyloop:
  197 e069: 46                ldavr R6
  198 e06a: 4f                stavr r7
  199 e06b: 56                incr r6
  200 e06c: 57                incr r7
  201 e06d: 5d                decr r5
  202 e06e: 2d                mvrha r5
  203 e06f: a2 e0 69          brnz bas_copyloop
  204 e072: 25                mvrla r5
  205 e073: a2 e0 69          brnz bas_copyloop
  206 e076: 05                ret
  207 e077:             
  208 e077:             ;
  209 e077:             ; basic interpreter messages
  210 e077:             ;
  211 e077: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "Accept - unexpected token",0,0ah,0dh
  212 e093: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  213 e0a4: 42 41 53 49 
            43 20 54 4f 
            4b 45 4e 20 
            4e 4f 54 20 
            53 55 50 50 
            4f 52 54 45 
            44 20 0a 0d bas_msg3: db "Basic token not supported ",0ah,0dh
  214 e0c0: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  215 e0ca:             ;
  216 e0ca:             ; Basic interpreter - execution engine
  217 e0ca:             ; Register Usage
  218 e0ca:             ; R0 - Program Counter
  219 e0ca:             ; R1 - Stack Pointer
  220 e0ca:             ; R2 - Direct addressing mode
  221 e0ca:             ; R3 - Basic Interpreter Token Buffer ptr
  222 e0ca:             ; R4 - working register  ; or is this for-next stack ptr
  223 e0ca:             ; R5 - working register  ; or is this gosub stack ptr
  224 e0ca:             ; R6 - Working register
  225 e0ca:             ; R7 - parameter passing & return value
  226 e0ca:             ;
  227 e0ca:             ;exe: Is this label needed
  228 e0ca:             ;
  229 e0ca:             ; void ubasic_init()
  230 e0ca:             ;
  231 e0ca:             ; Setup basic interpreter execution engine
  232 e0ca:             ;
  233 e0ca:             exe_init:
  234 e0ca: 09              push
  235 e0cb: 1d 02 c2        MVIW R5,bas_gosubstack
  236 e0ce: 1c 02 82        MVIW R4,bas_forstack
  237 e0d1: 1e 02 00        MVIW R6,bas_run_ended
  238 e0d4: 0e 00           LDAI 0
  239 e0d6: 4e              STAVR R6
  240 e0d7: f3 02 0c        LDR R3,bas_tokenbuffer
  241 e0da: 0a              pop
  242 e0db: 05              RET
  243 e0dc:             
  244 e0dc:             ;
  245 e0dc:             ; void accept(int)
  246 e0dc:             ;
  247 e0dc:             ; compare accumulator with current token then advance to next token in buffer
  248 e0dc:             ; assume accumulator destroyed
  249 e0dc:             ;
  250 e0dc:             exe_accept:
  251 e0dc: 09              push
  252 e0dd:             ;
  253 e0dd:             ; get current token into accumulator
  254 e0dd:             ;
  255 e0dd: 43              LDAVR R3
  256 e0de: 0b              MVAT
  257 e0df: 0a              POP
  258 e0e0: a8 e0 f1        BREQ exe_accept_done
  259 e0e3:             ;
  260 e0e3:             ; debug information
  261 e0e3:             ;
  262 e0e3: 04 ff e0        JSR showbytea
  263 e0e6: 0e 2d           ldai '-'
  264 e0e8: 04 ff c8        JSR uartout
  265 e0eb: 1f e0 77        mviw R7,bas_msg1
  266 e0ee: 04 e4 9d        JSR bas_error
  267 e0f1:             ;
  268 e0f1:             exe_accept_done:
  269 e0f1: 04 e4 9f        jsr exe_next_token
  270 e0f4: 05              RET
  271 e0f5:             
  272 e0f5:             ;
  273 e0f5:             ; int varfactor()
  274 e0f5:             ;
  275 e0f5:             ; get variable id pointed to by exe_variable_num in token stream
  276 e0f5:             ; (this is not a value but a variable id)
  277 e0f5:             ; value returned by exe_get_variable in r7
  278 e0f5:             ;
  279 e0f5:             ; return value in R7
  280 e0f5:             ;
  281 e0f5:             exe_varfactor:
  282 e0f5:             ; get variable number id (one byte for now a-z) into accumulator
  283 e0f5:             ;
  284 e0f5: 04 e4 d8        jsr exe_variable_num
  285 e0f8:             ;
  286 e0f8:             ; variable id in accumulator, return in r7
  287 e0f8:             ;
  288 e0f8: 04 e4 92        jsr exe_get_variable
  289 e0fb: 0e 04           LDAI TOKENIZER_VARIABLE
  290 e0fd: 04 e0 dc        JSR exe_accept
  291 e100: 05              RET
  292 e101:             
  293 e101:             ;
  294 e101:             ; int factor()
  295 e101:             ; return value in R7
  296 e101:             ;
  297 e101:             exe_factor:
  298 e101:             ;
  299 e101:             ; get current token into accumulator
  300 e101:             ;
  301 e101: 43              LDAVR R3
  302 e102:             ;
  303 e102: 0d 02           LDTI TOKENIZER_NUMBER
  304 e104: aa e1 0f        BRNEQ exe_factor1
  305 e107: 04 e4 cf        JSR exe_num
  306 e10a: 0c              MVTA
  307 e10b: 04 e0 dc        JSR exe_accept
  308 e10e: 05              RET
  309 e10f:             
  310 e10f:             exe_factor1:
  311 e10f: 0d 1f           LDTI TOKENIZER_LEFTP
  312 e111: aa e1 20        BRNEQ exe_factor2
  313 e114: 04 e0 dc        JSR exe_accept
  314 e117: 04 e1 73        JSR exe_expr
  315 e11a: 0e 20           LDAI TOKENIZER_RIGHTP
  316 e11c: 04 e0 dc        JSR exe_accept
  317 e11f: 05              RET
  318 e120:             
  319 e120:             exe_factor2:
  320 e120: 04 e0 f5        jsr exe_varfactor
  321 e123: 05              ret
  322 e124:             
  323 e124:             ;
  324 e124:             ; int term()
  325 e124:             ; R5 = F1
  326 e124:             ; R6 = F2
  327 e124:             ; R7 = return value
  328 e124:             ;
  329 e124:             exe_term:
  330 e124: 07 05           pushr r5
  331 e126: 07 06           pushr r6
  332 e128:             
  333 e128: 04 e1 01        jsr exe_factor
  334 e12b: 0f 57           MOVRR r7,r5
  335 e12d:             
  336 e12d:             exe_term_loop:
  337 e12d: 43              LDAVR R3
  338 e12e: 0d 1b           ldti TOKENIZER_ASTR
  339 e130: a8 e1 40        BREQ exe_term_astr
  340 e133: 0d 1c           LDTI TOKENIZER_SLASH
  341 e135: a8 e1 56        breq exe_term_slash
  342 e138: 0d 1d           ldti TOKENIZER_MOD
  343 e13a: a8 e1 61        breq exe_term_mod
  344 e13d: a0 e1 6c        br exe_term_done
  345 e140:             
  346 e140:             exe_term_astr:
  347 e140: 04 e4 9f        jsr exe_next_token
  348 e143: 04 e1 01        jsr exe_factor
  349 e146: 0f 67           movrr r7,r6
  350 e148:             ;
  351 e148:             ; do mulitply f1 = f1 * f2
  352 e148:             ;
  353 e148: 07 04           pushr r4
  354 e14a: 0f 46           movrr r6,r4
  355 e14c: 04 ec 0a        jsr PARSE_MUL16
  356 e14f: 0f 57           movrr r7,r5
  357 e151: 08 40           popr r4
  358 e153: a0 e1 2d        BR exe_term_loop
  359 e156:             
  360 e156:             exe_term_slash:
  361 e156: 04 e4 9f        jsr exe_next_token
  362 e159: 04 e1 01        jsr exe_factor
  363 e15c: 0f 67           movrr r7,r6
  364 e15e:             ;
  365 e15e:             ; do divide f1 = f1 / f2
  366 e15e:             ;
  367 e15e: a0 e1 2d        BR exe_term_loop
  368 e161:             
  369 e161:             exe_term_mod:
  370 e161: 04 e4 9f        jsr exe_next_token
  371 e164: 04 e1 01        jsr exe_factor
  372 e167: 0f 67           movrr r7,r6
  373 e169:             ;
  374 e169:             ; f1 = f1 % f2
  375 e169:             ;
  376 e169: a0 e1 2d        BR exe_term_loop
  377 e16c:             
  378 e16c:             exe_term_done:
  379 e16c: 0f 75           MOVRR r5,r7
  380 e16e: 08 60           popr r6
  381 e170: 08 50           popr r5
  382 e172: 05              ret
  383 e173:             
  384 e173:             ;
  385 e173:             ; static VARIABLE_TYPE expr()
  386 e173:             ;
  387 e173:             ; R5 = t1
  388 e173:             ; R6 = t2
  389 e173:             ; R7 = return value
  390 e173:             ;
  391 e173:             exe_expr:
  392 e173: 07 05           pushr r5
  393 e175: 07 06           pushr r6
  394 e177:             
  395 e177: 04 e1 24        jsr exe_term
  396 e17a: 0f 57           MOVRR r7,r5
  397 e17c:             
  398 e17c:             exe_expr_loop:
  399 e17c: 43              LDAVR R3
  400 e17d: 0d 17           ldtI TOKENIZER_PLUS
  401 e17f: a8 e1 94        BREQ exe_expr_plus
  402 e182: 0d 18           ldtI TOKENIZER_MINUS
  403 e184: a8 e1 a6        breq exe_expr_minus
  404 e187: 0d 19           ldtI TOKENIZER_AND
  405 e189: a8 e1 b8        breq exe_expr_and
  406 e18c: 0d 1a           ldti TOKENIZER_OR
  407 e18e: a8 e1 ca        breq exe_expr_or
  408 e191:             
  409 e191: a0 e1 d5        br exe_expr_done
  410 e194:             
  411 e194:             exe_expr_plus:
  412 e194: 04 e4 9f        jsr exe_next_token
  413 e197: 04 e1 24        jsr exe_term
  414 e19a: 0f 67           movrr r7,r6
  415 e19c:             ;
  416 e19c:             ; t1 = t1 + t2
  417 e19c:             ;
  418 e19c: 0f 75           movrr r5,r7
  419 e19e: 04 ec 45        jsr parse_add16
  420 e1a1: 0f 57           movrr r7,r5
  421 e1a3: a0 e1 7c        BR exe_expr_loop
  422 e1a6:             
  423 e1a6:             exe_expr_minus:
  424 e1a6: 04 e4 9f        jsr exe_next_token
  425 e1a9: 04 e1 24        jsr exe_term
  426 e1ac: 0f 67           movrr r7,r6
  427 e1ae:             ;
  428 e1ae:             ; t1 = t1 - t2
  429 e1ae:             ;
  430 e1ae: 0f 75           movrr r5,r7
  431 e1b0: 04 ec 53        jsr parse_sub16
  432 e1b3: 0f 57           movrr r7,r5
  433 e1b5: a0 e1 7c        BR exe_expr_loop
  434 e1b8:             
  435 e1b8:             exe_expr_and:
  436 e1b8: 04 e4 9f        jsr exe_next_token
  437 e1bb: 04 e1 24        jsr exe_term
  438 e1be: 0f 67           movrr r7,r6
  439 e1c0:             ;
  440 e1c0:             ; t1 = t1 & t2
  441 e1c0:             ;
  442 e1c0: 0f 75       movrr r5,r7
  443 e1c2: 04 ec 53    jsr parse_sub16
  444 e1c5: 0f 57       movrr r7,r5
  445 e1c7: a0 e1 7c        BR exe_expr_loop
  446 e1ca:             
  447 e1ca:             exe_expr_or:
  448 e1ca: 04 e4 9f        jsr exe_next_token
  449 e1cd: 04 e1 24        jsr exe_term
  450 e1d0: 0f 67           movrr r7,r6
  451 e1d2:             ;
  452 e1d2:             ; t1 = t1 | t2
  453 e1d2:             ;
  454 e1d2: a0 e1 7c        BR exe_expr_loop
  455 e1d5:             
  456 e1d5:             exe_expr_done:
  457 e1d5: 0f 75           MOVRR r5,r7
  458 e1d7: 08 60           popr r6
  459 e1d9: 08 50           popr r5
  460 e1db: 05              ret
  461 e1dc:             
  462 e1dc:             ;
  463 e1dc:             ; int relation ()
  464 e1dc:             ;
  465 e1dc:             ; R5 = r1
  466 e1dc:             ; R6 = r2
  467 e1dc:             ; R7 = return value
  468 e1dc:             ;
  469 e1dc:             exe_relation:
  470 e1dc: 07 05           pushr r5
  471 e1de: 07 06           pushr r6
  472 e1e0:             
  473 e1e0: 04 e1 73        jsr exe_expr
  474 e1e3: 0f 57           MOVRR r7,r5
  475 e1e5:             
  476 e1e5:             exe_relation_loop:
  477 e1e5: 43              LDAVR R3
  478 e1e6: 0d 21           LDTI TOKENIZER_LT
  479 e1e8: a8 e1 f8        BREQ exe_relation_lt
  480 e1eb: 0d 22           ldti TOKENIZER_GT
  481 e1ed: a8 e2 16        breq exe_relation_gt
  482 e1f0: 0d 23           ldti TOKENIZER_EQ
  483 e1f2: a8 e2 34        breq exe_relation_eq
  484 e1f5:             
  485 e1f5: a0 e2 50        br exe_relation_done
  486 e1f8:             
  487 e1f8:             exe_relation_lt:
  488 e1f8: 04 e4 9f        jsr exe_next_token
  489 e1fb: 04 e1 73        jsr exe_expr
  490 e1fe: 0f 67           movrr r7,r6
  491 e200:             ;
  492 e200:             ; r1 = r1 < r2
  493 e200:             ;
  494 e200: 0f 75           movrr  r5,r7
  495 e202: 04 ec 8a        jsr parse_compare
  496 e205: 0d ff           ldti 0ffh
  497 e207: aa e2 10        BRNEQ exe_rel_nlt
  498 e20a: 1d 00 01        mviw r5,01h
  499 e20d: a0 e1 e5        BR exe_relation_loop
  500 e210:             exe_rel_nlt:
  501 e210: 1d 00 00        mviw r5,00h
  502 e213: a0 e1 e5        BR exe_relation_loop
  503 e216:             
  504 e216:             exe_relation_gt:
  505 e216: 04 e4 9f        jsr exe_next_token
  506 e219: 04 e1 73        jsr exe_expr
  507 e21c: 0f 67           movrr r7,r6
  508 e21e:             ;
  509 e21e:             ; r1 = r1 > r2
  510 e21e:             ;
  511 e21e: 0f 75           movrr  r5,r7
  512 e220: 04 ec 8a        jsr parse_compare
  513 e223: 0d 01           ldti 01h
  514 e225: aa e2 2e        BRNEQ exe_rel_ngt
  515 e228: 1d 00 01        mviw r5,01h
  516 e22b: a0 e1 e5        BR exe_relation_loop
  517 e22e:             exe_rel_ngt:
  518 e22e: 1d 00 00        mviw r5,00h
  519 e231: a0 e1 e5        BR exe_relation_loop
  520 e234:             
  521 e234:             exe_relation_eq:
  522 e234: 04 e4 9f        jsr exe_next_token
  523 e237: 04 e1 73        jsr exe_expr
  524 e23a: 0f 67           movrr r7,r6
  525 e23c:             ;
  526 e23c:             ; r1 = r1 == r2
  527 e23c:             ;
  528 e23c: 0f 75           movrr  r5,r7
  529 e23e: 04 ec 8a        jsr parse_compare
  530 e241: a2 e2 4a        brnz exe_rel_ne
  531 e244: 1d 00 01        mviw r5,01h
  532 e247: a0 e1 e5        BR exe_relation_loop
  533 e24a:             exe_rel_ne:
  534 e24a: 1d 00 00        mviw r5,00h
  535 e24d: a0 e1 e5        BR exe_relation_loop
  536 e250:             
  537 e250:             exe_relation_done:
  538 e250: 0f 75           MOVRR r5,r7
  539 e252: 08 60           popr r6
  540 e254: 08 50           popr r5
  541 e256: 05              ret
  542 e257:             
  543 e257:             ;
  544 e257:             ; char * index_find (int linenum)
  545 e257:             ;
  546 e257:             ; call with line in R7
  547 e257:             ; return with val in R7 - tokenbuffer ptr
  548 e257:             ; THIS CAN BE REMOVED SINCE IT IS ONLY A SINGLE CALL
  549 e257:             ;
  550 e257:             exe_index_find:
  551 e257: 04 eb ce        JSR basu_find
  552 e25a: 05              RET
  553 e25b:             
  554 e25b:             ;
  555 e25b:             ; void jump_linenum(linenum)
  556 e25b:             ;
  557 e25b:             ; Linenum in R7
  558 e25b:             ;
  559 e25b:             exe_jump_line:
  560 e25b: 04 e2 57        JSR exe_index_find
  561 e25e: 2f              MVRHA R7
  562 e25f: a2 e2 72        BRNZ exe_jump_line1
  563 e262: 27              MVRLA R7
  564 e263: a2 e2 72        BRNZ exe_jump_line1
  565 e266:             ;
  566 e266:             ; returned 0 line not found
  567 e266:             ;
  568 e266: 0e 24           LDAI TOKENIZER_CR
  569 e268: 04 e0 dc        JSR exe_accept
  570 e26b: 1e 02 00        MVIW r6,bas_run_ended
  571 e26e: 0e 01           LDAI 1
  572 e270: 4e              STAVR R6
  573 e271: 05              ret
  574 e272:             exe_jump_line1:
  575 e272:             ;   jsr tok_goto ; WHAT IS THIS
  576 e272: 0f 37           movrr r7,r3
  577 e274: 05              ret
  578 e275:             
  579 e275:             ;
  580 e275:             ; void goto_statement()
  581 e275:             ;
  582 e275:             exe_goto_stmt:
  583 e275: 0e 0d           LDAI TOKENIZER_GOTO
  584 e277: 04 e0 dc        JSR exe_accept
  585 e27a: 04 e1 73        JSR exe_expr
  586 e27d: 04 e2 5b        JSR exe_jump_line
  587 e280: 05              RET
  588 e281:             
  589 e281:             ;
  590 e281:             ; void print_statment()
  591 e281:             ;
  592 e281:             exe_print_stmt:
  593 e281: 0e 06           LDAI TOKENIZER_PRINT
  594 e283: 04 e0 dc        jsr exe_accept
  595 e286:             
  596 e286:             exe_print_stmt_loop:
  597 e286: 43              LDAVR R3
  598 e287: 0d 03           LDTI TOKENIZER_STRING
  599 e289: aa e2 98        BRNEQ exe_print_stmt1
  600 e28c:             ;
  601 e28c:             ; this should return string to print in r2
  602 e28c:             ; exe_string may not be needed tokenbufferptr is at string ?
  603 e28c:             ;
  604 e28c:             
  605 e28c:             ;   jsr exe_string
  606 e28c: 0f 73           movrr r3,r7
  607 e28e: 57              incr r7
  608 e28f:             ;   movrr r7,r2
  609 e28f: 04 ff c0        jsr stringout
  610 e292: 04 e4 9f        jsr exe_next_token
  611 e295: a0 e2 cb        br exe_print_stmt_test
  612 e298:             
  613 e298:             exe_print_stmt1:
  614 e298: 0d 15           ldti TOKENIZER_COMMA
  615 e29a: aa e2 a8        BRNEQ exe_print_stmt2
  616 e29d: 0e 20           LDAI ' '
  617 e29f: 04 ff c4        JSR charout
  618 e2a2: 04 e4 9f        jsr exe_next_token
  619 e2a5: a0 e2 cb        br exe_print_stmt_test
  620 e2a8:             
  621 e2a8:             exe_print_stmt2:
  622 e2a8: 0d 16           ldti TOKENIZER_SEMICOLON
  623 e2aa: aa e2 b3        BRNEQ exe_print_stmt3
  624 e2ad: 04 e4 9f        jsr exe_next_token
  625 e2b0: a0 e2 cb        br exe_print_stmt_test
  626 e2b3:             
  627 e2b3:             exe_print_stmt3:
  628 e2b3: 0d 04           ldti TOKENIZER_VARIABLE
  629 e2b5: a8 e2 c5        BREQ exe_print_stmt4
  630 e2b8: 0d 02           ldti TOKENIZER_NUMBER
  631 e2ba: a8 e2 c5        breq exe_print_stmt4
  632 e2bd: 0d 1f           ldti  TOKENIZER_LEFTP
  633 e2bf: a8 e2 c5        breq exe_print_stmt4
  634 e2c2:             
  635 e2c2: a0 e2 d9        br exe_print_stmt_done
  636 e2c5:             
  637 e2c5:             exe_print_stmt4:
  638 e2c5: 04 e1 73        jsr exe_expr
  639 e2c8: 04 ff d4        JSR showr7
  640 e2cb:             ;   br exe_print_stmt_test // falls through
  641 e2cb:             
  642 e2cb:             exe_print_stmt_test:
  643 e2cb: 43              LDAVR R3
  644 e2cc: 0d 24           LDTI TOKENIZER_CR
  645 e2ce: a8 e2 d9        breq exe_print_stmt_done
  646 e2d1: 0d 01           LDTI TOKENIZER_EOF
  647 e2d3: a8 e2 d9        breq exe_print_stmt_done
  648 e2d6: a0 e2 86        br exe_print_stmt_loop
  649 e2d9:             
  650 e2d9:             exe_print_stmt_done:
  651 e2d9: 1f ec ab        mviw R7,CRLF
  652 e2dc: 04 ff c0        jsr stringout
  653 e2df: 04 e4 9f        jsr exe_next_token
  654 e2e2: 05              ret
  655 e2e3:             
  656 e2e3:             ;
  657 e2e3:             ; void if_statement()
  658 e2e3:             ;
  659 e2e3:             exe_if_stmt:
  660 e2e3: 0e 07           LDAI TOKENIZER_IF
  661 e2e5: 04 e0 dc        JSR exe_accept
  662 e2e8:             
  663 e2e8: 04 e1 dc        JSR exe_relation
  664 e2eb: 27              MVRLA R7
  665 e2ec: 09              push
  666 e2ed: 0e 08           LDAI TOKENIZER_THEN
  667 e2ef: 04 e0 dc        JSR exe_accept
  668 e2f2: 0a              pop
  669 e2f3:             
  670 e2f3: 0d 01           LDTI 1
  671 e2f5: aa e2 fc        BRNEQ exe_if_stmt1
  672 e2f8: 04 e3 d1        JSR exe_stmt
  673 e2fb: 05              ret
  674 e2fc:             
  675 e2fc:             exe_if_stmt1:
  676 e2fc: 04 e4 9f        jsr exe_next_token
  677 e2ff: 43              LDAVR R3
  678 e300: 0d 24           LDTI TOKENIZER_CR
  679 e302: a8 e3 0b        BREQ EXE_IF_STMT2
  680 e305: 0d 01           LDTI TOKENIZER_EOF
  681 e307: aa e2 fc        BRNEQ EXE_IF_STMT1
  682 e30a: 05              RET
  683 e30b:             
  684 e30b:             exe_if_stmt2:
  685 e30b: 04 e4 9f        JSR EXE_NEXT_TOKEN
  686 e30e: 05              RET
  687 e30f:             
  688 e30f:             ;
  689 e30f:             ; void let_statement()
  690 e30f:             ;
  691 e30f:             exe_let_stmt:
  692 e30f: 04 e4 d8        jsr exe_variable_num
  693 e312: 37              mvarl r7
  694 e313: 0f 67           movrr r7,r6
  695 e315: 0e 04           ldai TOKENIZER_VARIABLE
  696 e317: 04 e0 dc        jsr exe_accept
  697 e31a: 0e 23           ldai TOKENIZER_EQ
  698 e31c: 04 e0 dc        jsr exe_accept
  699 e31f: 04 e1 73        jsr exe_expr
  700 e322: 26              mvrla r6
  701 e323: 04 e4 87        JSR exe_set_variable
  702 e326: 0e 24           ldai TOKENIZER_CR
  703 e328: 04 e0 dc        jsr exe_accept
  704 e32b: 05              ret
  705 e32c:             
  706 e32c:             ;
  707 e32c:             ; void gosub_statement()
  708 e32c:             ;
  709 e32c:             exe_gosub_stmt:
  710 e32c: 0e 0e           ldai TOKENIZER_GOSUB
  711 e32e: 04 e0 dc        jsr exe_accept
  712 e331: 04 e4 cf        jsr exe_num
  713 e334: 0e 02           ldai TOKENIZER_NUMBER
  714 e336: 04 e0 dc        jsr exe_accept
  715 e339: 0e 24           ldai TOKENIZER_CR
  716 e33b: 04 e0 dc        jsr exe_accept
  717 e33e:             ;
  718 e33e:             ; save current token buffer ptr to gosub stack
  719 e33e:             ;
  720 e33e: 23             mvrla r3
  721 e33f: 4d             stavr r5
  722 e340: 55             incr r5
  723 e341: 2b             mvrha r3
  724 e342: 4d             stavr r5
  725 e343: 55             incr  r5
  726 e344:             ;
  727 e344:             ; write new gosub stack ptr location back
  728 e344:             ;
  729 e344: 04 e2 5b       JSR exe_jump_line
  730 e347: 05             RET
  731 e348:             
  732 e348:             ;
  733 e348:             ; void return_statment()
  734 e348:             ;
  735 e348:             exe_return_stmt:
  736 e348: 0e 0f           ldai TOKENIZER_RETURN
  737 e34a: 04 e0 dc        jsr exe_accept
  738 e34d:             ;
  739 e34d:             ; setup to use for storage area via R4
  740 e34d:             ;
  741 e34d: 5d             decr r5
  742 e34e: 5d             decr r5
  743 e34f:             
  744 e34f: 45             ldavr r5
  745 e350: 33             mvarl r3
  746 e351: 55             incr r5
  747 e352: 45             ldavr r5
  748 e353: 3b             mvarh r3
  749 e354:             
  750 e354: 5d             decr r5
  751 e355: 05             ret
  752 e356:             
  753 e356:             ;
  754 e356:             ; void next_statement()
  755 e356:             ;
  756 e356:             exe_next_stmt:
  757 e356:             ;
  758 e356:             ; backup to the TO Value
  759 e356: 5c              decr r4
  760 e357: 5c              decr r4
  761 e358: 5c              decr r4
  762 e359: 5c              decr r4
  763 e35a:             ;
  764 e35a:             ; eat next
  765 e35a:             ;
  766 e35a: 0e 0c           ldai TOKENIZER_NEXT
  767 e35c: 04 e0 dc        jsr exe_accept
  768 e35f:             ;
  769 e35f:             ; get variable id (in accumulator) and hold in r6 lo
  770 e35f:             ;
  771 e35f: 04 e4 d8        jsr exe_variable_num
  772 e362: 36              mvarl r6
  773 e363:             ;
  774 e363:             ; eat TOKENIZER_VARIABLE id
  775 e363:             ;
  776 e363: 0e 04           ldai TOKENIZER_VARIABLE
  777 e365: 04 e0 dc        jsr exe_accept
  778 e368:             ;
  779 e368:             ; get variable value, inc by 1 and store - ADD STEP VALUE
  780 e368:             ;
  781 e368: 26              mvrla r6
  782 e369: 04 e4 92        jsr exe_get_variable
  783 e36c: 57              incr r7
  784 e36d: 26              mvrla r6
  785 e36e: 04 e4 87        jsr exe_set_variable
  786 e371:             ;
  787 e371:             ; get TO value into R6
  788 e371: 44              ldavr r4
  789 e372: 36              mvarl r6
  790 e373: 54              incr r4
  791 e374: 44              ldavr r4
  792 e375: 3e              mvarh r6
  793 e376: 54              incr r4
  794 e377:             ;
  795 e377:             ; for now only compare low byte HACK use compare code
  796 e377:             ;
  797 e377: 26              mvrla r6
  798 e378: 0b              mvat
  799 e379: 27              mvrla r7
  800 e37a: a9 e3 84        brgt exe_next_done
  801 e37d:             ;
  802 e37d: 44              ldavr r4
  803 e37e: 33              mvarl r3
  804 e37f: 54              incr r4
  805 e380: 44              ldavr r4
  806 e381: 3b              mvarh r3
  807 e382: 54              incr r4
  808 e383: 05              ret
  809 e384:             
  810 e384:             exe_next_done:
  811 e384: 5c            decr r4
  812 e385: 5c            decr r4
  813 e386: 5c            decr r4
  814 e387: 5c            decr r4
  815 e388: 0e 24         ldai TOKENIZER_CR
  816 e38a: 04 e0 dc      jsr exe_accept
  817 e38d: 05            ret
  818 e38e:             
  819 e38e:             ;
  820 e38e:             ; void for_statement()
  821 e38e:             ;
  822 e38e:             exe_for_stmt:
  823 e38e:             ;
  824 e38e:             ; setup to use for storage area via R4
  825 e38e:             ;
  826 e38e: 0e 0a           ldai TOKENIZER_FOR    ; eat FOR
  827 e390: 04 e0 dc        jsr exe_accept
  828 e393:             ;
  829 e393:             ; get variable id (in accumulator) and hold in r6 lo
  830 e393:             ;
  831 e393: 04 e4 d8        jsr exe_variable_num
  832 e396: 36              mvarl r6
  833 e397:             ;
  834 e397:             ; store variable id in FOR storage - hack only lo byte, hi byte 0
  835 e397:             ;
  836 e397: 4c              stavr r4
  837 e398: 54              incr r4
  838 e399: 0e 00           ldai 0
  839 e39b: 4c              stavr r4
  840 e39c: 54              incr r4
  841 e39d:             ;
  842 e39d:             ; eat variable id and = then get starting value
  843 e39d:             ;
  844 e39d: 0e 04           ldai TOKENIZER_VARIABLE
  845 e39f: 04 e0 dc        jsr exe_accept
  846 e3a2: 0e 23           ldai TOKENIZER_EQ
  847 e3a4: 04 e0 dc        jsr exe_accept
  848 e3a7: 04 e1 73        jsr exe_expr
  849 e3aa:             ;
  850 e3aa:             ; set variable to starting value
  851 e3aa:             ;
  852 e3aa: 26              mvrla r6
  853 e3ab: 04 e4 87        JSR exe_set_variable
  854 e3ae:             ;
  855 e3ae:             ; eat TO and get to value
  856 e3ae:             ;
  857 e3ae: 0e 0b           ldai TOKENIZER_TO
  858 e3b0: 04 e0 dc        jsr exe_accept
  859 e3b3: 04 e1 73        jsr exe_expr
  860 e3b6:             ;
  861 e3b6:             ; store to value in FOR storage area
  862 e3b6:             ;
  863 e3b6: 27              mvrla r7
  864 e3b7: 4c              stavr r4
  865 e3b8: 54              incr r4
  866 e3b9: 2f              mvrha r7
  867 e3ba: 4c              stavr r4
  868 e3bb: 54              incr r4
  869 e3bc:             ;
  870 e3bc:             ; EAT EOL
  871 e3bc:             ;
  872 e3bc: 0e 24           ldai TOKENIZER_CR
  873 e3be: 04 e0 dc        jsr exe_accept
  874 e3c1:             ;
  875 e3c1:             ; store ptr to instruction after FOR in for storage area
  876 e3c1:             ;
  877 e3c1: 23              mvrla r3
  878 e3c2: 4c              stavr r4
  879 e3c3: 54              incr r4
  880 e3c4: 2b              mvrha r3
  881 e3c5: 4c              stavr r4
  882 e3c6: 54              incr r4
  883 e3c7:             ;
  884 e3c7:             ;   save for stackptr
  885 e3c7:             ;
  886 e3c7: 05              ret
  887 e3c8:             
  888 e3c8:             ;
  889 e3c8:             ; void peek_statment()
  890 e3c8:             ;
  891 e3c8:             exe_peek_stmt:
  892 e3c8: 03              halt
  893 e3c9:             
  894 e3c9:             ;
  895 e3c9:             ; void poke_statement()
  896 e3c9:             ;
  897 e3c9:             exe_poke_stmt:
  898 e3c9: 03              halt
  899 e3ca:             
  900 e3ca:             ;
  901 e3ca:             ; void end_statement()
  902 e3ca:             ;
  903 e3ca:             exe_end_stmt:
  904 e3ca: 1e 02 00        mviw r6,bas_run_ended
  905 e3cd: 0e 01           LDAI 1
  906 e3cf: 4e              STAVR r6
  907 e3d0: 05              ret
  908 e3d1:             
  909 e3d1:             ;
  910 e3d1:             ; void statment()
  911 e3d1:             ;
  912 e3d1:             exe_stmt:
  913 e3d1:             ;    MVIW R7,exe_stmt_msg
  914 e3d1:             ;    JSR stringout
  915 e3d1:             ;    JSR showaddr
  916 e3d1: 43              LDAVR R3
  917 e3d2:             ;    PUSH
  918 e3d2:             ;    JSR showbytea
  919 e3d2:             ;    MVIW R7,CRLF
  920 e3d2:             ;    JSR STRINGOUT
  921 e3d2:             ;    POP
  922 e3d2:             
  923 e3d2: 0d 06           LDTI TOKENIZER_PRINT
  924 e3d4: aa e3 db        BRNEQ exe_stmt1
  925 e3d7: 04 e2 81        JSR exe_print_stmt
  926 e3da: 05              ret
  927 e3db:             
  928 e3db:             exe_stmt1:
  929 e3db: 0d 07           LDTI TOKENIZER_IF
  930 e3dd: aa e3 e4        BRNEQ exe_stmt2
  931 e3e0: 04 e2 e3        JSR exe_if_stmt
  932 e3e3: 05              ret
  933 e3e4:             
  934 e3e4:             exe_stmt2:
  935 e3e4: 0d 04           LDTI TOKENIZER_VARIABLE
  936 e3e6: aa e3 ed        BRNEQ exe_stmt3
  937 e3e9: 04 e3 0f        JSR exe_let_stmt
  938 e3ec: 05              ret
  939 e3ed:             
  940 e3ed:             exe_stmt3:
  941 e3ed: 0d 0e           LDTI TOKENIZER_GOSUB
  942 e3ef: aa e3 f6        BRNEQ exe_stmt4
  943 e3f2: 04 e3 2c        JSR exe_gosub_stmt
  944 e3f5: 05              ret
  945 e3f6:             
  946 e3f6:             exe_stmt4:
  947 e3f6: 0d 0f           LDTI TOKENIZER_RETURN
  948 e3f8: aa e3 ff        BRNEQ exe_stmt5
  949 e3fb: 04 e3 48        JSR exe_return_stmt
  950 e3fe: 05              ret
  951 e3ff:             
  952 e3ff:             exe_stmt5:
  953 e3ff: 0d 0a           LDTI TOKENIZER_FOR
  954 e401: aa e4 08        BRNEQ exe_stmt6
  955 e404: 04 e3 8e        JSR exe_for_stmt
  956 e407: 05              ret
  957 e408:             
  958 e408:             exe_stmt6:
  959 e408: 0d 12           LDTI TOKENIZER_PEEK
  960 e40a: aa e4 11        BRNEQ exe_stmt7
  961 e40d: 04 e3 c8        JSR exe_peek_stmt
  962 e410: 05              ret
  963 e411:             
  964 e411:             exe_stmt7:
  965 e411: 0d 13           LDTI TOKENIZER_POKE
  966 e413: aa e4 1a        BRNEQ exe_stmt8
  967 e416: 04 e3 c9        JSR exe_poke_stmt
  968 e419: 05              ret
  969 e41a:             
  970 e41a:             exe_stmt8:
  971 e41a: 0d 0c           LDTI TOKENIZER_NEXT
  972 e41c: aa e4 23        BRNEQ exe_stmt9
  973 e41f: 04 e3 56        JSR exe_next_stmt
  974 e422: 05              ret
  975 e423:             
  976 e423:             exe_stmt9:
  977 e423: 0d 14           LDTI TOKENIZER_END
  978 e425: aa e4 2c        BRNEQ exe_stmt10
  979 e428: 04 e3 ca        JSR exe_end_stmt
  980 e42b: 05              ret
  981 e42c:             
  982 e42c:             exe_stmt10:
  983 e42c: 0d 05           LDTI TOKENIZER_LET
  984 e42e: aa e4 3a        BRNEQ exe_stmt11
  985 e431: 0e 05           LDAI TOKENIZER_LET
  986 e433: 04 e0 dc        JSR exe_accept
  987 e436: 04 e3 0f        JSR exe_let_stmt
  988 e439: 05              ret
  989 e43a:             
  990 e43a:             exe_stmt11:
  991 e43a: 0d 0d           LDTI TOKENIZER_GOTO
  992 e43c: aa e4 43        BRNEQ exe_stmt12
  993 e43f: 04 e2 75        JSR exe_goto_stmt
  994 e442: 05              ret
  995 e443:             
  996 e443:             exe_stmt12:
  997 e443: 04 ff e0        jsr showbytea
  998 e446: 0e 3d           ldai '='
  999 e448: 04 ff c8        jsr uartout
 1000 e44b: 1f e0 a4        MVIW R7,bas_msg3
 1001 e44e: 04 ff c0        jsr stringout
 1002 e451: 04 ff dc        JSR SHOWREGS
 1003 e454: 04 e4 9d        jsr bas_error
 1004 e457:             
 1005 e457:             ;
 1006 e457:             ; void line_statement (void)
 1007 e457:             ;
 1008 e457:             exe_line_stmt:
 1009 e457:             ;line_statement(void) {
 1010 e457:             ;    DEBUG_PRINTF("----------- Line number %d ---------\n", tokenizer_num());
 1011 e457:             ;#ifdef unused
 1012 e457:             ;    index_add(tokenizer_num(), tokenizer_pos());
 1013 e457:             ;#endif
 1014 e457:             ;    accept(TOKENIZER_LINENUM);
 1015 e457:             ;    statement();
 1016 e457:             ;    return;
 1017 e457: 0e 25           LDAI TOKENIZER_LINENUM
 1018 e459: 04 e0 dc        jsr exe_accept
 1019 e45c: 04 e3 d1        jsr exe_stmt
 1020 e45f: 05              ret
 1021 e460:             
 1022 e460:             ;
 1023 e460:             ; void ubasic_run()
 1024 e460:             ;
 1025 e460:             basic_run:
 1026 e460:             ;    mviw r7,000ah
 1027 e460:             ;    jsr basu_find
 1028 e460:             ;    jsr showr7
 1029 e460:             ;    mviw R7,CRLF
 1030 e460:             ;    jsr stringout
 1031 e460:             
 1032 e460:             ;    mviw r7,0014h
 1033 e460:             ;    jsr basu_find
 1034 e460:             ;    jsr showr7
 1035 e460:             ;    mviw R7,CRLF
 1036 e460:             ;    jsr stringout
 1037 e460:             
 1038 e460: 04 e0 ca        JSR exe_init
 1039 e463:             
 1040 e463:             ;    mviw r7,0080h
 1041 e463:             ;    jsr basu_find
 1042 e463:             ;    jsr showr7
 1043 e463:             ;    mviw R7,CRLF
 1044 e463:             ;    jsr stringout
 1045 e463:             exe_run:
 1046 e463: 04 e4 72        jsr exe_finished
 1047 e466: 0d 01           LDTI 1
 1048 e468: aa e4 6c        BRNEQ exe_run_cont
 1049 e46b: 05              ret
 1050 e46c:             
 1051 e46c:             exe_run_cont:
 1052 e46c: 04 e4 57        jsr exe_line_stmt
 1053 e46f: a0 e4 63        BR exe_run
 1054 e472:             
 1055 e472:             ;
 1056 e472:             ; int ubasic_finished()
 1057 e472:             ;
 1058 e472:             exe_finished:
 1059 e472: 1a 02 00        MVIW R2,bas_run_ended
 1060 e475: 42              LDAVR R2
 1061 e476: 0d 01           LDTI 1
 1062 e478: a8 e4 84        BREQ exe_finished_yes
 1063 e47b:             
 1064 e47b: 43              ldavr r3
 1065 e47c: 0d 01           ldti TOKENIZER_EOF
 1066 e47e: a8 e4 84        breq exe_finished_yes
 1067 e481: 0e 00           ldai 0
 1068 e483: 05              ret
 1069 e484:             
 1070 e484:             exe_finished_yes:
 1071 e484: 0e 01           LDAI 1
 1072 e486: 05              ret
 1073 e487:             
 1074 e487:             ;
 1075 e487:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1076 e487:             ;
 1077 e487:             ; R7 value (only using low byte)
 1078 e487:             ; ACCUMULATOR Variable ref number
 1079 e487:             ;
 1080 e487:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1081 e487:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1082 e487:             ;
 1083 e487:             exe_set_variable:
 1084 e487: 1a 01 00        MVIW R2,BASIC_VARS  ; SEE COMMENT below about memory alignment
 1085 e48a: b6              SHL                 ; memory location x 2 (2 byte vars)
 1086 e48b: 32              MVARL R2            ; change to add16 to remove align issue
 1087 e48c:             ;
 1088 e48c: 27              MVRLA R7
 1089 e48d: 4a              STAVR R2
 1090 e48e: 52              INCR r2
 1091 e48f: 2f              mvrha r7
 1092 e490: 4a              stavr r2
 1093 e491:             
 1094 e491: 05              RET
 1095 e492:             ;
 1096 e492:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1097 e492:             ;
 1098 e492:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1099 e492:             ;
 1100 e492:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1101 e492:             ; and only 0-25 (var names a-z) supported
 1102 e492:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1103 e492:             ;
 1104 e492:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1105 e492:             ;
 1106 e492:             exe_get_variable:
 1107 e492: 1a 01 00        MVIW R2,BASIC_VARS
 1108 e495: b6              shl
 1109 e496: 32              MVARL R2
 1110 e497:             ;
 1111 e497: 42              LDAVR R2
 1112 e498: 37              MVARL R7
 1113 e499: 52              INCR R2
 1114 e49a: 42              LDAVR R2
 1115 e49b: 3f              MVARH R7
 1116 e49c: 05              RET
 1117 e49d:             
 1118 e49d:             ;
 1119 e49d:             ; hack this needs work
 1120 e49d:             ;
 1121 e49d:             bas_error:
 1122 e49d: 03            HALT
 1123 e49e: 05            RET
 1124 e49f:             
 1125 e49f:             ;
 1126 e49f:             ; Tokenizer execute support code
 1127 e49f:             ;
 1128 e49f:             ; tokenizer_next - exe version
 1129 e49f:             ;
 1130 e49f:             exe_next_token:
 1131 e49f: 43            ldavr r3
 1132 e4a0: 0d 02         ldti TOKENIZER_NUMBER
 1133 e4a2: aa e4 a9      BRNEQ exe_next_token1
 1134 e4a5: 53            incr r3
 1135 e4a6: 53            incr r3
 1136 e4a7: 53            incr r3
 1137 e4a8: 05            RET
 1138 e4a9:             
 1139 e4a9:             exe_next_token1:
 1140 e4a9: 0d 04         ldti TOKENIZER_VARIABLE
 1141 e4ab: aa e4 b2      BRNEQ exe_next_token2
 1142 e4ae: 53            incr r3
 1143 e4af: 53            incr r3
 1144 e4b0: 53            incr r3
 1145 e4b1: 05            RET
 1146 e4b2:             
 1147 e4b2:             exe_next_token2:
 1148 e4b2: 0d 25         ldti TOKENIZER_LINENUM
 1149 e4b4: aa e4 bd      BRNEQ exe_next_token3
 1150 e4b7: 53            incr r3
 1151 e4b8: 53            incr r3
 1152 e4b9: 53            incr r3
 1153 e4ba: 53            incr r3
 1154 e4bb: 53            incr r3
 1155 e4bc: 05            RET
 1156 e4bd:             
 1157 e4bd:             exe_next_token3:
 1158 e4bd: 0d 03         ldti TOKENIZER_STRING
 1159 e4bf: aa e4 cd      BRNEQ exe_next_token4
 1160 e4c2: 53            incr r3
 1161 e4c3:             
 1162 e4c3:             exe_next_tok3_loop:
 1163 e4c3: 43            LDAVR R3
 1164 e4c4: a1 e4 cb      BRZ exe_next_tok3_done
 1165 e4c7: 53            incr r3
 1166 e4c8: a0 e4 c3      BR exe_next_tok3_loop
 1167 e4cb:             
 1168 e4cb:             exe_next_tok3_done:
 1169 e4cb: 53            incr r3
 1170 e4cc: 05            RET
 1171 e4cd:             
 1172 e4cd:             exe_next_token4:
 1173 e4cd: 53            incr r3
 1174 e4ce: 05            ret
 1175 e4cf:             
 1176 e4cf:             ;
 1177 e4cf:             ; numbers stored low byte followed by high byte in memory
 1178 e4cf:             ;
 1179 e4cf:             exe_num:
 1180 e4cf: 53              incr r3
 1181 e4d0: 43              ldavr r3
 1182 e4d1: 37              mvarl r7
 1183 e4d2: 53              incr r3
 1184 e4d3: 43              ldavr r3
 1185 e4d4: 3f              mvarh r7
 1186 e4d5: 5b              decr r3
 1187 e4d6: 5b              decr r3
 1188 e4d7: 05              ret
 1189 e4d8:             
 1190 e4d8:             ;
 1191 e4d8:             ; hack only using low byte of id for now
 1192 e4d8:             ; return in accumulator
 1193 e4d8:             ;
 1194 e4d8:             exe_variable_num:
 1195 e4d8: 53              incr r3
 1196 e4d9: 43              ldavr r3
 1197 e4da: 5b              decr r3
 1198 e4db: 05              ret
 1199 e4dc:             
 1200 e4dc:             ;exe_string:
 1201 e4dc:             ;    movrr r3,r7
 1202 e4dc:             ;    incr r7
 1203 e4dc:             ;    ret
 1204 e4dc:             
 1205 e4dc:             
 1206 e4dc:             ;
 1207 e4dc:             ; List out token buffer in human readable form
 1208 e4dc:             ;
 1209 e4dc:             ; list out token buffer
 1210 e4dc:             ; buffer address in r7
 1211 e4dc:             ;
 1212 e4dc: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1213 e4e1: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1214 e4e8: 49 46 20 00 tokl_if: DB "IF ",0
 1215 e4ec: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1216 e4f2: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1217 e4f8: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1218 e4fd: 54 4f 20 00 tokl_to: DB "TO ",0
 1219 e501: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1220 e507: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1221 e50d: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1222 e514: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1223 e51c: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1224 e521: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1225 e527: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1226 e52d: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1227 e532: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1228 e538: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1229 e543:             
 1230 e543:             
 1231 e543:             basic_list:
 1232 e543: 07 03           pushr r3
 1233 e545: 0f 37           movrr r7,r3
 1234 e547:             
 1235 e547:             
 1236 e547:             baslist_loop:
 1237 e547: 43              ldavr r3
 1238 e548:             
 1239 e548: 0d 00           LDTI TOKENIZER_ERROR
 1240 e54a: aa e5 5c        BRNEQ baslist1
 1241 e54d: 1f e5 38        MVIW R7,tokl_error
 1242 e550: 04 ff c0        JSR stringout
 1243 e553: 04 ff cc        JSR showaddr
 1244 e556: a0 e7 f2        BR baslist_done
 1245 e559: a0 e5 47        BR baslist_loop
 1246 e55c:             
 1247 e55c:             baslist1:
 1248 e55c: 0d 01           LDTI TOKENIZER_EOF
 1249 e55e: aa e5 67        BRNEQ baslist2
 1250 e561: a0 e7 f2        BR baslist_done
 1251 e564: a0 e5 47        BR baslist_loop
 1252 e567:             
 1253 e567:             baslist2:
 1254 e567: 0d 02           LDTI TOKENIZER_NUMBER
 1255 e569: aa e5 7e        BRNEQ baslist3
 1256 e56c: 53              incr r3
 1257 e56d: 43              ldavr r3
 1258 e56e: 37              mvarl r7
 1259 e56f: 53              incr r3
 1260 e570: 43              ldavr r3
 1261 e571: 3f              mvarh r7
 1262 e572: 53              INCR R3
 1263 e573: 04 ff d4        jsr showr7
 1264 e576: 0e 20           ldai ' '
 1265 e578: 04 ff c8        jsr uartout
 1266 e57b: a0 e5 47        BR baslist_loop
 1267 e57e:             
 1268 e57e:             baslist3:
 1269 e57e: 0d 03           LDTI TOKENIZER_STRING
 1270 e580: aa e5 9a        BRNEQ baslist4
 1271 e583: 53              incr r3
 1272 e584: 0f 73           movrr r3,r7
 1273 e586: 04 ff c0        jsr stringout
 1274 e589: 0e 20           ldai ' '
 1275 e58b: 04 ff c8        jsr uartout
 1276 e58e:             baslist_string:
 1277 e58e: 43              ldavr r3
 1278 e58f: a1 e5 96        brz baslist_stringend
 1279 e592: 53              incr r3
 1280 e593: a0 e5 8e        br baslist_string
 1281 e596:             baslist_stringend:
 1282 e596: 53              incr r3
 1283 e597: a0 e5 47        BR baslist_loop
 1284 e59a:             
 1285 e59a:             baslist4:
 1286 e59a: 0d 04           LDTI TOKENIZER_VARIABLE
 1287 e59c: aa e5 b1        BRNEQ baslist5
 1288 e59f: 53              incr r3
 1289 e5a0: 43              ldavr r3
 1290 e5a1: 0d 41           ldti 'A'
 1291 e5a3: b8              ADDT
 1292 e5a4: 53              incr r3
 1293 e5a5: 53              incr r3
 1294 e5a6: 04 ff c8        jsr uartout
 1295 e5a9:             
 1296 e5a9:             ;    ldavr r3
 1297 e5a9:             ;    mvarl r7
 1298 e5a9:             ;    incr r3
 1299 e5a9:             ;    ldavr r3
 1300 e5a9:             ;    mvarh r7
 1301 e5a9:             ;    INCR R3
 1302 e5a9:             ;    jsr showr7
 1303 e5a9:             
 1304 e5a9: 0e 20           ldai ' '
 1305 e5ab: 04 ff c8        jsr uartout
 1306 e5ae: a0 e5 47        BR baslist_loop
 1307 e5b1:             
 1308 e5b1:             baslist5:
 1309 e5b1: 0d 05           LDTI TOKENIZER_LET
 1310 e5b3: aa e5 c0        BRNEQ baslist6
 1311 e5b6: 1f e4 dc        MVIW R7,tokl_let
 1312 e5b9: 04 ff c0        JSR stringout
 1313 e5bc: 53              INCR R3
 1314 e5bd: a0 e5 47        BR baslist_loop
 1315 e5c0:             
 1316 e5c0:             baslist6:
 1317 e5c0: 0d 06           LDTI TOKENIZER_PRINT
 1318 e5c2: aa e5 cf        BRNEQ baslist7
 1319 e5c5: 1f e4 e1        MVIW R7,tokl_print
 1320 e5c8: 04 ff c0        jsr STRINGOUT
 1321 e5cb: 53              INCR R3
 1322 e5cc: a0 e5 47        BR baslist_loop
 1323 e5cf:             
 1324 e5cf:             baslist7:
 1325 e5cf: 0d 07           LDTI TOKENIZER_IF
 1326 e5d1: aa e5 de        BRNEQ baslist8
 1327 e5d4: 1f e4 e8        MVIW R7,tokl_if
 1328 e5d7: 04 ff c0        JSR stringout
 1329 e5da: 53              INCR R3
 1330 e5db: a0 e5 47        BR baslist_loop
 1331 e5de:             
 1332 e5de:             baslist8:
 1333 e5de: 0d 08           LDTI TOKENIZER_THEN
 1334 e5e0: aa e5 ed        BRNEQ baslist9
 1335 e5e3: 1f e4 ec        MVIW R7,tokl_then
 1336 e5e6: 04 ff c0        JSR stringout
 1337 e5e9: 53              INCR R3
 1338 e5ea: a0 e5 47        BR baslist_loop
 1339 e5ed:             
 1340 e5ed:             baslist9:
 1341 e5ed: 0d 09           LDTI TOKENIZER_ELSE
 1342 e5ef: aa e5 fc        BRNEQ baslist10
 1343 e5f2: 1f e4 f2        MVIW R7,tokl_else
 1344 e5f5: 04 ff c0        JSR stringout
 1345 e5f8: 53              INCR R3
 1346 e5f9: a0 e5 47        BR baslist_loop
 1347 e5fc:             
 1348 e5fc:             baslist10:
 1349 e5fc: 0d 0a           LDTI TOKENIZER_FOR
 1350 e5fe: aa e6 0b        BRNEQ baslist11
 1351 e601: 1f e4 f8        MVIW R7,tokl_for
 1352 e604: 04 ff c0        JSR stringout
 1353 e607: 53              INCR R3
 1354 e608: a0 e5 47        BR baslist_loop
 1355 e60b:             
 1356 e60b:             baslist11:
 1357 e60b: 0d 0b           LDTI TOKENIZER_TO
 1358 e60d: aa e6 1a        BRNEQ baslist12
 1359 e610: 1f e4 fd        MVIW R7,tokl_to
 1360 e613: 04 ff c0        JSR stringout
 1361 e616: 53              INCR R3
 1362 e617: a0 e5 47        BR baslist_loop
 1363 e61a:             
 1364 e61a:             baslist12:
 1365 e61a: 0d 0c           LDTI TOKENIZER_NEXT
 1366 e61c: aa e6 29        BRNEQ baslist13
 1367 e61f: 1f e5 01        MVIW R7,tokl_next
 1368 e622: 04 ff c0        JSR stringout
 1369 e625: 53              INCR R3
 1370 e626: a0 e5 47        BR baslist_loop
 1371 e629:             
 1372 e629:             baslist13:
 1373 e629: 0d 0d           LDTI TOKENIZER_GOTO
 1374 e62b: aa e6 38        BRNEQ baslist14
 1375 e62e: 1f e5 07        MVIW R7,tokl_goto
 1376 e631: 04 ff c0        JSR stringout
 1377 e634: 53              INCR R3
 1378 e635: a0 e5 47        BR baslist_loop
 1379 e638:             
 1380 e638:             baslist14:
 1381 e638: 0d 0e           LDTI TOKENIZER_GOSUB
 1382 e63a: aa e6 47        BRNEQ baslist15
 1383 e63d: 1f e5 0d        MVIW R7,tokl_gosub
 1384 e640: 04 ff c0        JSR stringout
 1385 e643: 53              INCR R3
 1386 e644: a0 e5 47        BR baslist_loop
 1387 e647:             
 1388 e647:             baslist15:
 1389 e647: 0d 0f           LDTI TOKENIZER_RETURN
 1390 e649: aa e6 56        BRNEQ baslist16
 1391 e64c: 1f e5 14        MVIW R7,tokl_return
 1392 e64f: 04 ff c0        JSR stringout
 1393 e652: 53              INCR R3
 1394 e653: a0 e5 47        BR baslist_loop
 1395 e656:             
 1396 e656:             baslist16:
 1397 e656: 0d 10           LDTI TOKENIZER_CALL
 1398 e658: aa e6 65        BRNEQ baslist17
 1399 e65b: 1f e5 32        MVIW R7,tokl_call
 1400 e65e: 04 ff c0        JSR stringout
 1401 e661: 53              INCR R3
 1402 e662: a0 e5 47        BR baslist_loop
 1403 e665:             
 1404 e665:             baslist17:
 1405 e665: 0d 11           LDTI TOKENIZER_REM
 1406 e667: aa e6 74        BRNEQ baslist18
 1407 e66a: 1f e5 1c        MVIW R7,tokl_rem
 1408 e66d: 04 ff c0        JSR stringout
 1409 e670: 53              INCR R3
 1410 e671: a0 e5 47        BR baslist_loop
 1411 e674:             
 1412 e674:             baslist18:
 1413 e674: 0d 12           LDTI TOKENIZER_PEEK
 1414 e676: aa e6 83        BRNEQ baslist19
 1415 e679: 1f e5 21        MVIW R7,tokl_peek
 1416 e67c: 04 ff c0        JSR stringout
 1417 e67f: 53              INCR R3
 1418 e680: a0 e5 47        BR baslist_loop
 1419 e683:             
 1420 e683:             baslist19:
 1421 e683: 0d 13           LDTI TOKENIZER_POKE
 1422 e685: aa e6 92        BRNEQ baslist20
 1423 e688: 1f e5 27        MVIW R7,tokl_poke
 1424 e68b: 04 ff c0        JSR stringout
 1425 e68e: 53              INCR R3
 1426 e68f: a0 e5 47        BR baslist_loop
 1427 e692:             
 1428 e692:             baslist20:
 1429 e692: 0d 14           LDTI TOKENIZER_END
 1430 e694: aa e6 a1        BRNEQ baslist21
 1431 e697: 1f e5 2d        MVIW R7,tokl_end
 1432 e69a: 04 ff c0        JSR stringout
 1433 e69d: 53              INCR R3
 1434 e69e: a0 e5 47        BR baslist_loop
 1435 e6a1:             
 1436 e6a1:             baslist21:
 1437 e6a1: 0d 15           LDTI TOKENIZER_COMMA
 1438 e6a3: aa e6 b4        BRNEQ baslist22
 1439 e6a6: 0e 2c           ldai ','
 1440 e6a8: 04 ff c8        jsr uartout
 1441 e6ab: 0e 20           ldai ' '
 1442 e6ad: 04 ff c8        jsr uartout
 1443 e6b0: 53              INCR R3
 1444 e6b1: a0 e5 47        BR baslist_loop
 1445 e6b4:             
 1446 e6b4:             baslist22:
 1447 e6b4: 0d 16           LDTI TOKENIZER_SEMICOLON
 1448 e6b6: aa e6 c7        BRNEQ baslist23
 1449 e6b9: 0e 3b           ldai ';'
 1450 e6bb: 04 ff c8        jsr uartout
 1451 e6be: 0e 20           ldai ' '
 1452 e6c0: 04 ff c8        jsr uartout
 1453 e6c3: 53              INCR R3
 1454 e6c4: a0 e5 47        BR baslist_loop
 1455 e6c7:             
 1456 e6c7:             baslist23:
 1457 e6c7: 0d 17           LDTI TOKENIZER_PLUS
 1458 e6c9: aa e6 da        BRNEQ baslist24
 1459 e6cc: 0e 2b           ldai '+'
 1460 e6ce: 04 ff c8        jsr uartout
 1461 e6d1: 0e 20           ldai ' '
 1462 e6d3: 04 ff c8        jsr uartout
 1463 e6d6: 53              INCR R3
 1464 e6d7: a0 e5 47        BR baslist_loop
 1465 e6da:             
 1466 e6da:             baslist24:
 1467 e6da: 0d 18           LDTI TOKENIZER_MINUS
 1468 e6dc: aa e6 ed        BRNEQ baslist25
 1469 e6df: 0e 2d           ldai '-'
 1470 e6e1: 04 ff c8        jsr uartout
 1471 e6e4: 0e 20           ldai ' '
 1472 e6e6: 04 ff c8        jsr uartout
 1473 e6e9: 53              INCR R3
 1474 e6ea: a0 e5 47        BR baslist_loop
 1475 e6ed:             
 1476 e6ed:             baslist25:
 1477 e6ed: 0d 19           LDTI TOKENIZER_AND
 1478 e6ef: aa e7 00        BRNEQ baslist26
 1479 e6f2: 0e 26           ldai '&'
 1480 e6f4: 04 ff c8        jsr uartout
 1481 e6f7: 0e 20           ldai ' '
 1482 e6f9: 04 ff c8        jsr uartout
 1483 e6fc: 53              INCR R3
 1484 e6fd: a0 e5 47        BR baslist_loop
 1485 e700:             
 1486 e700:             baslist26:
 1487 e700: 0d 1a           LDTI TOKENIZER_OR
 1488 e702: aa e7 13        BRNEQ baslist27
 1489 e705: 0e 7c           ldai '|'
 1490 e707: 04 ff c8        jsr uartout
 1491 e70a: 0e 20           ldai ' '
 1492 e70c: 04 ff c8        jsr uartout
 1493 e70f: 53              INCR R3
 1494 e710: a0 e5 47        BR baslist_loop
 1495 e713:             
 1496 e713:             baslist27:
 1497 e713: 0d 1b           LDTI TOKENIZER_ASTR
 1498 e715: aa e7 26        BRNEQ baslist28
 1499 e718: 0e 2a           ldai '*'
 1500 e71a: 04 ff c8        jsr uartout
 1501 e71d: 0e 20           ldai ' '
 1502 e71f: 04 ff c8        jsr uartout
 1503 e722: 53              INCR R3
 1504 e723: a0 e5 47        BR baslist_loop
 1505 e726:             
 1506 e726:             baslist28:
 1507 e726: 0d 1c           LDTI TOKENIZER_SLASH
 1508 e728: aa e7 39        BRNEQ baslist29
 1509 e72b: 0e 2f           ldai '/'
 1510 e72d: 04 ff c8        jsr uartout
 1511 e730: 0e 20           ldai ' '
 1512 e732: 04 ff c8        jsr uartout
 1513 e735: 53              INCR R3
 1514 e736: a0 e5 47        BR baslist_loop
 1515 e739:             
 1516 e739:             baslist29:
 1517 e739: 0d 1d           LDTI TOKENIZER_MOD
 1518 e73b: aa e7 4c        BRNEQ baslist30
 1519 e73e: 0e 25           ldai '%'
 1520 e740: 04 ff c8        jsr uartout
 1521 e743: 0e 20           ldai ' '
 1522 e745: 04 ff c8        jsr uartout
 1523 e748: 53              INCR R3
 1524 e749: a0 e5 47        BR baslist_loop
 1525 e74c:             
 1526 e74c:             baslist30:
 1527 e74c: 0d 1e           LDTI TOKENIZER_HASH
 1528 e74e: aa e7 5f        BRNEQ baslist31
 1529 e751: 0e 23           ldai '#'
 1530 e753: 04 ff c8        jsr uartout
 1531 e756: 0e 20           ldai ' '
 1532 e758: 04 ff c8        jsr uartout
 1533 e75b: 53              INCR R3
 1534 e75c: a0 e5 47        BR baslist_loop
 1535 e75f:             
 1536 e75f:             baslist31:
 1537 e75f: 0d 1f           LDTI TOKENIZER_LEFTP
 1538 e761: aa e7 72        BRNEQ baslist32
 1539 e764: 0e 28           ldai '()'
 1540 e766: 04 ff c8        jsr uartout
 1541 e769: 0e 20           ldai ' '
 1542 e76b: 04 ff c8        jsr uartout
 1543 e76e: 53              INCR R3
 1544 e76f: a0 e5 47        BR baslist_loop
 1545 e772:             
 1546 e772:             baslist32:
 1547 e772: 0d 20           LDTI TOKENIZER_RIGHTP
 1548 e774: aa e7 85        BRNEQ baslist33
 1549 e777: 0e 29           ldai ')'
 1550 e779: 04 ff c8        jsr uartout
 1551 e77c: 0e 20           ldai ' '
 1552 e77e: 04 ff c8        jsr uartout
 1553 e781: 53              INCR R3
 1554 e782: a0 e5 47        BR baslist_loop
 1555 e785:             
 1556 e785:             baslist33:
 1557 e785: 0d 21           LDTI TOKENIZER_LT
 1558 e787: aa e7 98        BRNEQ baslist34
 1559 e78a: 0e 3c           ldai '<'
 1560 e78c: 04 ff c8        jsr uartout
 1561 e78f: 0e 20           ldai ' '
 1562 e791: 04 ff c8        jsr uartout
 1563 e794: 53              INCR R3
 1564 e795: a0 e5 47        BR baslist_loop
 1565 e798:             
 1566 e798:             baslist34:
 1567 e798: 0d 22           LDTI TOKENIZER_GT
 1568 e79a: aa e7 ab        BRNEQ baslist35
 1569 e79d: 0e 3e           ldai '>'
 1570 e79f: 04 ff c8        jsr uartout
 1571 e7a2: 0e 20           ldai ' '
 1572 e7a4: 04 ff c8        jsr uartout
 1573 e7a7: 53              INCR R3
 1574 e7a8: a0 e5 47        BR baslist_loop
 1575 e7ab:             
 1576 e7ab:             baslist35:
 1577 e7ab: 0d 23           LDTI TOKENIZER_EQ
 1578 e7ad: aa e7 be        BRNEQ baslist36
 1579 e7b0: 0e 3d           ldai '='
 1580 e7b2: 04 ff c8        jsr uartout
 1581 e7b5: 0e 20           ldai ' '
 1582 e7b7: 04 ff c8        jsr uartout
 1583 e7ba: 53              INCR R3
 1584 e7bb: a0 e5 47        BR baslist_loop
 1585 e7be:             
 1586 e7be:             baslist36:
 1587 e7be: 0d 24           LDTI TOKENIZER_CR
 1588 e7c0: aa e7 cd        BRNEQ baslist37
 1589 e7c3: 1f ec ab        mviw R7,CRLF
 1590 e7c6: 04 ff c0        jsr stringout
 1591 e7c9: 53              INCR R3
 1592 e7ca: a0 e5 47        BR baslist_loop
 1593 e7cd:             
 1594 e7cd:             baslist37:
 1595 e7cd: 0d 25           LDTI TOKENIZER_LINENUM
 1596 e7cf: aa e7 e6        BRNEQ baslist38
 1597 e7d2: 53              incr r3
 1598 e7d3: 43              ldavr r3
 1599 e7d4: 37              mvarl r7
 1600 e7d5: 53              incr r3
 1601 e7d6: 43              ldavr r3
 1602 e7d7: 3f              mvarh r7
 1603 e7d8: 53              INCR R3
 1604 e7d9: 53              incr r3
 1605 e7da: 53              incr r3
 1606 e7db: 04 ff d4        jsr showr7
 1607 e7de: 0e 20           ldai ' '
 1608 e7e0: 04 ff c8        jsr uartout
 1609 e7e3: a0 e5 47        BR baslist_loop
 1610 e7e6:             
 1611 e7e6:             baslist38:
 1612 e7e6: 1f e5 38        MVIW R7,tokl_error
 1613 e7e9: 04 ff c0        JSR stringout
 1614 e7ec: 04 ff cc        JSR showaddr
 1615 e7ef: a0 e7 f2        BR baslist_done
 1616 e7f2:             ;
 1617 e7f2:             ; any cleanup
 1618 e7f2:             ;
 1619 e7f2:             baslist_done:
 1620 e7f2: 08 30           popr r3
 1621 e7f4: 05              ret
 1622 e7f5:             
 1623 e7f5:             ;
 1624 e7f5:             ; Basic Interpreter Parser
 1625 e7f5:             ;
 1626 e7f5:             parse_keywords:
 1627 e7f5: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1628 e7fa: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1629 e801: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1630 e805: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1631 e80b: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1632 e811: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1633 e816: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1634 e81a: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1635 e820: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1636 e826: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1637 e82d: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1638 e835: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1639 e83b: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1640 e840: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1641 e846: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1642 e84c: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1643 e851: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1644 e854:             
 1645 e854:             ;
 1646 e854:             ; int singlechar (void)
 1647 e854:             ;
 1648 e854:             ; return TOKEN result in accumulator
 1649 e854:             ;
 1650 e854:             ; ready for testing
 1651 e854:             ;
 1652 e854:             parse_singlechar:
 1653 e854:             ;
 1654 e854: 07 03           pushr r3
 1655 e856: f3 02 02        LDR r3,bas_txtptr
 1656 e859: 43              ldavr r3
 1657 e85a: 08 30           popr r3
 1658 e85c:             ;
 1659 e85c: 0d 0a           ldti 0ah
 1660 e85e: aa e8 64        brneq parsechar1
 1661 e861: 0e 24           ldai TOKENIZER_CR
 1662 e863: 05              ret
 1663 e864:             parsechar1:
 1664 e864: 0d 2c           ldti ','
 1665 e866: aa e8 6c        brneq parsechar2
 1666 e869: 0e 15           ldai TOKENIZER_COMMA
 1667 e86b: 05              ret
 1668 e86c:             parsechar2:
 1669 e86c: 0d 3b           ldti ';'
 1670 e86e: aa e8 74        brneq parsechar3
 1671 e871: 0e 16           ldai TOKENIZER_SEMICOLON
 1672 e873: 05              ret
 1673 e874:             parsechar3:
 1674 e874: 0d 2b           ldti '+'
 1675 e876: aa e8 7c        brneq parsechar4
 1676 e879: 0e 17           ldai TOKENIZER_PLUS
 1677 e87b: 05              ret
 1678 e87c:             parsechar4:
 1679 e87c: 0d 2d           ldti '-'
 1680 e87e: aa e8 84        brneq parsechar5
 1681 e881: 0e 18           ldai TOKENIZER_MINUS
 1682 e883: 05              ret
 1683 e884:             parsechar5:
 1684 e884: 0d 26           ldti '&'
 1685 e886: aa e8 8c        brneq parsechar6
 1686 e889: 0e 19           ldai TOKENIZER_AND
 1687 e88b: 05              ret
 1688 e88c:             parsechar6:
 1689 e88c: 0d 7c           ldti '|'
 1690 e88e: aa e8 94        brneq parsechar7
 1691 e891: 0e 1a           ldai TOKENIZER_OR
 1692 e893: 05              ret
 1693 e894:             parsechar7:
 1694 e894: 0d 2a           ldti '*'
 1695 e896: aa e8 9c        brneq parsechar8
 1696 e899: 0e 1b           ldai TOKENIZER_ASTR
 1697 e89b: 05              ret
 1698 e89c:             parsechar8:
 1699 e89c: 0d 25           ldti '%'
 1700 e89e: aa e8 a4        brneq parsechar9
 1701 e8a1: 0e 1d           ldai TOKENIZER_MOD
 1702 e8a3: 05              ret
 1703 e8a4:             parsechar9:
 1704 e8a4: 0d 28           ldti '('
 1705 e8a6: aa e8 ac        brneq parsechar10
 1706 e8a9: 0e 1f           ldai TOKENIZER_LEFTP
 1707 e8ab: 05              ret
 1708 e8ac:             parsechar10:
 1709 e8ac: 0d 23           ldti '#'
 1710 e8ae: aa e8 b4        brneq parsechar11
 1711 e8b1: 0e 1e           ldai TOKENIZER_HASH
 1712 e8b3: 05              ret
 1713 e8b4:             parsechar11:
 1714 e8b4: 0d 29           ldti ')'
 1715 e8b6: aa e8 bc        brneq parsechar12
 1716 e8b9: 0e 20           ldai TOKENIZER_RIGHTP
 1717 e8bb: 05              ret
 1718 e8bc:             parsechar12:
 1719 e8bc: 0d 3c           ldti '<'
 1720 e8be: aa e8 c4        brneq parsechar13
 1721 e8c1: 0e 21           ldai TOKENIZER_LT
 1722 e8c3: 05              ret
 1723 e8c4:             parsechar13:
 1724 e8c4: 0d 3e           ldti '>'
 1725 e8c6: aa e8 cc        brneq parsechar14
 1726 e8c9: 0e 22           ldai TOKENIZER_GT
 1727 e8cb: 05              ret
 1728 e8cc:             parsechar14:
 1729 e8cc: 03              HALT
 1730 e8cd: 0d 3d           ldti '='
 1731 e8cf: aa e8 d5        brneq parsechar15
 1732 e8d2: 0e 23           ldai TOKENIZER_EQ
 1733 e8d4: 05              ret
 1734 e8d5:             parsechar15:
 1735 e8d5: 0e 00           ldai 0
 1736 e8d7: 05              ret
 1737 e8d8:             
 1738 e8d8:             ;
 1739 e8d8:             ; int get_next_token(void)
 1740 e8d8:             ;
 1741 e8d8:             ; under development fix ptr nextptr
 1742 e8d8:             
 1743 e8d8:             parse_get_next_tok:
 1744 e8d8: 07 03           pushr r3
 1745 e8da: f3 02 02        LDR R3,bas_txtptr
 1746 e8dd:             ;
 1747 e8dd:             ; is digit
 1748 e8dd:             ;
 1749 e8dd:             ; chcek for number
 1750 e8dd:             ;
 1751 e8dd:             parse_gnt1:
 1752 e8dd: 43              ldavr r3
 1753 e8de: 04 ec 7a        jsr parse_isdigit
 1754 e8e1: a1 e8 f4        brz parse_gnt2
 1755 e8e4:             parse_gnt1loop:
 1756 e8e4: 53              incr R3
 1757 e8e5: 43              ldavr r3
 1758 e8e6: 04 ec 7a        jsr parse_isdigit
 1759 e8e9: a2 e8 e4        brnz parse_gnt1loop
 1760 e8ec: fb 02 04        STR r3,bas_nxtptr
 1761 e8ef: 0e 02           ldai TOKENIZER_NUMBER
 1762 e8f1: 08 30           popr r3
 1763 e8f3: 05              ret
 1764 e8f4:             ;
 1765 e8f4:             ; singlechar
 1766 e8f4:             ;
 1767 e8f4:             parse_gnt2:
 1768 e8f4: 43             ldavr r3
 1769 e8f5: 04 e8 54       jsr parse_singlechar
 1770 e8f8: a1 e9 02       BRZ parse_gnt3
 1771 e8fb: 53             incr r3
 1772 e8fc: fb 02 04       STR r3,bas_nxtptr
 1773 e8ff: 08 30          popr r3
 1774 e901: 05             ret
 1775 e902:             ;
 1776 e902:             ; quote
 1777 e902:             ;
 1778 e902:             parse_gnt3:
 1779 e902: 43              ldavr R3
 1780 e903: 0d 22           ldti '"'
 1781 e905: aa e9 18        brneq parse_gnt4
 1782 e908:             parse_gnt3loop:
 1783 e908: 53              incr r3
 1784 e909: 43              ldavr R3
 1785 e90a: 0d 22           ldti '"'
 1786 e90c: aa e9 08        brneq parse_gnt3loop
 1787 e90f: 53              incr r3
 1788 e910: fb 02 04        STR r3,bas_nxtptr
 1789 e913: 0e 03           ldai TOKENIZER_STRING
 1790 e915: 08 30           popr r3
 1791 e917: 05              ret
 1792 e918:             ;
 1793 e918:             parse_gnt4:
 1794 e918:             ;
 1795 e918:             ; keyword search
 1796 e918:             ;
 1797 e918: 07 04           pushr r4
 1798 e91a: 1c e7 f5        mviw r4,parse_keywords
 1799 e91d:             top:
 1800 e91d: 44              ldavr r4
 1801 e91e: f3 02 02        LDR r3,bas_txtptr
 1802 e921: a1 e9 45        brz nokeyowrdsfound  
 1803 e924:             pcmploop:
 1804 e924: 44              ldavr r4
 1805 e925: a1 e9 3b        brz found
 1806 e928: 0b              MVAT
 1807 e929: 43              ldavr r3
 1808 e92a: aa e9 32        brneq skiptoend
 1809 e92d: 54              incr r4
 1810 e92e: 53              incr r3
 1811 e92f: a0 e9 24        br pcmploop
 1812 e932:             
 1813 e932:             skiptoend:
 1814 e932:             ;  skip to end of string and skip over token
 1815 e932:             skiploop:
 1816 e932: 44              ldavr r4
 1817 e933: 54              incr r4
 1818 e934: a2 e9 32        brnz skiploop
 1819 e937: 54              incr r4
 1820 e938: a0 e9 1d        br top
 1821 e93b:             
 1822 e93b:             found:
 1823 e93b: fb 02 04        str r3,bas_nxtptr
 1824 e93e: 54              incr r4
 1825 e93f: 44              ldavr r4
 1826 e940: 08 40           popr r4
 1827 e942: 08 30           popr r3
 1828 e944: 05              ret
 1829 e945:             
 1830 e945:             nokeyowrdsfound:
 1831 e945: 08 40           popr r4
 1832 e947:             ;
 1833 e947:             ;  check for variables
 1834 e947:             ;
 1835 e947: 03              halt
 1836 e948: 43              ldavr r3
 1837 e949: 0d 41           ldti 'A'
 1838 e94b: a7 e9 5c        BRLT parse_gnt_error
 1839 e94e: 0d 5a           ldti 'Z'
 1840 e950: a9 e9 5c        BRGT parse_gnt_error
 1841 e953: 53              INCR r3
 1842 e954: fb 02 04        str r3,bas_nxtptr
 1843 e957: 0e 04           LDAI tokenizer_variable
 1844 e959: 08 30           popr r3
 1845 e95b: 05              RET
 1846 e95c:             
 1847 e95c:             parse_gnt_error:
 1848 e95c: 03              halt
 1849 e95d: 0e 00           ldai tokenizer_error
 1850 e95f: 08 30           popr r3
 1851 e961: 05              ret
 1852 e962:             
 1853 e962:             ;
 1854 e962:             ; void TOKENIZER_GOTO (char * program)
 1855 e962:             ;
 1856 e962:             ; under development, may not be needed
 1857 e962:             ;
 1858 e962:             ;parse_goto:
 1859 e962:             ;    str r3,bas_txtptr
 1860 e962:             ;    jsr parse_get_next_tok
 1861 e962:             ;    sta bas_currenttoken
 1862 e962:             ;    ret
 1863 e962:             
 1864 e962:             ;
 1865 e962:             ; void tokenizer_init(int ptr)
 1866 e962:             ;
 1867 e962:             ; under development
 1868 e962:             ;
 1869 e962:             parse_init:
 1870 e962:             
 1871 e962: 07 03           pushr r3
 1872 e964: ff 02 02        STR R7,bas_txtptr
 1873 e967: 1b 04 00        MVIW r3,parse_token_buffer
 1874 e96a: fb 02 06        STR  R3,bas_tokptr
 1875 e96d: 1b 00 00        mviw r3,0
 1876 e970: fb 02 08        str r3,bas_tokcounter
 1877 e973: 04 e8 d8        jsr parse_get_next_tok
 1878 e976: ed 02 0a        sta bas_currenttoken
 1879 e979: 08 30           popr r3
 1880 e97b:             ;    halt
 1881 e97b: 05              ret
 1882 e97c:             
 1883 e97c:             ;
 1884 e97c:             ; int tokenizer_token(void)
 1885 e97c:             :
 1886 e97c:             parse_token:
 1887 e97c: ec 02 0a        lda bas_currenttoken
 1888 e97f: 05              ret
 1889 e980:             
 1890 e980:             ;
 1891 e980:             ; void tokenizer_next(void) parser version
 1892 e980:             ;
 1893 e980:             parse_next:
 1894 e980:             ;    halt
 1895 e980: 04 ea 65        jsr parse_finished
 1896 e983: a1 e9 87        brz parse_next1
 1897 e986: 05              ret
 1898 e987:             
 1899 e987:             parse_next1:
 1900 e987: 07 03           pushr r3
 1901 e989: f3 02 04        ldr r3,bas_nxtptr
 1902 e98c: fb 02 02        str r3,bas_txtptr
 1903 e98f:             
 1904 e98f:             parse_next1loop:
 1905 e98f: 43              ldavr r3
 1906 e990: 0d 20           ldti ' '
 1907 e992: aa e9 99        brneq parse_next2
 1908 e995: 53              incr r3
 1909 e996: a0 e9 8f        br parse_next1loop
 1910 e999:             
 1911 e999:             
 1912 e999:             parse_next2:
 1913 e999: fb 02 02        str r3,bas_txtptr
 1914 e99c: 04 e8 d8        jsr parse_get_next_tok
 1915 e99f: ed 02 0a        sta bas_currenttoken
 1916 e9a2:             
 1917 e9a2: 0d 11           ldti TOKENIZER_REM
 1918 e9a4: a8 e9 aa        breq parse_next3
 1919 e9a7: 08 30           popr r3
 1920 e9a9: 05              ret
 1921 e9aa:             
 1922 e9aa:             ;
 1923 e9aa:             ; this needs to be fixed
 1924 e9aa:             ; if rem return to parsel line then copy into token buffer
 1925 e9aa:             ;
 1926 e9aa:             parse_next3:
 1927 e9aa: 04 ea 65        JSR parse_finished
 1928 e9ad: a2 e9 ba        BRNZ parse_nextdone
 1929 e9b0: 43              ldavr r3
 1930 e9b1: 0d 0a           ldti  0ah
 1931 e9b3: a8 e9 ba        breq parse_nextdone
 1932 e9b6: 53              incr r3
 1933 e9b7: a0 e9 aa        br parse_next3
 1934 e9ba:             
 1935 e9ba:             parse_nextdone:
 1936 e9ba: 43              ldavr r3
 1937 e9bb: 0d 0a           ldti  0ah
 1938 e9bd: aa e9 c1        brneq parse_nextdone2
 1939 e9c0: 53              incr r3
 1940 e9c1:             
 1941 e9c1:             parse_nextdone2:
 1942 e9c1: fb 02 04        str r3,bas_nxtptr
 1943 e9c4: 04 e9 80        jsr parse_next
 1944 e9c7: 08 30           popr r3
 1945 e9c9: 05              ret
 1946 e9ca:             
 1947 e9ca:             ;
 1948 e9ca:             ; VARIABLE_TYPE tokenizer_num(void)
 1949 e9ca:             ;
 1950 e9ca:             ; Hack for now input characters are ascii hex format HHHH
 1951 e9ca:             ;
 1952 e9ca:             ; value returned in R7
 1953 e9ca:             ;
 1954 e9ca:             ; Should this advance the line ptr?
 1955 e9ca:             ;
 1956 e9ca:             
 1957 e9ca:             parse_num:
 1958 e9ca: 07 03           pushr r3
 1959 e9cc: 07 04           pushr r4
 1960 e9ce: 07 05           pushr r5
 1961 e9d0: 07 06           pushr r6
 1962 e9d2: 1e 00 00        mviw r6,0           ;accumlate val in r6
 1963 e9d5: f3 02 02        LDR r3,bas_txtptr
 1964 e9d8: 04 ea 06        jsr parse_num_char
 1965 e9db:             ;   jsr SHOWBYTEA
 1966 e9db: 36              mvarl r6
 1967 e9dc:             parse_num_loop:
 1968 e9dc: 04 ea 06        jsr parse_num_char
 1969 e9df:             ;   jsr showbytea
 1970 e9df: 09              push
 1971 e9e0: 0d ff           ldti 0FFH
 1972 e9e2: a8 e9 fa        breq parse_num_done
 1973 e9e5:             
 1974 e9e5: 0f 56           movrr r6,r5
 1975 e9e7: 1c 00 0a        mviw r4,0ah
 1976 e9ea: 04 ec 0a        jsr parse_mul16
 1977 e9ed:             ;    jsr showr7
 1978 e9ed: 0a              pop
 1979 e9ee: 1e 00 00        mviw r6,0
 1980 e9f1: 36              mvarl r6
 1981 e9f2: 04 ec 45        jsr parse_add16
 1982 e9f5: 0f 67           movrr r7,r6
 1983 e9f7:             ;    jsr showr7
 1984 e9f7: a0 e9 dc        br parse_num_loop
 1985 e9fa:             parse_num_done:
 1986 e9fa: 0a              pop
 1987 e9fb: 0f 76           movrr r6,r7
 1988 e9fd: 08 60           popr r6
 1989 e9ff: 08 50           popr r5
 1990 ea01: 08 40           popr r4
 1991 ea03: 08 30           popr r3
 1992 ea05:             ;    jsr showr7
 1993 ea05: 05              ret
 1994 ea06:             
 1995 ea06:             parse_num_char:
 1996 ea06: 43              LDAVR R3
 1997 ea07: 04 ec 7a        JSR parse_isdigit
 1998 ea0a: a2 ea 10        BRNZ parse_num_char1
 1999 ea0d: 0e ff           ldai 0ffh
 2000 ea0f: 05              ret
 2001 ea10:             parse_num_char1:
 2002 ea10: 43              ldavr r3
 2003 ea11: b1 30           SUBI '0'
 2004 ea13: 53              incr r3
 2005 ea14: 05              RET
 2006 ea15:             
 2007 ea15:             parse_num_old:
 2008 ea15: 07 03           pushr r3
 2009 ea17: f3 02 02        LDR r3,bas_txtptr
 2010 ea1a: 04 ea 43        JSR parse_getnibble
 2011 ea1d: b6              SHL
 2012 ea1e: b6              SHL
 2013 ea1f: b6              SHL
 2014 ea20: b6              SHL
 2015 ea21: b3 f0           ANDI 0f0h
 2016 ea23: 09              Push
 2017 ea24: 04 ea 43        JSR parse_getnibble
 2018 ea27: b3 0f           ANDI 0FH
 2019 ea29: 0b              MVAT
 2020 ea2a: 0a              Pop
 2021 ea2b: ba              ORT
 2022 ea2c: 3f              MVARH R7
 2023 ea2d:             
 2024 ea2d: 04 ea 43        JSR parse_getnibble
 2025 ea30: b6              SHL
 2026 ea31: b6              shl
 2027 ea32: b6              shl
 2028 ea33: b6              shl
 2029 ea34: b3 f0           ANDI 0f0h
 2030 ea36: 09              push
 2031 ea37: 04 ea 43        JSR parse_getnibble
 2032 ea3a: b3 0f           ANDI 0FH
 2033 ea3c: 0b              MVAT
 2034 ea3d: 0a              pop
 2035 ea3e: ba              ORT
 2036 ea3f: 37              MVARL R7
 2037 ea40: 08 30           popr r3
 2038 ea42: 05              RET
 2039 ea43:             
 2040 ea43:             ;
 2041 ea43:             ; add error checking
 2042 ea43:             ;
 2043 ea43:             ; return hex nibble in accumulator
 2044 ea43:             ;
 2045 ea43:             parse_getnibble:
 2046 ea43: 43                LDAVR R3
 2047 ea44: 53                incr r3
 2048 ea45: 0d 39             LDTI '9'
 2049 ea47: a9 ea 4d          BRGT parse_af
 2050 ea4a: b1 30             SUBI '0'
 2051 ea4c: 05                RET
 2052 ea4d:             parse_af:
 2053 ea4d: 04 ff d0          JSR toupper
 2054 ea50: b1 41             SUBI 'A'
 2055 ea52: b0 0a             ADDI 10
 2056 ea54: 05                RET
 2057 ea55:             ;
 2058 ea55:             ; void tokenizer_string(char *dest, int len)
 2059 ea55:             ;
 2060 ea55:             ; not used, in line parse_line
 2061 ea55:             ;
 2062 ea55:             parse_string:
 2063 ea55: 04 e9 7c        JSR parse_token
 2064 ea58: 0d 03           LDTI TOKENIZER_STRING
 2065 ea5a: a8 ea 5e        BREQ parse_string1
 2066 ea5d: 05              ret
 2067 ea5e:             
 2068 ea5e:             parse_string1:
 2069 ea5e: 07 03           pushr r3
 2070 ea60: f3 02 02        LDR r3,bas_txtptr
 2071 ea63: 43              LDAVR R3
 2072 ea64:             
 2073 ea64:             
 2074 ea64:             ;
 2075 ea64:             ; void tokenizer_error_print(void)
 2076 ea64:             ;
 2077 ea64:             ; fix
 2078 ea64:             ;
 2079 ea64:             parse_error_print:
 2080 ea64: 03              halt
 2081 ea65:             
 2082 ea65:             ;
 2083 ea65:             ; int tokenizer_finished(void)
 2084 ea65:             ;
 2085 ea65:             parse_finished:
 2086 ea65: 07 03           pushr r3
 2087 ea67: f3 02 02        LDR r3,bas_txtptr
 2088 ea6a: 43              ldavr r3
 2089 ea6b: a1 ea 80        brz parse_finished_yes
 2090 ea6e:             ;    ldti 0ah
 2091 ea6e:             ;    breq parse_finished_yes
 2092 ea6e:             ;    ldti 0dh
 2093 ea6e:             ;    breq parse_finished_yes
 2094 ea6e: 0d 01           ldti TOKENIZER_EOF
 2095 ea70: a8 ea 80        breq parse_finished_yes
 2096 ea73: ec 02 0a        lda bas_currenttoken
 2097 ea76: 0d 01           ldti TOKENIZER_EOF
 2098 ea78: a8 ea 80        breq parse_finished_yes
 2099 ea7b: 08 30           popr r3
 2100 ea7d: 0e 00           ldai 0
 2101 ea7f: 05              ret
 2102 ea80:             parse_finished_yes:
 2103 ea80: 0e 01           ldai 1
 2104 ea82: 08 30           popr r3
 2105 ea84: 05              ret
 2106 ea85:             
 2107 ea85:             ;
 2108 ea85:             ; int tokenizer_variable_num(void)
 2109 ea85:             ;
 2110 ea85:             parse_variable_num:
 2111 ea85: 07 03             pushr r3
 2112 ea87: f3 02 02          LDR r3,bas_txtptr
 2113 ea8a: 43                ldavr r3
 2114 ea8b: b1 41             subi 'A'
 2115 ea8d: 37                mvarl r7
 2116 ea8e: 0e 00             ldai 0
 2117 ea90: 3f                mvarh r7
 2118 ea91: 08 30             popr r3
 2119 ea93: 05                ret
 2120 ea94:             
 2121 ea94:             ;
 2122 ea94:             ; char *const tokenizer_pos(void)
 2123 ea94:             ;
 2124 ea94:             ; probably not used
 2125 ea94:             parse_pos:
 2126 ea94:             
 2127 ea94:             ;not used old
 2128 ea94:             ; char *tokenize(char *program)
 2129 ea94:             ;
 2130 ea94:             ; parse:
 2131 ea94:             
 2132 ea94:             ;
 2133 ea94:             ; char *tokenizeLine(char *line)
 2134 ea94:             ;
 2135 ea94:             ; assume input text string in parse_input_line
 2136 ea94:             ;
 2137 ea94:             
 2138 ea94:             parse_line:
 2139 ea94:             ;    halt
 2140 ea94: 04 e9 62        JSR PARSE_INIT
 2141 ea97:             ;    halt
 2142 ea97: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2143 ea9a: fb 02 08        str r3,bas_tokcounter
 2144 ea9d: 1b 04 00        MVIW R3,parse_token_buffer
 2145 eaa0:             
 2146 eaa0: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2147 eaa2: 4b              STAVR R3
 2148 eaa3: 53              INCR R3
 2149 eaa4:             
 2150 eaa4: 04 e9 ca        JSR parse_num           ;store line number
 2151 eaa7:             ;    HALT
 2152 eaa7: ff 02 10        str r7,bas_newlinenum
 2153 eaaa: 27              mvrla r7
 2154 eaab: 4b              stavr r3
 2155 eaac: 53              incr r3
 2156 eaad: 2f              mvrha r7
 2157 eaae: 4b              stavr r3
 2158 eaaf: 53              incr r3
 2159 eab0:             
 2160 eab0: 53              incr r3                ; skip over line length - fill in later
 2161 eab1: 53              incr r3
 2162 eab2:             ;   halt
 2163 eab2:             
 2164 eab2:             parse_line_loop:
 2165 eab2: 04 e9 80        JSR parse_next
 2166 eab5: 04 e9 7c        JSR parse_token
 2167 eab8: 0d 24           ldti TOKENIZER_CR
 2168 eaba: a8 eb 29        BREQ parse_line_done
 2169 eabd:             ;    halt
 2170 eabd:             
 2171 eabd: 4b              STAVR R3
 2172 eabe: 53              INCR R3
 2173 eabf: f5 02 08        ldr r5,bas_tokcounter
 2174 eac2: 55              incr r5
 2175 eac3: fd 02 08        str r5,bas_tokcounter
 2176 eac6:             
 2177 eac6: 0d 02           ldti TOKENIZER_NUMBER
 2178 eac8: aa ea df        BRNEQ parse_line1
 2179 eacb: 04 e9 ca        JSR parse_num
 2180 eace: 27              mvrla r7
 2181 eacf: 4b              stavr r3
 2182 ead0: 53              incr r3
 2183 ead1: 2f              mvrha r7
 2184 ead2: 4b              stavr r3
 2185 ead3: 53              incr r3
 2186 ead4: f5 02 08        ldr r5,bas_tokcounter
 2187 ead7: 55              incr r5
 2188 ead8: 55              incr r5
 2189 ead9: fd 02 08        str r5,bas_tokcounter
 2190 eadc: a0 ea b2        BR parse_line_loop
 2191 eadf:             
 2192 eadf:             parse_line1:
 2193 eadf: 0d 03           ldti TOKENIZER_STRING
 2194 eae1: aa eb 10        BRNEQ parse_line2
 2195 eae4: f4 02 02        ldr r4,bas_txtptr
 2196 eae7: 54              incr r4                   ;skip over opening "
 2197 eae8:             
 2198 eae8:             parse_line1loop:
 2199 eae8: 44              ldavr r4
 2200 eae9: 0d 22           ldti '"'
 2201 eaeb: a8 ea fb        breq parse_line1done
 2202 eaee: 4b              stavr r3
 2203 eaef: 53              incr r3
 2204 eaf0: 54              incr r4
 2205 eaf1: f5 02 08        ldr r5,bas_tokcounter
 2206 eaf4: 55              incr r5
 2207 eaf5: fd 02 08        str r5,bas_tokcounter
 2208 eaf8: a0 ea e8        BR parse_line1loop
 2209 eafb:             parse_line1done:
 2210 eafb: 54              incr r4                   ;skip over closing "
 2211 eafc: 0e 00           ldai 0                    ;add null into token buffer
 2212 eafe: 4b              stavr R3
 2213 eaff: 53              incr r3
 2214 eb00: f5 02 08        ldr r5,bas_tokcounter
 2215 eb03: 55              incr r5
 2216 eb04: fd 02 08        str r5,bas_tokcounter
 2217 eb07: fb 02 06        str r3,BAS_TOKPTR
 2218 eb0a: fc 02 02        str r4,bas_txtptr
 2219 eb0d: a0 ea b2        BR parse_line_loop
 2220 eb10:             
 2221 eb10:             parse_line2:
 2222 eb10: 0d 04           ldti TOKENIZER_VARIABLE
 2223 eb12: aa ea b2        BRNEQ parse_line_loop
 2224 eb15: 04 ea 85        JSR parse_variable_num
 2225 eb18: 27              mvrla r7
 2226 eb19: 4b              stavr r3
 2227 eb1a: 53              incr r3
 2228 eb1b: 2f              mvrha r7
 2229 eb1c: 4b              stavr r3
 2230 eb1d: 53              incr r3
 2231 eb1e: f5 02 08        ldr r5,bas_tokcounter
 2232 eb21: 55              incr r5
 2233 eb22: 55              incr r5
 2234 eb23: fd 02 08        str r5,bas_tokcounter
 2235 eb26: a0 ea b2        BR parse_line_loop
 2236 eb29:             
 2237 eb29:             parse_line_done:
 2238 eb29: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2239 eb2b: 4b              STAVR R3
 2240 eb2c: 53              INCR R3
 2241 eb2d:             ;    ldr r5,bas_tokcounter
 2242 eb2d:             ;    incr r5
 2243 eb2d:             ;    str r5,bas_tokcounter
 2244 eb2d:             
 2245 eb2d: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2246 eb30: 53              incr r3
 2247 eb31: 53              incr r3
 2248 eb32: 53              incr r3
 2249 eb33: f7 02 08        ldr r7,bas_tokcounter
 2250 eb36: ff 02 12        str r7,bas_newlinelen
 2251 eb39: 27              mvrla r7
 2252 eb3a: 4b              stavr r3
 2253 eb3b: 53              incr r3
 2254 eb3c: 2f              mvrha r7
 2255 eb3d: 4b              stavr r3
 2256 eb3e:             ;    halt
 2257 eb3e:             
 2258 eb3e:             ;
 2259 eb3e:             ; void addLine(char *buff)
 2260 eb3e:             ; since addline is only called from parse_tokenizeline where are these
 2261 eb3e:             ; values are know, pass them in or
 2262 eb3e:             ; maybe merge addLine to bottom of parse_tokenizeline
 2263 eb3e:             ;
 2264 eb3e:             ; r7 points to line to insert
 2265 eb3e:             ; r6 linenumber
 2266 eb3e:             ; r5 linelength
 2267 eb3e:             ;
 2268 eb3e:             parse_addline:
 2269 eb3e: f7 02 10          ldr r7,BAS_NEWLINENUM
 2270 eb41: 04 eb a6          JSR parse_removeline      ; if line number already exists delete it
 2271 eb44: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2272 eb47: 27                mvrla r7
 2273 eb48: 0d 06             ldti 6
 2274 eb4a: aa eb 4e          brneq parse_addline1
 2275 eb4d: 05                ret
 2276 eb4e:             
 2277 eb4e:             parse_addline1:                 ;find insert location
 2278 eb4e:             ;      halt
 2279 eb4e: f7 02 10          ldr r7,BAS_NEWLINENUM
 2280 eb51: f3 02 0c          ldr r3,bas_tokenBuffer
 2281 eb54:             
 2282 eb54:             parse_addlineloop:
 2283 eb54: fb 02 14          str r3,bas_insertptr
 2284 eb57: 43                ldavr r3
 2285 eb58: 0d 01             ldti TOKENIZER_EOF
 2286 eb5a: a8 eb 7d          BREQ parse_addroom
 2287 eb5d: 53                incr r3                   ;get line number of line in token buffer into r6
 2288 eb5e: 43                ldavr r3
 2289 eb5f: 36                mvarl r6
 2290 eb60: 53                incr r3
 2291 eb61: 43                ldavr r3
 2292 eb62: 3e                mvarh r6
 2293 eb63: 04 ec 8a          jsr parse_compare
 2294 eb66: 0d ff             ldti 0ffh
 2295 eb68: a8 eb 7d          breq parse_addroom
 2296 eb6b:             
 2297 eb6b: 53                incr r3                   ;get line length
 2298 eb6c: 43                ldavr r3
 2299 eb6d: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2300 eb70: 36                mvarl r6
 2301 eb71: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2302 eb72: 5e                decr r6
 2303 eb73: 5e                decr r6
 2304 eb74:             
 2305 eb74:             addline_moveptr:              ; advance pointer to next line
 2306 eb74: 53                incr r3
 2307 eb75: 5e                decr r6
 2308 eb76: 26                mvrla r6
 2309 eb77: a2 eb 74          brnz addline_moveptr
 2310 eb7a: a0 eb 54          br parse_addlineloop
 2311 eb7d:             
 2312 eb7d:             
 2313 eb7d:             parse_addroom:               ; make room
 2314 eb7d: 1f 20 00          mviw r7,BAS_TOK_BUF_END
 2315 eb80:             ;      decr r7
 2316 eb80: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2317 eb83: 04 ec 53          jsr parse_sub16
 2318 eb86: 1d 20 00          mviw r5,BAS_TOK_BUF_END
 2319 eb89:             ;      decr r5
 2320 eb89:             
 2321 eb89:             parse_roomloop:
 2322 eb89: 5f                decr r7
 2323 eb8a: 5d                decr r5
 2324 eb8b: 47                ldavr r7
 2325 eb8c: 4d                stavr r5
 2326 eb8d:             
 2327 eb8d: f6 02 14          ldr r6,bas_insertptr
 2328 eb90: 04 ec 8a          jsr PARSE_COMPARE
 2329 eb93: a2 eb 89          brnz parse_roomloop
 2330 eb96:             
 2331 eb96: f7 02 14          ldr r7,bas_insertptr
 2332 eb99: 1e 04 00          MVIW R6,parse_token_buffer
 2333 eb9c:             ;      halt
 2334 eb9c:             
 2335 eb9c:             parse_insertloop:
 2336 eb9c: 46                ldavr r6
 2337 eb9d: 4f                stavr r7
 2338 eb9e: 56                incr r6
 2339 eb9f: 57                incr r7
 2340 eba0: 0d 24             ldti 024h ; sub in actual eol token here
 2341 eba2: aa eb 9c          brneq parse_insertloop
 2342 eba5:             
 2343 eba5: 05                ret
 2344 eba6:             
 2345 eba6:             ;
 2346 eba6:             ; void removeLine(int lineNum)
 2347 eba6:             ;
 2348 eba6:             parse_removeline:
 2349 eba6: 04 eb ce        JSR basu_find
 2350 eba9: 2f              mvrha R7
 2351 ebaa: a2 eb b2        brnz parse_removeline1
 2352 ebad: 27              mvrla R7
 2353 ebae: a2 eb b2        brnz parse_removeline1
 2354 ebb1: 05              ret
 2355 ebb2:             parse_removeline1:
 2356 ebb2: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2357 ebb4: 57              incr r7
 2358 ebb5: 57              incr r7
 2359 ebb6: 57              incr r7
 2360 ebb7: 47              ldavr r7
 2361 ebb8: 36              mvarl r6        ; R6 = remove length
 2362 ebb9: 57              incr r7
 2363 ebba: 47              ldavr r7
 2364 ebbb: 3e              mvarh r6
 2365 ebbc:             
 2366 ebbc: 5f              decr r7         ;backup to start of line
 2367 ebbd: 5f              decr r7
 2368 ebbe: 5f              decr r7
 2369 ebbf: 5f              decr r7
 2370 ebc0: 04 ec 45        JSR parse_add16
 2371 ebc3:             parse_removeloop:
 2372 ebc3: 47              ldavr r7
 2373 ebc4: 4d              stavr r5
 2374 ebc5: 55              incr r5
 2375 ebc6: 57              incr r7
 2376 ebc7: 2f              MVRHA r7
 2377 ebc8:             
 2378 ebc8: ee 02 0e        ldt  bas_bufferendhi
 2379 ebcb:             
 2380 ebcb: aa eb c3        brneq parse_removeloop
 2381 ebce:             ;
 2382 ebce:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2383 ebce:             ; since we are moving complete contents of buffer
 2384 ebce:             ; Make sure it is set during addline
 2385 ebce:             ;
 2386 ebce:             
 2387 ebce:             
 2388 ebce:             ; run & parse utilites
 2389 ebce:             ;
 2390 ebce:             
 2391 ebce:             ;
 2392 ebce:             ; find in the token buffer linenum in r7
 2393 ebce:             ;
 2394 ebce:             basu_find:
 2395 ebce: 07 05           pushr r5                  ; save r5
 2396 ebd0: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2397 ebd3:             
 2398 ebd3:             basu_find_loop:
 2399 ebd3: 45              ldavr r5                  ;get token
 2400 ebd4: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2401 ebd6: aa eb e0        brneq basu_find_loop1     ;no continue
 2402 ebd9: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2403 ebdc: 27              mvrla r7
 2404 ebdd: 08 50           popr r5
 2405 ebdf: 05              ret
 2406 ebe0:             
 2407 ebe0:             basu_find_loop1:
 2408 ebe0: 55              incr r5                   ;skip past linenum token
 2409 ebe1: 27              mvrla r7                  ;test low byte of linenum
 2410 ebe2: 0b              MVAT
 2411 ebe3: 45              ldavr r5
 2412 ebe4: aa eb f7        brneq basu_find1          ;not eqaul
 2413 ebe7: 55              incr r5
 2414 ebe8: 2f              mvrha r7                  ;test high byte of linenum
 2415 ebe9: 0b              MVAT
 2416 ebea: 45              ldavr r5
 2417 ebeb: aa eb f8        brneq basu_find2          ;not equal
 2418 ebee: 5d              decr r5                   ;if equal backup to linenum token
 2419 ebef: 5d              decr r5
 2420 ebf0: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2421 ebf2: 0e 01           ldai 1                    ;return 1 in accumulator
 2422 ebf4: 08 50           popr r5
 2423 ebf6: 05              ret
 2424 ebf7:             
 2425 ebf7:             basu_find1:
 2426 ebf7: 55              incr r5                   ;skip over linenum high byte
 2427 ebf8:             basu_find2:
 2428 ebf8: 55              incr r5                   ;get line length
 2429 ebf9: 45              ldavr r5
 2430 ebfa: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2431 ebfd: 36              mvarl r6
 2432 ebfe: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2433 ebff: 5e              decr r6
 2434 ec00: 5e              decr r6
 2435 ec01:             basu_find_moveptr:            ; advance pointer to next line
 2436 ec01: 55              incr r5
 2437 ec02: 5e              decr r6
 2438 ec03: 26              mvrla r6
 2439 ec04: a2 ec 01        brnz basu_find_moveptr
 2440 ec07: a0 eb d3        br basu_find_loop
 2441 ec0a:             
 2442 ec0a:             
 2443 ec0a:             ;
 2444 ec0a:             ; Multiple numbers in R4 and R5
 2445 ec0a:             ;
 2446 ec0a:             ; Return in R7
 2447 ec0a:             ;
 2448 ec0a:             ; R6 = Bit counter
 2449 ec0a:             ;
 2450 ec0a:             parse_mul16:
 2451 ec0a: 07 06               pushr r6
 2452 ec0c:             
 2453 ec0c: 1f 00 00            MVIW R7,0
 2454 ec0f: 1e 00 10            MVIW R6,10h
 2455 ec12:             ;        jsr showregs
 2456 ec12:             
 2457 ec12:             parse_mulloop:
 2458 ec12:             ;        jsr showregs
 2459 ec12:             
 2460 ec12: 25                  mvrla r5
 2461 ec13: b3 01               andi  01h
 2462 ec15: a1 ec 1b            brz parse_mulskip
 2463 ec18: 04 ec 37            jsr parse_muladd16
 2464 ec1b:             
 2465 ec1b:             parse_mulskip:
 2466 ec1b:             ;
 2467 ec1b:             ; clear carry flag HACK
 2468 ec1b:             ;
 2469 ec1b: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2470 ec1d: e0                  cshl
 2471 ec1e: b0 00               addi 0      ; may not be needed
 2472 ec20:             ;
 2473 ec20: 24                  mvrla r4
 2474 ec21:             ;        jsr showcarry
 2475 ec21: e0                  cshl
 2476 ec22:             ;        jsr showcarry
 2477 ec22: 34                  mvarl r4
 2478 ec23: 2c                  mvrha r4
 2479 ec24:             ;        jsr showcarry
 2480 ec24: e0                  cshl
 2481 ec25:             ;        jsr showcarry
 2482 ec25: 3c                  mvarh r4
 2483 ec26:             
 2484 ec26: 0e 00               ldai 0      ;clear carry
 2485 ec28: e0                  cshl
 2486 ec29:             ;        addi 0
 2487 ec29:             
 2488 ec29: 2d                  mvrha r5
 2489 ec2a: e1                  cshr
 2490 ec2b: 3d                  mvarh r5
 2491 ec2c: 25                  mvrla r5
 2492 ec2d: e1                  cshr
 2493 ec2e: 35                  mvarl r5
 2494 ec2f:             
 2495 ec2f: 5e                  decr r6
 2496 ec30: 26                  mvrla r6
 2497 ec31: a2 ec 12            brnz parse_mulloop
 2498 ec34: 08 60               popr r6
 2499 ec36: 05                  ret
 2500 ec37:             
 2501 ec37:             parse_muladd16:
 2502 ec37: 0e 00               ldai 0      ;clear carry
 2503 ec39: e0                  cshl
 2504 ec3a:             
 2505 ec3a: 27                  MVRLA R7
 2506 ec3b: 0b                  MVAT
 2507 ec3c: 24                  mvrla r4
 2508 ec3d: b8                  ADDT
 2509 ec3e: 37                  mvarl r7
 2510 ec3f:             
 2511 ec3f: 2f                  mvrha r7
 2512 ec40: 0b                  MVAT
 2513 ec41: 2c                  mvrha r4
 2514 ec42: e3                  addtc
 2515 ec43: 3f                  mvarh r7
 2516 ec44: 05                  ret
 2517 ec45:             
 2518 ec45:             ;
 2519 ec45:             ; 16 bit add r6 and r7, return result in r7
 2520 ec45:             ;
 2521 ec45:             parse_add16:
 2522 ec45:             
 2523 ec45: 0e 00             ldai 0      ;clear carry
 2524 ec47: e0                cshl
 2525 ec48: 26                MVRLA R6
 2526 ec49: 0b                MVAT
 2527 ec4a: 27                mvrla r7
 2528 ec4b: b8                ADDT
 2529 ec4c: 37                mvarl r7
 2530 ec4d: 2e                mvrha r6
 2531 ec4e: 0b                MVAT
 2532 ec4f: 2f                mvrha r7
 2533 ec50: e3                addtc
 2534 ec51: 3f                mvarh r7
 2535 ec52: 05                ret
 2536 ec53:             
 2537 ec53:             ;
 2538 ec53:             ; 16 bit subtract of r6 from r7, return result in r7
 2539 ec53:             ;
 2540 ec53:             parse_sub16:
 2541 ec53: 2e                mvrha r6
 2542 ec54: b5                inva
 2543 ec55: 3e                mvarh r6
 2544 ec56: 26                mvrla r6
 2545 ec57: b5                inva
 2546 ec58: 36                mvarl r6
 2547 ec59: 56                incr r6
 2548 ec5a: a0 ec 45          br parse_add16
 2549 ec5d:             
 2550 ec5d:             ;
 2551 ec5d:             ; is digit in accumulator hex
 2552 ec5d:             ; returns 1 if yes and 0 if no
 2553 ec5d:             ;
 2554 ec5d:             ; what about upper/lower case
 2555 ec5d:             ;
 2556 ec5d:             ; destroys tmp register
 2557 ec5d:             parse_ishex:
 2558 ec5d: 0d 30          ldti '0'
 2559 ec5f: a7 ec 77       brlt parse_ishex_no
 2560 ec62: 0d 39          ldti '9'
 2561 ec64: a9 ec 6a       brgt parse_ishex_af
 2562 ec67: a0 ec 74       br parse_ishex_yes
 2563 ec6a:             
 2564 ec6a:             parse_ishex_af:
 2565 ec6a: 0d 41           ldti 'A'
 2566 ec6c: a7 ec 77        brlt parse_ishex_no
 2567 ec6f: 0d 46           ldti 'F'
 2568 ec71: a9 ec 77        brgt parse_ishex_no
 2569 ec74:             
 2570 ec74:             parse_ishex_yes:
 2571 ec74: 0e 01           ldai 1
 2572 ec76: 05              ret
 2573 ec77:             
 2574 ec77:             parse_ishex_no:
 2575 ec77: 0e 00           ldai 0
 2576 ec79: 05              ret
 2577 ec7a:             
 2578 ec7a:             ;
 2579 ec7a:             ; is digit in accumulator decimal
 2580 ec7a:             ; returns 1 if yes and 0 if no
 2581 ec7a:             ;
 2582 ec7a:             ; destroys tmp register
 2583 ec7a:             ;
 2584 ec7a:             parse_isdigit:
 2585 ec7a: 0d 30          ldti '0'
 2586 ec7c: a7 ec 87       brlt parse_isdigit_no
 2587 ec7f: 0d 39          ldti '9'
 2588 ec81: a9 ec 87       brgt parse_isdigit_no
 2589 ec84:             
 2590 ec84: 0e 01           ldai 1
 2591 ec86: 05              ret
 2592 ec87:             
 2593 ec87:             parse_isdigit_no:
 2594 ec87: 0e 00           ldai 0
 2595 ec89: 05              ret
 2596 ec8a:             
 2597 ec8a:             ;
 2598 ec8a:             ; 16 bit compare r6 and r7
 2599 ec8a:             ;
 2600 ec8a:             ; returns in accumulator
 2601 ec8a:             ; r7=r6 00
 2602 ec8a:             ; r7>r6 01
 2603 ec8a:             ; r7<r6 ff
 2604 ec8a:             ;
 2605 ec8a:             ; destory Tmp
 2606 ec8a:             ;
 2607 ec8a:             parse_compare:
 2608 ec8a: 2e            mvrha r6
 2609 ec8b: 0b            mvat
 2610 ec8c: 2f            mvrha r7
 2611 ec8d: aa ec 99      brneq parse_compareh
 2612 ec90: 26            mvrla r6
 2613 ec91: 0b            mvat
 2614 ec92: 27            mvrla r7
 2615 ec93: aa ec a2      brneq parse_comparel
 2616 ec96: 0e 00         ldai 0
 2617 ec98: 05            ret
 2618 ec99:             
 2619 ec99:             parse_compareh:
 2620 ec99: a7 ec 9f      brlt parse_compareh1
 2621 ec9c: 0e 01         ldai 1
 2622 ec9e: 05            ret
 2623 ec9f:             parse_compareh1:
 2624 ec9f: 0e ff         ldai 0ffh
 2625 eca1: 05            ret
 2626 eca2:             
 2627 eca2:             parse_comparel:
 2628 eca2: a7 ec a8      brlt parse_comparel1
 2629 eca5: 0e 01         ldai 1
 2630 eca7: 05            ret
 2631 eca8:             parse_comparel1:
 2632 eca8: 0e ff         ldai 0ffh
 2633 ecaa: 05            ret
 2634 ecab:             
 2635 ecab:             ;
 2636 ecab:             ; STRINGS
 2637 ecab:             ;
 2638 ecab: 0a 0d 00    CRLF: DB 0ah,0dh,0
 2639 ecae:             ;
 2640 ecae:             
 2641 ecae:                   ORG 0EE00h
 2642 ee00:             
 2643 ee00:             basic_test:
 2644 ee00:             
 2645 ee00:             ;    DB  25h,0ah,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h,24h,25h,14h,00h
 2646 ee00:             ;    DB  0ah,00h,06h,04h,00h,00h,24h,25h,1eh,00h,11h,00h,04h,00h,00h,23h
 2647 ee00:             ;    DB  04h,00h,00h,17h,02h,01h,00h,24h,25h,28h,00h,13h,00h,07h,04h,00h
 2648 ee00:             ;    DB  00h,21h,02h,0ah,00h,08h,0dh,02h,14h,00h,24h,01h,00h,00h,00h,00h
 2649 ee00:             
 2650 ee00:             ;    DB  25h,0ah,00h,14h,00h,06h,1fh,02h,01h,00h,17h,02h,02h,00h,20h,17h
 2651 ee00:             ;    DB  02h,03h,00h,24h,25h,14h,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h
 2652 ee00:             ;    DB  24h,25h,1eh,00h,0dh,00h,04h,01h,00h,23h,02h,02h,00h,24h,25h,28h
 2653 ee00:             ;    DB  00h,0eh,00h,06h,04h,00h,00h,17h,04h,01h,00h,24h,25h,32h,00h,15h
 2654 ee00:             ;    DB  00h,04h,02h,00h,23h,04h,00h,00h,17h,04h,01h,00h,17h,02h,05h,00h
 2655 ee00:             ;    DB  24h,25h,3ch,00h,0ah,00h,06h,04h,02h,00h,24h,01h,00h,00h,00h,00h
 2656 ee00:             
 2657 ee00: 25 0a 00 0e 
            00 06 03 68 
            65 6c 6c 6f 
            00 24 25 14     DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 2658 ee10: 00 0d 00 04 
            02 00 23 02 
            09 00 24 25 
            1e 00 0a 00     DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 2659 ee20: 06 04 02 00 
            24 25 28 00 
            0d 00 04 04 
            00 23 02 32     DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 2660 ee30: 00 24 25 32 
            00 17 00 06 
            03 68 32 00 
            15 04 02 00     DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 2661 ee40: 15 04 04 00 
            15 02 16 00 
            24 25 3c 00 
            12 00 0a 04     DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 2662 ee50: 03 00 23 02 
            01 00 0b 02 
            05 00 24 25 
            46 00 0a 00     DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 2663 ee60: 06 04 03 00 
            24 25 50 00 
            0a 00 0c 04 
            03 00 24 25     DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 2664 ee70: 51 00 12 00 
            06 03 6e 65 
            78 74 20 64 
            6f 6e 65 00     DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 2665 ee80: 24 25 52 00 
            0a 00 0e 02 
            6e 00 24 25 
            55 00 0a 00     DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 2666 ee90: 0d 02 7d 00 
            24 25 5a 00 
            12 00 06 03 
            6e 65 78 74     DB  0dh,02h,7dh,00h,24h,25h,5ah,0h,12h,00h,06h,03h,6eh,65h,78h,74h
 2667 eea0: 20 64 6f 6e 
            65 00 24 25 
            6e 00 11 00 
            06 03 69 6e     DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 2668 eeb0: 20 67 6f 73 
            75 62 00 24 
            25 70 00 11 
            00 06 03 69     DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 2669 eec0: 6e 20 73 75 
            62 20 32 00 
            24 25 72 00 
            07 00 0f 24     DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 2670 eed0: 25 7d 00 0c 
            00 06 03 65 
            6e 64 00 24 
            25 7e 00 07     DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 2671 eee0: 00 14 24 01 
            00 00 00 00 
            00 00 00 00 
            00 00 00 00     DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 2672 eef0:             
 2673 eef0:             ;
 2674 eef0:             ; The End
 2675 eef0:             ;
 2676 eef0:             ZZZZ:
 2677 eef0: 00            DB   0

eb74h: ADDLINE_MOVEPTR  - <  2305>   2309 
e543h: BASIC_LIST       - <  1231>    141 
e460h: BASIC_RUN        - <  1025>    148 
ee00h: BASIC_TEST       - <  2643>    193 
0100h: BASIC_VARS       - <    62>   1084   1107 
e55ch: BASLIST1         - <  1247>   1240 
e5fch: BASLIST10        - <  1348>   1342 
e60bh: BASLIST11        - <  1356>   1350 
e61ah: BASLIST12        - <  1364>   1358 
e629h: BASLIST13        - <  1372>   1366 
e638h: BASLIST14        - <  1380>   1374 
e647h: BASLIST15        - <  1388>   1382 
e656h: BASLIST16        - <  1396>   1390 
e665h: BASLIST17        - <  1404>   1398 
e674h: BASLIST18        - <  1412>   1406 
e683h: BASLIST19        - <  1420>   1414 
e567h: BASLIST2         - <  1253>   1249 
e692h: BASLIST20        - <  1428>   1422 
e6a1h: BASLIST21        - <  1436>   1430 
e6b4h: BASLIST22        - <  1446>   1438 
e6c7h: BASLIST23        - <  1456>   1448 
e6dah: BASLIST24        - <  1466>   1458 
e6edh: BASLIST25        - <  1476>   1468 
e700h: BASLIST26        - <  1486>   1478 
e713h: BASLIST27        - <  1496>   1488 
e726h: BASLIST28        - <  1506>   1498 
e739h: BASLIST29        - <  1516>   1508 
e57eh: BASLIST3         - <  1268>   1255 
e74ch: BASLIST30        - <  1526>   1518 
e75fh: BASLIST31        - <  1536>   1528 
e772h: BASLIST32        - <  1546>   1538 
e785h: BASLIST33        - <  1556>   1548 
e798h: BASLIST34        - <  1566>   1558 
e7abh: BASLIST35        - <  1576>   1568 
e7beh: BASLIST36        - <  1586>   1578 
e7cdh: BASLIST37        - <  1594>   1588 
e7e6h: BASLIST38        - <  1611>   1596 
e59ah: BASLIST4         - <  1285>   1270 
e5b1h: BASLIST5         - <  1308>   1287 
e5c0h: BASLIST6         - <  1316>   1310 
e5cfh: BASLIST7         - <  1324>   1318 
e5deh: BASLIST8         - <  1332>   1326 
e5edh: BASLIST9         - <  1340>   1334 
e7f2h: BASLIST_DONE     - <  1619>   1244   1250   1615 
e547h: BASLIST_LOOP     - <  1236>   1245   1251   1266   1283   1306   1314 
         1322   1330   1338   1346   1354   1362   1370   1378   1386   1394 
         1402   1410   1418   1426   1434   1444   1454   1464   1474   1484 
         1494   1504   1514   1524   1534   1544   1554   1564   1574   1584 
         1592   1609 
e58eh: BASLIST_STRING   - <  1276>   1280 
e596h: BASLIST_STRINGEND - <  1281>   1278 
ebceh: BASU_FIND        - <  2394>    173    551   2349 
ebf7h: BASU_FIND1       - <  2425>   2412 
ebf8h: BASU_FIND2       - <  2427>   2417 
ebd3h: BASU_FIND_LOOP   - <  2398>   2440 
ebe0h: BASU_FIND_LOOP1  - <  2407>   2401 
ec01h: BASU_FIND_MOVEPTR - <  2435>   2439 
020eh: BAS_BUFFERENDHI  - <    74>    163   2378 
e069h: BAS_COPYLOOP     - <   196>    203    205 
020ah: BAS_CURRENTTOKEN - <    72>   1878   1887   1915   2096 
e49dh: BAS_ERROR        - <  1121>    266   1003 
0282h: BAS_FORSTACK     - <    94>    236 
0280h: BAS_FORSTACKPTR  - <    93> 
02c0h: BAS_GOSUBPTR     - <   103> 
02c2h: BAS_GOSUBSTACK   - <   104>    235 
0214h: BAS_INSERTPTR    - <    81>   2283   2327   2331 
e077h: BAS_MSG1         - <   211>    265 
e093h: BAS_MSG2         - <   212> 
e0a4h: BAS_MSG3         - <   213>   1000 
0212h: BAS_NEWLINELEN   - <    80>   2250   2271   2316 
0210h: BAS_NEWLINENUM   - <    79>   2152   2269   2279 
0204h: BAS_NXTPTR       - <    69>   1760   1772   1788   1823   1842   1901 
         1942 
0200h: BAS_RUN_ENDED    - <    67>    237    570    904   1059 
0208h: BAS_TOKCOUNTER   - <    71>   1876   2143   2173   2175   2186   2189 
         2205   2207   2214   2216   2231   2234   2249 
020ch: BAS_TOKENBUFFER  - <    73>    140    161    240   2280   2396 
0206h: BAS_TOKPTR       - <    70>   1874   2217 
2000h: BAS_TOK_BUF_END  - <   121>    162   2314   2318 
1000h: BAS_TOK_BUF_START - <   117>    158    192 
0202h: BAS_TXTPTR       - <    68>   1655   1745   1801   1872   1902   1913 
         1963   2009   2070   2087   2112   2195   2218 
ffc4h: CHAROUT          - <     5>    617 
ecabh: CRLF             - <  2638>    651   1589 
e0dch: EXE_ACCEPT       - <   250>    290    307    313    316    569    584 
          594    661    667    696    698    703    711    714    716    737 
          767    777    816    827    845    847    858    873    986   1018 
e0f1h: EXE_ACCEPT_DONE  - <   268>    258 
e3cah: EXE_END_STMT     - <   903>    979 
e173h: EXE_EXPR         - <   391>    314    473    489    506    523    585 
          638    699    848    859 
e1b8h: EXE_EXPR_AND     - <   435>    405 
e1d5h: EXE_EXPR_DONE    - <   456>    409 
e17ch: EXE_EXPR_LOOP    - <   398>    421    433    445    454 
e1a6h: EXE_EXPR_MINUS   - <   423>    403 
e1cah: EXE_EXPR_OR      - <   447>    407 
e194h: EXE_EXPR_PLUS    - <   411>    401 
e101h: EXE_FACTOR       - <   297>    333    348    362    371 
e10fh: EXE_FACTOR1      - <   310>    304 
e120h: EXE_FACTOR2      - <   319>    312 
e472h: EXE_FINISHED     - <  1058>   1046 
e484h: EXE_FINISHED_YES - <  1070>   1062   1066 
e38eh: EXE_FOR_STMT     - <   822>    955 
e492h: EXE_GET_VARIABLE - <  1106>    288    782 
e32ch: EXE_GOSUB_STMT   - <   709>    943 
e275h: EXE_GOTO_STMT    - <   582>    993 
e2e3h: EXE_IF_STMT      - <   659>    931 
e2fch: EXE_IF_STMT1     - <   675>    671    681 
e30bh: EXE_IF_STMT2     - <   684>    679 
e257h: EXE_INDEX_FIND   - <   550>    560 
e0cah: EXE_INIT         - <   233>   1038 
e25bh: EXE_JUMP_LINE    - <   559>    586    729 
e272h: EXE_JUMP_LINE1   - <   574>    562    564 
e30fh: EXE_LET_STMT     - <   691>    937    987 
e457h: EXE_LINE_STMT    - <  1008>   1052 
e384h: EXE_NEXT_DONE    - <   810>    800 
e356h: EXE_NEXT_STMT    - <   756>    973 
e4cbh: EXE_NEXT_TOK3_DONE - <  1168>   1164 
e4c3h: EXE_NEXT_TOK3_LOOP - <  1162>   1166 
e49fh: EXE_NEXT_TOKEN   - <  1130>    269    347    361    370    412    424 
          436    448    488    505    522    610    618    624    653    676 
          685 
e4a9h: EXE_NEXT_TOKEN1  - <  1139>   1133 
e4b2h: EXE_NEXT_TOKEN2  - <  1147>   1141 
e4bdh: EXE_NEXT_TOKEN3  - <  1157>   1149 
e4cdh: EXE_NEXT_TOKEN4  - <  1172>   1159 
e4cfh: EXE_NUM          - <  1179>    305    712 
e3c8h: EXE_PEEK_STMT    - <   891>    961 
e3c9h: EXE_POKE_STMT    - <   897>    967 
e281h: EXE_PRINT_STMT   - <   592>    925 
e298h: EXE_PRINT_STMT1  - <   613>    599 
e2a8h: EXE_PRINT_STMT2  - <   621>    615 
e2b3h: EXE_PRINT_STMT3  - <   627>    623 
e2c5h: EXE_PRINT_STMT4  - <   637>    629    631    633 
e2d9h: EXE_PRINT_STMT_DONE - <   650>    635    645    647 
e286h: EXE_PRINT_STMT_LOOP - <   596>    648 
e2cbh: EXE_PRINT_STMT_TEST - <   642>    611    619    625 
e1dch: EXE_RELATION     - <   469>    663 
e250h: EXE_RELATION_DONE - <   537>    485 
e234h: EXE_RELATION_EQ  - <   521>    483 
e216h: EXE_RELATION_GT  - <   504>    481 
e1e5h: EXE_RELATION_LOOP - <   476>    499    502    516    519    532    535 
e1f8h: EXE_RELATION_LT  - <   487>    479 
e24ah: EXE_REL_NE       - <   533>    530 
e22eh: EXE_REL_NGT      - <   517>    514 
e210h: EXE_REL_NLT      - <   500>    497 
e348h: EXE_RETURN_STMT  - <   735>    949 
e463h: EXE_RUN          - <  1045>   1053 
e46ch: EXE_RUN_CONT     - <  1051>   1048 
e487h: EXE_SET_VARIABLE - <  1083>    701    785    853 
e3d1h: EXE_STMT         - <   912>    672   1019 
e3dbh: EXE_STMT1        - <   928>    924 
e42ch: EXE_STMT10       - <   982>    978 
e43ah: EXE_STMT11       - <   990>    984 
e443h: EXE_STMT12       - <   996>    992 
e3e4h: EXE_STMT2        - <   934>    930 
e3edh: EXE_STMT3        - <   940>    936 
e3f6h: EXE_STMT4        - <   946>    942 
e3ffh: EXE_STMT5        - <   952>    948 
e408h: EXE_STMT6        - <   958>    954 
e411h: EXE_STMT7        - <   964>    960 
e41ah: EXE_STMT8        - <   970>    966 
e423h: EXE_STMT9        - <   976>    972 
e0c0h: EXE_STMT_MSG     - <   214> 
e124h: EXE_TERM         - <   329>    395    413    425    437    449 
e140h: EXE_TERM_ASTR    - <   346>    339 
e16ch: EXE_TERM_DONE    - <   378>    344 
e12dh: EXE_TERM_LOOP    - <   336>    358    367    376 
e161h: EXE_TERM_MOD     - <   369>    343 
e156h: EXE_TERM_SLASH   - <   360>    341 
e0f5h: EXE_VARFACTOR    - <   281>    320 
e4d8h: EXE_VARIABLE_NUM - <  1194>    284    692    771    831 
e93bh: FOUND            - <  1822>   1805 
e945h: NOKEYOWRDSFOUND  - <  1830>   1802 
e864h: PARSECHAR1       - <  1663>   1660 
e8ach: PARSECHAR10      - <  1708>   1705 
e8b4h: PARSECHAR11      - <  1713>   1710 
e8bch: PARSECHAR12      - <  1718>   1715 
e8c4h: PARSECHAR13      - <  1723>   1720 
e8cch: PARSECHAR14      - <  1728>   1725 
e8d5h: PARSECHAR15      - <  1734>   1731 
e86ch: PARSECHAR2       - <  1668>   1665 
e874h: PARSECHAR3       - <  1673>   1670 
e87ch: PARSECHAR4       - <  1678>   1675 
e884h: PARSECHAR5       - <  1683>   1680 
e88ch: PARSECHAR6       - <  1688>   1685 
e894h: PARSECHAR7       - <  1693>   1690 
e89ch: PARSECHAR8       - <  1698>   1695 
e8a4h: PARSECHAR9       - <  1703>   1700 
ec45h: PARSE_ADD16      - <  2521>    419   1981   2370   2548 
eb3eh: PARSE_ADDLINE    - <  2268> 
eb4eh: PARSE_ADDLINE1   - <  2277>   2274 
eb54h: PARSE_ADDLINELOOP - <  2282>   2310 
eb7dh: PARSE_ADDROOM    - <  2313>   2286   2295 
ea4dh: PARSE_AF         - <  2052>   2049 
ec8ah: PARSE_COMPARE    - <  2607>    495    512    529   2293   2328 
ec99h: PARSE_COMPAREH   - <  2619>   2611 
ec9fh: PARSE_COMPAREH1  - <  2623>   2620 
eca2h: PARSE_COMPAREL   - <  2627>   2615 
eca8h: PARSE_COMPAREL1  - <  2631>   2628   2628 
ea64h: PARSE_ERROR_PRINT - <  2079> 
ea65h: PARSE_FINISHED   - <  2085>   1895   1927 
ea80h: PARSE_FINISHED_YES - <  2102>   2089   2095   2098 
ea43h: PARSE_GETNIBBLE  - <  2045>   2010   2017   2024   2031 
e8d8h: PARSE_GET_NEXT_TOK - <  1743>   1877   1914 
e8ddh: PARSE_GNT1       - <  1751> 
e8e4h: PARSE_GNT1LOOP   - <  1755>   1759 
e8f4h: PARSE_GNT2       - <  1767>   1754 
e902h: PARSE_GNT3       - <  1778>   1770 
e908h: PARSE_GNT3LOOP   - <  1782>   1786 
e918h: PARSE_GNT4       - <  1793>   1781 
e95ch: PARSE_GNT_ERROR  - <  1847>   1838   1840 
e962h: PARSE_INIT       - <  1869>   2140 
0300h: PARSE_INPUT_LINE - <   109> 
eb9ch: PARSE_INSERTLOOP - <  2335>   2341 
ec7ah: PARSE_ISDIGIT    - <  2584>   1753   1758   1997 
ec87h: PARSE_ISDIGIT_NO - <  2593>   2586   2588 
ec5dh: PARSE_ISHEX      - <  2557> 
ec6ah: PARSE_ISHEX_AF   - <  2564>   2561 
ec77h: PARSE_ISHEX_NO   - <  2574>   2559   2566   2568 
ec74h: PARSE_ISHEX_YES  - <  2570>   2562 
e7f5h: PARSE_KEYWORDS   - <  1626>   1798 
ea94h: PARSE_LINE       - <  2138>    184 
eadfh: PARSE_LINE1      - <  2192>   2178 
eafbh: PARSE_LINE1DONE  - <  2209>   2201 
eae8h: PARSE_LINE1LOOP  - <  2198>   2208 
eb10h: PARSE_LINE2      - <  2221>   2194 
eb29h: PARSE_LINE_DONE  - <  2237>   2168 
eab2h: PARSE_LINE_LOOP  - <  2164>   2190   2219   2223   2235 
ec0ah: PARSE_MUL16      - <  2450>    355   1976 
ec37h: PARSE_MULADD16   - <  2501>   2463 
ec12h: PARSE_MULLOOP    - <  2457>   2497 
ec1bh: PARSE_MULSKIP    - <  2465>   2462 
e980h: PARSE_NEXT       - <  1893>   1943   2165 
e987h: PARSE_NEXT1      - <  1899>   1896 
e98fh: PARSE_NEXT1LOOP  - <  1904>   1909 
e999h: PARSE_NEXT2      - <  1912>   1907 
e9aah: PARSE_NEXT3      - <  1926>   1918   1933 
e9bah: PARSE_NEXTDONE   - <  1935>   1928   1931 
e9c1h: PARSE_NEXTDONE2  - <  1941>   1938 
e9cah: PARSE_NUM        - <  1957>   2150   2179 
ea06h: PARSE_NUM_CHAR   - <  1995>   1964   1968 
ea10h: PARSE_NUM_CHAR1  - <  2001>   1998 
e9fah: PARSE_NUM_DONE   - <  1985>   1972 
e9dch: PARSE_NUM_LOOP   - <  1967>   1984 
ea15h: PARSE_NUM_OLD    - <  2007> 
ea94h: PARSE_POS        - <  2125> 
eba6h: PARSE_REMOVELINE - <  2348>    176   2270 
ebb2h: PARSE_REMOVELINE1 - <  2355>   2351   2353 
ebc3h: PARSE_REMOVELOOP - <  2371>   2380 
eb89h: PARSE_ROOMLOOP   - <  2321>   2329 
e854h: PARSE_SINGLECHAR - <  1652>   1769 
ea55h: PARSE_STRING     - <  2062> 
ea5eh: PARSE_STRING1    - <  2068>   2065 
ec53h: PARSE_SUB16      - <  2540>    431    443   2317 
e97ch: PARSE_TOKEN      - <  1886>   2063   2166 
0400h: PARSE_TOKEN_BUFFER - <   113>   1873   2144   2245   2332 
ea85h: PARSE_VARIABLE_NUM - <  2110>   2224 
e924h: PCMPLOOP         - <  1803>   1811 
ffcch: SHOWADDR         - <     7>   1243   1614 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    262    997 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9>    171    174    639   1263   1606 
ffdch: SHOWREGS         - <    11>   1002 
e932h: SKIPLOOP         - <  1815>   1818 
e932h: SKIPTOEND        - <  1813>   1808 
ffc0h: STRINGOUT        - <     4>    609    652   1001   1242   1273   1312 
         1320   1328   1336   1344   1352   1360   1368   1376   1384   1392 
         1400   1408   1416   1424   1432   1590   1613 
0019h: TOKENIZER_AND    - <    43>    404   1477   1686 
001bh: TOKENIZER_ASTR   - <    45>    338   1497   1696 
0010h: TOKENIZER_CALL   - <    34>   1397   1638 
0015h: TOKENIZER_COMMA  - <    39>    614   1437   1666 
0024h: TOKENIZER_CR     - <    54>    568    644    678    702    715    815 
          872   1587   1661   2167   2238 
0009h: TOKENIZER_ELSE   - <    27>   1341   1631 
0014h: TOKENIZER_END    - <    38>    977   1429   1642 
0001h: TOKENIZER_EOF    - <    19>    159    646    680   1065   1248   2094 
         2097   2285   2400 
0023h: TOKENIZER_EQ     - <    53>    482    697    846   1577   1732 
0000h: TOKENIZER_ERROR  - <    18>   1239   1643   1849 
000ah: TOKENIZER_FOR    - <    28>    826    953   1349   1632 
000eh: TOKENIZER_GOSUB  - <    32>    710    941   1381   1636 
000dh: TOKENIZER_GOTO   - <    31>    583    991   1373   1635 
0022h: TOKENIZER_GT     - <    52>    480   1567   1726 
001eh: TOKENIZER_HASH   - <    48>   1527   1711 
0007h: TOKENIZER_IF     - <    25>    660    929   1325   1629 
001fh: TOKENIZER_LEFTP  - <    49>    311    632   1537   1706 
0005h: TOKENIZER_LET    - <    23>    983    985   1309   1627 
0025h: TOKENIZER_LINENUM - <    55>   1017   1148   1595   2146 
0021h: TOKENIZER_LT     - <    51>    478   1557   1721 
0018h: TOKENIZER_MINUS  - <    42>    402   1467   1681 
001dh: TOKENIZER_MOD    - <    47>    342   1517   1701 
000ch: TOKENIZER_NEXT   - <    30>    766    971   1365   1634 
0002h: TOKENIZER_NUMBER - <    20>    303    630    713   1132   1254   1761 
         2177 
001ah: TOKENIZER_OR     - <    44>    406   1487   1691 
0012h: TOKENIZER_PEEK   - <    36>    959   1413   1640 
0017h: TOKENIZER_PLUS   - <    41>    400   1457   1676 
0013h: TOKENIZER_POKE   - <    37>    965   1421   1641 
0006h: TOKENIZER_PRINT  - <    24>    593    923   1317   1628 
0011h: TOKENIZER_REM    - <    35>   1405   1639   1917 
000fh: TOKENIZER_RETURN - <    33>    736    947   1389   1637 
0020h: TOKENIZER_RIGHTP - <    50>    315   1547   1716 
0016h: TOKENIZER_SEMICOLON - <    40>    622   1447   1671 
001ch: TOKENIZER_SLASH  - <    46>    340   1507 
0003h: TOKENIZER_STRING - <    21>    598   1158   1269   1789   2064   2193 
0008h: TOKENIZER_THEN   - <    26>    666   1333   1630 
000bh: TOKENIZER_TO     - <    29>    857   1357   1633 
0004h: TOKENIZER_VARIABLE - <    22>    289    628    695    776    844    935 
         1140   1286   1843   2222 
e532h: TOKL_CALL        - <  1227>   1399 
e4f2h: TOKL_ELSE        - <  1216>   1343 
e52dh: TOKL_END         - <  1226>   1431 
e538h: TOKL_ERROR       - <  1228>   1241   1612 
e4f8h: TOKL_FOR         - <  1217>   1351 
e50dh: TOKL_GOSUB       - <  1221>   1383 
e507h: TOKL_GOTO        - <  1220>   1375 
e4e8h: TOKL_IF          - <  1214>   1327 
e4dch: TOKL_LET         - <  1212>   1311 
e501h: TOKL_NEXT        - <  1219>   1367 
e521h: TOKL_PEEK        - <  1224>   1415 
e527h: TOKL_POKE        - <  1225>   1423 
e4e1h: TOKL_PRINT       - <  1213>   1319 
e51ch: TOKL_REM         - <  1223>   1407 
e514h: TOKL_RETURN      - <  1222>   1391 
e4ech: TOKL_THEN        - <  1215>   1335 
e4fdh: TOKL_TO          - <  1218>   1359 
e91dh: TOP              - <  1799>   1820 
ffd0h: TOUPPER          - <     8>   2053 
ffc8h: UARTOUT          - <     6>    264    999   1265   1275   1294   1305 
         1440   1442   1450   1452   1460   1462   1470   1472   1480   1482 
         1490   1492   1500   1502   1510   1512   1520   1522   1530   1532 
         1540   1542   1550   1552   1560   1562   1570   1572   1580   1582 
         1608 
eef0h: ZZZZ             - <  2676> 

2677 Lines assembled
0 Errors
315 Labels
Object Code:3441 bytes

