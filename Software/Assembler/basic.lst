RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             uartin:     equ 0ffe8h
   15 0000:             
   16 0000:             ;
   17 0000:             ; Basic interpreter tokens
   18 0000:             ;
   19 0000:             TOKENIZER_ERROR: EQU 00
   20 0000:             TOKENIZER_EOF: EQU 01
   21 0000:             TOKENIZER_NUMBER: EQU 02
   22 0000:             TOKENIZER_STRING: EQU 03
   23 0000:             TOKENIZER_VARIABLE: EQU 04
   24 0000:             TOKENIZER_LET: EQU 05
   25 0000:             TOKENIZER_PRINT: EQU 06
   26 0000:             TOKENIZER_IF: EQU 07
   27 0000:             TOKENIZER_THEN: EQU 08
   28 0000:             TOKENIZER_ELSE: EQU 09
   29 0000:             TOKENIZER_FOR: EQU 10
   30 0000:             TOKENIZER_TO: EQU 11
   31 0000:             TOKENIZER_NEXT: EQU 12
   32 0000:             TOKENIZER_GOTO: EQU 13
   33 0000:             TOKENIZER_GOSUB: EQU 14
   34 0000:             TOKENIZER_RETURN: EQU 15
   35 0000:             TOKENIZER_CALL: EQU 16
   36 0000:             TOKENIZER_REM: EQU 17
   37 0000:             TOKENIZER_PEEK: EQU 18
   38 0000:             TOKENIZER_POKE: EQU 19
   39 0000:             TOKENIZER_END: EQU 20
   40 0000:             TOKENIZER_COMMA: EQU 21
   41 0000:             TOKENIZER_SEMICOLON: EQU 22
   42 0000:             TOKENIZER_PLUS: EQU 23
   43 0000:             TOKENIZER_MINUS: EQU 24
   44 0000:             TOKENIZER_AND: EQU 25
   45 0000:             TOKENIZER_OR: EQU 26
   46 0000:             TOKENIZER_ASTR: EQU 27
   47 0000:             TOKENIZER_SLASH: EQU 28
   48 0000:             TOKENIZER_MOD: EQU 29
   49 0000:             TOKENIZER_HASH: EQU 30
   50 0000:             TOKENIZER_LEFTP: EQU 31
   51 0000:             TOKENIZER_RIGHTP: EQU 32
   52 0000:             TOKENIZER_LT: EQU 33
   53 0000:             TOKENIZER_GT: EQU 34
   54 0000:             TOKENIZER_EQ: EQU 35
   55 0000:             TOKENIZER_CR: EQU 36
   56 0000:             TOKENIZER_LINENUM: EQU 37
   57 0000:             TOKENIZER_LIST: EQU 38
   58 0000:             TOKENIZER_RUN: EQU 39
   59 0000:             TOKENIZER_NEW: EQU 40
   60 0000:             TOKENIZER_EXIT: EQU 41
   61 0000:             TOKENIZER_INPUT: EQU 42
   62 0000:             TOKENIZER_INP: EQU 43
   63 0000:             TOKENIZER_OUTP: EQU 44
   64 0000:             
   65 0000:             
   66 0000:             ;
   67 0000:             ; BASIC interpreter user variables area
   68 0000:             ; currently 26 1-byte variables
   69 0000:             ; for now must be 0xAA00 (256 byte) aligned
   70 0000:             ;
   71 0000:             BASIC_VARS: EQU 0100h
   72 0000:             
   73 0000:             ;
   74 0000:             ; Basic interpreter internal variables
   75 0000:             ;
   76 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   77 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   78 0000:             bas_nxtptr:       EQU 0204h ;
   79 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   80 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   81 0000:             bas_currenttoken: EQU 020Ah ; used in parsing
   82 0000:             bas_tokenbuffer:  EQU 020Ch ; Pointer to start of token buffer
   83 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   84 0000:                                         ; this value should be + 1 end of buffer
   85 0000:                                         ; if buffer is 0x1000-0x1fff this is
   86 0000:                                         ; set to 0x2000. Used in moving buffer around
   87 0000:                                         ; in add and remove line
   88 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   89 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   90 0000:             bas_insertptr:    EQU 0214H
   91 0000:             bas_negflag:      EQU 0216H ; PROCESS NEGATIVE NUMBER
   92 0000:             
   93 0000:             ;
   94 0000:             ; FOR-NEXT statement stack ptr and stack data
   95 0000:             ;
   96 0000:             ; for next stack data
   97 0000:             ; format
   98 0000:             ;   2 bytes for variable id (only first byte used for now)
   99 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
  100 0000:             ;   2 bytes ptr to line after for instruction (format HL)
  101 0000:             ; later add step amount
  102 0000:             ;
  103 0000:             bas_forstackptr: EQU 0280h
  104 0000:             bas_forstack: EQU 0282h
  105 0000:             
  106 0000:             ;
  107 0000:             ; GOSUB stack ptr and data
  108 0000:             ;
  109 0000:             ; gosub STACK
  110 0000:             ; format
  111 0000:             ;   2 bytes return location ptr
  112 0000:             ;
  113 0000:             bas_gosubptr: EQU 02c0h
  114 0000:             bas_gosubstack: EQU 02c2h
  115 0000:             
  116 0000:             ;
  117 0000:             ; Basic interpreter text input line buffer
  118 0000:             ;
  119 0000:             parse_input_line: EQU 300h
  120 0000:             ;
  121 0000:             ; Basic interpreter tmp buffer to build up current token line
  122 0000:             ;
  123 0000:             parse_token_buffer: EQU 400h
  124 0000:             ;
  125 0000:             ; Basic interpreter token buffer
  126 0000:             ;
  127 0000:             bas_tok_buf_start: EQU 1000h
  128 0000:             ;
  129 0000:             ; Basic interpreter token buffer end + 1
  130 0000:             ;
  131 0000:             bas_tok_buf_end: EQU 2000h
  132 0000:             ; OR
  133 0000:             ;bas_tok_buf_end: EQU 1100h ;smaller for easy debugging - 256 byte buffer
  134 0000:             
  135 0000:             ;
  136 0000:             ; basic interpreter, add IO and peek/poke
  137 0000:             ;
  138 0000:             
  139 0000:             ;
  140 0000:             ; Basic Interpreter
  141 0000:             ;
  142 0000:             
  143 0000:             ;
  144 0000:             ; BASIC Entry Points
  145 0000:             ;
  146 0000:               ORG 0e000h
  147 e000:             ;
  148 e000:             ; list
  149 e000:             ;
  150 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  151 e003: 04 e6 cf          JSR  basic_list
  152 e006: 05                Ret
  153 e007:             
  154 e007:             ;
  155 e007:                   ORG 0e010h
  156 e010:             ;
  157 e010:             ; run
  158 e010:             ;
  159 e010: 04 e5 6d          jsr basic_run
  160 e013: 05                Ret
  161 e014:             
  162 e014:             ;
  163 e014:                   ORG 0e020h
  164 e020:             ;
  165 e020:             ; cold start
  166 e020:             ;
  167 e020:             ; Hack later pass in R7
  168 e020:             ;
  169 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  170 e023: 0e 01             ldai TOKENIZER_EOF          ;write EOF to start of buffer
  171 e025: 4f                stavr r7
  172 e026: ff 02 0c          STR R7,bas_tokenbuffer
  173 e029: 1f 20 00          mviw r7,bas_tok_buf_end
  174 e02c: ff 02 0e          str r7,bas_bufferendhi
  175 e02f: 05                Ret
  176 e030:             
  177 e030:             ;
  178 e030:                   ORG 0e030h
  179 e030:             ;
  180 e030:             ; tests - called from monitor - used to test snippets of code
  181 e030:             ;
  182 e030: 04 e0 77          jsr bigtest
  183 e033: 05                ret
  184 e034:             ;
  185 e034:                   org 0e040h
  186 e040:             ;
  187 e040:             ; very basic cmd line driver
  188 e040:             ;
  189 e040: 04 ef 26          jsr basic_interprter
  190 e043: 05                ret
  191 e044:             ;
  192 e044:                   org 0e050h
  193 e050:             ;
  194 e050:             ; parse line
  195 e050:             ;
  196 e050: 04 ec 4f          jsr parse_line
  197 e053: 05                ret
  198 e054:             
  199 e054:             ;
  200 e054:                   ORG 0e060h
  201 e060:             ;
  202 e060:             ; Copy test program into token Buffer, copies 0x0400 bytes
  203 e060:             ;
  204 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  205 e063: 1e ef 00          mviw R6,BASIC_TEST
  206 e066: 1d 04 00          mviw R5,0400h
  207 e069:             
  208 e069:             bas_copyloop:
  209 e069: 46                ldavr R6
  210 e06a: 4f                stavr r7
  211 e06b: 56                incr r6
  212 e06c: 57                incr r7
  213 e06d: 5d                decr r5
  214 e06e: 2d                mvrha r5
  215 e06f: a2 e0 69          brnz bas_copyloop
  216 e072: 25                mvrla r5
  217 e073: a2 e0 69          brnz bas_copyloop
  218 e076: 05                ret
  219 e077:             
  220 e077:             bigtest:
  221 e077: 1d 00 69        mviw r5,0105
  222 e07a: 1c 00 0a        mviw r4,0010
  223 e07d: 04 ee 23        jsr parse_div16
  224 e080: 04 ff dc        jsr showregs
  225 e083: 1f ef 50        mviw r7,CRLF
  226 e086: 04 ff c0        jsr stringout
  227 e089:             
  228 e089: 1d 00 69        mviw r5,0105
  229 e08c: 1c 00 0a        mviw r4,0010
  230 e08f: 04 ee 44        jsr parse_mod16
  231 e092: 04 ff dc        jsr showregs
  232 e095: 1f ef 50        mviw r7,CRLF
  233 e098: 04 ff c0        jsr stringout
  234 e09b:             
  235 e09b: 1f 12 34        mviw r7,01234h
  236 e09e: 04 e5 f2        jsr exe_itoa
  237 e0a1: 1f ef 50        mviw r7,CRLF
  238 e0a4: 04 ff c0        jsr stringout
  239 e0a7:             
  240 e0a7:             
  241 e0a7: 05              ret
  242 e0a8:             
  243 e0a8:             ;
  244 e0a8:             ; basic interpreter messages
  245 e0a8:             ;
  246 e0a8: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "accept - unexpected token",0,0ah,0dh
  247 e0c4: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  248 e0d5: 54 4f 4b 45 
            4e 20 4e 4f 
            54 20 53 55 
            50 50 4f 52 
            54 45 44 20 
            0a 0d       bas_msg3: db "token not supported ",0ah,0dh
  249 e0eb: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  250 e0f5: 55 4e 4b 4e 
            4f 57 4e 20 
            43 4f 4d 4d 
            41 4e 44 00 
            0a 0d       parse_cmd_error: db "UNKNOWN COMMAND",0,0ah,0DH
  251 e107:             
  252 e107:             ;
  253 e107:             ; Basic interpreter - execution engine
  254 e107:             ; Register Usage
  255 e107:             ; R0 - Program Counter
  256 e107:             ; R1 - Stack Pointer
  257 e107:             ; R2 - Direct addressing mode
  258 e107:             ; R3 - Basic Interpreter Token Buffer ptr
  259 e107:             ; R4 - working register  ; or is this for-next stack ptr
  260 e107:             ; R5 - working register  ; or is this gosub stack ptr
  261 e107:             ; R6 - Working register
  262 e107:             ; R7 - parameter passing & return value
  263 e107:             ;
  264 e107:             ;exe: Is this label needed
  265 e107:             ;
  266 e107:             ; void ubasic_init()
  267 e107:             ;
  268 e107:             ; Setup basic interpreter execution engine
  269 e107:             ;
  270 e107:             exe_init:
  271 e107: 09              push
  272 e108: 1d 02 c2        MVIW R5,bas_gosubstack
  273 e10b: 1c 02 82        MVIW R4,bas_forstack
  274 e10e: 1e 02 00        MVIW R6,bas_run_ended
  275 e111: 0e 00           LDAI 0
  276 e113: 4e              STAVR R6
  277 e114: f3 02 0c        LDR R3,bas_tokenbuffer
  278 e117: 0a              pop
  279 e118: 05              RET
  280 e119:             
  281 e119:             ;
  282 e119:             ; void accept(int)
  283 e119:             ;
  284 e119:             ; compare accumulator with current token then advance to next token in buffer
  285 e119:             ; assume accumulator destroyed
  286 e119:             ;
  287 e119:             exe_accept:
  288 e119: 09              push
  289 e11a:             ;
  290 e11a:             ; get current token into accumulator
  291 e11a:             ;
  292 e11a:             ; FIX: Switch to BRNEQ to error state and save a branch
  293 e11a:             ;
  294 e11a: 43              LDAVR R3
  295 e11b: 0b              MVAT
  296 e11c: 0a              POP
  297 e11d: a8 e1 2e        BREQ exe_accept_done
  298 e120:             ;
  299 e120:             ; debug information
  300 e120:             ;
  301 e120: 04 ff e0        JSR showbytea
  302 e123: 0e 23           ldai '#'
  303 e125: 04 ff c8        JSR uartout
  304 e128: 1f e0 a8        mviw R7,bas_msg1
  305 e12b: 04 e5 a9        JSR bas_error
  306 e12e:             ;
  307 e12e:             exe_accept_done:
  308 e12e: 04 e5 ab        jsr exe_next_token
  309 e131: 05              RET
  310 e132:             
  311 e132:             ;
  312 e132:             ; int varfactor()
  313 e132:             ;
  314 e132:             ; get variable id pointed to by exe_variable_num in token stream
  315 e132:             ; (this is not a value but a variable id)
  316 e132:             ; value returned by exe_get_variable in r7
  317 e132:             ;
  318 e132:             ; return value in R7
  319 e132:             ;
  320 e132:             exe_varfactor:
  321 e132: 04 e5 e4        jsr exe_variable_num    ; get variable number id (one byte for now a-z)
  322 e135:                                         ;into accumulator
  323 e135:             ;
  324 e135:             ; variable id in accumulator, return value in r7
  325 e135:             ;
  326 e135: 04 e5 9e        jsr exe_get_variable
  327 e138: 0e 04           LDAI TOKENIZER_VARIABLE
  328 e13a: 04 e1 19        JSR exe_accept
  329 e13d: 05              RET
  330 e13e:             
  331 e13e:             ;
  332 e13e:             ; int factor()
  333 e13e:             ; return value in R7
  334 e13e:             ;
  335 e13e:             ; IS MOVE T TO A NEEDED IN ALL THESE :
  336 e13e:             ;
  337 e13e:             exe_factor:
  338 e13e:             ;
  339 e13e: 43              LDAVR R3               ;get current token into accumulator
  340 e13f: 0d 17           LDTI TOKENIZER_PLUS
  341 e141: aa e1 4c        BRNEQ exe_factor1A
  342 e144: 04 e1 19        JSR exe_accept
  343 e147: 04 e1 3e        JSR EXE_FACTOR
  344 e14a: 0c              MVTA
  345 e14b: 05              RET
  346 e14c:             
  347 e14c:             exe_factor1A:
  348 e14c: 43              LDAVR R3               ;get current token into accumulator
  349 e14d: 0d 18           LDTI TOKENIZER_MINUS
  350 e14f: aa e1 5d        BRNEQ exe_factor1B
  351 e152: 04 e1 19        JSR exe_accept
  352 e155: 04 e1 3e        JSR EXE_FACTOR
  353 e158: 04 ee b6        JSR PARSE_NEG
  354 e15b: 0c              MVTA
  355 e15c: 05              RET
  356 e15d:             
  357 e15d:             exe_factor1B:
  358 e15d: 43              LDAVR R3               ;get current token into accumulator
  359 e15e: 0d 02           LDTI TOKENIZER_NUMBER
  360 e160: aa e1 6b        BRNEQ exe_factor1
  361 e163: 04 e5 db        JSR exe_num
  362 e166: 0c              MVTA
  363 e167: 04 e1 19        JSR exe_accept
  364 e16a: 05              RET
  365 e16b:             
  366 e16b:             exe_factor1:
  367 e16b: 0d 1f           LDTI TOKENIZER_LEFTP
  368 e16d: aa e1 7c        BRNEQ exe_factor2
  369 e170: 04 e1 19        JSR exe_accept
  370 e173: 04 e1 e5        JSR exe_expr
  371 e176: 0e 20           LDAI TOKENIZER_RIGHTP
  372 e178: 04 e1 19        JSR exe_accept
  373 e17b: 05              RET
  374 e17c:             
  375 e17c:             exe_factor2:
  376 e17c: 04 e1 32        jsr exe_varfactor
  377 e17f: 05              ret
  378 e180:             
  379 e180:             ;
  380 e180:             ; int term()
  381 e180:             ; R5 = F1
  382 e180:             ; R6 = F2
  383 e180:             ; R7 = return value
  384 e180:             ;
  385 e180:             exe_term:
  386 e180: 07 05           pushr r5
  387 e182: 07 06           pushr r6
  388 e184:             
  389 e184: 04 e1 3e        jsr exe_factor
  390 e187: 0f 57           MOVRR r7,r5
  391 e189:             
  392 e189:             exe_term_loop:
  393 e189: 43              LDAVR R3
  394 e18a: 0d 1b           ldti TOKENIZER_ASTR
  395 e18c: a8 e1 9c        BREQ exe_term_astr
  396 e18f: 0d 1c           LDTI TOKENIZER_SLASH
  397 e191: a8 e1 b2        breq exe_term_slash
  398 e194: 0d 1d           ldti TOKENIZER_MOD
  399 e196: a8 e1 c8        breq exe_term_mod
  400 e199: a0 e1 de        br exe_term_done
  401 e19c:             
  402 e19c:             exe_term_astr:
  403 e19c: 04 e5 ab        jsr exe_next_token
  404 e19f: 04 e1 3e        jsr exe_factor
  405 e1a2: 0f 67           movrr r7,r6
  406 e1a4:             ;
  407 e1a4:             ; do mulitply f1 = f1 * f2
  408 e1a4:             ;
  409 e1a4: 07 04           pushr r4
  410 e1a6: 0f 46           movrr r6,r4
  411 e1a8: 04 ee 63        jsr PARSE_MUL16
  412 e1ab: 0f 57           movrr r7,r5
  413 e1ad: 08 40           popr r4
  414 e1af: a0 e1 89        BR exe_term_loop
  415 e1b2:             
  416 e1b2:             exe_term_slash:
  417 e1b2: 04 e5 ab        jsr exe_next_token
  418 e1b5: 04 e1 3e        jsr exe_factor
  419 e1b8: 0f 67           movrr r7,r6
  420 e1ba:             ;
  421 e1ba:             ; do divide f1 = f1 / f2
  422 e1ba:             ;
  423 e1ba: 07 04           pushr r4
  424 e1bc: 0f 46           movrr r6,r4
  425 e1be: 04 ee 23        jsr PARSE_DIV16
  426 e1c1: 0f 57           movrr r7,r5
  427 e1c3: 08 40           popr r4
  428 e1c5: a0 e1 89        BR exe_term_loop
  429 e1c8:             
  430 e1c8:             exe_term_mod:
  431 e1c8: 04 e5 ab        jsr exe_next_token
  432 e1cb: 04 e1 3e        jsr exe_factor
  433 e1ce: 0f 67           movrr r7,r6
  434 e1d0:             ;
  435 e1d0:             ; f1 = f1 % f2
  436 e1d0:             ;
  437 e1d0: 07 04           pushr r4
  438 e1d2: 0f 46           movrr r6,r4
  439 e1d4: 04 ee 44        jsr PARSE_MOD16
  440 e1d7: 0f 57           movrr r7,r5
  441 e1d9: 08 40           popr r4
  442 e1db: a0 e1 89        BR exe_term_loop
  443 e1de:             
  444 e1de:             exe_term_done:
  445 e1de: 0f 75           MOVRR r5,r7
  446 e1e0: 08 60           popr r6
  447 e1e2: 08 50           popr r5
  448 e1e4: 05              ret
  449 e1e5:             
  450 e1e5:             ;
  451 e1e5:             ; static VARIABLE_TYPE expr()
  452 e1e5:             ;
  453 e1e5:             ; R5 = t1
  454 e1e5:             ; R6 = t2
  455 e1e5:             ; R7 = return value
  456 e1e5:             ;
  457 e1e5:             exe_expr:
  458 e1e5: 07 05           pushr r5
  459 e1e7: 07 06           pushr r6
  460 e1e9:             
  461 e1e9: 04 e1 80        jsr exe_term
  462 e1ec: 0f 57           MOVRR r7,r5
  463 e1ee:             
  464 e1ee:             exe_expr_loop:
  465 e1ee: 43              LDAVR R3
  466 e1ef: 0d 17           ldtI TOKENIZER_PLUS
  467 e1f1: a8 e2 06        BREQ exe_expr_plus
  468 e1f4: 0d 18           ldtI TOKENIZER_MINUS
  469 e1f6: a8 e2 18        breq exe_expr_minus
  470 e1f9: 0d 19           ldtI TOKENIZER_AND
  471 e1fb: a8 e2 2a        breq exe_expr_and
  472 e1fe: 0d 1a           ldti TOKENIZER_OR
  473 e200: a8 e2 3c        breq exe_expr_or
  474 e203:             
  475 e203: a0 e2 51        br exe_expr_done
  476 e206:             
  477 e206:             exe_expr_plus:
  478 e206: 04 e5 ab        jsr exe_next_token
  479 e209: 04 e1 80        jsr exe_term
  480 e20c: 0f 67           movrr r7,r6
  481 e20e:             ;
  482 e20e:             ; t1 = t1 + t2
  483 e20e:             ;
  484 e20e: 0f 75           movrr r5,r7
  485 e210: 04 ee 9e        jsr parse_add16
  486 e213: 0f 57           movrr r7,r5
  487 e215: a0 e1 ee        BR exe_expr_loop
  488 e218:             
  489 e218:             exe_expr_minus:
  490 e218: 04 e5 ab        jsr exe_next_token
  491 e21b: 04 e1 80        jsr exe_term
  492 e21e: 0f 67           movrr r7,r6
  493 e220:             ;
  494 e220:             ; t1 = t1 - t2
  495 e220:             ;
  496 e220: 0f 75           movrr r5,r7
  497 e222: 04 ee ac        jsr parse_sub16
  498 e225: 0f 57           movrr r7,r5
  499 e227: a0 e1 ee        BR exe_expr_loop
  500 e22a:             
  501 e22a:             exe_expr_and:
  502 e22a: 04 e5 ab        jsr exe_next_token
  503 e22d: 04 e1 80        jsr exe_term
  504 e230: 0f 67           movrr r7,r6
  505 e232:             ;
  506 e232:             ; t1 = t1 & t2
  507 e232:             ;
  508 e232: 0f 75           movrr r5,r7
  509 e234: 04 ee be        jsr parse_and16
  510 e237: 0f 57           movrr r7,r5
  511 e239: a0 e1 ee        BR exe_expr_loop
  512 e23c:             
  513 e23c:             exe_expr_or:
  514 e23c: 04 e5 ab        jsr exe_next_token
  515 e23f: 04 e1 80        jsr exe_term
  516 e242: 0f 67           movrr r7,r6
  517 e244:             ;
  518 e244:             ; t1 = t1 | t2
  519 e244:             ;
  520 e244: 0f 75           movrr r5,r7
  521 e246: 04 ee c9        jsr parse_or16
  522 e249: 0f 57           movrr r7,r5
  523 e24b: a0 e1 ee        BR exe_expr_loop
  524 e24e: a0 e1 ee        BR exe_expr_loop
  525 e251:             
  526 e251:             exe_expr_done:
  527 e251: 0f 75           MOVRR r5,r7
  528 e253: 08 60           popr r6
  529 e255: 08 50           popr r5
  530 e257: 05              ret
  531 e258:             
  532 e258:             ;
  533 e258:             ; int relation ()
  534 e258:             ;
  535 e258:             ; R5 = r1
  536 e258:             ; R6 = r2
  537 e258:             ; R7 = return value
  538 e258:             ;
  539 e258:             exe_relation:
  540 e258: 07 05           pushr r5
  541 e25a: 07 06           pushr r6
  542 e25c:             
  543 e25c: 04 e1 e5        jsr exe_expr
  544 e25f: 0f 57           MOVRR r7,r5
  545 e261:             
  546 e261:             exe_relation_loop:
  547 e261: 43              LDAVR R3
  548 e262: 0d 21           LDTI TOKENIZER_LT
  549 e264: a8 e2 74        BREQ exe_relation_lt
  550 e267: 0d 22           ldti TOKENIZER_GT
  551 e269: a8 e2 92        breq exe_relation_gt
  552 e26c: 0d 23           ldti TOKENIZER_EQ
  553 e26e: a8 e2 b0        breq exe_relation_eq
  554 e271:             
  555 e271: a0 e2 cc        br exe_relation_done
  556 e274:             
  557 e274:             exe_relation_lt:
  558 e274: 04 e5 ab        jsr exe_next_token
  559 e277: 04 e1 e5        jsr exe_expr
  560 e27a: 0f 67           movrr r7,r6
  561 e27c:             ;
  562 e27c:             ; r1 = r1 < r2
  563 e27c:             ;
  564 e27c: 0f 75           movrr  r5,r7
  565 e27e: 04 ef 01        jsr parse_compare
  566 e281: 0d ff           ldti 0ffh
  567 e283: aa e2 8c        BRNEQ exe_rel_nlt
  568 e286: 1d 00 01        mviw r5,01h
  569 e289: a0 e2 61        BR exe_relation_loop
  570 e28c:             exe_rel_nlt:
  571 e28c: 1d 00 00        mviw r5,00h
  572 e28f: a0 e2 61        BR exe_relation_loop
  573 e292:             
  574 e292:             exe_relation_gt:
  575 e292: 04 e5 ab        jsr exe_next_token
  576 e295: 04 e1 e5        jsr exe_expr
  577 e298: 0f 67           movrr r7,r6
  578 e29a:             ;
  579 e29a:             ; r1 = r1 > r2
  580 e29a:             ;
  581 e29a: 0f 75           movrr  r5,r7
  582 e29c: 04 ef 01        jsr parse_compare
  583 e29f: 0d 01           ldti 01h
  584 e2a1: aa e2 aa        BRNEQ exe_rel_ngt
  585 e2a4: 1d 00 01        mviw r5,01h
  586 e2a7: a0 e2 61        BR exe_relation_loop
  587 e2aa:             exe_rel_ngt:
  588 e2aa: 1d 00 00        mviw r5,00h
  589 e2ad: a0 e2 61        BR exe_relation_loop
  590 e2b0:             
  591 e2b0:             exe_relation_eq:
  592 e2b0: 04 e5 ab        jsr exe_next_token
  593 e2b3: 04 e1 e5        jsr exe_expr
  594 e2b6: 0f 67           movrr r7,r6
  595 e2b8:             ;
  596 e2b8:             ; r1 = r1 == r2
  597 e2b8:             ;
  598 e2b8: 0f 75           movrr  r5,r7
  599 e2ba: 04 ef 01        jsr parse_compare
  600 e2bd: a2 e2 c6        brnz exe_rel_ne
  601 e2c0: 1d 00 01        mviw r5,01h
  602 e2c3: a0 e2 61        BR exe_relation_loop
  603 e2c6:             exe_rel_ne:
  604 e2c6: 1d 00 00        mviw r5,00h
  605 e2c9: a0 e2 61        BR exe_relation_loop
  606 e2cc:             
  607 e2cc:             exe_relation_done:
  608 e2cc: 0f 75           MOVRR r5,r7
  609 e2ce: 08 60           popr r6
  610 e2d0: 08 50           popr r5
  611 e2d2: 05              ret
  612 e2d3:             
  613 e2d3:             ;
  614 e2d3:             ; char * index_find (int linenum)
  615 e2d3:             ;
  616 e2d3:             ; call with line in R7
  617 e2d3:             ; return with val in R7 - tokenbuffer ptr
  618 e2d3:             ; THIS CAN BE REMOVED SINCE IT IS ONLY A SINGLE CALL
  619 e2d3:             ;
  620 e2d3:             exe_index_find:
  621 e2d3: 04 ed e7        JSR basu_find
  622 e2d6: 05              RET
  623 e2d7:             
  624 e2d7:             ;
  625 e2d7:             ; void jump_linenum(linenum)
  626 e2d7:             ;
  627 e2d7:             ; Linenum in R7
  628 e2d7:             ;
  629 e2d7:             exe_jump_line:
  630 e2d7: 04 e2 d3        JSR exe_index_find
  631 e2da: 2f              MVRHA R7
  632 e2db: a2 e2 ee        BRNZ exe_jump_line1
  633 e2de: 27              MVRLA R7
  634 e2df: a2 e2 ee        BRNZ exe_jump_line1
  635 e2e2:             ;
  636 e2e2:             ; returned 0 line not found
  637 e2e2:             ;
  638 e2e2: 0e 24           LDAI TOKENIZER_CR
  639 e2e4: 04 e1 19        JSR exe_accept
  640 e2e7: 1e 02 00        MVIW r6,bas_run_ended
  641 e2ea: 0e 01           LDAI 1
  642 e2ec: 4e              STAVR R6
  643 e2ed: 05              ret
  644 e2ee:             exe_jump_line1:
  645 e2ee:             ;   jsr tok_goto ; WHAT IS THIS
  646 e2ee: 0f 37           movrr r7,r3
  647 e2f0: 05              ret
  648 e2f1:             
  649 e2f1:             ;
  650 e2f1:             ; void goto_statement()
  651 e2f1:             ;
  652 e2f1:             exe_goto_stmt:
  653 e2f1: 0e 0d           LDAI TOKENIZER_GOTO
  654 e2f3: 04 e1 19        JSR exe_accept
  655 e2f6: 04 e1 e5        JSR exe_expr
  656 e2f9: 04 e2 d7        JSR exe_jump_line
  657 e2fc: 05              RET
  658 e2fd:             
  659 e2fd:             ;
  660 e2fd:             ; void print_statment()
  661 e2fd:             ;
  662 e2fd:             exe_print_stmt:
  663 e2fd: 0e 06           LDAI TOKENIZER_PRINT
  664 e2ff: 04 e1 19        jsr exe_accept
  665 e302:             
  666 e302:             exe_print_stmt_loop:
  667 e302: 43              LDAVR R3
  668 e303: 0d 03           LDTI TOKENIZER_STRING
  669 e305: aa e3 14        BRNEQ exe_print_stmt1
  670 e308:             ;
  671 e308:             ; this should return string to print in r2
  672 e308:             ; exe_string may not be needed tokenbufferptr is at string ?
  673 e308:             ;
  674 e308: 0f 73           movrr r3,r7
  675 e30a: 57              incr r7
  676 e30b: 04 ff c0        jsr stringout
  677 e30e: 04 e5 ab        jsr exe_next_token
  678 e311: a0 e3 47        br exe_print_stmt_test
  679 e314:             
  680 e314:             exe_print_stmt1:
  681 e314: 0d 15           ldti TOKENIZER_COMMA
  682 e316: aa e3 24        BRNEQ exe_print_stmt2
  683 e319: 0e 20           LDAI ' '
  684 e31b: 04 ff c4        JSR charout
  685 e31e: 04 e5 ab        jsr exe_next_token
  686 e321: a0 e3 47        br exe_print_stmt_test
  687 e324:             
  688 e324:             exe_print_stmt2:
  689 e324: 0d 16           ldti TOKENIZER_SEMICOLON
  690 e326: aa e3 2f        BRNEQ exe_print_stmt3
  691 e329: 04 e5 ab        jsr exe_next_token
  692 e32c: a0 e3 47        br exe_print_stmt_test
  693 e32f:             
  694 e32f:             exe_print_stmt3:
  695 e32f: 0d 04           ldti TOKENIZER_VARIABLE
  696 e331: a8 e3 41        BREQ exe_print_stmt4
  697 e334: 0d 02           ldti TOKENIZER_NUMBER
  698 e336: a8 e3 41        breq exe_print_stmt4
  699 e339: 0d 1f           ldti  TOKENIZER_LEFTP
  700 e33b: a8 e3 41        breq exe_print_stmt4
  701 e33e:             
  702 e33e: a0 e3 55        br exe_print_stmt_done
  703 e341:             
  704 e341:             exe_print_stmt4:
  705 e341: 04 e1 e5        jsr exe_expr
  706 e344:                 ;JSR showr7
  707 e344: 04 e5 f2        jsr exe_itoa
  708 e347:             
  709 e347:             exe_print_stmt_test:
  710 e347: 43              LDAVR R3
  711 e348: 0d 24           LDTI TOKENIZER_CR
  712 e34a: a8 e3 55        breq exe_print_stmt_done
  713 e34d: 0d 01           LDTI TOKENIZER_EOF
  714 e34f: a8 e3 55        breq exe_print_stmt_done
  715 e352: a0 e3 02        br exe_print_stmt_loop
  716 e355:             
  717 e355:             exe_print_stmt_done:
  718 e355: 1f ef 50        mviw R7,CRLF
  719 e358: 04 ff c0        jsr stringout
  720 e35b: 04 e5 ab        jsr exe_next_token
  721 e35e: 05              ret
  722 e35f:             
  723 e35f:             ;
  724 e35f:             ; void if_statement()
  725 e35f:             ;
  726 e35f:             exe_if_stmt:
  727 e35f: 0e 07           LDAI TOKENIZER_IF
  728 e361: 04 e1 19        JSR exe_accept
  729 e364:             
  730 e364: 04 e2 58        JSR exe_relation
  731 e367: 27              MVRLA R7
  732 e368: 09              push
  733 e369: 0e 08           LDAI TOKENIZER_THEN
  734 e36b: 04 e1 19        JSR exe_accept
  735 e36e: 0a              pop
  736 e36f:             
  737 e36f: 0d 01           LDTI 1
  738 e371: aa e3 78        BRNEQ exe_if_stmt1
  739 e374: 04 e4 c3        JSR exe_stmt
  740 e377: 05              ret
  741 e378:             
  742 e378:             exe_if_stmt1:
  743 e378: 04 e5 ab        jsr exe_next_token
  744 e37b: 43              LDAVR R3
  745 e37c: 0d 24           LDTI TOKENIZER_CR
  746 e37e: a8 e3 87        BREQ EXE_IF_STMT2
  747 e381: 0d 01           LDTI TOKENIZER_EOF
  748 e383: aa e3 78        BRNEQ EXE_IF_STMT1
  749 e386: 05              RET
  750 e387:             
  751 e387:             exe_if_stmt2:
  752 e387: 04 e5 ab        JSR EXE_NEXT_TOKEN
  753 e38a: 05              RET
  754 e38b:             
  755 e38b:             ;
  756 e38b:             ; void let_statement()
  757 e38b:             ;
  758 e38b:             exe_let_stmt:
  759 e38b: 04 e5 e4        jsr exe_variable_num
  760 e38e: 37              mvarl r7
  761 e38f: 0f 67           movrr r7,r6
  762 e391: 0e 04           ldai TOKENIZER_VARIABLE
  763 e393: 04 e1 19        jsr exe_accept
  764 e396: 0e 23           ldai TOKENIZER_EQ
  765 e398: 04 e1 19        jsr exe_accept
  766 e39b: 04 e1 e5        jsr exe_expr
  767 e39e: 26              mvrla r6
  768 e39f: 04 e5 93        JSR exe_set_variable
  769 e3a2: 0e 24           ldai TOKENIZER_CR
  770 e3a4: 04 e1 19        jsr exe_accept
  771 e3a7: 05              ret
  772 e3a8:             
  773 e3a8:             ;
  774 e3a8:             ; void gosub_statement()
  775 e3a8:             ;
  776 e3a8:             exe_gosub_stmt:
  777 e3a8: 0e 0e           ldai TOKENIZER_GOSUB
  778 e3aa: 04 e1 19        jsr exe_accept
  779 e3ad: 04 e5 db        jsr exe_num
  780 e3b0: 0e 02           ldai TOKENIZER_NUMBER
  781 e3b2: 04 e1 19        jsr exe_accept
  782 e3b5: 0e 24           ldai TOKENIZER_CR
  783 e3b7: 04 e1 19        jsr exe_accept
  784 e3ba:             ;
  785 e3ba:             ; save current token buffer ptr to gosub stack
  786 e3ba:             ;
  787 e3ba: 23             mvrla r3
  788 e3bb: 4d             stavr r5
  789 e3bc: 55             incr r5
  790 e3bd: 2b             mvrha r3
  791 e3be: 4d             stavr r5
  792 e3bf: 55             incr  r5
  793 e3c0:             ;
  794 e3c0:             ; write new gosub stack ptr location back
  795 e3c0:             ;
  796 e3c0: 04 e2 d7       JSR exe_jump_line
  797 e3c3: 05             RET
  798 e3c4:             
  799 e3c4:             ;
  800 e3c4:             ; void return_statment()
  801 e3c4:             ;
  802 e3c4:             exe_return_stmt:
  803 e3c4: 0e 0f           ldai TOKENIZER_RETURN
  804 e3c6: 04 e1 19        jsr exe_accept
  805 e3c9:             ;
  806 e3c9:             ; setup to use for storage area via R4
  807 e3c9:             ;
  808 e3c9: 5d             decr r5
  809 e3ca: 5d             decr r5
  810 e3cb:             
  811 e3cb: 45             ldavr r5
  812 e3cc: 33             mvarl r3
  813 e3cd: 55             incr r5
  814 e3ce: 45             ldavr r5
  815 e3cf: 3b             mvarh r3
  816 e3d0:             
  817 e3d0: 5d             decr r5
  818 e3d1: 05             ret
  819 e3d2:             
  820 e3d2:             ;
  821 e3d2:             ; void next_statement()
  822 e3d2:             ;
  823 e3d2:             exe_next_stmt:
  824 e3d2:             ;
  825 e3d2:             ; backup to the TO Value
  826 e3d2: 5c              decr r4
  827 e3d3: 5c              decr r4
  828 e3d4: 5c              decr r4
  829 e3d5: 5c              decr r4
  830 e3d6:             ;
  831 e3d6:             ; eat next
  832 e3d6:             ;
  833 e3d6: 0e 0c           ldai TOKENIZER_NEXT
  834 e3d8: 04 e1 19        jsr exe_accept
  835 e3db:             ;
  836 e3db:             ; get variable id (in accumulator) and hold in r6 lo
  837 e3db:             ;
  838 e3db: 04 e5 e4        jsr exe_variable_num
  839 e3de: 36              mvarl r6
  840 e3df:             ;
  841 e3df:             ; eat TOKENIZER_VARIABLE id
  842 e3df:             ;
  843 e3df: 0e 04           ldai TOKENIZER_VARIABLE
  844 e3e1: 04 e1 19        jsr exe_accept
  845 e3e4:             ;
  846 e3e4:             ; get variable value, inc by 1 and store - ADD STEP VALUE
  847 e3e4:             ;
  848 e3e4: 26              mvrla r6
  849 e3e5: 04 e5 9e        jsr exe_get_variable
  850 e3e8: 57              incr r7
  851 e3e9: 26              mvrla r6
  852 e3ea: 04 e5 93        jsr exe_set_variable
  853 e3ed:             ;
  854 e3ed:             ; get TO value into R6
  855 e3ed: 44              ldavr r4
  856 e3ee: 36              mvarl r6
  857 e3ef: 54              incr r4
  858 e3f0: 44              ldavr r4
  859 e3f1: 3e              mvarh r6
  860 e3f2: 54              incr r4
  861 e3f3:             ;
  862 e3f3:             ; for now only compare low byte HACK use compare code
  863 e3f3:             ; r7=r6 00
  864 e3f3:             ; r7>r6 01
  865 e3f3:             ; r7<r6 ff
  866 e3f3:             ;
  867 e3f3: 04 ef 01         jsr parse_compare
  868 e3f6: 0d 01            ldti 01
  869 e3f8: a8 e4 02         breq exe_next_done
  870 e3fb:             ;    mvrla r6
  871 e3fb:             ;    mvat
  872 e3fb:             ;    mvrla r7
  873 e3fb:             ;    brgt exe_next_done
  874 e3fb:             ;
  875 e3fb: 44              ldavr r4
  876 e3fc: 33              mvarl r3
  877 e3fd: 54              incr r4
  878 e3fe: 44              ldavr r4
  879 e3ff: 3b              mvarh r3
  880 e400: 54              incr r4
  881 e401: 05              ret
  882 e402:             
  883 e402:             exe_next_done:
  884 e402: 5c            decr r4
  885 e403: 5c            decr r4
  886 e404: 5c            decr r4
  887 e405: 5c            decr r4
  888 e406: 0e 24         ldai TOKENIZER_CR
  889 e408: 04 e1 19      jsr exe_accept
  890 e40b: 05            ret
  891 e40c:             
  892 e40c:             ;
  893 e40c:             ; void for_statement()
  894 e40c:             ;
  895 e40c:             exe_for_stmt:
  896 e40c:             ;
  897 e40c:             ; setup to use for storage area via R4
  898 e40c:             ;
  899 e40c: 0e 0a           ldai TOKENIZER_FOR    ; eat FOR
  900 e40e: 04 e1 19        jsr exe_accept
  901 e411:             ;
  902 e411:             ; get variable id (in accumulator) and hold in r6 lo
  903 e411:             ;
  904 e411: 04 e5 e4        jsr exe_variable_num
  905 e414: 36              mvarl r6
  906 e415:             ;
  907 e415:             ; store variable id in FOR storage - hack only lo byte, hi byte 0
  908 e415:             ;
  909 e415: 4c              stavr r4
  910 e416: 54              incr r4
  911 e417: 0e 00           ldai 0
  912 e419: 4c              stavr r4
  913 e41a: 54              incr r4
  914 e41b:             ;
  915 e41b:             ; eat variable id and = then get starting value
  916 e41b:             ;
  917 e41b: 0e 04           ldai TOKENIZER_VARIABLE
  918 e41d: 04 e1 19        jsr exe_accept
  919 e420: 0e 23           ldai TOKENIZER_EQ
  920 e422: 04 e1 19        jsr exe_accept
  921 e425: 04 e1 e5        jsr exe_expr
  922 e428:             ;
  923 e428:             ; set variable to starting value
  924 e428:             ;
  925 e428: 26              mvrla r6
  926 e429: 04 e5 93        JSR exe_set_variable
  927 e42c:             ;
  928 e42c:             ; eat TO and get to value
  929 e42c:             ;
  930 e42c: 0e 0b           ldai TOKENIZER_TO
  931 e42e: 04 e1 19        jsr exe_accept
  932 e431: 04 e1 e5        jsr exe_expr
  933 e434:             ;
  934 e434:             ; store to value in FOR storage area
  935 e434:             ;
  936 e434: 27              mvrla r7
  937 e435: 4c              stavr r4
  938 e436: 54              incr r4
  939 e437: 2f              mvrha r7
  940 e438: 4c              stavr r4
  941 e439: 54              incr r4
  942 e43a:             ;
  943 e43a:             ; EAT EOL
  944 e43a:             ;
  945 e43a: 0e 24           ldai TOKENIZER_CR
  946 e43c: 04 e1 19        jsr exe_accept
  947 e43f:             ;
  948 e43f:             ; store ptr to instruction after FOR in for storage area
  949 e43f:             ;
  950 e43f: 23              mvrla r3
  951 e440: 4c              stavr r4
  952 e441: 54              incr r4
  953 e442: 2b              mvrha r3
  954 e443: 4c              stavr r4
  955 e444: 54              incr r4
  956 e445:             ;
  957 e445:             ;   save for stackptr
  958 e445:             ;
  959 e445: 05              ret
  960 e446:             
  961 e446:             ;
  962 e446:             ; INP
  963 e446:             ;
  964 e446:             exe_inp_stmt:
  965 e446: 0e 2b           ldai TOKENIZER_INP   ; eat INP
  966 e448: 04 e1 19        jsr exe_accept
  967 e44b: 05              ret
  968 e44c:             
  969 e44c:             ;
  970 e44c:             ; outp
  971 e44c:             ;
  972 e44c:             exe_outp_stmt:
  973 e44c: 0e 2c           ldai TOKENIZER_OUTP   ; eat OUTP
  974 e44e: 04 e1 19        jsr exe_accept
  975 e451: 05              ret
  976 e452:             
  977 e452:             ;
  978 e452:             ; INPUT
  979 e452:             ;
  980 e452:             exe_input_stmt:
  981 e452: 0e 2a           ldai TOKENIZER_INPUT   ; eat INPUT
  982 e454: 04 e1 19        jsr exe_accept
  983 e457: 04 e5 e4        jsr exe_variable_num
  984 e45a: 09              Push
  985 e45b:             
  986 e45b: 1f 03 00        mviw r7,parse_input_line
  987 e45e:             
  988 e45e: 04 ef 3f        jsr get_inputline
  989 e461:             
  990 e461: 1f 03 00        mviw r7,parse_input_line
  991 e464: ff 02 02        str r7,bas_txtptr
  992 e467:             
  993 e467:             
  994 e467: 04 eb b0        jsr parse_num
  995 e46a: 0a              pop
  996 e46b: 04 e5 93        jsr  EXE_SET_VARIABLE
  997 e46e:             
  998 e46e: 0e 04           ldai TOKENIZER_VARIABLE
  999 e470: 04 e1 19        jsr EXE_ACCEPT
 1000 e473: 0e 24           ldai TOKENIZER_CR
 1001 e475: 04 e1 19        jsr exe_accept
 1002 e478: 05              RET
 1003 e479:             ;
 1004 e479:             ; void peek_statment()
 1005 e479:             ;
 1006 e479:             ;peek_statement(void) {
 1007 e479:             ;
 1008 e479:             exe_peek_stmt:
 1009 e479: 0e 12           ldai TOKENIZER_PEEK   ; eat PEEK
 1010 e47b: 04 e1 19        jsr exe_accept
 1011 e47e: 04 e1 e5        jsr exe_expr
 1012 e481: 47              LDAVR R7
 1013 e482: 37              MVARL R7
 1014 e483: 0e 00           LDAI 0
 1015 e485: 3f              MVARH R7
 1016 e486: 07 07           PUSHR R7
 1017 e488:             
 1018 e488: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
 1019 e48a: 04 e1 19        jsr exe_accept
 1020 e48d: 04 e5 e4        jsr exe_variable_num
 1021 e490: 08 70           popr r7
 1022 e492:             
 1023 e492: 04 e5 93        jsr  EXE_SET_VARIABLE
 1024 e495: 0e 04           ldai TOKENIZER_VARIABLE
 1025 e497: 04 e1 19        jsr EXE_ACCEPT
 1026 e49a: 0e 24           ldai TOKENIZER_CR
 1027 e49c: 04 e1 19        jsr exe_accept
 1028 e49f: 05              RET
 1029 e4a0:             
 1030 e4a0:             ;
 1031 e4a0:             ; void poke_statement()
 1032 e4a0:             ;
 1033 e4a0:             ;poke_statement(void) {
 1034 e4a0:             ;    VARIABLE_TYPE poke_addr;
 1035 e4a0:             ;    VARIABLE_TYPE value;
 1036 e4a0:             ;
 1037 e4a0:             ;    accept(TOKENIZER_POKE);
 1038 e4a0:             ;    poke_addr = expr();
 1039 e4a0:             ;    accept(TOKENIZER_COMMA);
 1040 e4a0:             ;    value = expr();
 1041 e4a0:             ;    accept(TOKENIZER_CR);
 1042 e4a0:             
 1043 e4a0:             ;    poke_function(poke_addr, value);
 1044 e4a0:             
 1045 e4a0:             exe_poke_stmt:
 1046 e4a0: 0e 13           ldai TOKENIZER_POKE   ; eat PEEK
 1047 e4a2: 04 e1 19        jsr exe_accept
 1048 e4a5:             
 1049 e4a5: 04 e1 e5        jsr exe_expr
 1050 e4a8: 07 07           PUSHR R7
 1051 e4aa:             
 1052 e4aa: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
 1053 e4ac: 04 e1 19        jsr exe_accept
 1054 e4af:             
 1055 e4af: 04 e1 e5        jsr exe_expr
 1056 e4b2: 27              MVRLA R7
 1057 e4b3:             
 1058 e4b3: 08 70           POPR R7
 1059 e4b5:             
 1060 e4b5: 4f              STAVR R7
 1061 e4b6:             
 1062 e4b6: 0e 24           ldai TOKENIZER_CR
 1063 e4b8: 04 e1 19        jsr exe_accept
 1064 e4bb: 05              RET
 1065 e4bc:             
 1066 e4bc:             ;
 1067 e4bc:             ; void end_statement()
 1068 e4bc:             ;
 1069 e4bc:             exe_end_stmt:
 1070 e4bc: 1e 02 00        mviw r6,bas_run_ended
 1071 e4bf: 0e 01           LDAI 1
 1072 e4c1: 4e              STAVR r6
 1073 e4c2: 05              ret
 1074 e4c3:             
 1075 e4c3:             ;
 1076 e4c3:             ; void statment()
 1077 e4c3:             ;
 1078 e4c3:             exe_stmt:
 1079 e4c3: 43              LDAVR R3
 1080 e4c4:             
 1081 e4c4: 0d 04           LDTI TOKENIZER_VARIABLE
 1082 e4c6: aa e4 cd        BRNEQ exe_stmt1
 1083 e4c9: 04 e3 8b        JSR exe_let_stmt
 1084 e4cc: 05              ret
 1085 e4cd:             
 1086 e4cd:             exe_stmt1:
 1087 e4cd: 0d 07           LDTI TOKENIZER_IF
 1088 e4cf: aa e4 d6        BRNEQ exe_stmt2
 1089 e4d2: 04 e3 5f        JSR exe_if_stmt
 1090 e4d5: 05              ret
 1091 e4d6:             
 1092 e4d6:             exe_stmt2:
 1093 e4d6: 0d 0c           LDTI TOKENIZER_NEXT
 1094 e4d8: aa e4 df        BRNEQ exe_stmt3
 1095 e4db: 04 e3 d2        JSR exe_next_stmt
 1096 e4de: 05              ret
 1097 e4df:             
 1098 e4df:             exe_stmt3:
 1099 e4df: 0d 06           LDTI TOKENIZER_PRINT
 1100 e4e1: aa e4 e8        BRNEQ exe_stmt4
 1101 e4e4: 04 e2 fd        JSR exe_print_stmt
 1102 e4e7: 05              ret
 1103 e4e8:             
 1104 e4e8:             exe_stmt4:
 1105 e4e8: 0d 0a           LDTI TOKENIZER_FOR
 1106 e4ea: aa e4 f1        BRNEQ exe_stmt5
 1107 e4ed: 04 e4 0c        JSR exe_for_stmt
 1108 e4f0: 05              ret
 1109 e4f1:             
 1110 e4f1:             exe_stmt5:
 1111 e4f1: 0d 0d           LDTI TOKENIZER_GOTO
 1112 e4f3: aa e4 fa        BRNEQ exe_stmt6
 1113 e4f6: 04 e2 f1        JSR exe_goto_stmt
 1114 e4f9: 05              ret
 1115 e4fa:             
 1116 e4fa:             exe_stmt6:
 1117 e4fa: 0d 2a           LDTI TOKENIZER_INPUT
 1118 e4fc: aa e5 03        BRNEQ exe_stmt7
 1119 e4ff: 04 e4 52        JSR exe_input_stmt
 1120 e502: 05              ret
 1121 e503:             
 1122 e503:             exe_stmt7:
 1123 e503: 0d 0e           LDTI TOKENIZER_GOSUB
 1124 e505: aa e5 0c        BRNEQ exe_stmt8
 1125 e508: 04 e3 a8        JSR exe_gosub_stmt
 1126 e50b: 05              ret
 1127 e50c:             
 1128 e50c:             exe_stmt8:
 1129 e50c: 0d 0f           LDTI TOKENIZER_RETURN
 1130 e50e: aa e5 15        BRNEQ exe_stmt9
 1131 e511: 04 e3 c4        JSR exe_return_stmt
 1132 e514: 05              ret
 1133 e515:             
 1134 e515:             exe_stmt9:
 1135 e515: 0d 12           LDTI TOKENIZER_PEEK
 1136 e517: aa e5 1e        BRNEQ exe_stmt10
 1137 e51a: 04 e4 79        JSR exe_peek_stmt
 1138 e51d: 05              ret
 1139 e51e:             
 1140 e51e:             exe_stmt10:
 1141 e51e: 0d 13           LDTI TOKENIZER_POKE
 1142 e520: aa e5 27        BRNEQ exe_stmt11
 1143 e523: 04 e4 a0        JSR exe_poke_stmt
 1144 e526: 05              ret
 1145 e527:             
 1146 e527:             exe_stmt11:
 1147 e527: 0d 14           LDTI TOKENIZER_END
 1148 e529: aa e5 30        BRNEQ exe_stmt12
 1149 e52c: 04 e4 bc        JSR exe_end_stmt
 1150 e52f: 05              ret
 1151 e530:             
 1152 e530:             exe_stmt12:
 1153 e530: 0d 05           LDTI TOKENIZER_LET
 1154 e532: aa e5 3e        BRNEQ exe_stmt13
 1155 e535: 0e 05           LDAI TOKENIZER_LET
 1156 e537: 04 e1 19        JSR exe_accept
 1157 e53a: 04 e3 8b        JSR exe_let_stmt
 1158 e53d: 05              ret
 1159 e53e:             
 1160 e53e:             exe_stmt13:
 1161 e53e: 0d 2b           LDTI TOKENIZER_INP
 1162 e540: aa e5 47        BRNEQ exe_stmt14
 1163 e543: 04 e4 46        JSR exe_inp_stmt
 1164 e546: 05              ret
 1165 e547:             
 1166 e547:             exe_stmt14:
 1167 e547: 0d 2c           LDTI TOKENIZER_OUTP
 1168 e549: aa e5 50        BRNEQ exe_stmt15
 1169 e54c: 04 e4 4c        JSR exe_outp_stmt
 1170 e54f: 05              ret
 1171 e550:             
 1172 e550:             exe_stmt15:
 1173 e550: 04 ff e0        jsr showbytea
 1174 e553: 0e 3d           ldai '='
 1175 e555: 04 ff c8        jsr uartout
 1176 e558: 1f e0 d5        MVIW R7,bas_msg3
 1177 e55b: 04 ff c0        jsr stringout
 1178 e55e: 04 ff dc        JSR SHOWREGS
 1179 e561: 04 e5 a9        jsr bas_error
 1180 e564:             
 1181 e564:             ;
 1182 e564:             ; void line_statement (void)
 1183 e564:             ;
 1184 e564:             ; IS LINENUM NEEDED? CAN we skip over here?
 1185 e564:             ;
 1186 e564:             exe_line_stmt:
 1187 e564: 0e 25           LDAI TOKENIZER_LINENUM
 1188 e566: 04 e1 19        jsr exe_accept
 1189 e569: 04 e4 c3        jsr exe_stmt
 1190 e56c: 05              ret
 1191 e56d:             
 1192 e56d:             ;
 1193 e56d:             ; void ubasic_run()
 1194 e56d:             ;
 1195 e56d:             basic_run:
 1196 e56d: 04 e1 07        JSR exe_init
 1197 e570:             
 1198 e570:             exe_run:
 1199 e570: 04 e5 7f        jsr exe_finished
 1200 e573: 0d 01           LDTI 1
 1201 e575: aa e5 79        BRNEQ exe_run_cont
 1202 e578: 05              ret
 1203 e579:             
 1204 e579:             exe_run_cont:
 1205 e579: 04 e5 64        jsr exe_line_stmt
 1206 e57c: a0 e5 70        BR exe_run
 1207 e57f:             
 1208 e57f:             ;
 1209 e57f:             ; int ubasic_finished()
 1210 e57f:             ;
 1211 e57f:             exe_finished:
 1212 e57f:             ;    MVIW R2,bas_run_ended
 1213 e57f:             ;    LDAVR R2
 1214 e57f: ec 02 00        LDA bas_run_ended
 1215 e582: 0d 01           LDTI 1
 1216 e584: a8 e5 90        BREQ exe_finished_yes
 1217 e587:             
 1218 e587: 43              ldavr r3
 1219 e588: 0d 01           ldti TOKENIZER_EOF
 1220 e58a: a8 e5 90        breq exe_finished_yes
 1221 e58d: 0e 00           ldai 0
 1222 e58f: 05              ret
 1223 e590:             
 1224 e590:             exe_finished_yes:
 1225 e590: 0e 01           LDAI 1
 1226 e592: 05              ret
 1227 e593:             
 1228 e593:             ;
 1229 e593:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1230 e593:             ;
 1231 e593:             ; R7 value (only using low byte)
 1232 e593:             ; ACCUMULATOR Variable ref number
 1233 e593:             ;
 1234 e593:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1235 e593:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1236 e593:             ;
 1237 e593:             exe_set_variable:
 1238 e593: 1a 01 00        MVIW R2,BASIC_VARS  ; SEE COMMENT below about memory alignment
 1239 e596: b6              SHL                 ; memory location x 2 (2 byte vars)
 1240 e597: 32              MVARL R2            ; change to add16 to remove align issue
 1241 e598:             ;
 1242 e598: 27              MVRLA R7
 1243 e599: 4a              STAVR R2
 1244 e59a: 52              INCR r2
 1245 e59b: 2f              mvrha r7
 1246 e59c: 4a              stavr r2
 1247 e59d:             
 1248 e59d: 05              RET
 1249 e59e:             ;
 1250 e59e:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1251 e59e:             ;
 1252 e59e:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1253 e59e:             ;
 1254 e59e:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1255 e59e:             ; and only 0-25 (var names a-z) supported
 1256 e59e:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1257 e59e:             ;
 1258 e59e:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1259 e59e:             ;
 1260 e59e:             exe_get_variable:
 1261 e59e: 1a 01 00        MVIW R2,BASIC_VARS
 1262 e5a1: b6              shl
 1263 e5a2: 32              MVARL R2
 1264 e5a3:             ;
 1265 e5a3: 42              LDAVR R2
 1266 e5a4: 37              MVARL R7
 1267 e5a5: 52              INCR R2
 1268 e5a6: 42              LDAVR R2
 1269 e5a7: 3f              MVARH R7
 1270 e5a8: 05              RET
 1271 e5a9:             
 1272 e5a9:             ;
 1273 e5a9:             ; hack this needs work
 1274 e5a9:             ;
 1275 e5a9:             bas_error:
 1276 e5a9: 03            HALT
 1277 e5aa: 05            RET
 1278 e5ab:             
 1279 e5ab:             ;
 1280 e5ab:             ; Tokenizer execute support code
 1281 e5ab:             ;
 1282 e5ab:             ; tokenizer_next - exe version
 1283 e5ab:             ;
 1284 e5ab:             exe_next_token:
 1285 e5ab: 43            ldavr r3
 1286 e5ac: 0d 02         ldti TOKENIZER_NUMBER
 1287 e5ae: aa e5 b5      BRNEQ exe_next_token1
 1288 e5b1: 53            incr r3
 1289 e5b2: 53            incr r3
 1290 e5b3: 53            incr r3
 1291 e5b4: 05            RET
 1292 e5b5:             
 1293 e5b5:             exe_next_token1:
 1294 e5b5: 0d 04         ldti TOKENIZER_VARIABLE
 1295 e5b7: aa e5 be      BRNEQ exe_next_token2
 1296 e5ba: 53            incr r3
 1297 e5bb: 53            incr r3
 1298 e5bc: 53            incr r3
 1299 e5bd: 05            RET
 1300 e5be:             
 1301 e5be:             exe_next_token2:
 1302 e5be: 0d 25         ldti TOKENIZER_LINENUM
 1303 e5c0: aa e5 c9      BRNEQ exe_next_token3
 1304 e5c3: 53            incr r3
 1305 e5c4: 53            incr r3
 1306 e5c5: 53            incr r3
 1307 e5c6: 53            incr r3
 1308 e5c7: 53            incr r3
 1309 e5c8: 05            RET
 1310 e5c9:             
 1311 e5c9:             exe_next_token3:
 1312 e5c9: 0d 03         ldti TOKENIZER_STRING
 1313 e5cb: aa e5 d9      BRNEQ exe_next_token4
 1314 e5ce: 53            incr r3
 1315 e5cf:             
 1316 e5cf:             exe_next_tok3_loop:
 1317 e5cf: 43            LDAVR R3
 1318 e5d0: a1 e5 d7      BRZ exe_next_tok3_done
 1319 e5d3: 53            incr r3
 1320 e5d4: a0 e5 cf      BR exe_next_tok3_loop
 1321 e5d7:             
 1322 e5d7:             exe_next_tok3_done:
 1323 e5d7: 53            incr r3
 1324 e5d8: 05            RET
 1325 e5d9:             
 1326 e5d9:             exe_next_token4:
 1327 e5d9: 53            incr r3
 1328 e5da: 05            ret
 1329 e5db:             
 1330 e5db:             ;
 1331 e5db:             ; numbers stored low byte followed by high byte in memory
 1332 e5db:             ;
 1333 e5db:             exe_num:
 1334 e5db: 53              incr r3
 1335 e5dc: 43              ldavr r3
 1336 e5dd: 37              mvarl r7
 1337 e5de: 53              incr r3
 1338 e5df: 43              ldavr r3
 1339 e5e0: 3f              mvarh r7
 1340 e5e1: 5b              decr r3
 1341 e5e2: 5b              decr r3
 1342 e5e3: 05              ret
 1343 e5e4:             
 1344 e5e4:             ;
 1345 e5e4:             ; hack only using low byte of id for now
 1346 e5e4:             ; return in accumulator
 1347 e5e4:             ;
 1348 e5e4:             exe_variable_num:
 1349 e5e4: 53              incr r3
 1350 e5e5: 43              ldavr r3
 1351 e5e6: 5b              decr r3
 1352 e5e7: 05              ret
 1353 e5e8:             
 1354 e5e8:             
 1355 e5e8:             ;
 1356 e5e8:             ; Convert number in r7 to ASCII
 1357 e5e8:             ;
 1358 e5e8:             ; for for negative numbers
 1359 e5e8:             ;
 1360 e5e8: 27 10 03 e8 
            00 64 00 0a 
            00 00       dividers: DW 02710h,03e8h,0064h,000Ah,0000h
 1361 e5f2:             
 1362 e5f2:             exe_itoa:
 1363 e5f2: 09                push
 1364 e5f3: 2f                mvrha r7
 1365 e5f4: b3 80             andi 080h
 1366 e5f6: a1 e6 05          brz exe_itoa_pos
 1367 e5f9:             
 1368 e5f9: 2f                mvrha r7
 1369 e5fa: b5                inva
 1370 e5fb: 3f                mvarh r7
 1371 e5fc: 27                mvrla r7
 1372 e5fd: b5                inva
 1373 e5fe: 37                mvarl r7
 1374 e5ff: 57                incr r7
 1375 e600: 0e 2d             ldai '-'
 1376 e602: 04 ff c4          jsr charout
 1377 e605:             
 1378 e605:             exe_itoa_pos:
 1379 e605: 07 04             pushr r4    ; dividers ptr
 1380 e607: 07 05             pushr r5    ; value holder
 1381 e609: 1d 00 00          mviw r5,0
 1382 e60c: 0e 01             ldai 1
 1383 e60e: 3d                mvarh r5
 1384 e60f: 07 06             pushr r6    ;
 1385 e611: 1c e5 e8          mviw  r4,dividers
 1386 e614:             
 1387 e614:             exe_itoa_loop:
 1388 e614: 44                ldavr r4
 1389 e615: 3e                mvarh r6
 1390 e616: 54                incr r4
 1391 e617: 44                ldavr r4
 1392 e618: 36                mvarl r6
 1393 e619: 5c                decr r4
 1394 e61a: 04 ef 01          jsr parse_compare
 1395 e61d: 0d ff             ldti 0ffh
 1396 e61f: a8 e6 2c          breq exe_itoa_next
 1397 e622: 0e 00             ldai 0
 1398 e624: 3d                mvarh r5
 1399 e625: 04 ee ac          jsr PARSE_SUB16
 1400 e628: 55                incr r5
 1401 e629: a0 e6 14          br exe_itoa_loop
 1402 e62c:             
 1403 e62c:             exe_itoa_next:
 1404 e62c: 2d                mvrha r5
 1405 e62d: a2 e6 39          brnz exe_itoa_notyet
 1406 e630: 25                mvrla r5
 1407 e631: b0 30             addi '0'
 1408 e633: 04 ff c4          JSR charout
 1409 e636: 0e 00             ldai 0
 1410 e638: 3d                mvarh r5
 1411 e639:             
 1412 e639:             exe_itoa_notyet:
 1413 e639: 0e 00             ldai 0
 1414 e63b: 35                mvarl r5
 1415 e63c: 54                incr r4
 1416 e63d: 54                incr r4
 1417 e63e: 44                ldavr r4
 1418 e63f: a2 e6 14          brnz exe_itoa_loop
 1419 e642: 54                incr r4
 1420 e643: 44                ldavr r4
 1421 e644: 5c                decr r4
 1422 e645: a2 e6 14          brnz exe_itoa_loop
 1423 e648:             
 1424 e648:             ;      mvrha r5
 1425 e648:             ;      brz exe_itoa_noones
 1426 e648: 27                mvrla r7
 1427 e649: b0 30             addi '0'
 1428 e64b: 04 ff c4          JSR charout
 1429 e64e:             exe_itoa_noones:
 1430 e64e: 08 60             popr r6
 1431 e650: 08 50             popr r5
 1432 e652: 08 40             popr r4
 1433 e654: 0a                pop
 1434 e655: 05                RET
 1435 e656:             
 1436 e656:             
 1437 e656:             
 1438 e656:             ;
 1439 e656:             ; List out token buffer in human readable form
 1440 e656:             ;
 1441 e656:             ; list out token buffer
 1442 e656:             ; buffer address in r7
 1443 e656:             ;
 1444 e656: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1445 e65b: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1446 e662: 49 46 20 00 tokl_if: DB "IF ",0
 1447 e666: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1448 e66c: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1449 e672: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1450 e677: 54 4f 20 00 tokl_to: DB "TO ",0
 1451 e67b: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1452 e681: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1453 e687: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1454 e68e: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1455 e696: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1456 e69b: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1457 e6a1: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1458 e6a7: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1459 e6ac: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1460 e6b2: 49 4e 50 55 
            54 20 00    tokl_input: DB "INPUT ",0
 1461 e6b9: 49 4e 50 20 
            00          tokl_inp: DB "INP ",0
 1462 e6be: 4f 55 54 50 
            20 00       tokl_outp: DB "OUTP ",0
 1463 e6c4: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1464 e6cf:             
 1465 e6cf:             
 1466 e6cf:             basic_list:
 1467 e6cf: 07 03           pushr r3
 1468 e6d1: 0f 37           movrr r7,r3
 1469 e6d3:             
 1470 e6d3:             
 1471 e6d3:             baslist_loop:
 1472 e6d3: 43              ldavr r3
 1473 e6d4:             
 1474 e6d4: 0d 00           LDTI TOKENIZER_ERROR
 1475 e6d6: aa e6 e8        BRNEQ baslist1
 1476 e6d9: 1f e6 c4        MVIW R7,tokl_error
 1477 e6dc: 04 ff c0        JSR stringout
 1478 e6df: 04 ff cc        JSR showaddr
 1479 e6e2: a0 e9 ab        BR baslist_done
 1480 e6e5: a0 e6 d3        BR baslist_loop
 1481 e6e8:             
 1482 e6e8:             baslist1:
 1483 e6e8: 0d 01           LDTI TOKENIZER_EOF
 1484 e6ea: aa e6 f3        BRNEQ baslist2
 1485 e6ed: a0 e9 ab        BR baslist_done
 1486 e6f0: a0 e6 d3        BR baslist_loop
 1487 e6f3:             
 1488 e6f3:             baslist2:
 1489 e6f3: 0d 02           LDTI TOKENIZER_NUMBER
 1490 e6f5: aa e7 0a        BRNEQ baslist3
 1491 e6f8: 53              incr r3
 1492 e6f9: 43              ldavr r3
 1493 e6fa: 37              mvarl r7
 1494 e6fb: 53              incr r3
 1495 e6fc: 43              ldavr r3
 1496 e6fd: 3f              mvarh r7
 1497 e6fe: 53              INCR R3
 1498 e6ff:             ;    jsr showr7
 1499 e6ff: 04 e5 f2        jsr exe_itoa
 1500 e702: 0e 20           ldai ' '
 1501 e704: 04 ff c8        jsr uartout
 1502 e707: a0 e6 d3        BR baslist_loop
 1503 e70a:             
 1504 e70a:             baslist3:
 1505 e70a:             ;
 1506 e70a:             ; output quotes around string
 1507 e70a:             ;
 1508 e70a: 0d 03           LDTI TOKENIZER_STRING
 1509 e70c: aa e7 26        BRNEQ baslist4
 1510 e70f: 53              incr r3
 1511 e710: 0f 73           movrr r3,r7
 1512 e712: 04 ff c0        jsr stringout
 1513 e715: 0e 20           ldai ' '
 1514 e717: 04 ff c8        jsr uartout
 1515 e71a:             
 1516 e71a:             ;
 1517 e71a:             ; does r7 point to end of string here?
 1518 e71a:             ;
 1519 e71a:             baslist_string:
 1520 e71a: 43              ldavr r3
 1521 e71b: a1 e7 22        brz baslist_stringend
 1522 e71e: 53              incr r3
 1523 e71f: a0 e7 1a        br baslist_string
 1524 e722:             
 1525 e722:             baslist_stringend:
 1526 e722: 53              incr r3
 1527 e723: a0 e6 d3        BR baslist_loop
 1528 e726:             
 1529 e726:             baslist4:
 1530 e726: 0d 04           LDTI TOKENIZER_VARIABLE
 1531 e728: aa e7 3d        BRNEQ baslist5
 1532 e72b: 53              incr r3
 1533 e72c: 43              ldavr r3
 1534 e72d: 0d 41           ldti 'A'
 1535 e72f: b8              ADDT
 1536 e730: 53              incr r3
 1537 e731: 53              incr r3
 1538 e732: 04 ff c8        jsr uartout
 1539 e735:             
 1540 e735:             ;    ldavr r3
 1541 e735:             ;    mvarl r7
 1542 e735:             ;    incr r3
 1543 e735:             ;    ldavr r3
 1544 e735:             ;    mvarh r7
 1545 e735:             ;    INCR R3
 1546 e735:             ;    jsr showr7
 1547 e735:             
 1548 e735: 0e 20           ldai ' '
 1549 e737: 04 ff c8        jsr uartout
 1550 e73a: a0 e6 d3        BR baslist_loop
 1551 e73d:             
 1552 e73d:             baslist5:
 1553 e73d: 0d 05           LDTI TOKENIZER_LET
 1554 e73f: aa e7 4c        BRNEQ baslist6
 1555 e742: 1f e6 56        MVIW R7,tokl_let
 1556 e745: 04 ff c0        JSR stringout
 1557 e748: 53              INCR R3
 1558 e749: a0 e6 d3        BR baslist_loop
 1559 e74c:             
 1560 e74c:             baslist6:
 1561 e74c: 0d 06           LDTI TOKENIZER_PRINT
 1562 e74e: aa e7 5b        BRNEQ baslist7
 1563 e751: 1f e6 5b        MVIW R7,tokl_print
 1564 e754: 04 ff c0        jsr STRINGOUT
 1565 e757: 53              INCR R3
 1566 e758: a0 e6 d3        BR baslist_loop
 1567 e75b:             
 1568 e75b:             baslist7:
 1569 e75b: 0d 07           LDTI TOKENIZER_IF
 1570 e75d: aa e7 6a        BRNEQ baslist8
 1571 e760: 1f e6 62        MVIW R7,tokl_if
 1572 e763: 04 ff c0        JSR stringout
 1573 e766: 53              INCR R3
 1574 e767: a0 e6 d3        BR baslist_loop
 1575 e76a:             
 1576 e76a:             baslist8:
 1577 e76a: 0d 08           LDTI TOKENIZER_THEN
 1578 e76c: aa e7 79        BRNEQ baslist9
 1579 e76f: 1f e6 66        MVIW R7,tokl_then
 1580 e772: 04 ff c0        JSR stringout
 1581 e775: 53              INCR R3
 1582 e776: a0 e6 d3        BR baslist_loop
 1583 e779:             
 1584 e779:             baslist9:
 1585 e779: 0d 09           LDTI TOKENIZER_ELSE
 1586 e77b: aa e7 88        BRNEQ baslist10
 1587 e77e: 1f e6 6c        MVIW R7,tokl_else
 1588 e781: 04 ff c0        JSR stringout
 1589 e784: 53              INCR R3
 1590 e785: a0 e6 d3        BR baslist_loop
 1591 e788:             
 1592 e788:             baslist10:
 1593 e788: 0d 0a           LDTI TOKENIZER_FOR
 1594 e78a: aa e7 97        BRNEQ baslist11
 1595 e78d: 1f e6 72        MVIW R7,tokl_for
 1596 e790: 04 ff c0        JSR stringout
 1597 e793: 53              INCR R3
 1598 e794: a0 e6 d3        BR baslist_loop
 1599 e797:             
 1600 e797:             baslist11:
 1601 e797: 0d 0b           LDTI TOKENIZER_TO
 1602 e799: aa e7 a6        BRNEQ baslist12
 1603 e79c: 1f e6 77        MVIW R7,tokl_to
 1604 e79f: 04 ff c0        JSR stringout
 1605 e7a2: 53              INCR R3
 1606 e7a3: a0 e6 d3        BR baslist_loop
 1607 e7a6:             
 1608 e7a6:             baslist12:
 1609 e7a6: 0d 0c           LDTI TOKENIZER_NEXT
 1610 e7a8: aa e7 b5        BRNEQ baslist13
 1611 e7ab: 1f e6 7b        MVIW R7,tokl_next
 1612 e7ae: 04 ff c0        JSR stringout
 1613 e7b1: 53              INCR R3
 1614 e7b2: a0 e6 d3        BR baslist_loop
 1615 e7b5:             
 1616 e7b5:             baslist13:
 1617 e7b5: 0d 0d           LDTI TOKENIZER_GOTO
 1618 e7b7: aa e7 c4        BRNEQ baslist14
 1619 e7ba: 1f e6 81        MVIW R7,tokl_goto
 1620 e7bd: 04 ff c0        JSR stringout
 1621 e7c0: 53              INCR R3
 1622 e7c1: a0 e6 d3        BR baslist_loop
 1623 e7c4:             
 1624 e7c4:             baslist14:
 1625 e7c4: 0d 0e           LDTI TOKENIZER_GOSUB
 1626 e7c6: aa e7 d3        BRNEQ baslist15
 1627 e7c9: 1f e6 87        MVIW R7,tokl_gosub
 1628 e7cc: 04 ff c0        JSR stringout
 1629 e7cf: 53              INCR R3
 1630 e7d0: a0 e6 d3        BR baslist_loop
 1631 e7d3:             
 1632 e7d3:             baslist15:
 1633 e7d3: 0d 0f           LDTI TOKENIZER_RETURN
 1634 e7d5: aa e7 e2        BRNEQ baslist16
 1635 e7d8: 1f e6 8e        MVIW R7,tokl_return
 1636 e7db: 04 ff c0        JSR stringout
 1637 e7de: 53              INCR R3
 1638 e7df: a0 e6 d3        BR baslist_loop
 1639 e7e2:             
 1640 e7e2:             baslist16:
 1641 e7e2: 0d 10           LDTI TOKENIZER_CALL
 1642 e7e4: aa e7 f1        BRNEQ baslist17
 1643 e7e7: 1f e6 ac        MVIW R7,tokl_call
 1644 e7ea: 04 ff c0        JSR stringout
 1645 e7ed: 53              INCR R3
 1646 e7ee: a0 e6 d3        BR baslist_loop
 1647 e7f1:             
 1648 e7f1:             baslist17:
 1649 e7f1: 0d 11           LDTI TOKENIZER_REM
 1650 e7f3: aa e8 00        BRNEQ baslist18
 1651 e7f6: 1f e6 96        MVIW R7,tokl_rem
 1652 e7f9: 04 ff c0        JSR stringout
 1653 e7fc: 53              INCR R3
 1654 e7fd: a0 e6 d3        BR baslist_loop
 1655 e800:             
 1656 e800:             baslist18:
 1657 e800: 0d 12           LDTI TOKENIZER_PEEK
 1658 e802: aa e8 0f        BRNEQ baslist19
 1659 e805: 1f e6 9b        MVIW R7,tokl_peek
 1660 e808: 04 ff c0        JSR stringout
 1661 e80b: 53              INCR R3
 1662 e80c: a0 e6 d3        BR baslist_loop
 1663 e80f:             
 1664 e80f:             baslist19:
 1665 e80f: 0d 13           LDTI TOKENIZER_POKE
 1666 e811: aa e8 1e        BRNEQ baslist20
 1667 e814: 1f e6 a1        MVIW R7,tokl_poke
 1668 e817: 04 ff c0        JSR stringout
 1669 e81a: 53              INCR R3
 1670 e81b: a0 e6 d3        BR baslist_loop
 1671 e81e:             
 1672 e81e:             baslist20:
 1673 e81e: 0d 14           LDTI TOKENIZER_END
 1674 e820: aa e8 2d        BRNEQ baslist21
 1675 e823: 1f e6 a7        MVIW R7,tokl_end
 1676 e826: 04 ff c0        JSR stringout
 1677 e829: 53              INCR R3
 1678 e82a: a0 e6 d3        BR baslist_loop
 1679 e82d:             
 1680 e82d:             baslist21:
 1681 e82d: 0d 15           LDTI TOKENIZER_COMMA
 1682 e82f: aa e8 40        BRNEQ baslist22
 1683 e832: 0e 2c           ldai ','
 1684 e834: 04 ff c8        jsr uartout
 1685 e837: 0e 20           ldai ' '
 1686 e839: 04 ff c8        jsr uartout
 1687 e83c: 53              INCR R3
 1688 e83d: a0 e6 d3        BR baslist_loop
 1689 e840:             
 1690 e840:             baslist22:
 1691 e840: 0d 16           LDTI TOKENIZER_SEMICOLON
 1692 e842: aa e8 53        BRNEQ baslist23
 1693 e845: 0e 3b           ldai ';'
 1694 e847: 04 ff c8        jsr uartout
 1695 e84a: 0e 20           ldai ' '
 1696 e84c: 04 ff c8        jsr uartout
 1697 e84f: 53              INCR R3
 1698 e850: a0 e6 d3        BR baslist_loop
 1699 e853:             
 1700 e853:             baslist23:
 1701 e853: 0d 17           LDTI TOKENIZER_PLUS
 1702 e855: aa e8 66        BRNEQ baslist24
 1703 e858: 0e 2b           ldai '+'
 1704 e85a: 04 ff c8        jsr uartout
 1705 e85d: 0e 20           ldai ' '
 1706 e85f: 04 ff c8        jsr uartout
 1707 e862: 53              INCR R3
 1708 e863: a0 e6 d3        BR baslist_loop
 1709 e866:             
 1710 e866:             baslist24:
 1711 e866: 0d 18           LDTI TOKENIZER_MINUS
 1712 e868: aa e8 79        BRNEQ baslist25
 1713 e86b: 0e 2d           ldai '-'
 1714 e86d: 04 ff c8        jsr uartout
 1715 e870: 0e 20           ldai ' '
 1716 e872: 04 ff c8        jsr uartout
 1717 e875: 53              INCR R3
 1718 e876: a0 e6 d3        BR baslist_loop
 1719 e879:             
 1720 e879:             baslist25:
 1721 e879: 0d 19           LDTI TOKENIZER_AND
 1722 e87b: aa e8 8c        BRNEQ baslist26
 1723 e87e: 0e 26           ldai '&'
 1724 e880: 04 ff c8        jsr uartout
 1725 e883: 0e 20           ldai ' '
 1726 e885: 04 ff c8        jsr uartout
 1727 e888: 53              INCR R3
 1728 e889: a0 e6 d3        BR baslist_loop
 1729 e88c:             
 1730 e88c:             baslist26:
 1731 e88c: 0d 1a           LDTI TOKENIZER_OR
 1732 e88e: aa e8 9f        BRNEQ baslist27
 1733 e891: 0e 7c           ldai '|'
 1734 e893: 04 ff c8        jsr uartout
 1735 e896: 0e 20           ldai ' '
 1736 e898: 04 ff c8        jsr uartout
 1737 e89b: 53              INCR R3
 1738 e89c: a0 e6 d3        BR baslist_loop
 1739 e89f:             
 1740 e89f:             baslist27:
 1741 e89f: 0d 1b           LDTI TOKENIZER_ASTR
 1742 e8a1: aa e8 b2        BRNEQ baslist28
 1743 e8a4: 0e 2a           ldai '*'
 1744 e8a6: 04 ff c8        jsr uartout
 1745 e8a9: 0e 20           ldai ' '
 1746 e8ab: 04 ff c8        jsr uartout
 1747 e8ae: 53              INCR R3
 1748 e8af: a0 e6 d3        BR baslist_loop
 1749 e8b2:             
 1750 e8b2:             baslist28:
 1751 e8b2: 0d 1c           LDTI TOKENIZER_SLASH
 1752 e8b4: aa e8 c5        BRNEQ baslist29
 1753 e8b7: 0e 2f           ldai '/'
 1754 e8b9: 04 ff c8        jsr uartout
 1755 e8bc: 0e 20           ldai ' '
 1756 e8be: 04 ff c8        jsr uartout
 1757 e8c1: 53              INCR R3
 1758 e8c2: a0 e6 d3        BR baslist_loop
 1759 e8c5:             
 1760 e8c5:             baslist29:
 1761 e8c5: 0d 1d           LDTI TOKENIZER_MOD
 1762 e8c7: aa e8 d8        BRNEQ baslist30
 1763 e8ca: 0e 25           ldai '%'
 1764 e8cc: 04 ff c8        jsr uartout
 1765 e8cf: 0e 20           ldai ' '
 1766 e8d1: 04 ff c8        jsr uartout
 1767 e8d4: 53              INCR R3
 1768 e8d5: a0 e6 d3        BR baslist_loop
 1769 e8d8:             
 1770 e8d8:             baslist30:
 1771 e8d8: 0d 1e           LDTI TOKENIZER_HASH
 1772 e8da: aa e8 eb        BRNEQ baslist31
 1773 e8dd: 0e 23           ldai '#'
 1774 e8df: 04 ff c8        jsr uartout
 1775 e8e2: 0e 20           ldai ' '
 1776 e8e4: 04 ff c8        jsr uartout
 1777 e8e7: 53              INCR R3
 1778 e8e8: a0 e6 d3        BR baslist_loop
 1779 e8eb:             
 1780 e8eb:             baslist31:
 1781 e8eb: 0d 1f           LDTI TOKENIZER_LEFTP
 1782 e8ed: aa e8 fe        BRNEQ baslist32
 1783 e8f0: 0e 28           ldai '()'
 1784 e8f2: 04 ff c8        jsr uartout
 1785 e8f5: 0e 20           ldai ' '
 1786 e8f7: 04 ff c8        jsr uartout
 1787 e8fa: 53              INCR R3
 1788 e8fb: a0 e6 d3        BR baslist_loop
 1789 e8fe:             
 1790 e8fe:             baslist32:
 1791 e8fe: 0d 20           LDTI TOKENIZER_RIGHTP
 1792 e900: aa e9 11        BRNEQ baslist33
 1793 e903: 0e 29           ldai ')'
 1794 e905: 04 ff c8        jsr uartout
 1795 e908: 0e 20           ldai ' '
 1796 e90a: 04 ff c8        jsr uartout
 1797 e90d: 53              INCR R3
 1798 e90e: a0 e6 d3        BR baslist_loop
 1799 e911:             
 1800 e911:             baslist33:
 1801 e911: 0d 21           LDTI TOKENIZER_LT
 1802 e913: aa e9 24        BRNEQ baslist34
 1803 e916: 0e 3c           ldai '<'
 1804 e918: 04 ff c8        jsr uartout
 1805 e91b: 0e 20           ldai ' '
 1806 e91d: 04 ff c8        jsr uartout
 1807 e920: 53              INCR R3
 1808 e921: a0 e6 d3        BR baslist_loop
 1809 e924:             
 1810 e924:             baslist34:
 1811 e924: 0d 22           LDTI TOKENIZER_GT
 1812 e926: aa e9 37        BRNEQ baslist35
 1813 e929: 0e 3e           ldai '>'
 1814 e92b: 04 ff c8        jsr uartout
 1815 e92e: 0e 20           ldai ' '
 1816 e930: 04 ff c8        jsr uartout
 1817 e933: 53              INCR R3
 1818 e934: a0 e6 d3        BR baslist_loop
 1819 e937:             
 1820 e937:             baslist35:
 1821 e937: 0d 23           LDTI TOKENIZER_EQ
 1822 e939: aa e9 4a        BRNEQ baslist36
 1823 e93c: 0e 3d           ldai '='
 1824 e93e: 04 ff c8        jsr uartout
 1825 e941: 0e 20           ldai ' '
 1826 e943: 04 ff c8        jsr uartout
 1827 e946: 53              INCR R3
 1828 e947: a0 e6 d3        BR baslist_loop
 1829 e94a:             
 1830 e94a:             baslist36:
 1831 e94a: 0d 24           LDTI TOKENIZER_CR
 1832 e94c: aa e9 59        BRNEQ baslist37
 1833 e94f: 1f ef 50        mviw R7,CRLF
 1834 e952: 04 ff c0        jsr stringout
 1835 e955: 53              INCR R3
 1836 e956: a0 e6 d3        BR baslist_loop
 1837 e959:             
 1838 e959:             baslist37:
 1839 e959: 0d 25           LDTI TOKENIZER_LINENUM
 1840 e95b: aa e9 72        BRNEQ baslist38
 1841 e95e: 53              incr r3
 1842 e95f: 43              ldavr r3
 1843 e960: 37              mvarl r7
 1844 e961: 53              incr r3
 1845 e962: 43              ldavr r3
 1846 e963: 3f              mvarh r7
 1847 e964: 53              INCR R3
 1848 e965: 53              incr r3         ;skip over line length
 1849 e966: 53              incr r3
 1850 e967: 04 e5 f2        jsr exe_itoa
 1851 e96a:                 ;jsr showr7
 1852 e96a: 0e 20           ldai ' '
 1853 e96c: 04 ff c8        jsr uartout
 1854 e96f: a0 e6 d3        BR baslist_loop
 1855 e972:             
 1856 e972:             baslist38:
 1857 e972: 0d 2a           LDTI TOKENIZER_INPUT
 1858 e974: aa e9 81        BRNEQ baslist39
 1859 e977: 1f e6 b2        MVIW R7,tokl_input
 1860 e97a: 04 ff c0        JSR stringout
 1861 e97d: 53              INCR R3
 1862 e97e: a0 e6 d3        BR baslist_loop
 1863 e981:             
 1864 e981:             baslist39:
 1865 e981: 0d 2b           LDTI TOKENIZER_INP
 1866 e983: aa e9 90        BRNEQ baslist40
 1867 e986: 1f e6 b9        MVIW R7,tokl_inp
 1868 e989: 04 ff c0        JSR stringout
 1869 e98c: 53              INCR R3
 1870 e98d: a0 e6 d3        BR baslist_loop
 1871 e990:             
 1872 e990:             baslist40:
 1873 e990: 0d 2c           LDTI TOKENIZER_OUTP
 1874 e992: aa e9 9f        BRNEQ baslist41
 1875 e995: 1f e6 be        MVIW R7,tokl_outp
 1876 e998: 04 ff c0        JSR stringout
 1877 e99b: 53              INCR R3
 1878 e99c: a0 e6 d3        BR baslist_loop
 1879 e99f:             
 1880 e99f:             baslist41:
 1881 e99f: 1f e6 c4        MVIW R7,tokl_error
 1882 e9a2: 04 ff c0        JSR stringout
 1883 e9a5: 04 ff cc        JSR showaddr
 1884 e9a8: a0 e9 ab        BR baslist_done
 1885 e9ab:             ;
 1886 e9ab:             ; any cleanup
 1887 e9ab:             ;
 1888 e9ab:             baslist_done:
 1889 e9ab: 08 30           popr r3
 1890 e9ad: 05              ret
 1891 e9ae:             
 1892 e9ae:             ;
 1893 e9ae:             ; BASIC Interpreter Parser
 1894 e9ae:             ;
 1895 e9ae:             parse_keywords:
 1896 e9ae: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1897 e9b3: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1898 e9ba: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1899 e9be: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1900 e9c4: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1901 e9ca: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1902 e9cf: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1903 e9d3: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1904 e9d9: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1905 e9df: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1906 e9e6: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1907 e9ee: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1908 e9f4: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1909 e9f9: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1910 e9ff: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1911 ea05: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1912 ea0a: 4c 49 53 54 
            00 26             DB "list",0,TOKENIZER_LIST
 1913 ea10: 52 55 4e 00 
            27                DB "run",0,TOKENIZER_RUN
 1914 ea15: 4e 45 57 00 
            28                DB "new",0,TOKENIZER_NEW
 1915 ea1a: 45 58 49 54 
            00 29             DB "exit",0,TOKENIZER_EXIT
 1916 ea20: 49 4e 50 55 
            54 00 2a          DB "input",0,TOKENIZER_INPUT
 1917 ea27: 49 4e 50 00 
            2b                DB "inp",0,TOKENIZER_INP
 1918 ea2c: 4f 55 54 50 
            00 2c             DB "outp",0,TOKENIZER_OUTP
 1919 ea32: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1920 ea35:             
 1921 ea35:             ;
 1922 ea35:             ; int singlechar (void)
 1923 ea35:             ;
 1924 ea35:             ; return TOKEN result in accumulator
 1925 ea35:             ;
 1926 ea35:             ; ready for testing
 1927 ea35:             ;
 1928 ea35:             parse_singlechar:
 1929 ea35:             ;
 1930 ea35: 07 03           pushr r3
 1931 ea37: f3 02 02        LDR r3,bas_txtptr
 1932 ea3a: 43              ldavr r3
 1933 ea3b: 08 30           popr r3
 1934 ea3d:             ;
 1935 ea3d: 0d 0a           ldti 0ah
 1936 ea3f: aa ea 45        brneq parsechar1
 1937 ea42: 0e 24           ldai TOKENIZER_CR
 1938 ea44: 05              ret
 1939 ea45:             parsechar1:
 1940 ea45: 0d 2c           ldti ','
 1941 ea47: aa ea 4d        brneq parsechar2
 1942 ea4a: 0e 15           ldai TOKENIZER_COMMA
 1943 ea4c: 05              ret
 1944 ea4d:             parsechar2:
 1945 ea4d: 0d 3b           ldti ';'
 1946 ea4f: aa ea 55        brneq parsechar3
 1947 ea52: 0e 16           ldai TOKENIZER_SEMICOLON
 1948 ea54: 05              ret
 1949 ea55:             parsechar3:
 1950 ea55: 0d 2b           ldti '+'
 1951 ea57: aa ea 5d        brneq parsechar4
 1952 ea5a: 0e 17           ldai TOKENIZER_PLUS
 1953 ea5c: 05              ret
 1954 ea5d:             parsechar4:
 1955 ea5d: 0d 2d           ldti '-'
 1956 ea5f: aa ea 65        brneq parsechar5
 1957 ea62: 0e 18           ldai TOKENIZER_MINUS
 1958 ea64: 05              ret
 1959 ea65:             parsechar5:
 1960 ea65: 0d 26           ldti '&'
 1961 ea67: aa ea 6d        brneq parsechar6
 1962 ea6a: 0e 19           ldai TOKENIZER_AND
 1963 ea6c: 05              ret
 1964 ea6d:             parsechar6:
 1965 ea6d: 0d 7c           ldti '|'
 1966 ea6f: aa ea 75        brneq parsechar7
 1967 ea72: 0e 1a           ldai TOKENIZER_OR
 1968 ea74: 05              ret
 1969 ea75:             parsechar7:
 1970 ea75: 0d 2a           ldti '*'
 1971 ea77: aa ea 7d        brneq parsechar7A
 1972 ea7a: 0e 1b           ldai TOKENIZER_ASTR
 1973 ea7c: 05              ret
 1974 ea7d:             parsechar7A:
 1975 ea7d: 0d 2f           ldti '/'
 1976 ea7f: aa ea 85        brneq parsechar8
 1977 ea82: 0e 1c           ldai TOKENIZER_SLASH
 1978 ea84: 05              ret
 1979 ea85:             parsechar8:
 1980 ea85: 0d 25           ldti '%'
 1981 ea87: aa ea 8d        brneq parsechar9
 1982 ea8a: 0e 1d           ldai TOKENIZER_MOD
 1983 ea8c: 05              ret
 1984 ea8d:             parsechar9:
 1985 ea8d: 0d 28           ldti '('
 1986 ea8f: aa ea 95        brneq parsechar10
 1987 ea92: 0e 1f           ldai TOKENIZER_LEFTP
 1988 ea94: 05              ret
 1989 ea95:             parsechar10:
 1990 ea95: 0d 23           ldti '#'
 1991 ea97: aa ea 9d        brneq parsechar11
 1992 ea9a: 0e 1e           ldai TOKENIZER_HASH
 1993 ea9c: 05              ret
 1994 ea9d:             parsechar11:
 1995 ea9d: 0d 29           ldti ')'
 1996 ea9f: aa ea a5        brneq parsechar12
 1997 eaa2: 0e 20           ldai TOKENIZER_RIGHTP
 1998 eaa4: 05              ret
 1999 eaa5:             parsechar12:
 2000 eaa5: 0d 3c           ldti '<'
 2001 eaa7: aa ea ad        brneq parsechar13
 2002 eaaa: 0e 21           ldai TOKENIZER_LT
 2003 eaac: 05              ret
 2004 eaad:             parsechar13:
 2005 eaad: 0d 3e           ldti '>'
 2006 eaaf: aa ea b5        brneq parsechar14
 2007 eab2: 0e 22           ldai TOKENIZER_GT
 2008 eab4: 05              ret
 2009 eab5:             parsechar14:
 2010 eab5: 0d 3d           ldti '='
 2011 eab7: aa ea bd        brneq parsechar15
 2012 eaba: 0e 23           ldai TOKENIZER_EQ
 2013 eabc: 05              ret
 2014 eabd:             parsechar15:
 2015 eabd: 0e 00           ldai 0
 2016 eabf: 05              ret
 2017 eac0:             
 2018 eac0:             ;
 2019 eac0:             ; int get_next_token(void)
 2020 eac0:             ;
 2021 eac0:             ; under development fix ptr nextptr
 2022 eac0:             
 2023 eac0:             parse_get_next_tok:
 2024 eac0: 07 03           pushr r3
 2025 eac2: f3 02 02        LDR R3,bas_txtptr
 2026 eac5:             ;
 2027 eac5:             ; is digit
 2028 eac5:             ;
 2029 eac5:             ; chcek for number
 2030 eac5:             ;
 2031 eac5:             parse_gnt1:
 2032 eac5: 43              ldavr r3
 2033 eac6:             ;    ldti '-'
 2034 eac6:             ;    brneq parse_gnt1_chkpos
 2035 eac6:             ;    incr r3
 2036 eac6:             ;    ldavr r3
 2037 eac6:             ;    jsr parse_isdigit
 2038 eac6:             ;    brz parse_gnt1_notneg
 2039 eac6:             ;    br parse_gnt1
 2040 eac6:             
 2041 eac6:             parse_gnt1_chkpos:
 2042 eac6: 04 ee f1        jsr parse_isdigit
 2043 eac9: a1 ea dc        brz parse_gnt2
 2044 eacc:             
 2045 eacc:             parse_gnt1loop:
 2046 eacc: 53              incr R3
 2047 eacd: 43              ldavr r3
 2048 eace: 04 ee f1        jsr parse_isdigit
 2049 ead1: a2 ea cc        brnz parse_gnt1loop
 2050 ead4: fb 02 04        STR r3,bas_nxtptr
 2051 ead7: 0e 02           ldai TOKENIZER_NUMBER
 2052 ead9: 08 30           popr r3
 2053 eadb: 05              ret
 2054 eadc:             
 2055 eadc:             ;parse_gnt1_notneg:
 2056 eadc:             ;    decr r3
 2057 eadc:             
 2058 eadc:             ;
 2059 eadc:             ; singlechar
 2060 eadc:             ;
 2061 eadc:             parse_gnt2:
 2062 eadc: 43             ldavr r3
 2063 eadd: 04 ea 35       jsr parse_singlechar
 2064 eae0: a1 ea ea       BRZ parse_gnt3
 2065 eae3: 53             incr r3
 2066 eae4: fb 02 04       STR r3,bas_nxtptr
 2067 eae7: 08 30          popr r3
 2068 eae9: 05             ret
 2069 eaea:             ;
 2070 eaea:             ; quote
 2071 eaea:             ;
 2072 eaea:             parse_gnt3:
 2073 eaea: 43              ldavr R3
 2074 eaeb: 0d 22           ldti '"'
 2075 eaed: aa eb 00        brneq parse_gnt4
 2076 eaf0:             parse_gnt3loop:
 2077 eaf0: 53              incr r3
 2078 eaf1: 43              ldavr R3
 2079 eaf2: 0d 22           ldti '"'
 2080 eaf4: aa ea f0        brneq parse_gnt3loop
 2081 eaf7: 53              incr r3
 2082 eaf8: fb 02 04        STR r3,bas_nxtptr
 2083 eafb: 0e 03           ldai TOKENIZER_STRING
 2084 eafd: 08 30           popr r3
 2085 eaff: 05              ret
 2086 eb00:             ;
 2087 eb00:             parse_gnt4:
 2088 eb00:             ;
 2089 eb00:             ; keyword search
 2090 eb00:             ;
 2091 eb00: 07 04           pushr r4
 2092 eb02: 1c e9 ae        mviw r4,parse_keywords
 2093 eb05:             top:
 2094 eb05: 44              ldavr r4
 2095 eb06: f3 02 02        LDR r3,bas_txtptr
 2096 eb09: a1 eb 2d        brz nokeyowrdsfound
 2097 eb0c:             pcmploop:
 2098 eb0c: 44              ldavr r4
 2099 eb0d: a1 eb 23        brz found
 2100 eb10: 0b              MVAT
 2101 eb11: 43              ldavr r3
 2102 eb12: aa eb 1a        brneq skiptoend
 2103 eb15: 54              incr r4
 2104 eb16: 53              incr r3
 2105 eb17: a0 eb 0c        br pcmploop
 2106 eb1a:             
 2107 eb1a:             skiptoend:
 2108 eb1a:             ;  skip to end of string and skip over token
 2109 eb1a:             skiploop:
 2110 eb1a: 44              ldavr r4
 2111 eb1b: 54              incr r4
 2112 eb1c: a2 eb 1a        brnz skiploop
 2113 eb1f: 54              incr r4
 2114 eb20: a0 eb 05        br top
 2115 eb23:             
 2116 eb23:             found:
 2117 eb23: fb 02 04        str r3,bas_nxtptr
 2118 eb26: 54              incr r4
 2119 eb27: 44              ldavr r4
 2120 eb28: 08 40           popr r4
 2121 eb2a: 08 30           popr r3
 2122 eb2c: 05              ret
 2123 eb2d:             
 2124 eb2d:             nokeyowrdsfound:
 2125 eb2d: 08 40           popr r4
 2126 eb2f:             ;
 2127 eb2f:             ;  check for variables
 2128 eb2f:             ;
 2129 eb2f: 43              ldavr r3
 2130 eb30: 0d 41           ldti 'A'
 2131 eb32: a7 eb 43        BRLT parse_gnt_error
 2132 eb35: 0d 5a           ldti 'Z'
 2133 eb37: a9 eb 43        BRGT parse_gnt_error
 2134 eb3a: 53              INCR r3
 2135 eb3b: fb 02 04        str r3,bas_nxtptr
 2136 eb3e: 0e 04           LDAI tokenizer_variable
 2137 eb40: 08 30           popr r3
 2138 eb42: 05              RET
 2139 eb43:             
 2140 eb43:             parse_gnt_error:
 2141 eb43:             ;    halt
 2142 eb43: 0e 00           ldai tokenizer_error
 2143 eb45: 08 30           popr r3
 2144 eb47: 05              ret
 2145 eb48:             
 2146 eb48:             ;
 2147 eb48:             ; void TOKENIZER_GOTO (char * program)
 2148 eb48:             ;
 2149 eb48:             ; under development, may not be needed
 2150 eb48:             ;
 2151 eb48:             ;parse_goto:
 2152 eb48:             ;    str r3,bas_txtptr
 2153 eb48:             ;    jsr parse_get_next_tok
 2154 eb48:             ;    sta bas_currenttoken
 2155 eb48:             ;    ret
 2156 eb48:             
 2157 eb48:             ;
 2158 eb48:             ; void tokenizer_init(int ptr)
 2159 eb48:             ;
 2160 eb48:             ; paramater ptr : R7 Points to text input line
 2161 eb48:             ;
 2162 eb48:             ; under development
 2163 eb48:             ;
 2164 eb48:             parse_init:
 2165 eb48:             
 2166 eb48: 07 03           pushr r3
 2167 eb4a: ff 02 02        STR R7,bas_txtptr
 2168 eb4d: 1b 04 00        MVIW r3,parse_token_buffer
 2169 eb50: fb 02 06        STR  R3,bas_tokptr
 2170 eb53: 1b 00 00        mviw r3,0
 2171 eb56: fb 02 08        str r3,bas_tokcounter
 2172 eb59: 04 ea c0        jsr parse_get_next_tok
 2173 eb5c: ed 02 0a        sta bas_currenttoken
 2174 eb5f: 08 30           popr r3
 2175 eb61: 05              ret
 2176 eb62:             
 2177 eb62:             ;
 2178 eb62:             ; int tokenizer_token(void)
 2179 eb62:             :
 2180 eb62:             parse_token:
 2181 eb62: ec 02 0a        lda bas_currenttoken
 2182 eb65: 05              ret
 2183 eb66:             
 2184 eb66:             ;
 2185 eb66:             ; void tokenizer_next(void) parser version
 2186 eb66:             ;
 2187 eb66:             parse_next:
 2188 eb66: 04 ec 20        jsr parse_finished
 2189 eb69: a1 eb 6d        brz parse_next1
 2190 eb6c: 05              ret
 2191 eb6d:             
 2192 eb6d:             parse_next1:
 2193 eb6d: 07 03           pushr r3
 2194 eb6f: f3 02 04        ldr r3,bas_nxtptr
 2195 eb72: fb 02 02        str r3,bas_txtptr
 2196 eb75:             
 2197 eb75:             parse_next1loop:
 2198 eb75: 43              ldavr r3
 2199 eb76: 0d 20           ldti ' '
 2200 eb78: aa eb 7f        brneq parse_next2
 2201 eb7b: 53              incr r3
 2202 eb7c: a0 eb 75        br parse_next1loop
 2203 eb7f:             
 2204 eb7f:             
 2205 eb7f:             parse_next2:
 2206 eb7f: fb 02 02        str r3,bas_txtptr
 2207 eb82: 04 ea c0        jsr parse_get_next_tok
 2208 eb85: ed 02 0a        sta bas_currenttoken
 2209 eb88:             
 2210 eb88: 0d 11           ldti TOKENIZER_REM
 2211 eb8a: a8 eb 90        breq parse_next3
 2212 eb8d: 08 30           popr r3
 2213 eb8f: 05              ret
 2214 eb90:             
 2215 eb90:             ;
 2216 eb90:             ; this needs to be fixed
 2217 eb90:             ; if rem return to parsel line then copy into token buffer
 2218 eb90:             ;
 2219 eb90:             parse_next3:
 2220 eb90: 04 ec 20        JSR parse_finished
 2221 eb93: a2 eb a0        BRNZ parse_nextdone
 2222 eb96: 43              ldavr r3
 2223 eb97: 0d 0a           ldti  0ah
 2224 eb99: a8 eb a0        breq parse_nextdone
 2225 eb9c: 53              incr r3
 2226 eb9d: a0 eb 90        br parse_next3
 2227 eba0:             
 2228 eba0:             parse_nextdone:
 2229 eba0: 43              ldavr r3
 2230 eba1: 0d 0a           ldti  0ah
 2231 eba3: aa eb a7        brneq parse_nextdone2
 2232 eba6: 53              incr r3
 2233 eba7:             
 2234 eba7:             parse_nextdone2:
 2235 eba7: fb 02 04        str r3,bas_nxtptr
 2236 ebaa: 04 eb 66        jsr parse_next
 2237 ebad: 08 30           popr r3
 2238 ebaf: 05              ret
 2239 ebb0:             
 2240 ebb0:             ;
 2241 ebb0:             ; VARIABLE_TYPE tokenizer_num(void)
 2242 ebb0:             ;
 2243 ebb0:             ; Hack for now input characters are ascii hex format HHHH
 2244 ebb0:             ;
 2245 ebb0:             ; value returned in R7
 2246 ebb0:             ;
 2247 ebb0:             ; Should this advance the line ptr?
 2248 ebb0:             ;
 2249 ebb0:             
 2250 ebb0:             parse_num:
 2251 ebb0: 07 03           pushr r3
 2252 ebb2: 07 04           pushr r4
 2253 ebb4: 07 05           pushr r5
 2254 ebb6: 07 06           pushr r6
 2255 ebb8: 1e 00 00        mviw r6,0           ;accumlate val in r6
 2256 ebbb: f3 02 02        LDR r3,bas_txtptr
 2257 ebbe: 1c 00 00        MVIW R4,0000h
 2258 ebc1:             ;    STR R4,bas_negflag
 2259 ebc1: 43              LDAVR R3
 2260 ebc2:             ;  ldti '-'
 2261 ebc2:             ;    brneq parse_num_pos
 2262 ebc2:             ;    MVIW R4,0ffffh
 2263 ebc2:             ;    STR R4,bas_negflag
 2264 ebc2:             ;    incr r3
 2265 ebc2:             
 2266 ebc2:             parse_num_pos:
 2267 ebc2: 04 eb f0        jsr parse_num_char
 2268 ebc5:             ;   jsr SHOWBYTEA
 2269 ebc5: 36              mvarl r6
 2270 ebc6:             parse_num_loop:
 2271 ebc6: 04 eb f0        jsr parse_num_char
 2272 ebc9:             ;   jsr showbytea
 2273 ebc9: 09              push
 2274 ebca: 0d ff           ldti 0FFH
 2275 ebcc: a8 eb e4        breq parse_num_done
 2276 ebcf:             
 2277 ebcf: 0f 56           movrr r6,r5
 2278 ebd1: 1c 00 0a        mviw r4,0ah
 2279 ebd4: 04 ee 63        jsr parse_mul16
 2280 ebd7:             ;    jsr showr7
 2281 ebd7: 0a              pop
 2282 ebd8: 1e 00 00        mviw r6,0
 2283 ebdb: 36              mvarl r6
 2284 ebdc: 04 ee 9e        jsr parse_add16
 2285 ebdf: 0f 67           movrr r7,r6
 2286 ebe1:             ;    jsr showr7
 2287 ebe1: a0 eb c6        br parse_num_loop
 2288 ebe4:             
 2289 ebe4:             parse_num_done:
 2290 ebe4: 0a              pop
 2291 ebe5: 0f 76           movrr r6,r7
 2292 ebe7:             ;    ldr r4,bas_negflag
 2293 ebe7:             ;    mvrla r4
 2294 ebe7:             ;    brz parse_num_done1
 2295 ebe7:             ;    jsr parse_neg
 2296 ebe7:             parse_num_done1:
 2297 ebe7: 08 60           popr r6
 2298 ebe9: 08 50           popr r5
 2299 ebeb: 08 40           popr r4
 2300 ebed: 08 30           popr r3
 2301 ebef:             
 2302 ebef:             ;    jsr showr7
 2303 ebef: 05              ret
 2304 ebf0:             
 2305 ebf0:             parse_num_char:
 2306 ebf0: 43              LDAVR R3
 2307 ebf1: 04 ee f1        JSR parse_isdigit
 2308 ebf4: a2 eb fa        BRNZ parse_num_char1
 2309 ebf7: 0e ff           ldai 0ffh
 2310 ebf9: 05              ret
 2311 ebfa:             parse_num_char1:
 2312 ebfa: 43              ldavr r3
 2313 ebfb: b1 30           SUBI '0'
 2314 ebfd: 53              incr r3
 2315 ebfe: 05              RET
 2316 ebff:             
 2317 ebff:             ;
 2318 ebff:             ; add error checking
 2319 ebff:             ;
 2320 ebff:             ; return hex nibble in accumulator
 2321 ebff:             ;
 2322 ebff:             parse_getnibble:
 2323 ebff: 43                LDAVR R3
 2324 ec00: 53                incr r3
 2325 ec01: 0d 39             LDTI '9'
 2326 ec03: a9 ec 09          BRGT parse_af
 2327 ec06: b1 30             SUBI '0'
 2328 ec08: 05                RET
 2329 ec09:             parse_af:
 2330 ec09: 04 ff d0          JSR toupper
 2331 ec0c: b1 41             SUBI 'A'
 2332 ec0e: b0 0a             ADDI 10
 2333 ec10: 05                RET
 2334 ec11:             ;
 2335 ec11:             ; void tokenizer_string(char *dest, int len)
 2336 ec11:             ;
 2337 ec11:             ; not used, in line parse_line
 2338 ec11:             ;
 2339 ec11:             parse_string:
 2340 ec11: 04 eb 62        JSR parse_token
 2341 ec14: 0d 03           LDTI TOKENIZER_STRING
 2342 ec16: a8 ec 1a        BREQ parse_string1
 2343 ec19: 05              ret
 2344 ec1a:             
 2345 ec1a:             parse_string1:
 2346 ec1a: 07 03           pushr r3
 2347 ec1c: f3 02 02        LDR r3,bas_txtptr
 2348 ec1f: 43              LDAVR R3
 2349 ec20:             
 2350 ec20:             
 2351 ec20:             ;
 2352 ec20:             ; void tokenizer_error_print(void)
 2353 ec20:             ;
 2354 ec20:             ; fix
 2355 ec20:             ;
 2356 ec20:             ;parse_error_print:
 2357 ec20:             ;    halt
 2358 ec20:             
 2359 ec20:             ;
 2360 ec20:             ; int tokenizer_finished(void)
 2361 ec20:             ;
 2362 ec20:             parse_finished:
 2363 ec20: 07 03           pushr r3
 2364 ec22: f3 02 02        LDR r3,bas_txtptr
 2365 ec25: 43              ldavr r3
 2366 ec26: a1 ec 3b        brz parse_finished_yes
 2367 ec29:             ;    ldti 0ah
 2368 ec29:             ;    breq parse_finished_yes
 2369 ec29:             ;    ldti 0dh
 2370 ec29:             ;    breq parse_finished_yes
 2371 ec29: 0d 01           ldti TOKENIZER_EOF
 2372 ec2b: a8 ec 3b        breq parse_finished_yes
 2373 ec2e: ec 02 0a        lda bas_currenttoken
 2374 ec31: 0d 01           ldti TOKENIZER_EOF
 2375 ec33: a8 ec 3b        breq parse_finished_yes
 2376 ec36: 08 30           popr r3
 2377 ec38: 0e 00           ldai 0
 2378 ec3a: 05              ret
 2379 ec3b:             parse_finished_yes:
 2380 ec3b: 0e 01           ldai 1
 2381 ec3d: 08 30           popr r3
 2382 ec3f: 05              ret
 2383 ec40:             
 2384 ec40:             ;
 2385 ec40:             ; int tokenizer_variable_num(void)
 2386 ec40:             ;
 2387 ec40:             parse_variable_num:
 2388 ec40: 07 03             pushr r3
 2389 ec42: f3 02 02          LDR r3,bas_txtptr
 2390 ec45: 43                ldavr r3
 2391 ec46: b1 41             subi 'A'
 2392 ec48: 37                mvarl r7
 2393 ec49: 0e 00             ldai 0
 2394 ec4b: 3f                mvarh r7
 2395 ec4c: 08 30             popr r3
 2396 ec4e: 05                ret
 2397 ec4f:             
 2398 ec4f:             ;
 2399 ec4f:             ; char *const tokenizer_pos(void)
 2400 ec4f:             ;
 2401 ec4f:             ; probably not used
 2402 ec4f:             parse_pos:
 2403 ec4f:             
 2404 ec4f:             ;not used old
 2405 ec4f:             ; char *tokenize(char *program)
 2406 ec4f:             ;
 2407 ec4f:             ; parse:
 2408 ec4f:             
 2409 ec4f:             ;
 2410 ec4f:             ; char *tokenizeLine(char *line)
 2411 ec4f:             ;
 2412 ec4f:             ; assume input text string in parse_input_line
 2413 ec4f:             ;
 2414 ec4f:             
 2415 ec4f:             parse_line:
 2416 ec4f: 04 eb 48        JSR PARSE_INIT
 2417 ec52:             
 2418 ec52: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2419 ec55: fb 02 08        str r3,bas_tokcounter
 2420 ec58: 1b 04 00        MVIW R3,parse_token_buffer
 2421 ec5b:             
 2422 ec5b: 07 03           pushr r3
 2423 ec5d: f3 02 02        LDR r3,bas_txtptr
 2424 ec60: 43              ldavr r3
 2425 ec61: 04 ee f1        jsr parse_isdigit
 2426 ec64: 08 30           popr r3
 2427 ec66: 0d 01           ldti 1
 2428 ec68: a8 ec af        breq parse_code
 2429 ec6b: 04 ea c0        jsr parse_get_next_tok
 2430 ec6e:             
 2431 ec6e:             parse_line_list:
 2432 ec6e: 0d 26           ldti tokenizer_list
 2433 ec70: aa ec 7c        brneq parse_line_exit
 2434 ec73: f7 02 0c        ldr r7,bas_tokenbuffer
 2435 ec76: 04 e6 cf        JSR  basic_list
 2436 ec79: 0e 00           ldai 0
 2437 ec7b: 05              RET
 2438 ec7c:             
 2439 ec7c:             parse_line_exit:
 2440 ec7c: 0d 29           ldti TOKENIZER_EXIT
 2441 ec7e: aa ec 87        brneq parse_line_run
 2442 ec81: 04 e5 6d        jsr basic_run
 2443 ec84: 0e 01           ldai 1
 2444 ec86: 05              RET
 2445 ec87:             
 2446 ec87:             parse_line_run:
 2447 ec87: 0d 27           ldti TOKENIZER_RUN
 2448 ec89: aa ec 92        brneq parse_line_new
 2449 ec8c: 04 e5 6d        jsr basic_run
 2450 ec8f: 0e 00           ldai 0
 2451 ec91: 05              RET
 2452 ec92:             
 2453 ec92:             parse_line_new:
 2454 ec92: 0d 28           ldti TOKENIZER_NEW
 2455 ec94: aa ec a0        brneq parse_line_error
 2456 ec97: 1f 10 00        MVIW R7,bas_tok_buf_start
 2457 ec9a: 0e 01           ldai TOKENIZER_EOF          ;write EOF to start of buffer
 2458 ec9c: 4f              stavr r7
 2459 ec9d: 0e 00           ldai 0
 2460 ec9f: 05              RET
 2461 eca0:             
 2462 eca0:             parse_line_error:
 2463 eca0: 1f e0 f5        mviw r7,parse_cmd_error
 2464 eca3: 04 ff c0        jsr stringout
 2465 eca6: 1f ef 50        mviw r7,CRLF
 2466 eca9: 04 ff c0        jsr stringout
 2467 ecac: 0e 00           ldai 0
 2468 ecae: 05              ret
 2469 ecaf:             
 2470 ecaf:             parse_code:
 2471 ecaf: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2472 ecb1: 4b              STAVR R3
 2473 ecb2: 53              INCR R3
 2474 ecb3:             
 2475 ecb3: 04 eb b0        JSR parse_num           ;store line number
 2476 ecb6: ff 02 10        str r7,bas_newlinenum
 2477 ecb9: 27              mvrla r7
 2478 ecba: 4b              stavr r3
 2479 ecbb: 53              incr r3
 2480 ecbc: 2f              mvrha r7
 2481 ecbd: 4b              stavr r3
 2482 ecbe: 53              incr r3
 2483 ecbf:             
 2484 ecbf: 53              incr r3                ; skip over line length - fill in later
 2485 ecc0: 53              incr r3
 2486 ecc1:             
 2487 ecc1:             parse_line_loop:
 2488 ecc1: 04 eb 66        JSR parse_next
 2489 ecc4: 04 eb 62        JSR parse_token
 2490 ecc7: 0d 24           ldti TOKENIZER_CR
 2491 ecc9: a8 ed 38        BREQ parse_line_done
 2492 eccc:             
 2493 eccc: 4b              STAVR R3
 2494 eccd: 53              INCR R3
 2495 ecce: f5 02 08        ldr r5,bas_tokcounter
 2496 ecd1: 55              incr r5
 2497 ecd2: fd 02 08        str r5,bas_tokcounter
 2498 ecd5:             
 2499 ecd5: 0d 02           ldti TOKENIZER_NUMBER
 2500 ecd7: aa ec ee        BRNEQ parse_line1
 2501 ecda: 04 eb b0        JSR parse_num
 2502 ecdd: 27              mvrla r7
 2503 ecde: 4b              stavr r3
 2504 ecdf: 53              incr r3
 2505 ece0: 2f              mvrha r7
 2506 ece1: 4b              stavr r3
 2507 ece2: 53              incr r3
 2508 ece3: f5 02 08        ldr r5,bas_tokcounter
 2509 ece6: 55              incr r5
 2510 ece7: 55              incr r5
 2511 ece8: fd 02 08        str r5,bas_tokcounter
 2512 eceb: a0 ec c1        BR parse_line_loop
 2513 ecee:             
 2514 ecee:             parse_line1:
 2515 ecee: 0d 03           ldti TOKENIZER_STRING
 2516 ecf0: aa ed 1f        BRNEQ parse_line2
 2517 ecf3: f4 02 02        ldr r4,bas_txtptr
 2518 ecf6: 54              incr r4                   ;skip over opening "
 2519 ecf7:             
 2520 ecf7:             parse_line1loop:
 2521 ecf7: 44              ldavr r4
 2522 ecf8: 0d 22           ldti '"'
 2523 ecfa: a8 ed 0a        breq parse_line1done
 2524 ecfd: 4b              stavr r3
 2525 ecfe: 53              incr r3
 2526 ecff: 54              incr r4
 2527 ed00: f5 02 08        ldr r5,bas_tokcounter
 2528 ed03: 55              incr r5
 2529 ed04: fd 02 08        str r5,bas_tokcounter
 2530 ed07: a0 ec f7        BR parse_line1loop
 2531 ed0a:             parse_line1done:
 2532 ed0a: 54              incr r4                   ;skip over closing "
 2533 ed0b: 0e 00           ldai 0                    ;add null into token buffer
 2534 ed0d: 4b              stavr R3
 2535 ed0e: 53              incr r3
 2536 ed0f: f5 02 08        ldr r5,bas_tokcounter
 2537 ed12: 55              incr r5
 2538 ed13: fd 02 08        str r5,bas_tokcounter
 2539 ed16: fb 02 06        str r3,BAS_TOKPTR
 2540 ed19: fc 02 02        str r4,bas_txtptr
 2541 ed1c: a0 ec c1        BR parse_line_loop
 2542 ed1f:             
 2543 ed1f:             parse_line2:
 2544 ed1f: 0d 04           ldti TOKENIZER_VARIABLE
 2545 ed21: aa ec c1        BRNEQ parse_line_loop
 2546 ed24: 04 ec 40        JSR parse_variable_num
 2547 ed27: 27              mvrla r7
 2548 ed28: 4b              stavr r3
 2549 ed29: 53              incr r3
 2550 ed2a: 2f              mvrha r7
 2551 ed2b: 4b              stavr r3
 2552 ed2c: 53              incr r3
 2553 ed2d: f5 02 08        ldr r5,bas_tokcounter
 2554 ed30: 55              incr r5
 2555 ed31: 55              incr r5
 2556 ed32: fd 02 08        str r5,bas_tokcounter
 2557 ed35: a0 ec c1        BR parse_line_loop
 2558 ed38:             
 2559 ed38:             parse_line_done:
 2560 ed38: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2561 ed3a: 4b              STAVR R3
 2562 ed3b: 53              INCR R3
 2563 ed3c:             ;    ldr r5,bas_tokcounter
 2564 ed3c:             ;    incr r5
 2565 ed3c:             ;    str r5,bas_tokcounter
 2566 ed3c:             
 2567 ed3c: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2568 ed3f: 53              incr r3
 2569 ed40: 53              incr r3
 2570 ed41: 53              incr r3
 2571 ed42: f7 02 08        ldr r7,bas_tokcounter
 2572 ed45: ff 02 12        str r7,bas_newlinelen
 2573 ed48: 27              mvrla r7
 2574 ed49: 4b              stavr r3
 2575 ed4a: 53              incr r3
 2576 ed4b: 2f              mvrha r7
 2577 ed4c: 4b              stavr r3
 2578 ed4d:             
 2579 ed4d:             ;
 2580 ed4d:             ; void addLine(char *buff)
 2581 ed4d:             ; since addline is only called from parse_tokenizeline where are these
 2582 ed4d:             ; values are know, pass them in or
 2583 ed4d:             ; maybe merge addLine to bottom of parse_tokenizeline
 2584 ed4d:             ;
 2585 ed4d:             ; r7 points to line to insert
 2586 ed4d:             ; r6 linenumber
 2587 ed4d:             ; r5 linelength
 2588 ed4d:             ;
 2589 ed4d:             parse_addline:
 2590 ed4d: f7 02 10          ldr r7,BAS_NEWLINENUM
 2591 ed50: 04 ed bf          JSR parse_removeline      ; if line number already exists delete it
 2592 ed53: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2593 ed56: 27                mvrla r7
 2594 ed57: 0d 06             ldti 6
 2595 ed59: aa ed 5f          brneq parse_addline1
 2596 ed5c: 0e 00             ldai 0
 2597 ed5e: 05                ret
 2598 ed5f:             
 2599 ed5f:             parse_addline1:                 ;find insert location
 2600 ed5f: f7 02 10          ldr r7,BAS_NEWLINENUM
 2601 ed62: f3 02 0c          ldr r3,bas_tokenBuffer
 2602 ed65:             
 2603 ed65:             parse_addlineloop:
 2604 ed65: fb 02 14          str r3,bas_insertptr
 2605 ed68: 43                ldavr r3
 2606 ed69: 0d 01             ldti TOKENIZER_EOF
 2607 ed6b: a8 ed 8e          BREQ parse_addroom
 2608 ed6e: 53                incr r3                   ;get line number of line in token buffer into r6
 2609 ed6f: 43                ldavr r3
 2610 ed70: 36                mvarl r6
 2611 ed71: 53                incr r3
 2612 ed72: 43                ldavr r3
 2613 ed73: 3e                mvarh r6
 2614 ed74: 04 ef 01          jsr parse_compare
 2615 ed77: 0d ff             ldti 0ffh
 2616 ed79: a8 ed 8e          breq parse_addroom
 2617 ed7c:             
 2618 ed7c: 53                incr r3                   ;get line length
 2619 ed7d: 43                ldavr r3
 2620 ed7e: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2621 ed81: 36                mvarl r6
 2622 ed82: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2623 ed83: 5e                decr r6
 2624 ed84: 5e                decr r6
 2625 ed85:             
 2626 ed85:             addline_moveptr:              ; advance pointer to next line
 2627 ed85: 53                incr r3
 2628 ed86: 5e                decr r6
 2629 ed87: 26                mvrla r6
 2630 ed88: a2 ed 85          brnz addline_moveptr
 2631 ed8b: a0 ed 65          br parse_addlineloop
 2632 ed8e:             
 2633 ed8e:             
 2634 ed8e:             parse_addroom:               ; make room
 2635 ed8e: 1f 20 00          mviw r7,BAS_TOK_BUF_END
 2636 ed91:             ;      decr r7
 2637 ed91: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2638 ed94: 04 ee ac          jsr parse_sub16
 2639 ed97: 1d 20 00          mviw r5,BAS_TOK_BUF_END
 2640 ed9a:             ;      decr r5
 2641 ed9a:             
 2642 ed9a: f6 02 14          ldr r6,bas_insertptr
 2643 ed9d:             parse_roomloop:
 2644 ed9d: 5f                decr r7
 2645 ed9e: 5d                decr r5
 2646 ed9f: 47                ldavr r7
 2647 eda0: 4d                stavr r5
 2648 eda1:             
 2649 eda1: 26                mvrla r6
 2650 eda2: 0b                mvat
 2651 eda3: 27                mvrla r7
 2652 eda4: aa ed 9d          brneq parse_roomloop
 2653 eda7:             
 2654 eda7: 2e                mvrha r6
 2655 eda8: 0b                mvat
 2656 eda9: 2f                mvrha r7
 2657 edaa: aa ed 9d          brneq parse_roomloop
 2658 edad:             
 2659 edad: f7 02 14          ldr r7,bas_insertptr
 2660 edb0: 1e 04 00          MVIW R6,parse_token_buffer
 2661 edb3:             
 2662 edb3:             parse_insertloop:
 2663 edb3: 46                ldavr r6
 2664 edb4: 4f                stavr r7
 2665 edb5: 56                incr r6
 2666 edb6: 57                incr r7
 2667 edb7: 0d 24             ldti 024h ; sub in actual eol token here
 2668 edb9: aa ed b3          brneq parse_insertloop
 2669 edbc: 0e 00             ldai 0
 2670 edbe: 05                ret
 2671 edbf:             
 2672 edbf:             ;
 2673 edbf:             ; void removeLine(int lineNum)
 2674 edbf:             ;
 2675 edbf:             parse_removeline:
 2676 edbf: 04 ed e7        JSR basu_find
 2677 edc2: 2f              mvrha R7
 2678 edc3: a2 ed cb        brnz parse_removeline1
 2679 edc6: 27              mvrla R7
 2680 edc7: a2 ed cb        brnz parse_removeline1
 2681 edca: 05              ret
 2682 edcb:             parse_removeline1:
 2683 edcb: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2684 edcd: 57              incr r7
 2685 edce: 57              incr r7
 2686 edcf: 57              incr r7
 2687 edd0: 47              ldavr r7
 2688 edd1: 36              mvarl r6        ; R6 = remove length
 2689 edd2: 57              incr r7
 2690 edd3: 47              ldavr r7
 2691 edd4: 3e              mvarh r6
 2692 edd5:             
 2693 edd5: 5f              decr r7         ;backup to start of line
 2694 edd6: 5f              decr r7
 2695 edd7: 5f              decr r7
 2696 edd8: 5f              decr r7
 2697 edd9: 04 ee 9e        JSR parse_add16
 2698 eddc:             parse_removeloop:
 2699 eddc: 47              ldavr r7
 2700 eddd: 4d              stavr r5
 2701 edde: 55              incr r5
 2702 eddf: 57              incr r7
 2703 ede0: 2f              MVRHA r7
 2704 ede1:             
 2705 ede1: ee 02 0e        ldt  bas_bufferendhi
 2706 ede4:             
 2707 ede4: aa ed dc        brneq parse_removeloop
 2708 ede7:             ;
 2709 ede7:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2710 ede7:             ; since we are moving complete contents of buffer
 2711 ede7:             ; Make sure it is set during addline
 2712 ede7:             ;
 2713 ede7:             
 2714 ede7:             
 2715 ede7:             ; run & parse utilites
 2716 ede7:             ;
 2717 ede7:             
 2718 ede7:             ;
 2719 ede7:             ; find in the token buffer linenum in r7
 2720 ede7:             ;
 2721 ede7:             basu_find:
 2722 ede7: 07 05           pushr r5                  ; save r5
 2723 ede9: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2724 edec:             
 2725 edec:             basu_find_loop:
 2726 edec: 45              ldavr r5                  ;get token
 2727 eded: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2728 edef: aa ed f9        brneq basu_find_loop1     ;no continue
 2729 edf2: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2730 edf5: 27              mvrla r7
 2731 edf6: 08 50           popr r5
 2732 edf8: 05              ret
 2733 edf9:             
 2734 edf9:             basu_find_loop1:
 2735 edf9: 55              incr r5                   ;skip past linenum token
 2736 edfa: 27              mvrla r7                  ;test low byte of linenum
 2737 edfb: 0b              MVAT
 2738 edfc: 45              ldavr r5
 2739 edfd: aa ee 10        brneq basu_find1          ;not eqaul
 2740 ee00: 55              incr r5
 2741 ee01: 2f              mvrha r7                  ;test high byte of linenum
 2742 ee02: 0b              MVAT
 2743 ee03: 45              ldavr r5
 2744 ee04: aa ee 11        brneq basu_find2          ;not equal
 2745 ee07: 5d              decr r5                   ;if equal backup to linenum token
 2746 ee08: 5d              decr r5
 2747 ee09: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2748 ee0b: 0e 01           ldai 1                    ;return 1 in accumulator
 2749 ee0d: 08 50           popr r5
 2750 ee0f: 05              ret
 2751 ee10:             
 2752 ee10:             basu_find1:
 2753 ee10: 55              incr r5                   ;skip over linenum high byte
 2754 ee11:             basu_find2:
 2755 ee11: 55              incr r5                   ;get line length
 2756 ee12: 45              ldavr r5
 2757 ee13: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2758 ee16: 36              mvarl r6
 2759 ee17: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2760 ee18: 5e              decr r6
 2761 ee19: 5e              decr r6
 2762 ee1a:             basu_find_moveptr:            ; advance pointer to next line
 2763 ee1a: 55              incr r5
 2764 ee1b: 5e              decr r6
 2765 ee1c: 26              mvrla r6
 2766 ee1d: a2 ee 1a        brnz basu_find_moveptr
 2767 ee20: a0 ed ec        br basu_find_loop
 2768 ee23:             
 2769 ee23:             ;
 2770 ee23:             ; Divide r5 by r4 return answer in r7
 2771 ee23:             ;
 2772 ee23:             ; return result in r7
 2773 ee23:             ;
 2774 ee23:             parse_div16:
 2775 ee23: 07 06             pushr r6
 2776 ee25: 0f 75             movrr r5,r7
 2777 ee27: 0f 64             movrr r4,r6
 2778 ee29: 1c 00 00          mviw r4,0
 2779 ee2c:             ;
 2780 ee2c:             ; 16 bit SUB of r6 from r7, return result in r7
 2781 ee2c:             ;
 2782 ee2c:             ; r7=r6 00
 2783 ee2c:             ; r7>r6 01
 2784 ee2c:             ; r7<r6 ff
 2785 ee2c:             ;
 2786 ee2c:             divloop:
 2787 ee2c: 04 ef 01        jsr parse_compare
 2788 ee2f: 0d ff           ldti 0FFH
 2789 ee31: a8 ee 3f        breq div_done
 2790 ee34: 07 06           pushr r6
 2791 ee36: 04 ee ac        jsr parse_sub16
 2792 ee39: 08 60           popr r6
 2793 ee3b: 54              incr r4
 2794 ee3c: a0 ee 2c        br divloop
 2795 ee3f:             div_done:
 2796 ee3f: 08 60           popr r6
 2797 ee41: 0f 74           MOVRR r4,r7
 2798 ee43: 05              ret
 2799 ee44:             
 2800 ee44:             ;
 2801 ee44:             ; mod r5 by r4 return answer in r7
 2802 ee44:             ;
 2803 ee44:             ; return result in r7
 2804 ee44:             ;
 2805 ee44:             parse_mod16:
 2806 ee44: 07 06             pushr r6
 2807 ee46: 0f 75             movrr r5,r7
 2808 ee48: 0f 64             movrr r4,r6
 2809 ee4a: 1c 00 00          mviw r4,0
 2810 ee4d:             ;
 2811 ee4d:             ; 16 bit SUB of r6 from r7, return result in r7
 2812 ee4d:             ;
 2813 ee4d:             modloop:
 2814 ee4d: 04 ef 01        jsr parse_compare
 2815 ee50: 0d ff           ldti 0FFH
 2816 ee52: a8 ee 60        breq mod_done
 2817 ee55: 07 06           pushr r6
 2818 ee57: 04 ee ac        jsr parse_sub16
 2819 ee5a: 08 60           popr r6
 2820 ee5c: 54              incr r4
 2821 ee5d: a0 ee 4d        br modloop
 2822 ee60:             mod_done:
 2823 ee60: 08 60           popr r6
 2824 ee62: 05              ret
 2825 ee63:             
 2826 ee63:             ;
 2827 ee63:             ; Multiple numbers in R4 and R5
 2828 ee63:             ;
 2829 ee63:             ; Return in R7
 2830 ee63:             ;
 2831 ee63:             ; R6 = Bit counter
 2832 ee63:             ;
 2833 ee63:             parse_mul16:
 2834 ee63: 07 06               pushr r6
 2835 ee65:             
 2836 ee65: 1f 00 00            MVIW R7,0
 2837 ee68: 1e 00 10            MVIW R6,10h
 2838 ee6b:             ;        jsr showregs
 2839 ee6b:             
 2840 ee6b:             parse_mulloop:
 2841 ee6b:             ;        jsr showregs
 2842 ee6b:             
 2843 ee6b: 25                  mvrla r5
 2844 ee6c: b3 01               andi  01h
 2845 ee6e: a1 ee 74            brz parse_mulskip
 2846 ee71: 04 ee 90            jsr parse_muladd16
 2847 ee74:             
 2848 ee74:             parse_mulskip:
 2849 ee74:             ;
 2850 ee74:             ; clear carry flag HACK
 2851 ee74:             ;
 2852 ee74: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2853 ee76: e0                  cshl
 2854 ee77: b0 00               addi 0      ; may not be needed
 2855 ee79:             ;
 2856 ee79: 24                  mvrla r4
 2857 ee7a:             ;        jsr showcarry
 2858 ee7a: e0                  cshl
 2859 ee7b:             ;        jsr showcarry
 2860 ee7b: 34                  mvarl r4
 2861 ee7c: 2c                  mvrha r4
 2862 ee7d:             ;        jsr showcarry
 2863 ee7d: e0                  cshl
 2864 ee7e:             ;        jsr showcarry
 2865 ee7e: 3c                  mvarh r4
 2866 ee7f:             
 2867 ee7f: 0e 00               ldai 0      ;clear carry
 2868 ee81: e0                  cshl
 2869 ee82:             ;        addi 0
 2870 ee82:             
 2871 ee82: 2d                  mvrha r5
 2872 ee83: e1                  cshr
 2873 ee84: 3d                  mvarh r5
 2874 ee85: 25                  mvrla r5
 2875 ee86: e1                  cshr
 2876 ee87: 35                  mvarl r5
 2877 ee88:             
 2878 ee88: 5e                  decr r6
 2879 ee89: 26                  mvrla r6
 2880 ee8a: a2 ee 6b            brnz parse_mulloop
 2881 ee8d: 08 60               popr r6
 2882 ee8f: 05                  ret
 2883 ee90:             
 2884 ee90:             parse_muladd16:
 2885 ee90: 0e 00               ldai 0      ;clear carry
 2886 ee92: e0                  cshl
 2887 ee93:             
 2888 ee93: 27                  MVRLA R7
 2889 ee94: 0b                  MVAT
 2890 ee95: 24                  mvrla r4
 2891 ee96: b8                  ADDT
 2892 ee97: 37                  mvarl r7
 2893 ee98:             
 2894 ee98: 2f                  mvrha r7
 2895 ee99: 0b                  MVAT
 2896 ee9a: 2c                  mvrha r4
 2897 ee9b: e3                  addtc
 2898 ee9c: 3f                  mvarh r7
 2899 ee9d: 05                  ret
 2900 ee9e:             
 2901 ee9e:             ;
 2902 ee9e:             ; 16 bit ADD r6 and r7, return result in r7
 2903 ee9e:             ;
 2904 ee9e:             parse_add16:
 2905 ee9e:             
 2906 ee9e: 0e 00             ldai 0      ;clear carry
 2907 eea0: e0                cshl
 2908 eea1: 26                MVRLA R6
 2909 eea2: 0b                MVAT
 2910 eea3: 27                mvrla r7
 2911 eea4: b8                ADDT
 2912 eea5: 37                mvarl r7
 2913 eea6: 2e                mvrha r6
 2914 eea7: 0b                MVAT
 2915 eea8: 2f                mvrha r7
 2916 eea9: e3                addtc
 2917 eeaa: 3f                mvarh r7
 2918 eeab: 05                ret
 2919 eeac:             
 2920 eeac:             ;
 2921 eeac:             ; 16 bit SUB of r6 from r7, return result in r7
 2922 eeac:             ;
 2923 eeac:             parse_sub16:
 2924 eeac: 2e                mvrha r6
 2925 eead: b5                inva
 2926 eeae: 3e                mvarh r6
 2927 eeaf: 26                mvrla r6
 2928 eeb0: b5                inva
 2929 eeb1: 36                mvarl r6
 2930 eeb2: 56                incr r6
 2931 eeb3: a0 ee 9e          br parse_add16
 2932 eeb6:             
 2933 eeb6:             ;
 2934 eeb6:             ; convert positive in r7 to negative
 2935 eeb6:             ;
 2936 eeb6:             parse_neg:
 2937 eeb6: 2f                mvrha r7
 2938 eeb7: b5                inva
 2939 eeb8: 3f                mvarh r7
 2940 eeb9: 27                mvrla r7
 2941 eeba: b5                inva
 2942 eebb: 37                mvarl r7
 2943 eebc: 57                incr r7
 2944 eebd: 05                ret
 2945 eebe:             
 2946 eebe:             ;
 2947 eebe:             ; 16 bit AND r6 and r7, return result in r7
 2948 eebe:             ;
 2949 eebe:             parse_and16:
 2950 eebe: 26                MVRLA R6
 2951 eebf: 0b                MVAT
 2952 eec0: 27                mvrla r7
 2953 eec1: bb                ANDT
 2954 eec2: 37                mvarl r7
 2955 eec3: 2e                mvrha r6
 2956 eec4: 0b                MVAT
 2957 eec5: 2f                mvrha r7
 2958 eec6: bb                ANDT
 2959 eec7: 3f                mvarh r7
 2960 eec8: 05                ret
 2961 eec9:             
 2962 eec9:             ;
 2963 eec9:             ; 16 bit OR r6 and r7, return result in r7
 2964 eec9:             ;
 2965 eec9:             parse_or16:
 2966 eec9: 26                MVRLA R6
 2967 eeca: 0b                MVAT
 2968 eecb: 27                mvrla r7
 2969 eecc: ba                ORT
 2970 eecd: 37                mvarl r7
 2971 eece: 2e                mvrha r6
 2972 eecf: 0b                MVAT
 2973 eed0: 2f                mvrha r7
 2974 eed1: ba                ORT
 2975 eed2: 3f                mvarh r7
 2976 eed3: 05                ret
 2977 eed4:             
 2978 eed4:             
 2979 eed4:             ;
 2980 eed4:             ; is digit in accumulator hex
 2981 eed4:             ; returns 1 if yes and 0 if no
 2982 eed4:             ;
 2983 eed4:             ; what about upper/lower case
 2984 eed4:             ;
 2985 eed4:             ; destroys tmp register
 2986 eed4:             parse_ishex:
 2987 eed4: 0d 30          ldti '0'
 2988 eed6: a7 ee ee       brlt parse_ishex_no
 2989 eed9: 0d 39          ldti '9'
 2990 eedb: a9 ee e1       brgt parse_ishex_af
 2991 eede: a0 ee eb       br parse_ishex_yes
 2992 eee1:             
 2993 eee1:             parse_ishex_af:
 2994 eee1: 0d 41           ldti 'A'
 2995 eee3: a7 ee ee        brlt parse_ishex_no
 2996 eee6: 0d 46           ldti 'F'
 2997 eee8: a9 ee ee        brgt parse_ishex_no
 2998 eeeb:             
 2999 eeeb:             parse_ishex_yes:
 3000 eeeb: 0e 01           ldai 1
 3001 eeed: 05              ret
 3002 eeee:             
 3003 eeee:             parse_ishex_no:
 3004 eeee: 0e 00           ldai 0
 3005 eef0: 05              ret
 3006 eef1:             
 3007 eef1:             ;
 3008 eef1:             ; is digit in accumulator decimal
 3009 eef1:             ; returns 1 if yes and 0 if no
 3010 eef1:             ;
 3011 eef1:             ; destroys tmp register
 3012 eef1:             ;
 3013 eef1:             parse_isdigit:
 3014 eef1: 0d 30          ldti '0'
 3015 eef3: a7 ee fe       brlt parse_isdigit_no
 3016 eef6: 0d 39          ldti '9'
 3017 eef8: a9 ee fe       brgt parse_isdigit_no
 3018 eefb:             
 3019 eefb: 0e 01           ldai 1
 3020 eefd: 05              ret
 3021 eefe:             
 3022 eefe:             parse_isdigit_no:
 3023 eefe: 0e 00           ldai 0
 3024 ef00: 05              ret
 3025 ef01:             
 3026 ef01:             ;
 3027 ef01:             ; 16 bit compare r6 and r7
 3028 ef01:             ;
 3029 ef01:             ; returns in accumulator
 3030 ef01:             ; r7=r6 00
 3031 ef01:             ; r7>r6 01
 3032 ef01:             ; r7<r6 ff
 3033 ef01:             ;
 3034 ef01:             ; destory Tmp
 3035 ef01:             ;
 3036 ef01:             parse_compare:
 3037 ef01: 2e            mvrha r6
 3038 ef02: 0b            mvat
 3039 ef03: 2f            mvrha r7
 3040 ef04: aa ef 10      brneq parse_compareh
 3041 ef07: 26            mvrla r6
 3042 ef08: 0b            mvat
 3043 ef09: 27            mvrla r7
 3044 ef0a: aa ef 19      brneq parse_comparel
 3045 ef0d: 0e 00         ldai 0
 3046 ef0f: 05            ret
 3047 ef10:             
 3048 ef10:             parse_compareh:
 3049 ef10: a7 ef 16      brlt parse_compareh1
 3050 ef13: 0e 01         ldai 1
 3051 ef15: 05            ret
 3052 ef16:             parse_compareh1:
 3053 ef16: 0e ff         ldai 0ffh
 3054 ef18: 05            ret
 3055 ef19:             
 3056 ef19:             parse_comparel:
 3057 ef19: a7 ef 1f      brlt parse_comparel1
 3058 ef1c: 0e 01         ldai 1
 3059 ef1e: 05            ret
 3060 ef1f:             parse_comparel1:
 3061 ef1f: 0e ff         ldai 0ffh
 3062 ef21: 05            ret
 3063 ef22:             
 3064 ef22: 3e 3e 3e 00 basic_prompt: db ">>>",0
 3065 ef26:             basic_interprter:
 3066 ef26:                     ;build input string
 3067 ef26:                     ;point register to BUFFER
 3068 ef26:                     ;loop fetch chars
 3069 ef26:                     ;until CR
 3070 ef26:                     ;be sure line ends with a NULL or CR
 3071 ef26:                     ;what does parse require???
 3072 ef26: 1f ef 22            MVIW R7,basic_prompt
 3073 ef29: 04 ff c0            JSR stringout
 3074 ef2c:             
 3075 ef2c: 1f 03 00            mviw r7,parse_input_line
 3076 ef2f:             
 3077 ef2f:             parse_inputloop:
 3078 ef2f: 04 ef 3f            jsr get_inputline
 3079 ef32:             
 3080 ef32: 1f 03 00            mviw r7,parse_input_line
 3081 ef35: 04 ec 4f            JSR parse_line
 3082 ef38:             
 3083 ef38: a1 ef 26            BRZ basic_interprter
 3084 ef3b: 05                  RET
 3085 ef3c:             
 3086 ef3c: 1b 03 00            mviw r3,parse_input_line
 3087 ef3f:             
 3088 ef3f:             get_inputline:
 3089 ef3f: 04 ff e8            jsr uartin
 3090 ef42: 4f                  stavr r7
 3091 ef43: 57                  incr r7
 3092 ef44: 0d 0a               ldti 0ah  ;1 changed from 0a to 0D for new emulator code, changed back
 3093 ef46: aa ef 3f            brneq get_inputline
 3094 ef49: 1f ef 50            MVIW R7,CRLF
 3095 ef4c: 04 ff c0            JSR STRINGOUT
 3096 ef4f: 05                  RET
 3097 ef50:             
 3098 ef50:             ;
 3099 ef50:             ; STRINGS
 3100 ef50:             ;
 3101 ef50: 0a 0d 00    CRLF: DB 0ah,0dh,0
 3102 ef53:             ;
 3103 ef53:             
 3104 ef53:                   ORG 0EF00h
 3105 ef00:             
 3106 ef00:             basic_test:
 3107 ef00:             
 3108 ef00:             ;    DB  25h,0ah,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h,24h,25h,14h,00h
 3109 ef00:             ;    DB  0ah,00h,06h,04h,00h,00h,24h,25h,1eh,00h,11h,00h,04h,00h,00h,23h
 3110 ef00:             ;    DB  04h,00h,00h,17h,02h,01h,00h,24h,25h,28h,00h,13h,00h,07h,04h,00h
 3111 ef00:             ;    DB  00h,21h,02h,0ah,00h,08h,0dh,02h,14h,00h,24h,01h,00h,00h,00h,00h
 3112 ef00:             
 3113 ef00:             ;    DB  25h,0ah,00h,14h,00h,06h,1fh,02h,01h,00h,17h,02h,02h,00h,20h,17h
 3114 ef00:             ;    DB  02h,03h,00h,24h,25h,14h,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h
 3115 ef00:             ;    DB  24h,25h,1eh,00h,0dh,00h,04h,01h,00h,23h,02h,02h,00h,24h,25h,28h
 3116 ef00:             ;    DB  00h,0eh,00h,06h,04h,00h,00h,17h,04h,01h,00h,24h,25h,32h,00h,15h
 3117 ef00:             ;    DB  00h,04h,02h,00h,23h,04h,00h,00h,17h,04h,01h,00h,17h,02h,05h,00h
 3118 ef00:             ;    DB  24h,25h,3ch,00h,0ah,00h,06h,04h,02h,00h,24h,01h,00h,00h,00h,00h
 3119 ef00:             
 3120 ef00:             ;    DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 3121 ef00:             ;    DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 3122 ef00:             ;    DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 3123 ef00:             ;    DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 3124 ef00:             ;    DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 3125 ef00:             ;    DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 3126 ef00:             ;    DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 3127 ef00:             ;    DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 3128 ef00:             ;    DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 3129 ef00:             ;    DB  0dh,02h,7dh,00h,24h,25h,5ah,0h,12h,00h,06h,03h,6eh,65h,78h,74h
 3130 ef00:             ;    DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 3131 ef00:             ;    DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 3132 ef00:             ;    DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 3133 ef00:             ;    DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 3134 ef00:             ;    DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 3135 ef00:             
 3136 ef00:             ;
 3137 ef00:             ; The End
 3138 ef00:             ;
 3139 ef00:               ORG 0EFFFh
 3140 efff:             ZZZZ:
 3141 efff: 00            DB   0

ed85h: ADDLINE_MOVEPTR  - <  2626>   2630 
ef26h: BASIC_INTERPRTER - <  3065>    189   3083 
e6cfh: BASIC_LIST       - <  1466>    151   2435 
ef22h: BASIC_PROMPT     - <  3064>   3072 
e56dh: BASIC_RUN        - <  1195>    159   2442   2449 
ef00h: BASIC_TEST       - <  3106>    205 
0100h: BASIC_VARS       - <    71>   1238   1261 
e6e8h: BASLIST1         - <  1482>   1475 
e788h: BASLIST10        - <  1592>   1586 
e797h: BASLIST11        - <  1600>   1594 
e7a6h: BASLIST12        - <  1608>   1602 
e7b5h: BASLIST13        - <  1616>   1610 
e7c4h: BASLIST14        - <  1624>   1618 
e7d3h: BASLIST15        - <  1632>   1626 
e7e2h: BASLIST16        - <  1640>   1634 
e7f1h: BASLIST17        - <  1648>   1642 
e800h: BASLIST18        - <  1656>   1650 
e80fh: BASLIST19        - <  1664>   1658 
e6f3h: BASLIST2         - <  1488>   1484 
e81eh: BASLIST20        - <  1672>   1666 
e82dh: BASLIST21        - <  1680>   1674 
e840h: BASLIST22        - <  1690>   1682 
e853h: BASLIST23        - <  1700>   1692 
e866h: BASLIST24        - <  1710>   1702 
e879h: BASLIST25        - <  1720>   1712 
e88ch: BASLIST26        - <  1730>   1722 
e89fh: BASLIST27        - <  1740>   1732 
e8b2h: BASLIST28        - <  1750>   1742 
e8c5h: BASLIST29        - <  1760>   1752 
e70ah: BASLIST3         - <  1504>   1490 
e8d8h: BASLIST30        - <  1770>   1762 
e8ebh: BASLIST31        - <  1780>   1772 
e8feh: BASLIST32        - <  1790>   1782 
e911h: BASLIST33        - <  1800>   1792 
e924h: BASLIST34        - <  1810>   1802 
e937h: BASLIST35        - <  1820>   1812 
e94ah: BASLIST36        - <  1830>   1822 
e959h: BASLIST37        - <  1838>   1832 
e972h: BASLIST38        - <  1856>   1840 
e981h: BASLIST39        - <  1864>   1858 
e726h: BASLIST4         - <  1529>   1509 
e990h: BASLIST40        - <  1872>   1866 
e99fh: BASLIST41        - <  1880>   1874 
e73dh: BASLIST5         - <  1552>   1531 
e74ch: BASLIST6         - <  1560>   1554 
e75bh: BASLIST7         - <  1568>   1562 
e76ah: BASLIST8         - <  1576>   1570 
e779h: BASLIST9         - <  1584>   1578 
e9abh: BASLIST_DONE     - <  1888>   1479   1485   1884 
e6d3h: BASLIST_LOOP     - <  1471>   1480   1486   1502   1527   1550   1558 
         1566   1574   1582   1590   1598   1606   1614   1622   1630   1638 
         1646   1654   1662   1670   1678   1688   1698   1708   1718   1728 
         1738   1748   1758   1768   1778   1788   1798   1808   1818   1828 
         1836   1854   1862   1870   1878 
e71ah: BASLIST_STRING   - <  1519>   1523 
e722h: BASLIST_STRINGEND - <  1525>   1521 
ede7h: BASU_FIND        - <  2721>    621   2676 
ee10h: BASU_FIND1       - <  2752>   2739 
ee11h: BASU_FIND2       - <  2754>   2744 
edech: BASU_FIND_LOOP   - <  2725>   2767 
edf9h: BASU_FIND_LOOP1  - <  2734>   2728 
ee1ah: BASU_FIND_MOVEPTR - <  2762>   2766 
020eh: BAS_BUFFERENDHI  - <    83>    174   2705 
e069h: BAS_COPYLOOP     - <   208>    215    217 
020ah: BAS_CURRENTTOKEN - <    81>   2173   2181   2208   2373 
e5a9h: BAS_ERROR        - <  1275>    305   1179 
0282h: BAS_FORSTACK     - <   104>    273 
0280h: BAS_FORSTACKPTR  - <   103> 
02c0h: BAS_GOSUBPTR     - <   113> 
02c2h: BAS_GOSUBSTACK   - <   114>    272 
0214h: BAS_INSERTPTR    - <    90>   2604   2642   2659 
e0a8h: BAS_MSG1         - <   246>    304 
e0c4h: BAS_MSG2         - <   247> 
e0d5h: BAS_MSG3         - <   248>   1176 
0216h: BAS_NEGFLAG      - <    91> 
0212h: BAS_NEWLINELEN   - <    89>   2572   2592   2637 
0210h: BAS_NEWLINENUM   - <    88>   2476   2590   2600 
0204h: BAS_NXTPTR       - <    78>   2050   2066   2082   2117   2135   2194 
         2235 
0200h: BAS_RUN_ENDED    - <    76>    274    640   1070   1214 
0208h: BAS_TOKCOUNTER   - <    80>   2171   2419   2495   2497   2508   2511 
         2527   2529   2536   2538   2553   2556   2571 
020ch: BAS_TOKENBUFFER  - <    82>    150    172    277   2434   2601   2723 
0206h: BAS_TOKPTR       - <    79>   2169   2539 
2000h: BAS_TOK_BUF_END  - <   131>    173   2635   2639 
1000h: BAS_TOK_BUF_START - <   127>    169    204   2456 
0202h: BAS_TXTPTR       - <    77>    991   1931   2025   2095   2167   2195 
         2206   2256   2347   2364   2389   2423   2517   2540 
e077h: BIGTEST          - <   220>    182 
ffc4h: CHAROUT          - <     5>    684   1376   1408   1428 
ef50h: CRLF             - <  3101>    225    232    237    718   1833   2465 
         3094 
e5e8h: DIVIDERS         - <  1360>   1385 
ee2ch: DIVLOOP          - <  2786>   2794 
ee3fh: DIV_DONE         - <  2795>   2789 
e119h: EXE_ACCEPT       - <   287>    328    342    351    363    369    372 
          639    654    664    728    734    763    765    770    778    781 
          783    804    834    844    889    900    918    920    931    946 
          966    974    982    999   1001   1010   1019   1025   1027   1047 
         1053   1063   1156   1188 
e12eh: EXE_ACCEPT_DONE  - <   307>    297 
e4bch: EXE_END_STMT     - <  1069>   1149 
e1e5h: EXE_EXPR         - <   457>    370    543    559    576    593    655 
          705    766    921    932   1011   1049   1055 
e22ah: EXE_EXPR_AND     - <   501>    471 
e251h: EXE_EXPR_DONE    - <   526>    475 
e1eeh: EXE_EXPR_LOOP    - <   464>    487    499    511    523    524 
e218h: EXE_EXPR_MINUS   - <   489>    469 
e23ch: EXE_EXPR_OR      - <   513>    473 
e206h: EXE_EXPR_PLUS    - <   477>    467 
e13eh: EXE_FACTOR       - <   337>    343    352    389    404    418    432 
e16bh: EXE_FACTOR1      - <   366>    360 
e14ch: EXE_FACTOR1A     - <   347>    341 
e15dh: EXE_FACTOR1B     - <   357>    350 
e17ch: EXE_FACTOR2      - <   375>    368 
e57fh: EXE_FINISHED     - <  1211>   1199 
e590h: EXE_FINISHED_YES - <  1224>   1216   1220 
e40ch: EXE_FOR_STMT     - <   895>   1107 
e59eh: EXE_GET_VARIABLE - <  1260>    326    849 
e3a8h: EXE_GOSUB_STMT   - <   776>   1125 
e2f1h: EXE_GOTO_STMT    - <   652>   1113 
e35fh: EXE_IF_STMT      - <   726>   1089 
e378h: EXE_IF_STMT1     - <   742>    738    748 
e387h: EXE_IF_STMT2     - <   751>    746 
e2d3h: EXE_INDEX_FIND   - <   620>    630 
e107h: EXE_INIT         - <   270>   1196 
e452h: EXE_INPUT_STMT   - <   980>   1119 
e446h: EXE_INP_STMT     - <   964>   1163 
e5f2h: EXE_ITOA         - <  1362>    236    707   1499   1850 
e614h: EXE_ITOA_LOOP    - <  1387>   1401   1418   1422 
e62ch: EXE_ITOA_NEXT    - <  1403>   1396 
e64eh: EXE_ITOA_NOONES  - <  1429> 
e639h: EXE_ITOA_NOTYET  - <  1412>   1405 
e605h: EXE_ITOA_POS     - <  1378>   1366 
e2d7h: EXE_JUMP_LINE    - <   629>    656    796 
e2eeh: EXE_JUMP_LINE1   - <   644>    632    634 
e38bh: EXE_LET_STMT     - <   758>   1083   1157 
e564h: EXE_LINE_STMT    - <  1186>   1205 
e402h: EXE_NEXT_DONE    - <   883>    869 
e3d2h: EXE_NEXT_STMT    - <   823>   1095 
e5d7h: EXE_NEXT_TOK3_DONE - <  1322>   1318 
e5cfh: EXE_NEXT_TOK3_LOOP - <  1316>   1320 
e5abh: EXE_NEXT_TOKEN   - <  1284>    308    403    417    431    478    490 
          502    514    558    575    592    677    685    691    720    743 
          752 
e5b5h: EXE_NEXT_TOKEN1  - <  1293>   1287 
e5beh: EXE_NEXT_TOKEN2  - <  1301>   1295 
e5c9h: EXE_NEXT_TOKEN3  - <  1311>   1303 
e5d9h: EXE_NEXT_TOKEN4  - <  1326>   1313 
e5dbh: EXE_NUM          - <  1333>    361    779 
e44ch: EXE_OUTP_STMT    - <   972>   1169 
e479h: EXE_PEEK_STMT    - <  1008>   1137 
e4a0h: EXE_POKE_STMT    - <  1045>   1143 
e2fdh: EXE_PRINT_STMT   - <   662>   1101 
e314h: EXE_PRINT_STMT1  - <   680>    669 
e324h: EXE_PRINT_STMT2  - <   688>    682 
e32fh: EXE_PRINT_STMT3  - <   694>    690 
e341h: EXE_PRINT_STMT4  - <   704>    696    698    700 
e355h: EXE_PRINT_STMT_DONE - <   717>    702    712    714 
e302h: EXE_PRINT_STMT_LOOP - <   666>    715 
e347h: EXE_PRINT_STMT_TEST - <   709>    678    686    692 
e258h: EXE_RELATION     - <   539>    730 
e2cch: EXE_RELATION_DONE - <   607>    555 
e2b0h: EXE_RELATION_EQ  - <   591>    553 
e292h: EXE_RELATION_GT  - <   574>    551 
e261h: EXE_RELATION_LOOP - <   546>    569    572    586    589    602    605 
e274h: EXE_RELATION_LT  - <   557>    549 
e2c6h: EXE_REL_NE       - <   603>    600 
e2aah: EXE_REL_NGT      - <   587>    584 
e28ch: EXE_REL_NLT      - <   570>    567 
e3c4h: EXE_RETURN_STMT  - <   802>   1131 
e570h: EXE_RUN          - <  1198>   1206 
e579h: EXE_RUN_CONT     - <  1204>   1201 
e593h: EXE_SET_VARIABLE - <  1237>    768    852    926    996   1023 
e4c3h: EXE_STMT         - <  1078>    739   1189 
e4cdh: EXE_STMT1        - <  1086>   1082 
e51eh: EXE_STMT10       - <  1140>   1136 
e527h: EXE_STMT11       - <  1146>   1142 
e530h: EXE_STMT12       - <  1152>   1148 
e53eh: EXE_STMT13       - <  1160>   1154 
e547h: EXE_STMT14       - <  1166>   1162 
e550h: EXE_STMT15       - <  1172>   1168 
e4d6h: EXE_STMT2        - <  1092>   1088 
e4dfh: EXE_STMT3        - <  1098>   1094 
e4e8h: EXE_STMT4        - <  1104>   1100 
e4f1h: EXE_STMT5        - <  1110>   1106 
e4fah: EXE_STMT6        - <  1116>   1112 
e503h: EXE_STMT7        - <  1122>   1118 
e50ch: EXE_STMT8        - <  1128>   1124 
e515h: EXE_STMT9        - <  1134>   1130 
e0ebh: EXE_STMT_MSG     - <   249> 
e180h: EXE_TERM         - <   385>    461    479    491    503    515 
e19ch: EXE_TERM_ASTR    - <   402>    395 
e1deh: EXE_TERM_DONE    - <   444>    400 
e189h: EXE_TERM_LOOP    - <   392>    414    428    442 
e1c8h: EXE_TERM_MOD     - <   430>    399 
e1b2h: EXE_TERM_SLASH   - <   416>    397 
e132h: EXE_VARFACTOR    - <   320>    376 
e5e4h: EXE_VARIABLE_NUM - <  1348>    321    759    838    904    983   1020 
eb23h: FOUND            - <  2116>   2099 
ef3fh: GET_INPUTLINE    - <  3088>    988   3078   3093 
ee4dh: MODLOOP          - <  2813>   2821 
ee60h: MOD_DONE         - <  2822>   2816 
eb2dh: NOKEYOWRDSFOUND  - <  2124>   2096 
ea45h: PARSECHAR1       - <  1939>   1936 
ea95h: PARSECHAR10      - <  1989>   1986 
ea9dh: PARSECHAR11      - <  1994>   1991 
eaa5h: PARSECHAR12      - <  1999>   1996 
eaadh: PARSECHAR13      - <  2004>   2001 
eab5h: PARSECHAR14      - <  2009>   2006 
eabdh: PARSECHAR15      - <  2014>   2011 
ea4dh: PARSECHAR2       - <  1944>   1941 
ea55h: PARSECHAR3       - <  1949>   1946 
ea5dh: PARSECHAR4       - <  1954>   1951 
ea65h: PARSECHAR5       - <  1959>   1956 
ea6dh: PARSECHAR6       - <  1964>   1961 
ea75h: PARSECHAR7       - <  1969>   1966 
ea7dh: PARSECHAR7A      - <  1974>   1971 
ea85h: PARSECHAR8       - <  1979>   1976 
ea8dh: PARSECHAR9       - <  1984>   1981 
ee9eh: PARSE_ADD16      - <  2904>    485   2284   2697   2931 
ed4dh: PARSE_ADDLINE    - <  2589> 
ed5fh: PARSE_ADDLINE1   - <  2599>   2595 
ed65h: PARSE_ADDLINELOOP - <  2603>   2631 
ed8eh: PARSE_ADDROOM    - <  2634>   2607   2616 
ec09h: PARSE_AF         - <  2329>   2326 
eebeh: PARSE_AND16      - <  2949>    509 
e0f5h: PARSE_CMD_ERROR  - <   250>   2463 
ecafh: PARSE_CODE       - <  2470>   2428 
ef01h: PARSE_COMPARE    - <  3036>    565    582    599    867   1394   2614 
         2787   2814 
ef10h: PARSE_COMPAREH   - <  3048>   3040 
ef16h: PARSE_COMPAREH1  - <  3052>   3049 
ef19h: PARSE_COMPAREL   - <  3056>   3044 
ef1fh: PARSE_COMPAREL1  - <  3060>   3057 
ee23h: PARSE_DIV16      - <  2774>    223    425 
ec20h: PARSE_FINISHED   - <  2362>   2188   2220 
ec3bh: PARSE_FINISHED_YES - <  2379>   2366   2372   2375 
ebffh: PARSE_GETNIBBLE  - <  2322> 
eac0h: PARSE_GET_NEXT_TOK - <  2023>   2172   2207   2429 
eac5h: PARSE_GNT1       - <  2031> 
eacch: PARSE_GNT1LOOP   - <  2045>   2049 
eac6h: PARSE_GNT1_CHKPOS - <  2041> 
eadch: PARSE_GNT2       - <  2061>   2043 
eaeah: PARSE_GNT3       - <  2072>   2064 
eaf0h: PARSE_GNT3LOOP   - <  2076>   2080 
eb00h: PARSE_GNT4       - <  2087>   2075 
eb43h: PARSE_GNT_ERROR  - <  2140>   2131   2133 
eb48h: PARSE_INIT       - <  2164>   2416 
ef2fh: PARSE_INPUTLOOP  - <  3077> 
0300h: PARSE_INPUT_LINE - <   119>    986    990   3075   3080   3086 
edb3h: PARSE_INSERTLOOP - <  2662>   2668 
eef1h: PARSE_ISDIGIT    - <  3013>   2042   2048   2307   2425 
eefeh: PARSE_ISDIGIT_NO - <  3022>   3015   3017 
eed4h: PARSE_ISHEX      - <  2986> 
eee1h: PARSE_ISHEX_AF   - <  2993>   2990 
eeeeh: PARSE_ISHEX_NO   - <  3003>   2988   2995   2997 
eeebh: PARSE_ISHEX_YES  - <  2999>   2991 
e9aeh: PARSE_KEYWORDS   - <  1895>   2092 
ec4fh: PARSE_LINE       - <  2415>    196   3081 
eceeh: PARSE_LINE1      - <  2514>   2500 
ed0ah: PARSE_LINE1DONE  - <  2531>   2523 
ecf7h: PARSE_LINE1LOOP  - <  2520>   2530 
ed1fh: PARSE_LINE2      - <  2543>   2516 
ed38h: PARSE_LINE_DONE  - <  2559>   2491 
eca0h: PARSE_LINE_ERROR - <  2462>   2455 
ec7ch: PARSE_LINE_EXIT  - <  2439>   2433 
ec6eh: PARSE_LINE_LIST  - <  2431> 
ecc1h: PARSE_LINE_LOOP  - <  2487>   2512   2541   2545   2557 
ec92h: PARSE_LINE_NEW   - <  2453>   2448 
ec87h: PARSE_LINE_RUN   - <  2446>   2441 
ee44h: PARSE_MOD16      - <  2805>    230    439 
ee63h: PARSE_MUL16      - <  2833>    411   2279 
ee90h: PARSE_MULADD16   - <  2884>   2846 
ee6bh: PARSE_MULLOOP    - <  2840>   2880 
ee74h: PARSE_MULSKIP    - <  2848>   2845 
eeb6h: PARSE_NEG        - <  2936>    353 
eb66h: PARSE_NEXT       - <  2187>   2236   2488 
eb6dh: PARSE_NEXT1      - <  2192>   2189 
eb75h: PARSE_NEXT1LOOP  - <  2197>   2202 
eb7fh: PARSE_NEXT2      - <  2205>   2200 
eb90h: PARSE_NEXT3      - <  2219>   2211   2226 
eba0h: PARSE_NEXTDONE   - <  2228>   2221   2224 
eba7h: PARSE_NEXTDONE2  - <  2234>   2231 
ebb0h: PARSE_NUM        - <  2250>    994   2475   2501 
ebf0h: PARSE_NUM_CHAR   - <  2305>   2267   2271 
ebfah: PARSE_NUM_CHAR1  - <  2311>   2308 
ebe4h: PARSE_NUM_DONE   - <  2289>   2275 
ebe7h: PARSE_NUM_DONE1  - <  2296> 
ebc6h: PARSE_NUM_LOOP   - <  2270>   2287 
ebc2h: PARSE_NUM_POS    - <  2266> 
eec9h: PARSE_OR16       - <  2965>    521 
ec4fh: PARSE_POS        - <  2402> 
edbfh: PARSE_REMOVELINE - <  2675>   2591 
edcbh: PARSE_REMOVELINE1 - <  2682>   2678   2680 
eddch: PARSE_REMOVELOOP - <  2698>   2707 
ed9dh: PARSE_ROOMLOOP   - <  2643>   2652   2657 
ea35h: PARSE_SINGLECHAR - <  1928>   2063 
ec11h: PARSE_STRING     - <  2339> 
ec1ah: PARSE_STRING1    - <  2345>   2342 
eeach: PARSE_SUB16      - <  2923>    497   1399   2638   2791   2818 
eb62h: PARSE_TOKEN      - <  2180>   2340   2489 
0400h: PARSE_TOKEN_BUFFER - <   123>   2168   2420   2567   2660 
ec40h: PARSE_VARIABLE_NUM - <  2387>   2546 
eb0ch: PCMPLOOP         - <  2097>   2105 
ffcch: SHOWADDR         - <     7>   1478   1883 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    301   1173 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9> 
ffdch: SHOWREGS         - <    11>    224    231   1178 
eb1ah: SKIPLOOP         - <  2109>   2112 
eb1ah: SKIPTOEND        - <  2107>   2102 
ffc0h: STRINGOUT        - <     4>    226    233    238    676    719   1177 
         1477   1512   1556   1564   1572   1580   1588   1596   1604   1612 
         1620   1628   1636   1644   1652   1660   1668   1676   1834   1860 
         1868   1876   1882   2464   2466   3073   3095   3095 
0019h: TOKENIZER_AND    - <    44>    470   1721   1962 
001bh: TOKENIZER_ASTR   - <    46>    394   1741   1972 
0010h: TOKENIZER_CALL   - <    35>   1641   1907 
0015h: TOKENIZER_COMMA  - <    40>    681   1018   1052   1681   1942 
0024h: TOKENIZER_CR     - <    55>    638    711    745    769    782    888 
          945   1000   1026   1062   1831   1937   2490   2560 
0009h: TOKENIZER_ELSE   - <    28>   1585   1900 
0014h: TOKENIZER_END    - <    39>   1147   1673   1911 
0001h: TOKENIZER_EOF    - <    20>    170    713    747   1219   1483   2371 
         2374   2457   2606   2727 
0023h: TOKENIZER_EQ     - <    54>    552    764    919   1821   2012 
0000h: TOKENIZER_ERROR  - <    19>   1474   1919   2142 
0029h: TOKENIZER_EXIT   - <    60>   1915   2440 
000ah: TOKENIZER_FOR    - <    29>    899   1105   1593   1901 
000eh: TOKENIZER_GOSUB  - <    33>    777   1123   1625   1905 
000dh: TOKENIZER_GOTO   - <    32>    653   1111   1617   1904 
0022h: TOKENIZER_GT     - <    53>    550   1811   2007 
001eh: TOKENIZER_HASH   - <    49>   1771   1992 
0007h: TOKENIZER_IF     - <    26>    727   1087   1569   1898 
002bh: TOKENIZER_INP    - <    62>    965   1161   1865   1917 
002ah: TOKENIZER_INPUT  - <    61>    981   1117   1857   1916 
001fh: TOKENIZER_LEFTP  - <    50>    367    699   1781   1987 
0005h: TOKENIZER_LET    - <    24>   1153   1155   1553   1896 
0025h: TOKENIZER_LINENUM - <    56>   1187   1302   1839   2471 
0026h: TOKENIZER_LIST   - <    57>   1912   2432 
0021h: TOKENIZER_LT     - <    52>    548   1801   2002 
0018h: TOKENIZER_MINUS  - <    43>    349    468   1711   1957 
001dh: TOKENIZER_MOD    - <    48>    398   1761   1982 
0028h: TOKENIZER_NEW    - <    59>   1914   2454 
000ch: TOKENIZER_NEXT   - <    31>    833   1093   1609   1903 
0002h: TOKENIZER_NUMBER - <    21>    359    697    780   1286   1489   2051 
         2499 
001ah: TOKENIZER_OR     - <    45>    472   1731   1967 
002ch: TOKENIZER_OUTP   - <    63>    973   1167   1873   1918 
0012h: TOKENIZER_PEEK   - <    37>   1009   1135   1657   1909 
0017h: TOKENIZER_PLUS   - <    42>    340    466   1701   1952 
0013h: TOKENIZER_POKE   - <    38>   1046   1141   1665   1910 
0006h: TOKENIZER_PRINT  - <    25>    663   1099   1561   1897 
0011h: TOKENIZER_REM    - <    36>   1649   1908   2210 
000fh: TOKENIZER_RETURN - <    34>    803   1129   1633   1906 
0020h: TOKENIZER_RIGHTP - <    51>    371   1791   1997 
0027h: TOKENIZER_RUN    - <    58>   1913   2447 
0016h: TOKENIZER_SEMICOLON - <    41>    689   1691   1947 
001ch: TOKENIZER_SLASH  - <    47>    396   1751   1977 
0003h: TOKENIZER_STRING - <    22>    668   1312   1508   2083   2341   2515 
0008h: TOKENIZER_THEN   - <    27>    733   1577   1899 
000bh: TOKENIZER_TO     - <    30>    930   1601   1902 
0004h: TOKENIZER_VARIABLE - <    23>    327    695    762    843    917    998 
         1024   1081   1294   1530   2136   2544 
e6ach: TOKL_CALL        - <  1459>   1643 
e66ch: TOKL_ELSE        - <  1448>   1587 
e6a7h: TOKL_END         - <  1458>   1675 
e6c4h: TOKL_ERROR       - <  1463>   1476   1881 
e672h: TOKL_FOR         - <  1449>   1595 
e687h: TOKL_GOSUB       - <  1453>   1627 
e681h: TOKL_GOTO        - <  1452>   1619 
e662h: TOKL_IF          - <  1446>   1571 
e6b9h: TOKL_INP         - <  1461>   1867 
e6b2h: TOKL_INPUT       - <  1460>   1859 
e656h: TOKL_LET         - <  1444>   1555 
e67bh: TOKL_NEXT        - <  1451>   1611 
e6beh: TOKL_OUTP        - <  1462>   1875 
e69bh: TOKL_PEEK        - <  1456>   1659 
e6a1h: TOKL_POKE        - <  1457>   1667 
e65bh: TOKL_PRINT       - <  1445>   1563 
e696h: TOKL_REM         - <  1455>   1651 
e68eh: TOKL_RETURN      - <  1454>   1635 
e666h: TOKL_THEN        - <  1447>   1579 
e677h: TOKL_TO          - <  1450>   1603 
eb05h: TOP              - <  2093>   2114 
ffd0h: TOUPPER          - <     8>   2330 
ffe8h: UARTIN           - <    14>   3089 
ffc8h: UARTOUT          - <     6>    303   1175   1501   1514   1538   1549 
         1684   1686   1694   1696   1704   1706   1714   1716   1724   1726 
         1734   1736   1744   1746   1754   1756   1764   1766   1774   1776 
         1784   1786   1794   1796   1804   1806   1814   1816   1824   1826 
         1853 
efffh: ZZZZ             - <  3140> 

3141 Lines assembled
0 Errors
368 Labels
Object Code:3867 bytes

