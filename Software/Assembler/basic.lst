RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             
   15 0000:             ;
   16 0000:             ; Basic interpreter tokens
   17 0000:             ;
   18 0000:             TOKENIZER_ERROR: EQU 00
   19 0000:             TOKENIZER_EOF: EQU 01
   20 0000:             TOKENIZER_NUMBER: EQU 02
   21 0000:             TOKENIZER_STRING: EQU 03
   22 0000:             TOKENIZER_VARIABLE: EQU 04
   23 0000:             TOKENIZER_LET: EQU 05
   24 0000:             TOKENIZER_PRINT: EQU 06
   25 0000:             TOKENIZER_IF: EQU 07
   26 0000:             TOKENIZER_THEN: EQU 08
   27 0000:             TOKENIZER_ELSE: EQU 09
   28 0000:             TOKENIZER_FOR: EQU 10
   29 0000:             TOKENIZER_TO: EQU 11
   30 0000:             TOKENIZER_NEXT: EQU 12
   31 0000:             TOKENIZER_GOTO: EQU 13
   32 0000:             TOKENIZER_GOSUB: EQU 14
   33 0000:             TOKENIZER_RETURN: EQU 15
   34 0000:             TOKENIZER_CALL: EQU 16
   35 0000:             TOKENIZER_REM: EQU 17
   36 0000:             TOKENIZER_PEEK: EQU 18
   37 0000:             TOKENIZER_POKE: EQU 19
   38 0000:             TOKENIZER_END: EQU 20
   39 0000:             TOKENIZER_COMMA: EQU 21
   40 0000:             TOKENIZER_SEMICOLON: EQU 22
   41 0000:             TOKENIZER_PLUS: EQU 23
   42 0000:             TOKENIZER_MINUS: EQU 24
   43 0000:             TOKENIZER_AND: EQU 25
   44 0000:             TOKENIZER_OR: EQU 26
   45 0000:             TOKENIZER_ASTR: EQU 27
   46 0000:             TOKENIZER_SLASH: EQU 28
   47 0000:             TOKENIZER_MOD: EQU 29
   48 0000:             TOKENIZER_HASH: EQU 30
   49 0000:             TOKENIZER_LEFTP: EQU 31
   50 0000:             TOKENIZER_RIGHTP: EQU 32
   51 0000:             TOKENIZER_LT: EQU 33
   52 0000:             TOKENIZER_GT: EQU 34
   53 0000:             TOKENIZER_EQ: EQU 35
   54 0000:             TOKENIZER_CR: EQU 36
   55 0000:             TOKENIZER_LINENUM: EQU 37
   56 0000:             
   57 0000:             ;
   58 0000:             ; BASIC interpreter user variables area
   59 0000:             ; currently 26 1-byte variables
   60 0000:             ; for now must be 0xAA00 (256 byte) aligned
   61 0000:             ;
   62 0000:             BASIC_VARS: EQU 0100h
   63 0000:             
   64 0000:             ;
   65 0000:             ; Basic interpreter internal variables
   66 0000:             ;
   67 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   68 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   69 0000:             bas_nxtptr:       EQU 0204h ;
   70 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   71 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   72 0000:             bas_currenttoken: EQU 020Ah ; used in parsing
   73 0000:             bas_tokenbuffer:  EQU 020Ch ; Pointer to start of token buffer
   74 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   75 0000:                                         ; this value should be + 1 end of buffer
   76 0000:                                         ; if buffer is 0x1000-0x1fff this is
   77 0000:                                         ; set to 0x2000. Used in moving buffer around
   78 0000:                                         ; in add and remove line
   79 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   80 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   81 0000:             bas_insertptr:    EQU 0214H
   82 0000:             
   83 0000:             ;
   84 0000:             ; FOR-NEXT statement stack ptr and stack data
   85 0000:             ;
   86 0000:             ; for next stack data
   87 0000:             ; format
   88 0000:             ;   2 bytes for variable id (only first byte used for now)
   89 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
   90 0000:             ;   2 bytes ptr to line after for instruction (format HL)
   91 0000:             ; later add step amount
   92 0000:             ;
   93 0000:             bas_forstackptr: EQU 0280h
   94 0000:             bas_forstack: EQU 0282h
   95 0000:             
   96 0000:             ;
   97 0000:             ; GOSUB stack ptr and data
   98 0000:             ;
   99 0000:             ; gosub STACK
  100 0000:             ; format
  101 0000:             ;   2 bytes return location ptr
  102 0000:             ;
  103 0000:             bas_gosubptr: EQU 02c0h
  104 0000:             bas_gosubstack: EQU 02c2h
  105 0000:             
  106 0000:             ;
  107 0000:             ; Basic interpreter text input line buffer
  108 0000:             ;
  109 0000:             parse_input_line: EQU 300h
  110 0000:             ;
  111 0000:             ; Basic interpreter tmp buffer to build up current token line
  112 0000:             ;
  113 0000:             parse_token_buffer: EQU 400h
  114 0000:             ;
  115 0000:             ; Basic interpreter token buffer
  116 0000:             ;
  117 0000:             bas_tok_buf_start: EQU 1000h
  118 0000:             ;
  119 0000:             ; Basic interpreter token buffer end + 1
  120 0000:             ;
  121 0000:             bas_tok_buf_end: EQU 2000h
  122 0000:             ; OR
  123 0000:             ;bas_tok_buf_end: EQU 1100h ;smaller for easy debugging - 256 byte buffer
  124 0000:             
  125 0000:             ;
  126 0000:             ; basic interpreter, add IO and peek/poke
  127 0000:             ;
  128 0000:             
  129 0000:             ;
  130 0000:             ; Basic Interpreter
  131 0000:             ;
  132 0000:             
  133 0000:             ;
  134 0000:             ; BASIC Entry Points
  135 0000:             ;
  136 0000:               ORG 0e000h
  137 e000:             ;
  138 e000:             ; list
  139 e000:             ;
  140 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  141 e003: 04 e6 47          JSR  basic_list
  142 e006: 05                Ret
  143 e007:             
  144 e007:             ;
  145 e007:                   ORG 0e010h
  146 e010:             ;
  147 e010:             ; run
  148 e010:             ;
  149 e010: 04 e4 f6          jsr basic_run
  150 e013: 05                Ret
  151 e014:             
  152 e014:             ;
  153 e014:                   ORG 0e020h
  154 e020:             ;
  155 e020:             ; cold start
  156 e020:             ;
  157 e020:             ; Hack later pass in R7
  158 e020:             ;
  159 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  160 e023: 0e 01             ldai TOKENIZER_EOF          ;write EOF to start of buffer
  161 e025: 4f                stavr r7
  162 e026: ff 02 0c          STR R7,bas_tokenbuffer
  163 e029: 1f 20 00          mviw r7,bas_tok_buf_end
  164 e02c: ff 02 0e          str r7,bas_bufferendhi
  165 e02f: 05                Ret
  166 e030:             
  167 e030:             ;
  168 e030:                   ORG 0e030h
  169 e030:             ;
  170 e030:             ; tests - called from monitor - used to test snippets of code
  171 e030:             ;
  172 e030: 04 e0 77          jsr bigtest
  173 e033:             
  174 e033: 05                ret
  175 e034:             
  176 e034:             ;
  177 e034:                   org 0e050h
  178 e050:             ;
  179 e050:             ; parse line
  180 e050:             ;
  181 e050: 04 eb 96          jsr parse_line
  182 e053: 05                ret
  183 e054:             
  184 e054:             ;
  185 e054:                   ORG 0e060h
  186 e060:             ;
  187 e060:             ; Copy test program into token Buffer, copies 0x0400 bytes
  188 e060:             ;
  189 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  190 e063: 1e ee 00          mviw R6,BASIC_TEST
  191 e066: 1d 04 00          mviw R5,0400h
  192 e069:             
  193 e069:             bas_copyloop:
  194 e069: 46                ldavr R6
  195 e06a: 4f                stavr r7
  196 e06b: 56                incr r6
  197 e06c: 57                incr r7
  198 e06d: 5d                decr r5
  199 e06e: 2d                mvrha r5
  200 e06f: a2 e0 69          brnz bas_copyloop
  201 e072: 25                mvrla r5
  202 e073: a2 e0 69          brnz bas_copyloop
  203 e076: 05                ret
  204 e077:             
  205 e077:             bigtest:
  206 e077: 1f 12 34        mviw r7,01234h
  207 e07a: 04 e5 7c        jsr exe_itoa
  208 e07d: 1f ed c3        mviw r7,CRLF
  209 e080: 04 ff c0        jsr stringout
  210 e083:             
  211 e083: 1f 00 10        mviw r7,010h
  212 e086: 04 e5 7c        jsr exe_itoa
  213 e089: 1f ed c3        mviw r7,CRLF
  214 e08c: 04 ff c0        jsr stringout
  215 e08f:             
  216 e08f: 1f 76 54        mviw r7,07654h
  217 e092: 04 e5 7c        jsr exe_itoa
  218 e095: 1f ed c3        mviw r7,CRLF
  219 e098: 04 ff c0        jsr stringout
  220 e09b:             
  221 e09b: 1f 00 00        mviw r7,00h
  222 e09e: 04 e5 7c        jsr exe_itoa
  223 e0a1: 1f ed c3        mviw r7,CRLF
  224 e0a4: 04 ff c0        jsr stringout
  225 e0a7:             
  226 e0a7: 1f ff fe        mviw r7,0FFFEh
  227 e0aa: 04 e5 7c        jsr exe_itoa
  228 e0ad: 1f ed c3        mviw r7,CRLF
  229 e0b0: 04 ff c0        jsr stringout
  230 e0b3:             
  231 e0b3: 1f 80 12        mviw r7,08012h
  232 e0b6: 04 e5 7c        jsr exe_itoa
  233 e0b9: 1f ed c3        mviw r7,CRLF
  234 e0bc: 04 ff c0        jsr stringout
  235 e0bf: 05              ret
  236 e0c0:             
  237 e0c0:             ;
  238 e0c0:             ; basic interpreter messages
  239 e0c0:             ;
  240 e0c0: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "Accept - unexpected token",0,0ah,0dh
  241 e0dc: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  242 e0ed: 42 41 53 49 
            43 20 54 4f 
            4b 45 4e 20 
            4e 4f 54 20 
            53 55 50 50 
            4f 52 54 45 
            44 20 0a 0d bas_msg3: db "Basic token not supported ",0ah,0dh
  243 e109: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  244 e113:             ;
  245 e113:             ; Basic interpreter - execution engine
  246 e113:             ; Register Usage
  247 e113:             ; R0 - Program Counter
  248 e113:             ; R1 - Stack Pointer
  249 e113:             ; R2 - Direct addressing mode
  250 e113:             ; R3 - Basic Interpreter Token Buffer ptr
  251 e113:             ; R4 - working register  ; or is this for-next stack ptr
  252 e113:             ; R5 - working register  ; or is this gosub stack ptr
  253 e113:             ; R6 - Working register
  254 e113:             ; R7 - parameter passing & return value
  255 e113:             ;
  256 e113:             ;exe: Is this label needed
  257 e113:             ;
  258 e113:             ; void ubasic_init()
  259 e113:             ;
  260 e113:             ; Setup basic interpreter execution engine
  261 e113:             ;
  262 e113:             exe_init:
  263 e113: 09              push
  264 e114: 1d 02 c2        MVIW R5,bas_gosubstack
  265 e117: 1c 02 82        MVIW R4,bas_forstack
  266 e11a: 1e 02 00        MVIW R6,bas_run_ended
  267 e11d: 0e 00           LDAI 0
  268 e11f: 4e              STAVR R6
  269 e120: f3 02 0c        LDR R3,bas_tokenbuffer
  270 e123: 0a              pop
  271 e124: 05              RET
  272 e125:             
  273 e125:             ;
  274 e125:             ; void accept(int)
  275 e125:             ;
  276 e125:             ; compare accumulator with current token then advance to next token in buffer
  277 e125:             ; assume accumulator destroyed
  278 e125:             ;
  279 e125:             exe_accept:
  280 e125: 09              push
  281 e126:             ;
  282 e126:             ; get current token into accumulator
  283 e126:             ;
  284 e126: 43              LDAVR R3
  285 e127: 0b              MVAT
  286 e128: 0a              POP
  287 e129: a8 e1 3a        BREQ exe_accept_done
  288 e12c:             ;
  289 e12c:             ; debug information
  290 e12c:             ;
  291 e12c: 04 ff e0        JSR showbytea
  292 e12f: 0e 2d           ldai '-'
  293 e131: 04 ff c8        JSR uartout
  294 e134: 1f e0 c0        mviw R7,bas_msg1
  295 e137: 04 e5 33        JSR bas_error
  296 e13a:             ;
  297 e13a:             exe_accept_done:
  298 e13a: 04 e5 35        jsr exe_next_token
  299 e13d: 05              RET
  300 e13e:             
  301 e13e:             ;
  302 e13e:             ; int varfactor()
  303 e13e:             ;
  304 e13e:             ; get variable id pointed to by exe_variable_num in token stream
  305 e13e:             ; (this is not a value but a variable id)
  306 e13e:             ; value returned by exe_get_variable in r7
  307 e13e:             ;
  308 e13e:             ; return value in R7
  309 e13e:             ;
  310 e13e:             exe_varfactor:
  311 e13e: 04 e5 6e        jsr exe_variable_num    ; get variable number id (one byte for now a-z)
  312 e141:                                         ;into accumulator
  313 e141:             ;
  314 e141:             ; variable id in accumulator, return value in r7
  315 e141:             ;
  316 e141: 04 e5 28        jsr exe_get_variable
  317 e144: 0e 04           LDAI TOKENIZER_VARIABLE
  318 e146: 04 e1 25        JSR exe_accept
  319 e149: 05              RET
  320 e14a:             
  321 e14a:             ;
  322 e14a:             ; int factor()
  323 e14a:             ; return value in R7
  324 e14a:             ;
  325 e14a:             exe_factor:
  326 e14a:             ;
  327 e14a: 43              LDAVR R3               ;get current token into accumulator
  328 e14b: 0d 02           LDTI TOKENIZER_NUMBER
  329 e14d: aa e1 58        BRNEQ exe_factor1
  330 e150: 04 e5 65        JSR exe_num
  331 e153: 0c              MVTA
  332 e154: 04 e1 25        JSR exe_accept
  333 e157: 05              RET
  334 e158:             
  335 e158:             exe_factor1:
  336 e158: 0d 1f           LDTI TOKENIZER_LEFTP
  337 e15a: aa e1 69        BRNEQ exe_factor2
  338 e15d: 04 e1 25        JSR exe_accept
  339 e160: 04 e1 bc        JSR exe_expr
  340 e163: 0e 20           LDAI TOKENIZER_RIGHTP
  341 e165: 04 e1 25        JSR exe_accept
  342 e168: 05              RET
  343 e169:             
  344 e169:             exe_factor2:
  345 e169: 04 e1 3e        jsr exe_varfactor
  346 e16c: 05              ret
  347 e16d:             
  348 e16d:             ;
  349 e16d:             ; int term()
  350 e16d:             ; R5 = F1
  351 e16d:             ; R6 = F2
  352 e16d:             ; R7 = return value
  353 e16d:             ;
  354 e16d:             exe_term:
  355 e16d: 07 05           pushr r5
  356 e16f: 07 06           pushr r6
  357 e171:             
  358 e171: 04 e1 4a        jsr exe_factor
  359 e174: 0f 57           MOVRR r7,r5
  360 e176:             
  361 e176:             exe_term_loop:
  362 e176: 43              LDAVR R3
  363 e177: 0d 1b           ldti TOKENIZER_ASTR
  364 e179: a8 e1 89        BREQ exe_term_astr
  365 e17c: 0d 1c           LDTI TOKENIZER_SLASH
  366 e17e: a8 e1 9f        breq exe_term_slash
  367 e181: 0d 1d           ldti TOKENIZER_MOD
  368 e183: a8 e1 aa        breq exe_term_mod
  369 e186: a0 e1 b5        br exe_term_done
  370 e189:             
  371 e189:             exe_term_astr:
  372 e189: 04 e5 35        jsr exe_next_token
  373 e18c: 04 e1 4a        jsr exe_factor
  374 e18f: 0f 67           movrr r7,r6
  375 e191:             ;
  376 e191:             ; do mulitply f1 = f1 * f2
  377 e191:             ;
  378 e191: 07 04           pushr r4
  379 e193: 0f 46           movrr r6,r4
  380 e195: 04 ed 0c        jsr PARSE_MUL16
  381 e198: 0f 57           movrr r7,r5
  382 e19a: 08 40           popr r4
  383 e19c: a0 e1 76        BR exe_term_loop
  384 e19f:             
  385 e19f:             exe_term_slash:
  386 e19f: 04 e5 35        jsr exe_next_token
  387 e1a2: 04 e1 4a        jsr exe_factor
  388 e1a5: 0f 67           movrr r7,r6
  389 e1a7:             ;
  390 e1a7:             ; do divide f1 = f1 / f2
  391 e1a7:             ;
  392 e1a7: a0 e1 76        BR exe_term_loop
  393 e1aa:             
  394 e1aa:             exe_term_mod:
  395 e1aa: 04 e5 35        jsr exe_next_token
  396 e1ad: 04 e1 4a        jsr exe_factor
  397 e1b0: 0f 67           movrr r7,r6
  398 e1b2:             ;
  399 e1b2:             ; f1 = f1 % f2
  400 e1b2:             ;
  401 e1b2: a0 e1 76        BR exe_term_loop
  402 e1b5:             
  403 e1b5:             exe_term_done:
  404 e1b5: 0f 75           MOVRR r5,r7
  405 e1b7: 08 60           popr r6
  406 e1b9: 08 50           popr r5
  407 e1bb: 05              ret
  408 e1bc:             
  409 e1bc:             ;
  410 e1bc:             ; static VARIABLE_TYPE expr()
  411 e1bc:             ;
  412 e1bc:             ; R5 = t1
  413 e1bc:             ; R6 = t2
  414 e1bc:             ; R7 = return value
  415 e1bc:             ;
  416 e1bc:             exe_expr:
  417 e1bc: 07 05           pushr r5
  418 e1be: 07 06           pushr r6
  419 e1c0:             
  420 e1c0: 04 e1 6d        jsr exe_term
  421 e1c3: 0f 57           MOVRR r7,r5
  422 e1c5:             
  423 e1c5:             exe_expr_loop:
  424 e1c5: 43              LDAVR R3
  425 e1c6: 0d 17           ldtI TOKENIZER_PLUS
  426 e1c8: a8 e1 dd        BREQ exe_expr_plus
  427 e1cb: 0d 18           ldtI TOKENIZER_MINUS
  428 e1cd: a8 e1 ef        breq exe_expr_minus
  429 e1d0: 0d 19           ldtI TOKENIZER_AND
  430 e1d2: a8 e2 01        breq exe_expr_and
  431 e1d5: 0d 1a           ldti TOKENIZER_OR
  432 e1d7: a8 e2 13        breq exe_expr_or
  433 e1da:             
  434 e1da: a0 e2 28        br exe_expr_done
  435 e1dd:             
  436 e1dd:             exe_expr_plus:
  437 e1dd: 04 e5 35        jsr exe_next_token
  438 e1e0: 04 e1 6d        jsr exe_term
  439 e1e3: 0f 67           movrr r7,r6
  440 e1e5:             ;
  441 e1e5:             ; t1 = t1 + t2
  442 e1e5:             ;
  443 e1e5: 0f 75           movrr r5,r7
  444 e1e7: 04 ed 47        jsr parse_add16
  445 e1ea: 0f 57           movrr r7,r5
  446 e1ec: a0 e1 c5        BR exe_expr_loop
  447 e1ef:             
  448 e1ef:             exe_expr_minus:
  449 e1ef: 04 e5 35        jsr exe_next_token
  450 e1f2: 04 e1 6d        jsr exe_term
  451 e1f5: 0f 67           movrr r7,r6
  452 e1f7:             ;
  453 e1f7:             ; t1 = t1 - t2
  454 e1f7:             ;
  455 e1f7: 0f 75           movrr r5,r7
  456 e1f9: 04 ed 55        jsr parse_sub16
  457 e1fc: 0f 57           movrr r7,r5
  458 e1fe: a0 e1 c5        BR exe_expr_loop
  459 e201:             
  460 e201:             exe_expr_and:
  461 e201: 04 e5 35        jsr exe_next_token
  462 e204: 04 e1 6d        jsr exe_term
  463 e207: 0f 67           movrr r7,r6
  464 e209:             ;
  465 e209:             ; t1 = t1 & t2
  466 e209:             ;
  467 e209: 0f 75           movrr r5,r7
  468 e20b: 04 ed 5f        jsr parse_and16
  469 e20e: 0f 57           movrr r7,r5
  470 e210: a0 e1 c5        BR exe_expr_loop
  471 e213:             
  472 e213:             exe_expr_or:
  473 e213: 04 e5 35        jsr exe_next_token
  474 e216: 04 e1 6d        jsr exe_term
  475 e219: 0f 67           movrr r7,r6
  476 e21b:             ;
  477 e21b:             ; t1 = t1 | t2
  478 e21b:             ;
  479 e21b: 0f 75           movrr r5,r7
  480 e21d: 04 ed 6a        jsr parse_or16
  481 e220: 0f 57           movrr r7,r5
  482 e222: a0 e1 c5        BR exe_expr_loop
  483 e225: a0 e1 c5        BR exe_expr_loop
  484 e228:             
  485 e228:             exe_expr_done:
  486 e228: 0f 75           MOVRR r5,r7
  487 e22a: 08 60           popr r6
  488 e22c: 08 50           popr r5
  489 e22e: 05              ret
  490 e22f:             
  491 e22f:             ;
  492 e22f:             ; int relation ()
  493 e22f:             ;
  494 e22f:             ; R5 = r1
  495 e22f:             ; R6 = r2
  496 e22f:             ; R7 = return value
  497 e22f:             ;
  498 e22f:             exe_relation:
  499 e22f: 07 05           pushr r5
  500 e231: 07 06           pushr r6
  501 e233:             
  502 e233: 04 e1 bc        jsr exe_expr
  503 e236: 0f 57           MOVRR r7,r5
  504 e238:             
  505 e238:             exe_relation_loop:
  506 e238: 43              LDAVR R3
  507 e239: 0d 21           LDTI TOKENIZER_LT
  508 e23b: a8 e2 4b        BREQ exe_relation_lt
  509 e23e: 0d 22           ldti TOKENIZER_GT
  510 e240: a8 e2 69        breq exe_relation_gt
  511 e243: 0d 23           ldti TOKENIZER_EQ
  512 e245: a8 e2 87        breq exe_relation_eq
  513 e248:             
  514 e248: a0 e2 a3        br exe_relation_done
  515 e24b:             
  516 e24b:             exe_relation_lt:
  517 e24b: 04 e5 35        jsr exe_next_token
  518 e24e: 04 e1 bc        jsr exe_expr
  519 e251: 0f 67           movrr r7,r6
  520 e253:             ;
  521 e253:             ; r1 = r1 < r2
  522 e253:             ;
  523 e253: 0f 75           movrr  r5,r7
  524 e255: 04 ed a2        jsr parse_compare
  525 e258: 0d ff           ldti 0ffh
  526 e25a: aa e2 63        BRNEQ exe_rel_nlt
  527 e25d: 1d 00 01        mviw r5,01h
  528 e260: a0 e2 38        BR exe_relation_loop
  529 e263:             exe_rel_nlt:
  530 e263: 1d 00 00        mviw r5,00h
  531 e266: a0 e2 38        BR exe_relation_loop
  532 e269:             
  533 e269:             exe_relation_gt:
  534 e269: 04 e5 35        jsr exe_next_token
  535 e26c: 04 e1 bc        jsr exe_expr
  536 e26f: 0f 67           movrr r7,r6
  537 e271:             ;
  538 e271:             ; r1 = r1 > r2
  539 e271:             ;
  540 e271: 0f 75           movrr  r5,r7
  541 e273: 04 ed a2        jsr parse_compare
  542 e276: 0d 01           ldti 01h
  543 e278: aa e2 81        BRNEQ exe_rel_ngt
  544 e27b: 1d 00 01        mviw r5,01h
  545 e27e: a0 e2 38        BR exe_relation_loop
  546 e281:             exe_rel_ngt:
  547 e281: 1d 00 00        mviw r5,00h
  548 e284: a0 e2 38        BR exe_relation_loop
  549 e287:             
  550 e287:             exe_relation_eq:
  551 e287: 04 e5 35        jsr exe_next_token
  552 e28a: 04 e1 bc        jsr exe_expr
  553 e28d: 0f 67           movrr r7,r6
  554 e28f:             ;
  555 e28f:             ; r1 = r1 == r2
  556 e28f:             ;
  557 e28f: 0f 75           movrr  r5,r7
  558 e291: 04 ed a2        jsr parse_compare
  559 e294: a2 e2 9d        brnz exe_rel_ne
  560 e297: 1d 00 01        mviw r5,01h
  561 e29a: a0 e2 38        BR exe_relation_loop
  562 e29d:             exe_rel_ne:
  563 e29d: 1d 00 00        mviw r5,00h
  564 e2a0: a0 e2 38        BR exe_relation_loop
  565 e2a3:             
  566 e2a3:             exe_relation_done:
  567 e2a3: 0f 75           MOVRR r5,r7
  568 e2a5: 08 60           popr r6
  569 e2a7: 08 50           popr r5
  570 e2a9: 05              ret
  571 e2aa:             
  572 e2aa:             ;
  573 e2aa:             ; char * index_find (int linenum)
  574 e2aa:             ;
  575 e2aa:             ; call with line in R7
  576 e2aa:             ; return with val in R7 - tokenbuffer ptr
  577 e2aa:             ; THIS CAN BE REMOVED SINCE IT IS ONLY A SINGLE CALL
  578 e2aa:             ;
  579 e2aa:             exe_index_find:
  580 e2aa: 04 ec d0        JSR basu_find
  581 e2ad: 05              RET
  582 e2ae:             
  583 e2ae:             ;
  584 e2ae:             ; void jump_linenum(linenum)
  585 e2ae:             ;
  586 e2ae:             ; Linenum in R7
  587 e2ae:             ;
  588 e2ae:             exe_jump_line:
  589 e2ae: 04 e2 aa        JSR exe_index_find
  590 e2b1: 2f              MVRHA R7
  591 e2b2: a2 e2 c5        BRNZ exe_jump_line1
  592 e2b5: 27              MVRLA R7
  593 e2b6: a2 e2 c5        BRNZ exe_jump_line1
  594 e2b9:             ;
  595 e2b9:             ; returned 0 line not found
  596 e2b9:             ;
  597 e2b9: 0e 24           LDAI TOKENIZER_CR
  598 e2bb: 04 e1 25        JSR exe_accept
  599 e2be: 1e 02 00        MVIW r6,bas_run_ended
  600 e2c1: 0e 01           LDAI 1
  601 e2c3: 4e              STAVR R6
  602 e2c4: 05              ret
  603 e2c5:             exe_jump_line1:
  604 e2c5:             ;   jsr tok_goto ; WHAT IS THIS
  605 e2c5: 0f 37           movrr r7,r3
  606 e2c7: 05              ret
  607 e2c8:             
  608 e2c8:             ;
  609 e2c8:             ; void goto_statement()
  610 e2c8:             ;
  611 e2c8:             exe_goto_stmt:
  612 e2c8: 0e 0d           LDAI TOKENIZER_GOTO
  613 e2ca: 04 e1 25        JSR exe_accept
  614 e2cd: 04 e1 bc        JSR exe_expr
  615 e2d0: 04 e2 ae        JSR exe_jump_line
  616 e2d3: 05              RET
  617 e2d4:             
  618 e2d4:             ;
  619 e2d4:             ; void print_statment()
  620 e2d4:             ;
  621 e2d4:             exe_print_stmt:
  622 e2d4: 0e 06           LDAI TOKENIZER_PRINT
  623 e2d6: 04 e1 25        jsr exe_accept
  624 e2d9:             
  625 e2d9:             exe_print_stmt_loop:
  626 e2d9: 43              LDAVR R3
  627 e2da: 0d 03           LDTI TOKENIZER_STRING
  628 e2dc: aa e2 eb        BRNEQ exe_print_stmt1
  629 e2df:             ;
  630 e2df:             ; this should return string to print in r2
  631 e2df:             ; exe_string may not be needed tokenbufferptr is at string ?
  632 e2df:             ;
  633 e2df: 0f 73           movrr r3,r7
  634 e2e1: 57              incr r7
  635 e2e2: 04 ff c0        jsr stringout
  636 e2e5: 04 e5 35        jsr exe_next_token
  637 e2e8: a0 e3 1e        br exe_print_stmt_test
  638 e2eb:             
  639 e2eb:             exe_print_stmt1:
  640 e2eb: 0d 15           ldti TOKENIZER_COMMA
  641 e2ed: aa e2 fb        BRNEQ exe_print_stmt2
  642 e2f0: 0e 20           LDAI ' '
  643 e2f2: 04 ff c4        JSR charout
  644 e2f5: 04 e5 35        jsr exe_next_token
  645 e2f8: a0 e3 1e        br exe_print_stmt_test
  646 e2fb:             
  647 e2fb:             exe_print_stmt2:
  648 e2fb: 0d 16           ldti TOKENIZER_SEMICOLON
  649 e2fd: aa e3 06        BRNEQ exe_print_stmt3
  650 e300: 04 e5 35        jsr exe_next_token
  651 e303: a0 e3 1e        br exe_print_stmt_test
  652 e306:             
  653 e306:             exe_print_stmt3:
  654 e306: 0d 04           ldti TOKENIZER_VARIABLE
  655 e308: a8 e3 18        BREQ exe_print_stmt4
  656 e30b: 0d 02           ldti TOKENIZER_NUMBER
  657 e30d: a8 e3 18        breq exe_print_stmt4
  658 e310: 0d 1f           ldti  TOKENIZER_LEFTP
  659 e312: a8 e3 18        breq exe_print_stmt4
  660 e315:             
  661 e315: a0 e3 2c        br exe_print_stmt_done
  662 e318:             
  663 e318:             exe_print_stmt4:
  664 e318: 04 e1 bc        jsr exe_expr
  665 e31b:                 ;JSR showr7
  666 e31b: 04 e5 7c        jsr exe_itoa
  667 e31e:             
  668 e31e:             exe_print_stmt_test:
  669 e31e: 43              LDAVR R3
  670 e31f: 0d 24           LDTI TOKENIZER_CR
  671 e321: a8 e3 2c        breq exe_print_stmt_done
  672 e324: 0d 01           LDTI TOKENIZER_EOF
  673 e326: a8 e3 2c        breq exe_print_stmt_done
  674 e329: a0 e2 d9        br exe_print_stmt_loop
  675 e32c:             
  676 e32c:             exe_print_stmt_done:
  677 e32c: 1f ed c3        mviw R7,CRLF
  678 e32f: 04 ff c0        jsr stringout
  679 e332: 04 e5 35        jsr exe_next_token
  680 e335: 05              ret
  681 e336:             
  682 e336:             ;
  683 e336:             ; void if_statement()
  684 e336:             ;
  685 e336:             exe_if_stmt:
  686 e336: 0e 07           LDAI TOKENIZER_IF
  687 e338: 04 e1 25        JSR exe_accept
  688 e33b:             
  689 e33b: 04 e2 2f        JSR exe_relation
  690 e33e: 27              MVRLA R7
  691 e33f: 09              push
  692 e340: 0e 08           LDAI TOKENIZER_THEN
  693 e342: 04 e1 25        JSR exe_accept
  694 e345: 0a              pop
  695 e346:             
  696 e346: 0d 01           LDTI 1
  697 e348: aa e3 4f        BRNEQ exe_if_stmt1
  698 e34b: 04 e4 67        JSR exe_stmt
  699 e34e: 05              ret
  700 e34f:             
  701 e34f:             exe_if_stmt1:
  702 e34f: 04 e5 35        jsr exe_next_token
  703 e352: 43              LDAVR R3
  704 e353: 0d 24           LDTI TOKENIZER_CR
  705 e355: a8 e3 5e        BREQ EXE_IF_STMT2
  706 e358: 0d 01           LDTI TOKENIZER_EOF
  707 e35a: aa e3 4f        BRNEQ EXE_IF_STMT1
  708 e35d: 05              RET
  709 e35e:             
  710 e35e:             exe_if_stmt2:
  711 e35e: 04 e5 35        JSR EXE_NEXT_TOKEN
  712 e361: 05              RET
  713 e362:             
  714 e362:             ;
  715 e362:             ; void let_statement()
  716 e362:             ;
  717 e362:             exe_let_stmt:
  718 e362: 04 e5 6e        jsr exe_variable_num
  719 e365: 37              mvarl r7
  720 e366: 0f 67           movrr r7,r6
  721 e368: 0e 04           ldai TOKENIZER_VARIABLE
  722 e36a: 04 e1 25        jsr exe_accept
  723 e36d: 0e 23           ldai TOKENIZER_EQ
  724 e36f: 04 e1 25        jsr exe_accept
  725 e372: 04 e1 bc        jsr exe_expr
  726 e375: 26              mvrla r6
  727 e376: 04 e5 1d        JSR exe_set_variable
  728 e379: 0e 24           ldai TOKENIZER_CR
  729 e37b: 04 e1 25        jsr exe_accept
  730 e37e: 05              ret
  731 e37f:             
  732 e37f:             ;
  733 e37f:             ; void gosub_statement()
  734 e37f:             ;
  735 e37f:             exe_gosub_stmt:
  736 e37f: 0e 0e           ldai TOKENIZER_GOSUB
  737 e381: 04 e1 25        jsr exe_accept
  738 e384: 04 e5 65        jsr exe_num
  739 e387: 0e 02           ldai TOKENIZER_NUMBER
  740 e389: 04 e1 25        jsr exe_accept
  741 e38c: 0e 24           ldai TOKENIZER_CR
  742 e38e: 04 e1 25        jsr exe_accept
  743 e391:             ;
  744 e391:             ; save current token buffer ptr to gosub stack
  745 e391:             ;
  746 e391: 23             mvrla r3
  747 e392: 4d             stavr r5
  748 e393: 55             incr r5
  749 e394: 2b             mvrha r3
  750 e395: 4d             stavr r5
  751 e396: 55             incr  r5
  752 e397:             ;
  753 e397:             ; write new gosub stack ptr location back
  754 e397:             ;
  755 e397: 04 e2 ae       JSR exe_jump_line
  756 e39a: 05             RET
  757 e39b:             
  758 e39b:             ;
  759 e39b:             ; void return_statment()
  760 e39b:             ;
  761 e39b:             exe_return_stmt:
  762 e39b: 0e 0f           ldai TOKENIZER_RETURN
  763 e39d: 04 e1 25        jsr exe_accept
  764 e3a0:             ;
  765 e3a0:             ; setup to use for storage area via R4
  766 e3a0:             ;
  767 e3a0: 5d             decr r5
  768 e3a1: 5d             decr r5
  769 e3a2:             
  770 e3a2: 45             ldavr r5
  771 e3a3: 33             mvarl r3
  772 e3a4: 55             incr r5
  773 e3a5: 45             ldavr r5
  774 e3a6: 3b             mvarh r3
  775 e3a7:             
  776 e3a7: 5d             decr r5
  777 e3a8: 05             ret
  778 e3a9:             
  779 e3a9:             ;
  780 e3a9:             ; void next_statement()
  781 e3a9:             ;
  782 e3a9:             exe_next_stmt:
  783 e3a9:             ;
  784 e3a9:             ; backup to the TO Value
  785 e3a9: 5c              decr r4
  786 e3aa: 5c              decr r4
  787 e3ab: 5c              decr r4
  788 e3ac: 5c              decr r4
  789 e3ad:             ;
  790 e3ad:             ; eat next
  791 e3ad:             ;
  792 e3ad: 0e 0c           ldai TOKENIZER_NEXT
  793 e3af: 04 e1 25        jsr exe_accept
  794 e3b2:             ;
  795 e3b2:             ; get variable id (in accumulator) and hold in r6 lo
  796 e3b2:             ;
  797 e3b2: 04 e5 6e        jsr exe_variable_num
  798 e3b5: 36              mvarl r6
  799 e3b6:             ;
  800 e3b6:             ; eat TOKENIZER_VARIABLE id
  801 e3b6:             ;
  802 e3b6: 0e 04           ldai TOKENIZER_VARIABLE
  803 e3b8: 04 e1 25        jsr exe_accept
  804 e3bb:             ;
  805 e3bb:             ; get variable value, inc by 1 and store - ADD STEP VALUE
  806 e3bb:             ;
  807 e3bb: 26              mvrla r6
  808 e3bc: 04 e5 28        jsr exe_get_variable
  809 e3bf: 57              incr r7
  810 e3c0: 26              mvrla r6
  811 e3c1: 04 e5 1d        jsr exe_set_variable
  812 e3c4:             ;
  813 e3c4:             ; get TO value into R6
  814 e3c4: 44              ldavr r4
  815 e3c5: 36              mvarl r6
  816 e3c6: 54              incr r4
  817 e3c7: 44              ldavr r4
  818 e3c8: 3e              mvarh r6
  819 e3c9: 54              incr r4
  820 e3ca:             ;
  821 e3ca:             ; for now only compare low byte HACK use compare code
  822 e3ca:             ; r7=r6 00
  823 e3ca:             ; r7>r6 01
  824 e3ca:             ; r7<r6 ff
  825 e3ca:             ;
  826 e3ca: 04 ed a2         jsr parse_compare
  827 e3cd: 0d 01            ldti 01
  828 e3cf: a8 e3 d9         breq exe_next_done
  829 e3d2:             ;    mvrla r6
  830 e3d2:             ;    mvat
  831 e3d2:             ;    mvrla r7
  832 e3d2:             ;    brgt exe_next_done
  833 e3d2:             ;
  834 e3d2: 44              ldavr r4
  835 e3d3: 33              mvarl r3
  836 e3d4: 54              incr r4
  837 e3d5: 44              ldavr r4
  838 e3d6: 3b              mvarh r3
  839 e3d7: 54              incr r4
  840 e3d8: 05              ret
  841 e3d9:             
  842 e3d9:             exe_next_done:
  843 e3d9: 5c            decr r4
  844 e3da: 5c            decr r4
  845 e3db: 5c            decr r4
  846 e3dc: 5c            decr r4
  847 e3dd: 0e 24         ldai TOKENIZER_CR
  848 e3df: 04 e1 25      jsr exe_accept
  849 e3e2: 05            ret
  850 e3e3:             
  851 e3e3:             ;
  852 e3e3:             ; void for_statement()
  853 e3e3:             ;
  854 e3e3:             exe_for_stmt:
  855 e3e3:             ;
  856 e3e3:             ; setup to use for storage area via R4
  857 e3e3:             ;
  858 e3e3: 0e 0a           ldai TOKENIZER_FOR    ; eat FOR
  859 e3e5: 04 e1 25        jsr exe_accept
  860 e3e8:             ;
  861 e3e8:             ; get variable id (in accumulator) and hold in r6 lo
  862 e3e8:             ;
  863 e3e8: 04 e5 6e        jsr exe_variable_num
  864 e3eb: 36              mvarl r6
  865 e3ec:             ;
  866 e3ec:             ; store variable id in FOR storage - hack only lo byte, hi byte 0
  867 e3ec:             ;
  868 e3ec: 4c              stavr r4
  869 e3ed: 54              incr r4
  870 e3ee: 0e 00           ldai 0
  871 e3f0: 4c              stavr r4
  872 e3f1: 54              incr r4
  873 e3f2:             ;
  874 e3f2:             ; eat variable id and = then get starting value
  875 e3f2:             ;
  876 e3f2: 0e 04           ldai TOKENIZER_VARIABLE
  877 e3f4: 04 e1 25        jsr exe_accept
  878 e3f7: 0e 23           ldai TOKENIZER_EQ
  879 e3f9: 04 e1 25        jsr exe_accept
  880 e3fc: 04 e1 bc        jsr exe_expr
  881 e3ff:             ;
  882 e3ff:             ; set variable to starting value
  883 e3ff:             ;
  884 e3ff: 26              mvrla r6
  885 e400: 04 e5 1d        JSR exe_set_variable
  886 e403:             ;
  887 e403:             ; eat TO and get to value
  888 e403:             ;
  889 e403: 0e 0b           ldai TOKENIZER_TO
  890 e405: 04 e1 25        jsr exe_accept
  891 e408: 04 e1 bc        jsr exe_expr
  892 e40b:             ;
  893 e40b:             ; store to value in FOR storage area
  894 e40b:             ;
  895 e40b: 27              mvrla r7
  896 e40c: 4c              stavr r4
  897 e40d: 54              incr r4
  898 e40e: 2f              mvrha r7
  899 e40f: 4c              stavr r4
  900 e410: 54              incr r4
  901 e411:             ;
  902 e411:             ; EAT EOL
  903 e411:             ;
  904 e411: 0e 24           ldai TOKENIZER_CR
  905 e413: 04 e1 25        jsr exe_accept
  906 e416:             ;
  907 e416:             ; store ptr to instruction after FOR in for storage area
  908 e416:             ;
  909 e416: 23              mvrla r3
  910 e417: 4c              stavr r4
  911 e418: 54              incr r4
  912 e419: 2b              mvrha r3
  913 e41a: 4c              stavr r4
  914 e41b: 54              incr r4
  915 e41c:             ;
  916 e41c:             ;   save for stackptr
  917 e41c:             ;
  918 e41c: 05              ret
  919 e41d:             
  920 e41d:             ;
  921 e41d:             ; void peek_statment()
  922 e41d:             ;
  923 e41d:             ;peek_statement(void) {
  924 e41d:             ;
  925 e41d:             exe_peek_stmt:
  926 e41d: 0e 12           ldai TOKENIZER_PEEK   ; eat PEEK
  927 e41f: 04 e1 25        jsr exe_accept
  928 e422: 04 e1 bc        jsr exe_expr
  929 e425: 47              LDAVR R7
  930 e426: 37              MVARL R7
  931 e427: 0e 00           LDAI 0
  932 e429: 3f              MVARH R7
  933 e42a: 07 07           PUSHR R7
  934 e42c:             
  935 e42c: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
  936 e42e: 04 e1 25        jsr exe_accept
  937 e431: 04 e5 6e        jsr exe_variable_num
  938 e434: 08 70           popr r7
  939 e436:             
  940 e436: 04 e5 1d        jsr  EXE_SET_VARIABLE
  941 e439: 0e 04           ldai TOKENIZER_VARIABLE
  942 e43b: 04 e1 25        jsr EXE_ACCEPT
  943 e43e: 0e 24           ldai TOKENIZER_CR
  944 e440: 04 e1 25        jsr exe_accept
  945 e443: 05              RET
  946 e444:             
  947 e444:             ;
  948 e444:             ; void poke_statement()
  949 e444:             ;
  950 e444:             ;poke_statement(void) {
  951 e444:             ;    VARIABLE_TYPE poke_addr;
  952 e444:             ;    VARIABLE_TYPE value;
  953 e444:             ;
  954 e444:             ;    accept(TOKENIZER_POKE);
  955 e444:             ;    poke_addr = expr();
  956 e444:             ;    accept(TOKENIZER_COMMA);
  957 e444:             ;    value = expr();
  958 e444:             ;    accept(TOKENIZER_CR);
  959 e444:             
  960 e444:             ;    poke_function(poke_addr, value);
  961 e444:             
  962 e444:             exe_poke_stmt:
  963 e444: 0e 13           ldai TOKENIZER_POKE   ; eat PEEK
  964 e446: 04 e1 25        jsr exe_accept
  965 e449:             
  966 e449: 04 e1 bc        jsr exe_expr
  967 e44c: 07 07           PUSHR R7
  968 e44e:             
  969 e44e: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
  970 e450: 04 e1 25        jsr exe_accept
  971 e453:             
  972 e453: 04 e1 bc        jsr exe_expr
  973 e456: 27              MVRLA R7
  974 e457:             
  975 e457: 08 70           POPR R7
  976 e459:             
  977 e459: 4f              STAVR R7
  978 e45a:             
  979 e45a: 0e 24           ldai TOKENIZER_CR
  980 e45c: 04 e1 25        jsr exe_accept
  981 e45f: 05              RET
  982 e460:             
  983 e460:             ;
  984 e460:             ; void end_statement()
  985 e460:             ;
  986 e460:             exe_end_stmt:
  987 e460: 1e 02 00        mviw r6,bas_run_ended
  988 e463: 0e 01           LDAI 1
  989 e465: 4e              STAVR r6
  990 e466: 05              ret
  991 e467:             
  992 e467:             ;
  993 e467:             ; void statment()
  994 e467:             ;
  995 e467:             exe_stmt:
  996 e467: 43              LDAVR R3
  997 e468:             
  998 e468: 0d 06           LDTI TOKENIZER_PRINT
  999 e46a: aa e4 71        BRNEQ exe_stmt1
 1000 e46d: 04 e2 d4        JSR exe_print_stmt
 1001 e470: 05              ret
 1002 e471:             
 1003 e471:             exe_stmt1:
 1004 e471: 0d 07           LDTI TOKENIZER_IF
 1005 e473: aa e4 7a        BRNEQ exe_stmt2
 1006 e476: 04 e3 36        JSR exe_if_stmt
 1007 e479: 05              ret
 1008 e47a:             
 1009 e47a:             exe_stmt2:
 1010 e47a: 0d 04           LDTI TOKENIZER_VARIABLE
 1011 e47c: aa e4 83        BRNEQ exe_stmt3
 1012 e47f: 04 e3 62        JSR exe_let_stmt
 1013 e482: 05              ret
 1014 e483:             
 1015 e483:             exe_stmt3:
 1016 e483: 0d 0e           LDTI TOKENIZER_GOSUB
 1017 e485: aa e4 8c        BRNEQ exe_stmt4
 1018 e488: 04 e3 7f        JSR exe_gosub_stmt
 1019 e48b: 05              ret
 1020 e48c:             
 1021 e48c:             exe_stmt4:
 1022 e48c: 0d 0f           LDTI TOKENIZER_RETURN
 1023 e48e: aa e4 95        BRNEQ exe_stmt5
 1024 e491: 04 e3 9b        JSR exe_return_stmt
 1025 e494: 05              ret
 1026 e495:             
 1027 e495:             exe_stmt5:
 1028 e495: 0d 0a           LDTI TOKENIZER_FOR
 1029 e497: aa e4 9e        BRNEQ exe_stmt6
 1030 e49a: 04 e3 e3        JSR exe_for_stmt
 1031 e49d: 05              ret
 1032 e49e:             
 1033 e49e:             exe_stmt6:
 1034 e49e: 0d 12           LDTI TOKENIZER_PEEK
 1035 e4a0: aa e4 a7        BRNEQ exe_stmt7
 1036 e4a3: 04 e4 1d        JSR exe_peek_stmt
 1037 e4a6: 05              ret
 1038 e4a7:             
 1039 e4a7:             exe_stmt7:
 1040 e4a7: 0d 13           LDTI TOKENIZER_POKE
 1041 e4a9: aa e4 b0        BRNEQ exe_stmt8
 1042 e4ac: 04 e4 44        JSR exe_poke_stmt
 1043 e4af: 05              ret
 1044 e4b0:             
 1045 e4b0:             exe_stmt8:
 1046 e4b0: 0d 0c           LDTI TOKENIZER_NEXT
 1047 e4b2: aa e4 b9        BRNEQ exe_stmt9
 1048 e4b5: 04 e3 a9        JSR exe_next_stmt
 1049 e4b8: 05              ret
 1050 e4b9:             
 1051 e4b9:             exe_stmt9:
 1052 e4b9: 0d 14           LDTI TOKENIZER_END
 1053 e4bb: aa e4 c2        BRNEQ exe_stmt10
 1054 e4be: 04 e4 60        JSR exe_end_stmt
 1055 e4c1: 05              ret
 1056 e4c2:             
 1057 e4c2:             exe_stmt10:
 1058 e4c2: 0d 05           LDTI TOKENIZER_LET
 1059 e4c4: aa e4 d0        BRNEQ exe_stmt11
 1060 e4c7: 0e 05           LDAI TOKENIZER_LET
 1061 e4c9: 04 e1 25        JSR exe_accept
 1062 e4cc: 04 e3 62        JSR exe_let_stmt
 1063 e4cf: 05              ret
 1064 e4d0:             
 1065 e4d0:             exe_stmt11:
 1066 e4d0: 0d 0d           LDTI TOKENIZER_GOTO
 1067 e4d2: aa e4 d9        BRNEQ exe_stmt12
 1068 e4d5: 04 e2 c8        JSR exe_goto_stmt
 1069 e4d8: 05              ret
 1070 e4d9:             
 1071 e4d9:             exe_stmt12:
 1072 e4d9: 04 ff e0        jsr showbytea
 1073 e4dc: 0e 3d           ldai '='
 1074 e4de: 04 ff c8        jsr uartout
 1075 e4e1: 1f e0 ed        MVIW R7,bas_msg3
 1076 e4e4: 04 ff c0        jsr stringout
 1077 e4e7: 04 ff dc        JSR SHOWREGS
 1078 e4ea: 04 e5 33        jsr bas_error
 1079 e4ed:             
 1080 e4ed:             ;
 1081 e4ed:             ; void line_statement (void)
 1082 e4ed:             ;
 1083 e4ed:             exe_line_stmt:
 1084 e4ed: 0e 25           LDAI TOKENIZER_LINENUM
 1085 e4ef: 04 e1 25        jsr exe_accept
 1086 e4f2: 04 e4 67        jsr exe_stmt
 1087 e4f5: 05              ret
 1088 e4f6:             
 1089 e4f6:             ;
 1090 e4f6:             ; void ubasic_run()
 1091 e4f6:             ;
 1092 e4f6:             basic_run:
 1093 e4f6: 04 e1 13        JSR exe_init
 1094 e4f9:             
 1095 e4f9:             exe_run:
 1096 e4f9: 04 e5 08        jsr exe_finished
 1097 e4fc: 0d 01           LDTI 1
 1098 e4fe: aa e5 02        BRNEQ exe_run_cont
 1099 e501: 05              ret
 1100 e502:             
 1101 e502:             exe_run_cont:
 1102 e502: 04 e4 ed        jsr exe_line_stmt
 1103 e505: a0 e4 f9        BR exe_run
 1104 e508:             
 1105 e508:             ;
 1106 e508:             ; int ubasic_finished()
 1107 e508:             ;
 1108 e508:             exe_finished:
 1109 e508: 1a 02 00        MVIW R2,bas_run_ended
 1110 e50b: 42              LDAVR R2
 1111 e50c: 0d 01           LDTI 1
 1112 e50e: a8 e5 1a        BREQ exe_finished_yes
 1113 e511:             
 1114 e511: 43              ldavr r3
 1115 e512: 0d 01           ldti TOKENIZER_EOF
 1116 e514: a8 e5 1a        breq exe_finished_yes
 1117 e517: 0e 00           ldai 0
 1118 e519: 05              ret
 1119 e51a:             
 1120 e51a:             exe_finished_yes:
 1121 e51a: 0e 01           LDAI 1
 1122 e51c: 05              ret
 1123 e51d:             
 1124 e51d:             ;
 1125 e51d:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1126 e51d:             ;
 1127 e51d:             ; R7 value (only using low byte)
 1128 e51d:             ; ACCUMULATOR Variable ref number
 1129 e51d:             ;
 1130 e51d:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1131 e51d:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1132 e51d:             ;
 1133 e51d:             exe_set_variable:
 1134 e51d: 1a 01 00        MVIW R2,BASIC_VARS  ; SEE COMMENT below about memory alignment
 1135 e520: b6              SHL                 ; memory location x 2 (2 byte vars)
 1136 e521: 32              MVARL R2            ; change to add16 to remove align issue
 1137 e522:             ;
 1138 e522: 27              MVRLA R7
 1139 e523: 4a              STAVR R2
 1140 e524: 52              INCR r2
 1141 e525: 2f              mvrha r7
 1142 e526: 4a              stavr r2
 1143 e527:             
 1144 e527: 05              RET
 1145 e528:             ;
 1146 e528:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1147 e528:             ;
 1148 e528:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1149 e528:             ;
 1150 e528:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1151 e528:             ; and only 0-25 (var names a-z) supported
 1152 e528:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1153 e528:             ;
 1154 e528:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1155 e528:             ;
 1156 e528:             exe_get_variable:
 1157 e528: 1a 01 00        MVIW R2,BASIC_VARS
 1158 e52b: b6              shl
 1159 e52c: 32              MVARL R2
 1160 e52d:             ;
 1161 e52d: 42              LDAVR R2
 1162 e52e: 37              MVARL R7
 1163 e52f: 52              INCR R2
 1164 e530: 42              LDAVR R2
 1165 e531: 3f              MVARH R7
 1166 e532: 05              RET
 1167 e533:             
 1168 e533:             ;
 1169 e533:             ; hack this needs work
 1170 e533:             ;
 1171 e533:             bas_error:
 1172 e533: 03            HALT
 1173 e534: 05            RET
 1174 e535:             
 1175 e535:             ;
 1176 e535:             ; Tokenizer execute support code
 1177 e535:             ;
 1178 e535:             ; tokenizer_next - exe version
 1179 e535:             ;
 1180 e535:             exe_next_token:
 1181 e535: 43            ldavr r3
 1182 e536: 0d 02         ldti TOKENIZER_NUMBER
 1183 e538: aa e5 3f      BRNEQ exe_next_token1
 1184 e53b: 53            incr r3
 1185 e53c: 53            incr r3
 1186 e53d: 53            incr r3
 1187 e53e: 05            RET
 1188 e53f:             
 1189 e53f:             exe_next_token1:
 1190 e53f: 0d 04         ldti TOKENIZER_VARIABLE
 1191 e541: aa e5 48      BRNEQ exe_next_token2
 1192 e544: 53            incr r3
 1193 e545: 53            incr r3
 1194 e546: 53            incr r3
 1195 e547: 05            RET
 1196 e548:             
 1197 e548:             exe_next_token2:
 1198 e548: 0d 25         ldti TOKENIZER_LINENUM
 1199 e54a: aa e5 53      BRNEQ exe_next_token3
 1200 e54d: 53            incr r3
 1201 e54e: 53            incr r3
 1202 e54f: 53            incr r3
 1203 e550: 53            incr r3
 1204 e551: 53            incr r3
 1205 e552: 05            RET
 1206 e553:             
 1207 e553:             exe_next_token3:
 1208 e553: 0d 03         ldti TOKENIZER_STRING
 1209 e555: aa e5 63      BRNEQ exe_next_token4
 1210 e558: 53            incr r3
 1211 e559:             
 1212 e559:             exe_next_tok3_loop:
 1213 e559: 43            LDAVR R3
 1214 e55a: a1 e5 61      BRZ exe_next_tok3_done
 1215 e55d: 53            incr r3
 1216 e55e: a0 e5 59      BR exe_next_tok3_loop
 1217 e561:             
 1218 e561:             exe_next_tok3_done:
 1219 e561: 53            incr r3
 1220 e562: 05            RET
 1221 e563:             
 1222 e563:             exe_next_token4:
 1223 e563: 53            incr r3
 1224 e564: 05            ret
 1225 e565:             
 1226 e565:             ;
 1227 e565:             ; numbers stored low byte followed by high byte in memory
 1228 e565:             ;
 1229 e565:             exe_num:
 1230 e565: 53              incr r3
 1231 e566: 43              ldavr r3
 1232 e567: 37              mvarl r7
 1233 e568: 53              incr r3
 1234 e569: 43              ldavr r3
 1235 e56a: 3f              mvarh r7
 1236 e56b: 5b              decr r3
 1237 e56c: 5b              decr r3
 1238 e56d: 05              ret
 1239 e56e:             
 1240 e56e:             ;
 1241 e56e:             ; hack only using low byte of id for now
 1242 e56e:             ; return in accumulator
 1243 e56e:             ;
 1244 e56e:             exe_variable_num:
 1245 e56e: 53              incr r3
 1246 e56f: 43              ldavr r3
 1247 e570: 5b              decr r3
 1248 e571: 05              ret
 1249 e572:             
 1250 e572:             
 1251 e572:             ;
 1252 e572:             ; Convert number in r7 to ASCII
 1253 e572:             ;
 1254 e572:             ; for for negative numbers
 1255 e572:             ;
 1256 e572: 27 10 03 e8 
            00 64 00 0a 
            00 00       dividers: DW 02710h,03e8h,0064h,000Ah,0000h
 1257 e57c:             
 1258 e57c:             exe_itoa:
 1259 e57c: 09                push
 1260 e57d: 2f                mvrha r7
 1261 e57e: b3 80             andi 080h
 1262 e580: a1 e5 8f          brz exe_itoa_pos
 1263 e583:             
 1264 e583: 2f                mvrha r7
 1265 e584: b5                inva
 1266 e585: 3f                mvarh r7
 1267 e586: 27                mvrla r7
 1268 e587: b5                inva
 1269 e588: 37                mvarl r7
 1270 e589: 57                incr r7
 1271 e58a: 0e 2d             ldai '-'
 1272 e58c: 04 ff c4          jsr charout
 1273 e58f:             
 1274 e58f:             exe_itoa_pos:
 1275 e58f: 07 04             pushr r4    ; dividers ptr
 1276 e591: 07 05             pushr r5    ; value holder
 1277 e593: 1d 00 00          mviw r5,0
 1278 e596: 0e 01             ldai 1
 1279 e598: 3d                mvarh r5
 1280 e599: 07 06             pushr r6    ;
 1281 e59b: 1c e5 72          mviw  r4,dividers
 1282 e59e:             
 1283 e59e:             exe_itoa_loop:
 1284 e59e: 44                ldavr r4
 1285 e59f: 3e                mvarh r6
 1286 e5a0: 54                incr r4
 1287 e5a1: 44                ldavr r4
 1288 e5a2: 36                mvarl r6
 1289 e5a3: 5c                decr r4
 1290 e5a4: 04 ed a2          jsr parse_compare
 1291 e5a7: 0d ff             ldti 0ffh
 1292 e5a9: a8 e5 b6          breq exe_itoa_next
 1293 e5ac: 0e 00             ldai 0
 1294 e5ae: 3d                mvarh r5
 1295 e5af: 04 ed 55          jsr PARSE_SUB16
 1296 e5b2: 55                incr r5
 1297 e5b3: a0 e5 9e          br exe_itoa_loop
 1298 e5b6:             
 1299 e5b6:             exe_itoa_next:
 1300 e5b6: 2d                mvrha r5
 1301 e5b7: a2 e5 c3          brnz exe_itoa_notyet
 1302 e5ba: 25                mvrla r5
 1303 e5bb: b0 30             addi '0'
 1304 e5bd: 04 ff c4          JSR charout
 1305 e5c0: 0e 00             ldai 0
 1306 e5c2: 3d                mvarh r5
 1307 e5c3:             
 1308 e5c3:             exe_itoa_notyet:
 1309 e5c3: 0e 00             ldai 0
 1310 e5c5: 35                mvarl r5
 1311 e5c6: 54                incr r4
 1312 e5c7: 54                incr r4
 1313 e5c8: 44                ldavr r4
 1314 e5c9: a2 e5 9e          brnz exe_itoa_loop
 1315 e5cc: 54                incr r4
 1316 e5cd: 44                ldavr r4
 1317 e5ce: 5c                decr r4
 1318 e5cf: a2 e5 9e          brnz exe_itoa_loop
 1319 e5d2:             
 1320 e5d2:             ;      mvrha r5
 1321 e5d2:             ;      brz exe_itoa_noones
 1322 e5d2: 27                mvrla r7
 1323 e5d3: b0 30             addi '0'
 1324 e5d5: 04 ff c4          JSR charout
 1325 e5d8:             exe_itoa_noones:
 1326 e5d8: 08 60             popr r6
 1327 e5da: 08 50             popr r5
 1328 e5dc: 08 40             popr r4
 1329 e5de: 0a                pop
 1330 e5df: 05                RET
 1331 e5e0:             
 1332 e5e0:             
 1333 e5e0:             
 1334 e5e0:             ;
 1335 e5e0:             ; List out token buffer in human readable form
 1336 e5e0:             ;
 1337 e5e0:             ; list out token buffer
 1338 e5e0:             ; buffer address in r7
 1339 e5e0:             ;
 1340 e5e0: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1341 e5e5: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1342 e5ec: 49 46 20 00 tokl_if: DB "IF ",0
 1343 e5f0: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1344 e5f6: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1345 e5fc: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1346 e601: 54 4f 20 00 tokl_to: DB "TO ",0
 1347 e605: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1348 e60b: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1349 e611: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1350 e618: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1351 e620: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1352 e625: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1353 e62b: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1354 e631: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1355 e636: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1356 e63c: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1357 e647:             
 1358 e647:             
 1359 e647:             basic_list:
 1360 e647: 07 03           pushr r3
 1361 e649: 0f 37           movrr r7,r3
 1362 e64b:             
 1363 e64b:             
 1364 e64b:             baslist_loop:
 1365 e64b: 43              ldavr r3
 1366 e64c:             
 1367 e64c: 0d 00           LDTI TOKENIZER_ERROR
 1368 e64e: aa e6 60        BRNEQ baslist1
 1369 e651: 1f e6 3c        MVIW R7,tokl_error
 1370 e654: 04 ff c0        JSR stringout
 1371 e657: 04 ff cc        JSR showaddr
 1372 e65a: a0 e8 f6        BR baslist_done
 1373 e65d: a0 e6 4b        BR baslist_loop
 1374 e660:             
 1375 e660:             baslist1:
 1376 e660: 0d 01           LDTI TOKENIZER_EOF
 1377 e662: aa e6 6b        BRNEQ baslist2
 1378 e665: a0 e8 f6        BR baslist_done
 1379 e668: a0 e6 4b        BR baslist_loop
 1380 e66b:             
 1381 e66b:             baslist2:
 1382 e66b: 0d 02           LDTI TOKENIZER_NUMBER
 1383 e66d: aa e6 82        BRNEQ baslist3
 1384 e670: 53              incr r3
 1385 e671: 43              ldavr r3
 1386 e672: 37              mvarl r7
 1387 e673: 53              incr r3
 1388 e674: 43              ldavr r3
 1389 e675: 3f              mvarh r7
 1390 e676: 53              INCR R3
 1391 e677:             ;    jsr showr7
 1392 e677: 04 e5 7c        jsr exe_itoa
 1393 e67a: 0e 20           ldai ' '
 1394 e67c: 04 ff c8        jsr uartout
 1395 e67f: a0 e6 4b        BR baslist_loop
 1396 e682:             
 1397 e682:             baslist3:
 1398 e682: 0d 03           LDTI TOKENIZER_STRING
 1399 e684: aa e6 9e        BRNEQ baslist4
 1400 e687: 53              incr r3
 1401 e688: 0f 73           movrr r3,r7
 1402 e68a: 04 ff c0        jsr stringout
 1403 e68d: 0e 20           ldai ' '
 1404 e68f: 04 ff c8        jsr uartout
 1405 e692:             baslist_string:
 1406 e692: 43              ldavr r3
 1407 e693: a1 e6 9a        brz baslist_stringend
 1408 e696: 53              incr r3
 1409 e697: a0 e6 92        br baslist_string
 1410 e69a:             baslist_stringend:
 1411 e69a: 53              incr r3
 1412 e69b: a0 e6 4b        BR baslist_loop
 1413 e69e:             
 1414 e69e:             baslist4:
 1415 e69e: 0d 04           LDTI TOKENIZER_VARIABLE
 1416 e6a0: aa e6 b5        BRNEQ baslist5
 1417 e6a3: 53              incr r3
 1418 e6a4: 43              ldavr r3
 1419 e6a5: 0d 41           ldti 'A'
 1420 e6a7: b8              ADDT
 1421 e6a8: 53              incr r3
 1422 e6a9: 53              incr r3
 1423 e6aa: 04 ff c8        jsr uartout
 1424 e6ad:             
 1425 e6ad:             ;    ldavr r3
 1426 e6ad:             ;    mvarl r7
 1427 e6ad:             ;    incr r3
 1428 e6ad:             ;    ldavr r3
 1429 e6ad:             ;    mvarh r7
 1430 e6ad:             ;    INCR R3
 1431 e6ad:             ;    jsr showr7
 1432 e6ad:             
 1433 e6ad: 0e 20           ldai ' '
 1434 e6af: 04 ff c8        jsr uartout
 1435 e6b2: a0 e6 4b        BR baslist_loop
 1436 e6b5:             
 1437 e6b5:             baslist5:
 1438 e6b5: 0d 05           LDTI TOKENIZER_LET
 1439 e6b7: aa e6 c4        BRNEQ baslist6
 1440 e6ba: 1f e5 e0        MVIW R7,tokl_let
 1441 e6bd: 04 ff c0        JSR stringout
 1442 e6c0: 53              INCR R3
 1443 e6c1: a0 e6 4b        BR baslist_loop
 1444 e6c4:             
 1445 e6c4:             baslist6:
 1446 e6c4: 0d 06           LDTI TOKENIZER_PRINT
 1447 e6c6: aa e6 d3        BRNEQ baslist7
 1448 e6c9: 1f e5 e5        MVIW R7,tokl_print
 1449 e6cc: 04 ff c0        jsr STRINGOUT
 1450 e6cf: 53              INCR R3
 1451 e6d0: a0 e6 4b        BR baslist_loop
 1452 e6d3:             
 1453 e6d3:             baslist7:
 1454 e6d3: 0d 07           LDTI TOKENIZER_IF
 1455 e6d5: aa e6 e2        BRNEQ baslist8
 1456 e6d8: 1f e5 ec        MVIW R7,tokl_if
 1457 e6db: 04 ff c0        JSR stringout
 1458 e6de: 53              INCR R3
 1459 e6df: a0 e6 4b        BR baslist_loop
 1460 e6e2:             
 1461 e6e2:             baslist8:
 1462 e6e2: 0d 08           LDTI TOKENIZER_THEN
 1463 e6e4: aa e6 f1        BRNEQ baslist9
 1464 e6e7: 1f e5 f0        MVIW R7,tokl_then
 1465 e6ea: 04 ff c0        JSR stringout
 1466 e6ed: 53              INCR R3
 1467 e6ee: a0 e6 4b        BR baslist_loop
 1468 e6f1:             
 1469 e6f1:             baslist9:
 1470 e6f1: 0d 09           LDTI TOKENIZER_ELSE
 1471 e6f3: aa e7 00        BRNEQ baslist10
 1472 e6f6: 1f e5 f6        MVIW R7,tokl_else
 1473 e6f9: 04 ff c0        JSR stringout
 1474 e6fc: 53              INCR R3
 1475 e6fd: a0 e6 4b        BR baslist_loop
 1476 e700:             
 1477 e700:             baslist10:
 1478 e700: 0d 0a           LDTI TOKENIZER_FOR
 1479 e702: aa e7 0f        BRNEQ baslist11
 1480 e705: 1f e5 fc        MVIW R7,tokl_for
 1481 e708: 04 ff c0        JSR stringout
 1482 e70b: 53              INCR R3
 1483 e70c: a0 e6 4b        BR baslist_loop
 1484 e70f:             
 1485 e70f:             baslist11:
 1486 e70f: 0d 0b           LDTI TOKENIZER_TO
 1487 e711: aa e7 1e        BRNEQ baslist12
 1488 e714: 1f e6 01        MVIW R7,tokl_to
 1489 e717: 04 ff c0        JSR stringout
 1490 e71a: 53              INCR R3
 1491 e71b: a0 e6 4b        BR baslist_loop
 1492 e71e:             
 1493 e71e:             baslist12:
 1494 e71e: 0d 0c           LDTI TOKENIZER_NEXT
 1495 e720: aa e7 2d        BRNEQ baslist13
 1496 e723: 1f e6 05        MVIW R7,tokl_next
 1497 e726: 04 ff c0        JSR stringout
 1498 e729: 53              INCR R3
 1499 e72a: a0 e6 4b        BR baslist_loop
 1500 e72d:             
 1501 e72d:             baslist13:
 1502 e72d: 0d 0d           LDTI TOKENIZER_GOTO
 1503 e72f: aa e7 3c        BRNEQ baslist14
 1504 e732: 1f e6 0b        MVIW R7,tokl_goto
 1505 e735: 04 ff c0        JSR stringout
 1506 e738: 53              INCR R3
 1507 e739: a0 e6 4b        BR baslist_loop
 1508 e73c:             
 1509 e73c:             baslist14:
 1510 e73c: 0d 0e           LDTI TOKENIZER_GOSUB
 1511 e73e: aa e7 4b        BRNEQ baslist15
 1512 e741: 1f e6 11        MVIW R7,tokl_gosub
 1513 e744: 04 ff c0        JSR stringout
 1514 e747: 53              INCR R3
 1515 e748: a0 e6 4b        BR baslist_loop
 1516 e74b:             
 1517 e74b:             baslist15:
 1518 e74b: 0d 0f           LDTI TOKENIZER_RETURN
 1519 e74d: aa e7 5a        BRNEQ baslist16
 1520 e750: 1f e6 18        MVIW R7,tokl_return
 1521 e753: 04 ff c0        JSR stringout
 1522 e756: 53              INCR R3
 1523 e757: a0 e6 4b        BR baslist_loop
 1524 e75a:             
 1525 e75a:             baslist16:
 1526 e75a: 0d 10           LDTI TOKENIZER_CALL
 1527 e75c: aa e7 69        BRNEQ baslist17
 1528 e75f: 1f e6 36        MVIW R7,tokl_call
 1529 e762: 04 ff c0        JSR stringout
 1530 e765: 53              INCR R3
 1531 e766: a0 e6 4b        BR baslist_loop
 1532 e769:             
 1533 e769:             baslist17:
 1534 e769: 0d 11           LDTI TOKENIZER_REM
 1535 e76b: aa e7 78        BRNEQ baslist18
 1536 e76e: 1f e6 20        MVIW R7,tokl_rem
 1537 e771: 04 ff c0        JSR stringout
 1538 e774: 53              INCR R3
 1539 e775: a0 e6 4b        BR baslist_loop
 1540 e778:             
 1541 e778:             baslist18:
 1542 e778: 0d 12           LDTI TOKENIZER_PEEK
 1543 e77a: aa e7 87        BRNEQ baslist19
 1544 e77d: 1f e6 25        MVIW R7,tokl_peek
 1545 e780: 04 ff c0        JSR stringout
 1546 e783: 53              INCR R3
 1547 e784: a0 e6 4b        BR baslist_loop
 1548 e787:             
 1549 e787:             baslist19:
 1550 e787: 0d 13           LDTI TOKENIZER_POKE
 1551 e789: aa e7 96        BRNEQ baslist20
 1552 e78c: 1f e6 2b        MVIW R7,tokl_poke
 1553 e78f: 04 ff c0        JSR stringout
 1554 e792: 53              INCR R3
 1555 e793: a0 e6 4b        BR baslist_loop
 1556 e796:             
 1557 e796:             baslist20:
 1558 e796: 0d 14           LDTI TOKENIZER_END
 1559 e798: aa e7 a5        BRNEQ baslist21
 1560 e79b: 1f e6 31        MVIW R7,tokl_end
 1561 e79e: 04 ff c0        JSR stringout
 1562 e7a1: 53              INCR R3
 1563 e7a2: a0 e6 4b        BR baslist_loop
 1564 e7a5:             
 1565 e7a5:             baslist21:
 1566 e7a5: 0d 15           LDTI TOKENIZER_COMMA
 1567 e7a7: aa e7 b8        BRNEQ baslist22
 1568 e7aa: 0e 2c           ldai ','
 1569 e7ac: 04 ff c8        jsr uartout
 1570 e7af: 0e 20           ldai ' '
 1571 e7b1: 04 ff c8        jsr uartout
 1572 e7b4: 53              INCR R3
 1573 e7b5: a0 e6 4b        BR baslist_loop
 1574 e7b8:             
 1575 e7b8:             baslist22:
 1576 e7b8: 0d 16           LDTI TOKENIZER_SEMICOLON
 1577 e7ba: aa e7 cb        BRNEQ baslist23
 1578 e7bd: 0e 3b           ldai ';'
 1579 e7bf: 04 ff c8        jsr uartout
 1580 e7c2: 0e 20           ldai ' '
 1581 e7c4: 04 ff c8        jsr uartout
 1582 e7c7: 53              INCR R3
 1583 e7c8: a0 e6 4b        BR baslist_loop
 1584 e7cb:             
 1585 e7cb:             baslist23:
 1586 e7cb: 0d 17           LDTI TOKENIZER_PLUS
 1587 e7cd: aa e7 de        BRNEQ baslist24
 1588 e7d0: 0e 2b           ldai '+'
 1589 e7d2: 04 ff c8        jsr uartout
 1590 e7d5: 0e 20           ldai ' '
 1591 e7d7: 04 ff c8        jsr uartout
 1592 e7da: 53              INCR R3
 1593 e7db: a0 e6 4b        BR baslist_loop
 1594 e7de:             
 1595 e7de:             baslist24:
 1596 e7de: 0d 18           LDTI TOKENIZER_MINUS
 1597 e7e0: aa e7 f1        BRNEQ baslist25
 1598 e7e3: 0e 2d           ldai '-'
 1599 e7e5: 04 ff c8        jsr uartout
 1600 e7e8: 0e 20           ldai ' '
 1601 e7ea: 04 ff c8        jsr uartout
 1602 e7ed: 53              INCR R3
 1603 e7ee: a0 e6 4b        BR baslist_loop
 1604 e7f1:             
 1605 e7f1:             baslist25:
 1606 e7f1: 0d 19           LDTI TOKENIZER_AND
 1607 e7f3: aa e8 04        BRNEQ baslist26
 1608 e7f6: 0e 26           ldai '&'
 1609 e7f8: 04 ff c8        jsr uartout
 1610 e7fb: 0e 20           ldai ' '
 1611 e7fd: 04 ff c8        jsr uartout
 1612 e800: 53              INCR R3
 1613 e801: a0 e6 4b        BR baslist_loop
 1614 e804:             
 1615 e804:             baslist26:
 1616 e804: 0d 1a           LDTI TOKENIZER_OR
 1617 e806: aa e8 17        BRNEQ baslist27
 1618 e809: 0e 7c           ldai '|'
 1619 e80b: 04 ff c8        jsr uartout
 1620 e80e: 0e 20           ldai ' '
 1621 e810: 04 ff c8        jsr uartout
 1622 e813: 53              INCR R3
 1623 e814: a0 e6 4b        BR baslist_loop
 1624 e817:             
 1625 e817:             baslist27:
 1626 e817: 0d 1b           LDTI TOKENIZER_ASTR
 1627 e819: aa e8 2a        BRNEQ baslist28
 1628 e81c: 0e 2a           ldai '*'
 1629 e81e: 04 ff c8        jsr uartout
 1630 e821: 0e 20           ldai ' '
 1631 e823: 04 ff c8        jsr uartout
 1632 e826: 53              INCR R3
 1633 e827: a0 e6 4b        BR baslist_loop
 1634 e82a:             
 1635 e82a:             baslist28:
 1636 e82a: 0d 1c           LDTI TOKENIZER_SLASH
 1637 e82c: aa e8 3d        BRNEQ baslist29
 1638 e82f: 0e 2f           ldai '/'
 1639 e831: 04 ff c8        jsr uartout
 1640 e834: 0e 20           ldai ' '
 1641 e836: 04 ff c8        jsr uartout
 1642 e839: 53              INCR R3
 1643 e83a: a0 e6 4b        BR baslist_loop
 1644 e83d:             
 1645 e83d:             baslist29:
 1646 e83d: 0d 1d           LDTI TOKENIZER_MOD
 1647 e83f: aa e8 50        BRNEQ baslist30
 1648 e842: 0e 25           ldai '%'
 1649 e844: 04 ff c8        jsr uartout
 1650 e847: 0e 20           ldai ' '
 1651 e849: 04 ff c8        jsr uartout
 1652 e84c: 53              INCR R3
 1653 e84d: a0 e6 4b        BR baslist_loop
 1654 e850:             
 1655 e850:             baslist30:
 1656 e850: 0d 1e           LDTI TOKENIZER_HASH
 1657 e852: aa e8 63        BRNEQ baslist31
 1658 e855: 0e 23           ldai '#'
 1659 e857: 04 ff c8        jsr uartout
 1660 e85a: 0e 20           ldai ' '
 1661 e85c: 04 ff c8        jsr uartout
 1662 e85f: 53              INCR R3
 1663 e860: a0 e6 4b        BR baslist_loop
 1664 e863:             
 1665 e863:             baslist31:
 1666 e863: 0d 1f           LDTI TOKENIZER_LEFTP
 1667 e865: aa e8 76        BRNEQ baslist32
 1668 e868: 0e 28           ldai '()'
 1669 e86a: 04 ff c8        jsr uartout
 1670 e86d: 0e 20           ldai ' '
 1671 e86f: 04 ff c8        jsr uartout
 1672 e872: 53              INCR R3
 1673 e873: a0 e6 4b        BR baslist_loop
 1674 e876:             
 1675 e876:             baslist32:
 1676 e876: 0d 20           LDTI TOKENIZER_RIGHTP
 1677 e878: aa e8 89        BRNEQ baslist33
 1678 e87b: 0e 29           ldai ')'
 1679 e87d: 04 ff c8        jsr uartout
 1680 e880: 0e 20           ldai ' '
 1681 e882: 04 ff c8        jsr uartout
 1682 e885: 53              INCR R3
 1683 e886: a0 e6 4b        BR baslist_loop
 1684 e889:             
 1685 e889:             baslist33:
 1686 e889: 0d 21           LDTI TOKENIZER_LT
 1687 e88b: aa e8 9c        BRNEQ baslist34
 1688 e88e: 0e 3c           ldai '<'
 1689 e890: 04 ff c8        jsr uartout
 1690 e893: 0e 20           ldai ' '
 1691 e895: 04 ff c8        jsr uartout
 1692 e898: 53              INCR R3
 1693 e899: a0 e6 4b        BR baslist_loop
 1694 e89c:             
 1695 e89c:             baslist34:
 1696 e89c: 0d 22           LDTI TOKENIZER_GT
 1697 e89e: aa e8 af        BRNEQ baslist35
 1698 e8a1: 0e 3e           ldai '>'
 1699 e8a3: 04 ff c8        jsr uartout
 1700 e8a6: 0e 20           ldai ' '
 1701 e8a8: 04 ff c8        jsr uartout
 1702 e8ab: 53              INCR R3
 1703 e8ac: a0 e6 4b        BR baslist_loop
 1704 e8af:             
 1705 e8af:             baslist35:
 1706 e8af: 0d 23           LDTI TOKENIZER_EQ
 1707 e8b1: aa e8 c2        BRNEQ baslist36
 1708 e8b4: 0e 3d           ldai '='
 1709 e8b6: 04 ff c8        jsr uartout
 1710 e8b9: 0e 20           ldai ' '
 1711 e8bb: 04 ff c8        jsr uartout
 1712 e8be: 53              INCR R3
 1713 e8bf: a0 e6 4b        BR baslist_loop
 1714 e8c2:             
 1715 e8c2:             baslist36:
 1716 e8c2: 0d 24           LDTI TOKENIZER_CR
 1717 e8c4: aa e8 d1        BRNEQ baslist37
 1718 e8c7: 1f ed c3        mviw R7,CRLF
 1719 e8ca: 04 ff c0        jsr stringout
 1720 e8cd: 53              INCR R3
 1721 e8ce: a0 e6 4b        BR baslist_loop
 1722 e8d1:             
 1723 e8d1:             baslist37:
 1724 e8d1: 0d 25           LDTI TOKENIZER_LINENUM
 1725 e8d3: aa e8 ea        BRNEQ baslist38
 1726 e8d6: 53              incr r3
 1727 e8d7: 43              ldavr r3
 1728 e8d8: 37              mvarl r7
 1729 e8d9: 53              incr r3
 1730 e8da: 43              ldavr r3
 1731 e8db: 3f              mvarh r7
 1732 e8dc: 53              INCR R3
 1733 e8dd: 53              incr r3
 1734 e8de: 53              incr r3
 1735 e8df: 04 e5 7c        jsr exe_itoa
 1736 e8e2:                 ;jsr showr7
 1737 e8e2: 0e 20           ldai ' '
 1738 e8e4: 04 ff c8        jsr uartout
 1739 e8e7: a0 e6 4b        BR baslist_loop
 1740 e8ea:             
 1741 e8ea:             baslist38:
 1742 e8ea: 1f e6 3c        MVIW R7,tokl_error
 1743 e8ed: 04 ff c0        JSR stringout
 1744 e8f0: 04 ff cc        JSR showaddr
 1745 e8f3: a0 e8 f6        BR baslist_done
 1746 e8f6:             ;
 1747 e8f6:             ; any cleanup
 1748 e8f6:             ;
 1749 e8f6:             baslist_done:
 1750 e8f6: 08 30           popr r3
 1751 e8f8: 05              ret
 1752 e8f9:             
 1753 e8f9:             ;
 1754 e8f9:             ; Basic Interpreter Parser
 1755 e8f9:             ;
 1756 e8f9:             parse_keywords:
 1757 e8f9: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1758 e8fe: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1759 e905: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1760 e909: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1761 e90f: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1762 e915: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1763 e91a: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1764 e91e: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1765 e924: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1766 e92a: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1767 e931: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1768 e939: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1769 e93f: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1770 e944: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1771 e94a: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1772 e950: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1773 e955: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1774 e958:             
 1775 e958:             ;
 1776 e958:             ; int singlechar (void)
 1777 e958:             ;
 1778 e958:             ; return TOKEN result in accumulator
 1779 e958:             ;
 1780 e958:             ; ready for testing
 1781 e958:             ;
 1782 e958:             parse_singlechar:
 1783 e958:             ;
 1784 e958: 07 03           pushr r3
 1785 e95a: f3 02 02        LDR r3,bas_txtptr
 1786 e95d: 43              ldavr r3
 1787 e95e: 08 30           popr r3
 1788 e960:             ;
 1789 e960: 0d 0a           ldti 0ah
 1790 e962: aa e9 68        brneq parsechar1
 1791 e965: 0e 24           ldai TOKENIZER_CR
 1792 e967: 05              ret
 1793 e968:             parsechar1:
 1794 e968: 0d 2c           ldti ','
 1795 e96a: aa e9 70        brneq parsechar2
 1796 e96d: 0e 15           ldai TOKENIZER_COMMA
 1797 e96f: 05              ret
 1798 e970:             parsechar2:
 1799 e970: 0d 3b           ldti ';'
 1800 e972: aa e9 78        brneq parsechar3
 1801 e975: 0e 16           ldai TOKENIZER_SEMICOLON
 1802 e977: 05              ret
 1803 e978:             parsechar3:
 1804 e978: 0d 2b           ldti '+'
 1805 e97a: aa e9 80        brneq parsechar4
 1806 e97d: 0e 17           ldai TOKENIZER_PLUS
 1807 e97f: 05              ret
 1808 e980:             parsechar4:
 1809 e980: 0d 2d           ldti '-'
 1810 e982: aa e9 88        brneq parsechar5
 1811 e985: 0e 18           ldai TOKENIZER_MINUS
 1812 e987: 05              ret
 1813 e988:             parsechar5:
 1814 e988: 0d 26           ldti '&'
 1815 e98a: aa e9 90        brneq parsechar6
 1816 e98d: 0e 19           ldai TOKENIZER_AND
 1817 e98f: 05              ret
 1818 e990:             parsechar6:
 1819 e990: 0d 7c           ldti '|'
 1820 e992: aa e9 98        brneq parsechar7
 1821 e995: 0e 1a           ldai TOKENIZER_OR
 1822 e997: 05              ret
 1823 e998:             parsechar7:
 1824 e998: 0d 2a           ldti '*'
 1825 e99a: aa e9 a0        brneq parsechar8
 1826 e99d: 0e 1b           ldai TOKENIZER_ASTR
 1827 e99f: 05              ret
 1828 e9a0:             parsechar8:
 1829 e9a0: 0d 25           ldti '%'
 1830 e9a2: aa e9 a8        brneq parsechar9
 1831 e9a5: 0e 1d           ldai TOKENIZER_MOD
 1832 e9a7: 05              ret
 1833 e9a8:             parsechar9:
 1834 e9a8: 0d 28           ldti '('
 1835 e9aa: aa e9 b0        brneq parsechar10
 1836 e9ad: 0e 1f           ldai TOKENIZER_LEFTP
 1837 e9af: 05              ret
 1838 e9b0:             parsechar10:
 1839 e9b0: 0d 23           ldti '#'
 1840 e9b2: aa e9 b8        brneq parsechar11
 1841 e9b5: 0e 1e           ldai TOKENIZER_HASH
 1842 e9b7: 05              ret
 1843 e9b8:             parsechar11:
 1844 e9b8: 0d 29           ldti ')'
 1845 e9ba: aa e9 c0        brneq parsechar12
 1846 e9bd: 0e 20           ldai TOKENIZER_RIGHTP
 1847 e9bf: 05              ret
 1848 e9c0:             parsechar12:
 1849 e9c0: 0d 3c           ldti '<'
 1850 e9c2: aa e9 c8        brneq parsechar13
 1851 e9c5: 0e 21           ldai TOKENIZER_LT
 1852 e9c7: 05              ret
 1853 e9c8:             parsechar13:
 1854 e9c8: 0d 3e           ldti '>'
 1855 e9ca: aa e9 d0        brneq parsechar14
 1856 e9cd: 0e 22           ldai TOKENIZER_GT
 1857 e9cf: 05              ret
 1858 e9d0:             parsechar14:
 1859 e9d0: 0d 3d           ldti '='
 1860 e9d2: aa e9 d8        brneq parsechar15
 1861 e9d5: 0e 23           ldai TOKENIZER_EQ
 1862 e9d7: 05              ret
 1863 e9d8:             parsechar15:
 1864 e9d8: 0e 00           ldai 0
 1865 e9da: 05              ret
 1866 e9db:             
 1867 e9db:             ;
 1868 e9db:             ; int get_next_token(void)
 1869 e9db:             ;
 1870 e9db:             ; under development fix ptr nextptr
 1871 e9db:             
 1872 e9db:             parse_get_next_tok:
 1873 e9db: 07 03           pushr r3
 1874 e9dd: f3 02 02        LDR R3,bas_txtptr
 1875 e9e0:             ;
 1876 e9e0:             ; is digit
 1877 e9e0:             ;
 1878 e9e0:             ; chcek for number
 1879 e9e0:             ;
 1880 e9e0:             parse_gnt1:
 1881 e9e0: 43              ldavr r3
 1882 e9e1: 04 ed 92        jsr parse_isdigit
 1883 e9e4: a1 e9 f7        brz parse_gnt2
 1884 e9e7:             parse_gnt1loop:
 1885 e9e7: 53              incr R3
 1886 e9e8: 43              ldavr r3
 1887 e9e9: 04 ed 92        jsr parse_isdigit
 1888 e9ec: a2 e9 e7        brnz parse_gnt1loop
 1889 e9ef: fb 02 04        STR r3,bas_nxtptr
 1890 e9f2: 0e 02           ldai TOKENIZER_NUMBER
 1891 e9f4: 08 30           popr r3
 1892 e9f6: 05              ret
 1893 e9f7:             ;
 1894 e9f7:             ; singlechar
 1895 e9f7:             ;
 1896 e9f7:             parse_gnt2:
 1897 e9f7: 43             ldavr r3
 1898 e9f8: 04 e9 58       jsr parse_singlechar
 1899 e9fb: a1 ea 05       BRZ parse_gnt3
 1900 e9fe: 53             incr r3
 1901 e9ff: fb 02 04       STR r3,bas_nxtptr
 1902 ea02: 08 30          popr r3
 1903 ea04: 05             ret
 1904 ea05:             ;
 1905 ea05:             ; quote
 1906 ea05:             ;
 1907 ea05:             parse_gnt3:
 1908 ea05: 43              ldavr R3
 1909 ea06: 0d 22           ldti '"'
 1910 ea08: aa ea 1b        brneq parse_gnt4
 1911 ea0b:             parse_gnt3loop:
 1912 ea0b: 53              incr r3
 1913 ea0c: 43              ldavr R3
 1914 ea0d: 0d 22           ldti '"'
 1915 ea0f: aa ea 0b        brneq parse_gnt3loop
 1916 ea12: 53              incr r3
 1917 ea13: fb 02 04        STR r3,bas_nxtptr
 1918 ea16: 0e 03           ldai TOKENIZER_STRING
 1919 ea18: 08 30           popr r3
 1920 ea1a: 05              ret
 1921 ea1b:             ;
 1922 ea1b:             parse_gnt4:
 1923 ea1b:             ;
 1924 ea1b:             ; keyword search
 1925 ea1b:             ;
 1926 ea1b: 07 04           pushr r4
 1927 ea1d: 1c e8 f9        mviw r4,parse_keywords
 1928 ea20:             top:
 1929 ea20: 44              ldavr r4
 1930 ea21: f3 02 02        LDR r3,bas_txtptr
 1931 ea24: a1 ea 48        brz nokeyowrdsfound
 1932 ea27:             pcmploop:
 1933 ea27: 44              ldavr r4
 1934 ea28: a1 ea 3e        brz found
 1935 ea2b: 0b              MVAT
 1936 ea2c: 43              ldavr r3
 1937 ea2d: aa ea 35        brneq skiptoend
 1938 ea30: 54              incr r4
 1939 ea31: 53              incr r3
 1940 ea32: a0 ea 27        br pcmploop
 1941 ea35:             
 1942 ea35:             skiptoend:
 1943 ea35:             ;  skip to end of string and skip over token
 1944 ea35:             skiploop:
 1945 ea35: 44              ldavr r4
 1946 ea36: 54              incr r4
 1947 ea37: a2 ea 35        brnz skiploop
 1948 ea3a: 54              incr r4
 1949 ea3b: a0 ea 20        br top
 1950 ea3e:             
 1951 ea3e:             found:
 1952 ea3e: fb 02 04        str r3,bas_nxtptr
 1953 ea41: 54              incr r4
 1954 ea42: 44              ldavr r4
 1955 ea43: 08 40           popr r4
 1956 ea45: 08 30           popr r3
 1957 ea47: 05              ret
 1958 ea48:             
 1959 ea48:             nokeyowrdsfound:
 1960 ea48: 08 40           popr r4
 1961 ea4a:             ;
 1962 ea4a:             ;  check for variables
 1963 ea4a:             ;
 1964 ea4a: 43              ldavr r3
 1965 ea4b: 0d 41           ldti 'A'
 1966 ea4d: a7 ea 5e        BRLT parse_gnt_error
 1967 ea50: 0d 5a           ldti 'Z'
 1968 ea52: a9 ea 5e        BRGT parse_gnt_error
 1969 ea55: 53              INCR r3
 1970 ea56: fb 02 04        str r3,bas_nxtptr
 1971 ea59: 0e 04           LDAI tokenizer_variable
 1972 ea5b: 08 30           popr r3
 1973 ea5d: 05              RET
 1974 ea5e:             
 1975 ea5e:             parse_gnt_error:
 1976 ea5e: 03              halt
 1977 ea5f: 0e 00           ldai tokenizer_error
 1978 ea61: 08 30           popr r3
 1979 ea63: 05              ret
 1980 ea64:             
 1981 ea64:             ;
 1982 ea64:             ; void TOKENIZER_GOTO (char * program)
 1983 ea64:             ;
 1984 ea64:             ; under development, may not be needed
 1985 ea64:             ;
 1986 ea64:             ;parse_goto:
 1987 ea64:             ;    str r3,bas_txtptr
 1988 ea64:             ;    jsr parse_get_next_tok
 1989 ea64:             ;    sta bas_currenttoken
 1990 ea64:             ;    ret
 1991 ea64:             
 1992 ea64:             ;
 1993 ea64:             ; void tokenizer_init(int ptr)
 1994 ea64:             ;
 1995 ea64:             ; under development
 1996 ea64:             ;
 1997 ea64:             parse_init:
 1998 ea64:             
 1999 ea64: 07 03           pushr r3
 2000 ea66: ff 02 02        STR R7,bas_txtptr
 2001 ea69: 1b 04 00        MVIW r3,parse_token_buffer
 2002 ea6c: fb 02 06        STR  R3,bas_tokptr
 2003 ea6f: 1b 00 00        mviw r3,0
 2004 ea72: fb 02 08        str r3,bas_tokcounter
 2005 ea75: 04 e9 db        jsr parse_get_next_tok
 2006 ea78: ed 02 0a        sta bas_currenttoken
 2007 ea7b: 08 30           popr r3
 2008 ea7d: 05              ret
 2009 ea7e:             
 2010 ea7e:             ;
 2011 ea7e:             ; int tokenizer_token(void)
 2012 ea7e:             :
 2013 ea7e:             parse_token:
 2014 ea7e: ec 02 0a        lda bas_currenttoken
 2015 ea81: 05              ret
 2016 ea82:             
 2017 ea82:             ;
 2018 ea82:             ; void tokenizer_next(void) parser version
 2019 ea82:             ;
 2020 ea82:             parse_next:
 2021 ea82: 04 eb 67        jsr parse_finished
 2022 ea85: a1 ea 89        brz parse_next1
 2023 ea88: 05              ret
 2024 ea89:             
 2025 ea89:             parse_next1:
 2026 ea89: 07 03           pushr r3
 2027 ea8b: f3 02 04        ldr r3,bas_nxtptr
 2028 ea8e: fb 02 02        str r3,bas_txtptr
 2029 ea91:             
 2030 ea91:             parse_next1loop:
 2031 ea91: 43              ldavr r3
 2032 ea92: 0d 20           ldti ' '
 2033 ea94: aa ea 9b        brneq parse_next2
 2034 ea97: 53              incr r3
 2035 ea98: a0 ea 91        br parse_next1loop
 2036 ea9b:             
 2037 ea9b:             
 2038 ea9b:             parse_next2:
 2039 ea9b: fb 02 02        str r3,bas_txtptr
 2040 ea9e: 04 e9 db        jsr parse_get_next_tok
 2041 eaa1: ed 02 0a        sta bas_currenttoken
 2042 eaa4:             
 2043 eaa4: 0d 11           ldti TOKENIZER_REM
 2044 eaa6: a8 ea ac        breq parse_next3
 2045 eaa9: 08 30           popr r3
 2046 eaab: 05              ret
 2047 eaac:             
 2048 eaac:             ;
 2049 eaac:             ; this needs to be fixed
 2050 eaac:             ; if rem return to parsel line then copy into token buffer
 2051 eaac:             ;
 2052 eaac:             parse_next3:
 2053 eaac: 04 eb 67        JSR parse_finished
 2054 eaaf: a2 ea bc        BRNZ parse_nextdone
 2055 eab2: 43              ldavr r3
 2056 eab3: 0d 0a           ldti  0ah
 2057 eab5: a8 ea bc        breq parse_nextdone
 2058 eab8: 53              incr r3
 2059 eab9: a0 ea ac        br parse_next3
 2060 eabc:             
 2061 eabc:             parse_nextdone:
 2062 eabc: 43              ldavr r3
 2063 eabd: 0d 0a           ldti  0ah
 2064 eabf: aa ea c3        brneq parse_nextdone2
 2065 eac2: 53              incr r3
 2066 eac3:             
 2067 eac3:             parse_nextdone2:
 2068 eac3: fb 02 04        str r3,bas_nxtptr
 2069 eac6: 04 ea 82        jsr parse_next
 2070 eac9: 08 30           popr r3
 2071 eacb: 05              ret
 2072 eacc:             
 2073 eacc:             ;
 2074 eacc:             ; VARIABLE_TYPE tokenizer_num(void)
 2075 eacc:             ;
 2076 eacc:             ; Hack for now input characters are ascii hex format HHHH
 2077 eacc:             ;
 2078 eacc:             ; value returned in R7
 2079 eacc:             ;
 2080 eacc:             ; Should this advance the line ptr?
 2081 eacc:             ;
 2082 eacc:             
 2083 eacc:             parse_num:
 2084 eacc: 07 03           pushr r3
 2085 eace: 07 04           pushr r4
 2086 ead0: 07 05           pushr r5
 2087 ead2: 07 06           pushr r6
 2088 ead4: 1e 00 00        mviw r6,0           ;accumlate val in r6
 2089 ead7: f3 02 02        LDR r3,bas_txtptr
 2090 eada: 04 eb 08        jsr parse_num_char
 2091 eadd:             ;   jsr SHOWBYTEA
 2092 eadd: 36              mvarl r6
 2093 eade:             parse_num_loop:
 2094 eade: 04 eb 08        jsr parse_num_char
 2095 eae1:             ;   jsr showbytea
 2096 eae1: 09              push
 2097 eae2: 0d ff           ldti 0FFH
 2098 eae4: a8 ea fc        breq parse_num_done
 2099 eae7:             
 2100 eae7: 0f 56           movrr r6,r5
 2101 eae9: 1c 00 0a        mviw r4,0ah
 2102 eaec: 04 ed 0c        jsr parse_mul16
 2103 eaef:             ;    jsr showr7
 2104 eaef: 0a              pop
 2105 eaf0: 1e 00 00        mviw r6,0
 2106 eaf3: 36              mvarl r6
 2107 eaf4: 04 ed 47        jsr parse_add16
 2108 eaf7: 0f 67           movrr r7,r6
 2109 eaf9:             ;    jsr showr7
 2110 eaf9: a0 ea de        br parse_num_loop
 2111 eafc:             parse_num_done:
 2112 eafc: 0a              pop
 2113 eafd: 0f 76           movrr r6,r7
 2114 eaff: 08 60           popr r6
 2115 eb01: 08 50           popr r5
 2116 eb03: 08 40           popr r4
 2117 eb05: 08 30           popr r3
 2118 eb07:             ;    jsr showr7
 2119 eb07: 05              ret
 2120 eb08:             
 2121 eb08:             parse_num_char:
 2122 eb08: 43              LDAVR R3
 2123 eb09: 04 ed 92        JSR parse_isdigit
 2124 eb0c: a2 eb 12        BRNZ parse_num_char1
 2125 eb0f: 0e ff           ldai 0ffh
 2126 eb11: 05              ret
 2127 eb12:             parse_num_char1:
 2128 eb12: 43              ldavr r3
 2129 eb13: b1 30           SUBI '0'
 2130 eb15: 53              incr r3
 2131 eb16: 05              RET
 2132 eb17:             
 2133 eb17:             parse_num_old:
 2134 eb17: 07 03           pushr r3
 2135 eb19: f3 02 02        LDR r3,bas_txtptr
 2136 eb1c: 04 eb 45        JSR parse_getnibble
 2137 eb1f: b6              SHL
 2138 eb20: b6              SHL
 2139 eb21: b6              SHL
 2140 eb22: b6              SHL
 2141 eb23: b3 f0           ANDI 0f0h
 2142 eb25: 09              Push
 2143 eb26: 04 eb 45        JSR parse_getnibble
 2144 eb29: b3 0f           ANDI 0FH
 2145 eb2b: 0b              MVAT
 2146 eb2c: 0a              Pop
 2147 eb2d: ba              ORT
 2148 eb2e: 3f              MVARH R7
 2149 eb2f:             
 2150 eb2f: 04 eb 45        JSR parse_getnibble
 2151 eb32: b6              SHL
 2152 eb33: b6              shl
 2153 eb34: b6              shl
 2154 eb35: b6              shl
 2155 eb36: b3 f0           ANDI 0f0h
 2156 eb38: 09              push
 2157 eb39: 04 eb 45        JSR parse_getnibble
 2158 eb3c: b3 0f           ANDI 0FH
 2159 eb3e: 0b              MVAT
 2160 eb3f: 0a              pop
 2161 eb40: ba              ORT
 2162 eb41: 37              MVARL R7
 2163 eb42: 08 30           popr r3
 2164 eb44: 05              RET
 2165 eb45:             
 2166 eb45:             ;
 2167 eb45:             ; add error checking
 2168 eb45:             ;
 2169 eb45:             ; return hex nibble in accumulator
 2170 eb45:             ;
 2171 eb45:             parse_getnibble:
 2172 eb45: 43                LDAVR R3
 2173 eb46: 53                incr r3
 2174 eb47: 0d 39             LDTI '9'
 2175 eb49: a9 eb 4f          BRGT parse_af
 2176 eb4c: b1 30             SUBI '0'
 2177 eb4e: 05                RET
 2178 eb4f:             parse_af:
 2179 eb4f: 04 ff d0          JSR toupper
 2180 eb52: b1 41             SUBI 'A'
 2181 eb54: b0 0a             ADDI 10
 2182 eb56: 05                RET
 2183 eb57:             ;
 2184 eb57:             ; void tokenizer_string(char *dest, int len)
 2185 eb57:             ;
 2186 eb57:             ; not used, in line parse_line
 2187 eb57:             ;
 2188 eb57:             parse_string:
 2189 eb57: 04 ea 7e        JSR parse_token
 2190 eb5a: 0d 03           LDTI TOKENIZER_STRING
 2191 eb5c: a8 eb 60        BREQ parse_string1
 2192 eb5f: 05              ret
 2193 eb60:             
 2194 eb60:             parse_string1:
 2195 eb60: 07 03           pushr r3
 2196 eb62: f3 02 02        LDR r3,bas_txtptr
 2197 eb65: 43              LDAVR R3
 2198 eb66:             
 2199 eb66:             
 2200 eb66:             ;
 2201 eb66:             ; void tokenizer_error_print(void)
 2202 eb66:             ;
 2203 eb66:             ; fix
 2204 eb66:             ;
 2205 eb66:             parse_error_print:
 2206 eb66: 03              halt
 2207 eb67:             
 2208 eb67:             ;
 2209 eb67:             ; int tokenizer_finished(void)
 2210 eb67:             ;
 2211 eb67:             parse_finished:
 2212 eb67: 07 03           pushr r3
 2213 eb69: f3 02 02        LDR r3,bas_txtptr
 2214 eb6c: 43              ldavr r3
 2215 eb6d: a1 eb 82        brz parse_finished_yes
 2216 eb70:             ;    ldti 0ah
 2217 eb70:             ;    breq parse_finished_yes
 2218 eb70:             ;    ldti 0dh
 2219 eb70:             ;    breq parse_finished_yes
 2220 eb70: 0d 01           ldti TOKENIZER_EOF
 2221 eb72: a8 eb 82        breq parse_finished_yes
 2222 eb75: ec 02 0a        lda bas_currenttoken
 2223 eb78: 0d 01           ldti TOKENIZER_EOF
 2224 eb7a: a8 eb 82        breq parse_finished_yes
 2225 eb7d: 08 30           popr r3
 2226 eb7f: 0e 00           ldai 0
 2227 eb81: 05              ret
 2228 eb82:             parse_finished_yes:
 2229 eb82: 0e 01           ldai 1
 2230 eb84: 08 30           popr r3
 2231 eb86: 05              ret
 2232 eb87:             
 2233 eb87:             ;
 2234 eb87:             ; int tokenizer_variable_num(void)
 2235 eb87:             ;
 2236 eb87:             parse_variable_num:
 2237 eb87: 07 03             pushr r3
 2238 eb89: f3 02 02          LDR r3,bas_txtptr
 2239 eb8c: 43                ldavr r3
 2240 eb8d: b1 41             subi 'A'
 2241 eb8f: 37                mvarl r7
 2242 eb90: 0e 00             ldai 0
 2243 eb92: 3f                mvarh r7
 2244 eb93: 08 30             popr r3
 2245 eb95: 05                ret
 2246 eb96:             
 2247 eb96:             ;
 2248 eb96:             ; char *const tokenizer_pos(void)
 2249 eb96:             ;
 2250 eb96:             ; probably not used
 2251 eb96:             parse_pos:
 2252 eb96:             
 2253 eb96:             ;not used old
 2254 eb96:             ; char *tokenize(char *program)
 2255 eb96:             ;
 2256 eb96:             ; parse:
 2257 eb96:             
 2258 eb96:             ;
 2259 eb96:             ; char *tokenizeLine(char *line)
 2260 eb96:             ;
 2261 eb96:             ; assume input text string in parse_input_line
 2262 eb96:             ;
 2263 eb96:             
 2264 eb96:             parse_line:
 2265 eb96: 04 ea 64        JSR PARSE_INIT
 2266 eb99: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2267 eb9c: fb 02 08        str r3,bas_tokcounter
 2268 eb9f: 1b 04 00        MVIW R3,parse_token_buffer
 2269 eba2:             
 2270 eba2: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2271 eba4: 4b              STAVR R3
 2272 eba5: 53              INCR R3
 2273 eba6:             
 2274 eba6: 04 ea cc        JSR parse_num           ;store line number
 2275 eba9: ff 02 10        str r7,bas_newlinenum
 2276 ebac: 27              mvrla r7
 2277 ebad: 4b              stavr r3
 2278 ebae: 53              incr r3
 2279 ebaf: 2f              mvrha r7
 2280 ebb0: 4b              stavr r3
 2281 ebb1: 53              incr r3
 2282 ebb2:             
 2283 ebb2: 53              incr r3                ; skip over line length - fill in later
 2284 ebb3: 53              incr r3
 2285 ebb4:             
 2286 ebb4:             parse_line_loop:
 2287 ebb4: 04 ea 82        JSR parse_next
 2288 ebb7: 04 ea 7e        JSR parse_token
 2289 ebba: 0d 24           ldti TOKENIZER_CR
 2290 ebbc: a8 ec 2b        BREQ parse_line_done
 2291 ebbf:             
 2292 ebbf: 4b              STAVR R3
 2293 ebc0: 53              INCR R3
 2294 ebc1: f5 02 08        ldr r5,bas_tokcounter
 2295 ebc4: 55              incr r5
 2296 ebc5: fd 02 08        str r5,bas_tokcounter
 2297 ebc8:             
 2298 ebc8: 0d 02           ldti TOKENIZER_NUMBER
 2299 ebca: aa eb e1        BRNEQ parse_line1
 2300 ebcd: 04 ea cc        JSR parse_num
 2301 ebd0: 27              mvrla r7
 2302 ebd1: 4b              stavr r3
 2303 ebd2: 53              incr r3
 2304 ebd3: 2f              mvrha r7
 2305 ebd4: 4b              stavr r3
 2306 ebd5: 53              incr r3
 2307 ebd6: f5 02 08        ldr r5,bas_tokcounter
 2308 ebd9: 55              incr r5
 2309 ebda: 55              incr r5
 2310 ebdb: fd 02 08        str r5,bas_tokcounter
 2311 ebde: a0 eb b4        BR parse_line_loop
 2312 ebe1:             
 2313 ebe1:             parse_line1:
 2314 ebe1: 0d 03           ldti TOKENIZER_STRING
 2315 ebe3: aa ec 12        BRNEQ parse_line2
 2316 ebe6: f4 02 02        ldr r4,bas_txtptr
 2317 ebe9: 54              incr r4                   ;skip over opening "
 2318 ebea:             
 2319 ebea:             parse_line1loop:
 2320 ebea: 44              ldavr r4
 2321 ebeb: 0d 22           ldti '"'
 2322 ebed: a8 eb fd        breq parse_line1done
 2323 ebf0: 4b              stavr r3
 2324 ebf1: 53              incr r3
 2325 ebf2: 54              incr r4
 2326 ebf3: f5 02 08        ldr r5,bas_tokcounter
 2327 ebf6: 55              incr r5
 2328 ebf7: fd 02 08        str r5,bas_tokcounter
 2329 ebfa: a0 eb ea        BR parse_line1loop
 2330 ebfd:             parse_line1done:
 2331 ebfd: 54              incr r4                   ;skip over closing "
 2332 ebfe: 0e 00           ldai 0                    ;add null into token buffer
 2333 ec00: 4b              stavr R3
 2334 ec01: 53              incr r3
 2335 ec02: f5 02 08        ldr r5,bas_tokcounter
 2336 ec05: 55              incr r5
 2337 ec06: fd 02 08        str r5,bas_tokcounter
 2338 ec09: fb 02 06        str r3,BAS_TOKPTR
 2339 ec0c: fc 02 02        str r4,bas_txtptr
 2340 ec0f: a0 eb b4        BR parse_line_loop
 2341 ec12:             
 2342 ec12:             parse_line2:
 2343 ec12: 0d 04           ldti TOKENIZER_VARIABLE
 2344 ec14: aa eb b4        BRNEQ parse_line_loop
 2345 ec17: 04 eb 87        JSR parse_variable_num
 2346 ec1a: 27              mvrla r7
 2347 ec1b: 4b              stavr r3
 2348 ec1c: 53              incr r3
 2349 ec1d: 2f              mvrha r7
 2350 ec1e: 4b              stavr r3
 2351 ec1f: 53              incr r3
 2352 ec20: f5 02 08        ldr r5,bas_tokcounter
 2353 ec23: 55              incr r5
 2354 ec24: 55              incr r5
 2355 ec25: fd 02 08        str r5,bas_tokcounter
 2356 ec28: a0 eb b4        BR parse_line_loop
 2357 ec2b:             
 2358 ec2b:             parse_line_done:
 2359 ec2b: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2360 ec2d: 4b              STAVR R3
 2361 ec2e: 53              INCR R3
 2362 ec2f:             ;    ldr r5,bas_tokcounter
 2363 ec2f:             ;    incr r5
 2364 ec2f:             ;    str r5,bas_tokcounter
 2365 ec2f:             
 2366 ec2f: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2367 ec32: 53              incr r3
 2368 ec33: 53              incr r3
 2369 ec34: 53              incr r3
 2370 ec35: f7 02 08        ldr r7,bas_tokcounter
 2371 ec38: ff 02 12        str r7,bas_newlinelen
 2372 ec3b: 27              mvrla r7
 2373 ec3c: 4b              stavr r3
 2374 ec3d: 53              incr r3
 2375 ec3e: 2f              mvrha r7
 2376 ec3f: 4b              stavr r3
 2377 ec40:             
 2378 ec40:             ;
 2379 ec40:             ; void addLine(char *buff)
 2380 ec40:             ; since addline is only called from parse_tokenizeline where are these
 2381 ec40:             ; values are know, pass them in or
 2382 ec40:             ; maybe merge addLine to bottom of parse_tokenizeline
 2383 ec40:             ;
 2384 ec40:             ; r7 points to line to insert
 2385 ec40:             ; r6 linenumber
 2386 ec40:             ; r5 linelength
 2387 ec40:             ;
 2388 ec40:             parse_addline:
 2389 ec40: f7 02 10          ldr r7,BAS_NEWLINENUM
 2390 ec43: 04 ec a8          JSR parse_removeline      ; if line number already exists delete it
 2391 ec46: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2392 ec49: 27                mvrla r7
 2393 ec4a: 0d 06             ldti 6
 2394 ec4c: aa ec 50          brneq parse_addline1
 2395 ec4f: 05                ret
 2396 ec50:             
 2397 ec50:             parse_addline1:                 ;find insert location
 2398 ec50: f7 02 10          ldr r7,BAS_NEWLINENUM
 2399 ec53: f3 02 0c          ldr r3,bas_tokenBuffer
 2400 ec56:             
 2401 ec56:             parse_addlineloop:
 2402 ec56: fb 02 14          str r3,bas_insertptr
 2403 ec59: 43                ldavr r3
 2404 ec5a: 0d 01             ldti TOKENIZER_EOF
 2405 ec5c: a8 ec 7f          BREQ parse_addroom
 2406 ec5f: 53                incr r3                   ;get line number of line in token buffer into r6
 2407 ec60: 43                ldavr r3
 2408 ec61: 36                mvarl r6
 2409 ec62: 53                incr r3
 2410 ec63: 43                ldavr r3
 2411 ec64: 3e                mvarh r6
 2412 ec65: 04 ed a2          jsr parse_compare
 2413 ec68: 0d ff             ldti 0ffh
 2414 ec6a: a8 ec 7f          breq parse_addroom
 2415 ec6d:             
 2416 ec6d: 53                incr r3                   ;get line length
 2417 ec6e: 43                ldavr r3
 2418 ec6f: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2419 ec72: 36                mvarl r6
 2420 ec73: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2421 ec74: 5e                decr r6
 2422 ec75: 5e                decr r6
 2423 ec76:             
 2424 ec76:             addline_moveptr:              ; advance pointer to next line
 2425 ec76: 53                incr r3
 2426 ec77: 5e                decr r6
 2427 ec78: 26                mvrla r6
 2428 ec79: a2 ec 76          brnz addline_moveptr
 2429 ec7c: a0 ec 56          br parse_addlineloop
 2430 ec7f:             
 2431 ec7f:             
 2432 ec7f:             parse_addroom:               ; make room
 2433 ec7f: 1f 20 00          mviw r7,BAS_TOK_BUF_END
 2434 ec82:             ;      decr r7
 2435 ec82: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2436 ec85: 04 ed 55          jsr parse_sub16
 2437 ec88: 1d 20 00          mviw r5,BAS_TOK_BUF_END
 2438 ec8b:             ;      decr r5
 2439 ec8b:             
 2440 ec8b:             parse_roomloop:
 2441 ec8b: 5f                decr r7
 2442 ec8c: 5d                decr r5
 2443 ec8d: 47                ldavr r7
 2444 ec8e: 4d                stavr r5
 2445 ec8f:             
 2446 ec8f: f6 02 14          ldr r6,bas_insertptr
 2447 ec92: 04 ed a2          jsr PARSE_COMPARE
 2448 ec95: a2 ec 8b          brnz parse_roomloop
 2449 ec98:             
 2450 ec98: f7 02 14          ldr r7,bas_insertptr
 2451 ec9b: 1e 04 00          MVIW R6,parse_token_buffer
 2452 ec9e:             
 2453 ec9e:             parse_insertloop:
 2454 ec9e: 46                ldavr r6
 2455 ec9f: 4f                stavr r7
 2456 eca0: 56                incr r6
 2457 eca1: 57                incr r7
 2458 eca2: 0d 24             ldti 024h ; sub in actual eol token here
 2459 eca4: aa ec 9e          brneq parse_insertloop
 2460 eca7:             
 2461 eca7: 05                ret
 2462 eca8:             
 2463 eca8:             ;
 2464 eca8:             ; void removeLine(int lineNum)
 2465 eca8:             ;
 2466 eca8:             parse_removeline:
 2467 eca8: 04 ec d0        JSR basu_find
 2468 ecab: 2f              mvrha R7
 2469 ecac: a2 ec b4        brnz parse_removeline1
 2470 ecaf: 27              mvrla R7
 2471 ecb0: a2 ec b4        brnz parse_removeline1
 2472 ecb3: 05              ret
 2473 ecb4:             parse_removeline1:
 2474 ecb4: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2475 ecb6: 57              incr r7
 2476 ecb7: 57              incr r7
 2477 ecb8: 57              incr r7
 2478 ecb9: 47              ldavr r7
 2479 ecba: 36              mvarl r6        ; R6 = remove length
 2480 ecbb: 57              incr r7
 2481 ecbc: 47              ldavr r7
 2482 ecbd: 3e              mvarh r6
 2483 ecbe:             
 2484 ecbe: 5f              decr r7         ;backup to start of line
 2485 ecbf: 5f              decr r7
 2486 ecc0: 5f              decr r7
 2487 ecc1: 5f              decr r7
 2488 ecc2: 04 ed 47        JSR parse_add16
 2489 ecc5:             parse_removeloop:
 2490 ecc5: 47              ldavr r7
 2491 ecc6: 4d              stavr r5
 2492 ecc7: 55              incr r5
 2493 ecc8: 57              incr r7
 2494 ecc9: 2f              MVRHA r7
 2495 ecca:             
 2496 ecca: ee 02 0e        ldt  bas_bufferendhi
 2497 eccd:             
 2498 eccd: aa ec c5        brneq parse_removeloop
 2499 ecd0:             ;
 2500 ecd0:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2501 ecd0:             ; since we are moving complete contents of buffer
 2502 ecd0:             ; Make sure it is set during addline
 2503 ecd0:             ;
 2504 ecd0:             
 2505 ecd0:             
 2506 ecd0:             ; run & parse utilites
 2507 ecd0:             ;
 2508 ecd0:             
 2509 ecd0:             ;
 2510 ecd0:             ; find in the token buffer linenum in r7
 2511 ecd0:             ;
 2512 ecd0:             basu_find:
 2513 ecd0: 07 05           pushr r5                  ; save r5
 2514 ecd2: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2515 ecd5:             
 2516 ecd5:             basu_find_loop:
 2517 ecd5: 45              ldavr r5                  ;get token
 2518 ecd6: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2519 ecd8: aa ec e2        brneq basu_find_loop1     ;no continue
 2520 ecdb: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2521 ecde: 27              mvrla r7
 2522 ecdf: 08 50           popr r5
 2523 ece1: 05              ret
 2524 ece2:             
 2525 ece2:             basu_find_loop1:
 2526 ece2: 55              incr r5                   ;skip past linenum token
 2527 ece3: 27              mvrla r7                  ;test low byte of linenum
 2528 ece4: 0b              MVAT
 2529 ece5: 45              ldavr r5
 2530 ece6: aa ec f9        brneq basu_find1          ;not eqaul
 2531 ece9: 55              incr r5
 2532 ecea: 2f              mvrha r7                  ;test high byte of linenum
 2533 eceb: 0b              MVAT
 2534 ecec: 45              ldavr r5
 2535 eced: aa ec fa        brneq basu_find2          ;not equal
 2536 ecf0: 5d              decr r5                   ;if equal backup to linenum token
 2537 ecf1: 5d              decr r5
 2538 ecf2: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2539 ecf4: 0e 01           ldai 1                    ;return 1 in accumulator
 2540 ecf6: 08 50           popr r5
 2541 ecf8: 05              ret
 2542 ecf9:             
 2543 ecf9:             basu_find1:
 2544 ecf9: 55              incr r5                   ;skip over linenum high byte
 2545 ecfa:             basu_find2:
 2546 ecfa: 55              incr r5                   ;get line length
 2547 ecfb: 45              ldavr r5
 2548 ecfc: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2549 ecff: 36              mvarl r6
 2550 ed00: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2551 ed01: 5e              decr r6
 2552 ed02: 5e              decr r6
 2553 ed03:             basu_find_moveptr:            ; advance pointer to next line
 2554 ed03: 55              incr r5
 2555 ed04: 5e              decr r6
 2556 ed05: 26              mvrla r6
 2557 ed06: a2 ed 03        brnz basu_find_moveptr
 2558 ed09: a0 ec d5        br basu_find_loop
 2559 ed0c:             
 2560 ed0c:             
 2561 ed0c:             ;
 2562 ed0c:             ; Multiple numbers in R4 and R5
 2563 ed0c:             ;
 2564 ed0c:             ; Return in R7
 2565 ed0c:             ;
 2566 ed0c:             ; R6 = Bit counter
 2567 ed0c:             ;
 2568 ed0c:             parse_mul16:
 2569 ed0c: 07 06               pushr r6
 2570 ed0e:             
 2571 ed0e: 1f 00 00            MVIW R7,0
 2572 ed11: 1e 00 10            MVIW R6,10h
 2573 ed14:             ;        jsr showregs
 2574 ed14:             
 2575 ed14:             parse_mulloop:
 2576 ed14:             ;        jsr showregs
 2577 ed14:             
 2578 ed14: 25                  mvrla r5
 2579 ed15: b3 01               andi  01h
 2580 ed17: a1 ed 1d            brz parse_mulskip
 2581 ed1a: 04 ed 39            jsr parse_muladd16
 2582 ed1d:             
 2583 ed1d:             parse_mulskip:
 2584 ed1d:             ;
 2585 ed1d:             ; clear carry flag HACK
 2586 ed1d:             ;
 2587 ed1d: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2588 ed1f: e0                  cshl
 2589 ed20: b0 00               addi 0      ; may not be needed
 2590 ed22:             ;
 2591 ed22: 24                  mvrla r4
 2592 ed23:             ;        jsr showcarry
 2593 ed23: e0                  cshl
 2594 ed24:             ;        jsr showcarry
 2595 ed24: 34                  mvarl r4
 2596 ed25: 2c                  mvrha r4
 2597 ed26:             ;        jsr showcarry
 2598 ed26: e0                  cshl
 2599 ed27:             ;        jsr showcarry
 2600 ed27: 3c                  mvarh r4
 2601 ed28:             
 2602 ed28: 0e 00               ldai 0      ;clear carry
 2603 ed2a: e0                  cshl
 2604 ed2b:             ;        addi 0
 2605 ed2b:             
 2606 ed2b: 2d                  mvrha r5
 2607 ed2c: e1                  cshr
 2608 ed2d: 3d                  mvarh r5
 2609 ed2e: 25                  mvrla r5
 2610 ed2f: e1                  cshr
 2611 ed30: 35                  mvarl r5
 2612 ed31:             
 2613 ed31: 5e                  decr r6
 2614 ed32: 26                  mvrla r6
 2615 ed33: a2 ed 14            brnz parse_mulloop
 2616 ed36: 08 60               popr r6
 2617 ed38: 05                  ret
 2618 ed39:             
 2619 ed39:             parse_muladd16:
 2620 ed39: 0e 00               ldai 0      ;clear carry
 2621 ed3b: e0                  cshl
 2622 ed3c:             
 2623 ed3c: 27                  MVRLA R7
 2624 ed3d: 0b                  MVAT
 2625 ed3e: 24                  mvrla r4
 2626 ed3f: b8                  ADDT
 2627 ed40: 37                  mvarl r7
 2628 ed41:             
 2629 ed41: 2f                  mvrha r7
 2630 ed42: 0b                  MVAT
 2631 ed43: 2c                  mvrha r4
 2632 ed44: e3                  addtc
 2633 ed45: 3f                  mvarh r7
 2634 ed46: 05                  ret
 2635 ed47:             
 2636 ed47:             ;
 2637 ed47:             ; 16 bit ADD r6 and r7, return result in r7
 2638 ed47:             ;
 2639 ed47:             parse_add16:
 2640 ed47:             
 2641 ed47: 0e 00             ldai 0      ;clear carry
 2642 ed49: e0                cshl
 2643 ed4a: 26                MVRLA R6
 2644 ed4b: 0b                MVAT
 2645 ed4c: 27                mvrla r7
 2646 ed4d: b8                ADDT
 2647 ed4e: 37                mvarl r7
 2648 ed4f: 2e                mvrha r6
 2649 ed50: 0b                MVAT
 2650 ed51: 2f                mvrha r7
 2651 ed52: e3                addtc
 2652 ed53: 3f                mvarh r7
 2653 ed54: 05                ret
 2654 ed55:             
 2655 ed55:             ;
 2656 ed55:             ; 16 bit SUB of r6 from r7, return result in r7
 2657 ed55:             ;
 2658 ed55:             parse_sub16:
 2659 ed55: 2e                mvrha r6
 2660 ed56: b5                inva
 2661 ed57: 3e                mvarh r6
 2662 ed58: 26                mvrla r6
 2663 ed59: b5                inva
 2664 ed5a: 36                mvarl r6
 2665 ed5b: 56                incr r6
 2666 ed5c: a0 ed 47          br parse_add16
 2667 ed5f:             
 2668 ed5f:             ;
 2669 ed5f:             ; 16 bit AND r6 and r7, return result in r7
 2670 ed5f:             ;
 2671 ed5f:             parse_and16:
 2672 ed5f: 26                MVRLA R6
 2673 ed60: 0b                MVAT
 2674 ed61: 27                mvrla r7
 2675 ed62: bb                ANDT
 2676 ed63: 37                mvarl r7
 2677 ed64: 2e                mvrha r6
 2678 ed65: 0b                MVAT
 2679 ed66: 2f                mvrha r7
 2680 ed67: bb                ANDT
 2681 ed68: 3f                mvarh r7
 2682 ed69: 05                ret
 2683 ed6a:             
 2684 ed6a:             ;
 2685 ed6a:             ; 16 bit OR r6 and r7, return result in r7
 2686 ed6a:             ;
 2687 ed6a:             parse_or16:
 2688 ed6a: 26                MVRLA R6
 2689 ed6b: 0b                MVAT
 2690 ed6c: 27                mvrla r7
 2691 ed6d: ba                ORT
 2692 ed6e: 37                mvarl r7
 2693 ed6f: 2e                mvrha r6
 2694 ed70: 0b                MVAT
 2695 ed71: 2f                mvrha r7
 2696 ed72: ba                ORT
 2697 ed73: 3f                mvarh r7
 2698 ed74: 05                ret
 2699 ed75:             
 2700 ed75:             
 2701 ed75:             ;
 2702 ed75:             ; is digit in accumulator hex
 2703 ed75:             ; returns 1 if yes and 0 if no
 2704 ed75:             ;
 2705 ed75:             ; what about upper/lower case
 2706 ed75:             ;
 2707 ed75:             ; destroys tmp register
 2708 ed75:             parse_ishex:
 2709 ed75: 0d 30          ldti '0'
 2710 ed77: a7 ed 8f       brlt parse_ishex_no
 2711 ed7a: 0d 39          ldti '9'
 2712 ed7c: a9 ed 82       brgt parse_ishex_af
 2713 ed7f: a0 ed 8c       br parse_ishex_yes
 2714 ed82:             
 2715 ed82:             parse_ishex_af:
 2716 ed82: 0d 41           ldti 'A'
 2717 ed84: a7 ed 8f        brlt parse_ishex_no
 2718 ed87: 0d 46           ldti 'F'
 2719 ed89: a9 ed 8f        brgt parse_ishex_no
 2720 ed8c:             
 2721 ed8c:             parse_ishex_yes:
 2722 ed8c: 0e 01           ldai 1
 2723 ed8e: 05              ret
 2724 ed8f:             
 2725 ed8f:             parse_ishex_no:
 2726 ed8f: 0e 00           ldai 0
 2727 ed91: 05              ret
 2728 ed92:             
 2729 ed92:             ;
 2730 ed92:             ; is digit in accumulator decimal
 2731 ed92:             ; returns 1 if yes and 0 if no
 2732 ed92:             ;
 2733 ed92:             ; destroys tmp register
 2734 ed92:             ;
 2735 ed92:             parse_isdigit:
 2736 ed92: 0d 30          ldti '0'
 2737 ed94: a7 ed 9f       brlt parse_isdigit_no
 2738 ed97: 0d 39          ldti '9'
 2739 ed99: a9 ed 9f       brgt parse_isdigit_no
 2740 ed9c:             
 2741 ed9c: 0e 01           ldai 1
 2742 ed9e: 05              ret
 2743 ed9f:             
 2744 ed9f:             parse_isdigit_no:
 2745 ed9f: 0e 00           ldai 0
 2746 eda1: 05              ret
 2747 eda2:             
 2748 eda2:             ;
 2749 eda2:             ; 16 bit compare r6 and r7
 2750 eda2:             ;
 2751 eda2:             ; returns in accumulator
 2752 eda2:             ; r7=r6 00
 2753 eda2:             ; r7>r6 01
 2754 eda2:             ; r7<r6 ff
 2755 eda2:             ;
 2756 eda2:             ; destory Tmp
 2757 eda2:             ;
 2758 eda2:             parse_compare:
 2759 eda2: 2e            mvrha r6
 2760 eda3: 0b            mvat
 2761 eda4: 2f            mvrha r7
 2762 eda5: aa ed b1      brneq parse_compareh
 2763 eda8: 26            mvrla r6
 2764 eda9: 0b            mvat
 2765 edaa: 27            mvrla r7
 2766 edab: aa ed ba      brneq parse_comparel
 2767 edae: 0e 00         ldai 0
 2768 edb0: 05            ret
 2769 edb1:             
 2770 edb1:             parse_compareh:
 2771 edb1: a7 ed b7      brlt parse_compareh1
 2772 edb4: 0e 01         ldai 1
 2773 edb6: 05            ret
 2774 edb7:             parse_compareh1:
 2775 edb7: 0e ff         ldai 0ffh
 2776 edb9: 05            ret
 2777 edba:             
 2778 edba:             parse_comparel:
 2779 edba: a7 ed c0      brlt parse_comparel1
 2780 edbd: 0e 01         ldai 1
 2781 edbf: 05            ret
 2782 edc0:             parse_comparel1:
 2783 edc0: 0e ff         ldai 0ffh
 2784 edc2: 05            ret
 2785 edc3:             
 2786 edc3:             ;
 2787 edc3:             ; STRINGS
 2788 edc3:             ;
 2789 edc3: 0a 0d 00    CRLF: DB 0ah,0dh,0
 2790 edc6:             ;
 2791 edc6:             
 2792 edc6:                   ORG 0EE00h
 2793 ee00:             
 2794 ee00:             basic_test:
 2795 ee00:             
 2796 ee00:             ;    DB  25h,0ah,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h,24h,25h,14h,00h
 2797 ee00:             ;    DB  0ah,00h,06h,04h,00h,00h,24h,25h,1eh,00h,11h,00h,04h,00h,00h,23h
 2798 ee00:             ;    DB  04h,00h,00h,17h,02h,01h,00h,24h,25h,28h,00h,13h,00h,07h,04h,00h
 2799 ee00:             ;    DB  00h,21h,02h,0ah,00h,08h,0dh,02h,14h,00h,24h,01h,00h,00h,00h,00h
 2800 ee00:             
 2801 ee00:             ;    DB  25h,0ah,00h,14h,00h,06h,1fh,02h,01h,00h,17h,02h,02h,00h,20h,17h
 2802 ee00:             ;    DB  02h,03h,00h,24h,25h,14h,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h
 2803 ee00:             ;    DB  24h,25h,1eh,00h,0dh,00h,04h,01h,00h,23h,02h,02h,00h,24h,25h,28h
 2804 ee00:             ;    DB  00h,0eh,00h,06h,04h,00h,00h,17h,04h,01h,00h,24h,25h,32h,00h,15h
 2805 ee00:             ;    DB  00h,04h,02h,00h,23h,04h,00h,00h,17h,04h,01h,00h,17h,02h,05h,00h
 2806 ee00:             ;    DB  24h,25h,3ch,00h,0ah,00h,06h,04h,02h,00h,24h,01h,00h,00h,00h,00h
 2807 ee00:             
 2808 ee00: 25 0a 00 0e 
            00 06 03 68 
            65 6c 6c 6f 
            00 24 25 14     DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 2809 ee10: 00 0d 00 04 
            02 00 23 02 
            09 00 24 25 
            1e 00 0a 00     DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 2810 ee20: 06 04 02 00 
            24 25 28 00 
            0d 00 04 04 
            00 23 02 32     DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 2811 ee30: 00 24 25 32 
            00 17 00 06 
            03 68 32 00 
            15 04 02 00     DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 2812 ee40: 15 04 04 00 
            15 02 16 00 
            24 25 3c 00 
            12 00 0a 04     DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 2813 ee50: 03 00 23 02 
            01 00 0b 02 
            05 00 24 25 
            46 00 0a 00     DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 2814 ee60: 06 04 03 00 
            24 25 50 00 
            0a 00 0c 04 
            03 00 24 25     DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 2815 ee70: 51 00 12 00 
            06 03 6e 65 
            78 74 20 64 
            6f 6e 65 00     DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 2816 ee80: 24 25 52 00 
            0a 00 0e 02 
            6e 00 24 25 
            55 00 0a 00     DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 2817 ee90: 0d 02 7d 00 
            24 25 5a 00 
            12 00 06 03 
            6e 65 78 74     DB  0dh,02h,7dh,00h,24h,25h,5ah,0h,12h,00h,06h,03h,6eh,65h,78h,74h
 2818 eea0: 20 64 6f 6e 
            65 00 24 25 
            6e 00 11 00 
            06 03 69 6e     DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 2819 eeb0: 20 67 6f 73 
            75 62 00 24 
            25 70 00 11 
            00 06 03 69     DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 2820 eec0: 6e 20 73 75 
            62 20 32 00 
            24 25 72 00 
            07 00 0f 24     DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 2821 eed0: 25 7d 00 0c 
            00 06 03 65 
            6e 64 00 24 
            25 7e 00 07     DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 2822 eee0: 00 14 24 01 
            00 00 00 00 
            00 00 00 00 
            00 00 00 00     DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 2823 eef0:             
 2824 eef0:             ;
 2825 eef0:             ; The End
 2826 eef0:             ;
 2827 eef0:             ZZZZ:
 2828 eef0: 00            DB   0

ec76h: ADDLINE_MOVEPTR  - <  2424>   2428 
e647h: BASIC_LIST       - <  1359>    141 
e4f6h: BASIC_RUN        - <  1092>    149 
ee00h: BASIC_TEST       - <  2794>    190 
0100h: BASIC_VARS       - <    62>   1134   1157 
e660h: BASLIST1         - <  1375>   1368 
e700h: BASLIST10        - <  1477>   1471 
e70fh: BASLIST11        - <  1485>   1479 
e71eh: BASLIST12        - <  1493>   1487 
e72dh: BASLIST13        - <  1501>   1495 
e73ch: BASLIST14        - <  1509>   1503 
e74bh: BASLIST15        - <  1517>   1511 
e75ah: BASLIST16        - <  1525>   1519 
e769h: BASLIST17        - <  1533>   1527 
e778h: BASLIST18        - <  1541>   1535 
e787h: BASLIST19        - <  1549>   1543 
e66bh: BASLIST2         - <  1381>   1377 
e796h: BASLIST20        - <  1557>   1551 
e7a5h: BASLIST21        - <  1565>   1559 
e7b8h: BASLIST22        - <  1575>   1567 
e7cbh: BASLIST23        - <  1585>   1577 
e7deh: BASLIST24        - <  1595>   1587 
e7f1h: BASLIST25        - <  1605>   1597 
e804h: BASLIST26        - <  1615>   1607 
e817h: BASLIST27        - <  1625>   1617 
e82ah: BASLIST28        - <  1635>   1627 
e83dh: BASLIST29        - <  1645>   1637 
e682h: BASLIST3         - <  1397>   1383 
e850h: BASLIST30        - <  1655>   1647 
e863h: BASLIST31        - <  1665>   1657 
e876h: BASLIST32        - <  1675>   1667 
e889h: BASLIST33        - <  1685>   1677 
e89ch: BASLIST34        - <  1695>   1687 
e8afh: BASLIST35        - <  1705>   1697 
e8c2h: BASLIST36        - <  1715>   1707 
e8d1h: BASLIST37        - <  1723>   1717 
e8eah: BASLIST38        - <  1741>   1725 
e69eh: BASLIST4         - <  1414>   1399 
e6b5h: BASLIST5         - <  1437>   1416 
e6c4h: BASLIST6         - <  1445>   1439 
e6d3h: BASLIST7         - <  1453>   1447 
e6e2h: BASLIST8         - <  1461>   1455 
e6f1h: BASLIST9         - <  1469>   1463 
e8f6h: BASLIST_DONE     - <  1749>   1372   1378   1745 
e64bh: BASLIST_LOOP     - <  1364>   1373   1379   1395   1412   1435   1443 
         1451   1459   1467   1475   1483   1491   1499   1507   1515   1523 
         1531   1539   1547   1555   1563   1573   1583   1593   1603   1613 
         1623   1633   1643   1653   1663   1673   1683   1693   1703   1713 
         1721   1739 
e692h: BASLIST_STRING   - <  1405>   1409 
e69ah: BASLIST_STRINGEND - <  1410>   1407 
ecd0h: BASU_FIND        - <  2512>    580   2467 
ecf9h: BASU_FIND1       - <  2543>   2530 
ecfah: BASU_FIND2       - <  2545>   2535 
ecd5h: BASU_FIND_LOOP   - <  2516>   2558 
ece2h: BASU_FIND_LOOP1  - <  2525>   2519 
ed03h: BASU_FIND_MOVEPTR - <  2553>   2557 
020eh: BAS_BUFFERENDHI  - <    74>    164   2496 
e069h: BAS_COPYLOOP     - <   193>    200    202 
020ah: BAS_CURRENTTOKEN - <    72>   2006   2014   2041   2222 
e533h: BAS_ERROR        - <  1171>    295   1078 
0282h: BAS_FORSTACK     - <    94>    265 
0280h: BAS_FORSTACKPTR  - <    93> 
02c0h: BAS_GOSUBPTR     - <   103> 
02c2h: BAS_GOSUBSTACK   - <   104>    264 
0214h: BAS_INSERTPTR    - <    81>   2402   2446   2450 
e0c0h: BAS_MSG1         - <   240>    294 
e0dch: BAS_MSG2         - <   241> 
e0edh: BAS_MSG3         - <   242>   1075 
0212h: BAS_NEWLINELEN   - <    80>   2371   2391   2435 
0210h: BAS_NEWLINENUM   - <    79>   2275   2389   2398 
0204h: BAS_NXTPTR       - <    69>   1889   1901   1917   1952   1970   2027 
         2068 
0200h: BAS_RUN_ENDED    - <    67>    266    599    987   1109 
0208h: BAS_TOKCOUNTER   - <    71>   2004   2267   2294   2296   2307   2310 
         2326   2328   2335   2337   2352   2355   2370 
020ch: BAS_TOKENBUFFER  - <    73>    140    162    269   2399   2514 
0206h: BAS_TOKPTR       - <    70>   2002   2338 
2000h: BAS_TOK_BUF_END  - <   121>    163   2433   2437 
1000h: BAS_TOK_BUF_START - <   117>    159    189 
0202h: BAS_TXTPTR       - <    68>   1785   1874   1930   2000   2028   2039 
         2089   2135   2196   2213   2238   2316   2339 
e077h: BIGTEST          - <   205>    172 
ffc4h: CHAROUT          - <     5>    643   1272   1304   1324 
edc3h: CRLF             - <  2789>    208    213    218    223    228    233 
          677   1718 
e572h: DIVIDERS         - <  1256>   1281 
e125h: EXE_ACCEPT       - <   279>    318    332    338    341    598    613 
          623    687    693    722    724    729    737    740    742    763 
          793    803    848    859    877    879    890    905    927    936 
          942    944    964    970    980   1061   1085 
e13ah: EXE_ACCEPT_DONE  - <   297>    287 
e460h: EXE_END_STMT     - <   986>   1054 
e1bch: EXE_EXPR         - <   416>    339    502    518    535    552    614 
          664    725    880    891    928    966    972 
e201h: EXE_EXPR_AND     - <   460>    430 
e228h: EXE_EXPR_DONE    - <   485>    434 
e1c5h: EXE_EXPR_LOOP    - <   423>    446    458    470    482    483 
e1efh: EXE_EXPR_MINUS   - <   448>    428 
e213h: EXE_EXPR_OR      - <   472>    432 
e1ddh: EXE_EXPR_PLUS    - <   436>    426 
e14ah: EXE_FACTOR       - <   325>    358    373    387    396 
e158h: EXE_FACTOR1      - <   335>    329 
e169h: EXE_FACTOR2      - <   344>    337 
e508h: EXE_FINISHED     - <  1108>   1096 
e51ah: EXE_FINISHED_YES - <  1120>   1112   1116 
e3e3h: EXE_FOR_STMT     - <   854>   1030 
e528h: EXE_GET_VARIABLE - <  1156>    316    808 
e37fh: EXE_GOSUB_STMT   - <   735>   1018 
e2c8h: EXE_GOTO_STMT    - <   611>   1068 
e336h: EXE_IF_STMT      - <   685>   1006 
e34fh: EXE_IF_STMT1     - <   701>    697    707 
e35eh: EXE_IF_STMT2     - <   710>    705 
e2aah: EXE_INDEX_FIND   - <   579>    589 
e113h: EXE_INIT         - <   262>   1093 
e57ch: EXE_ITOA         - <  1258>    207    212    217    222    227    232 
          666   1392   1735 
e59eh: EXE_ITOA_LOOP    - <  1283>   1297   1314   1318 
e5b6h: EXE_ITOA_NEXT    - <  1299>   1292 
e5d8h: EXE_ITOA_NOONES  - <  1325> 
e5c3h: EXE_ITOA_NOTYET  - <  1308>   1301 
e58fh: EXE_ITOA_POS     - <  1274>   1262 
e2aeh: EXE_JUMP_LINE    - <   588>    615    755 
e2c5h: EXE_JUMP_LINE1   - <   603>    591    593 
e362h: EXE_LET_STMT     - <   717>   1012   1062 
e4edh: EXE_LINE_STMT    - <  1083>   1102 
e3d9h: EXE_NEXT_DONE    - <   842>    828 
e3a9h: EXE_NEXT_STMT    - <   782>   1048 
e561h: EXE_NEXT_TOK3_DONE - <  1218>   1214 
e559h: EXE_NEXT_TOK3_LOOP - <  1212>   1216 
e535h: EXE_NEXT_TOKEN   - <  1180>    298    372    386    395    437    449 
          461    473    517    534    551    636    644    650    679    702 
          711 
e53fh: EXE_NEXT_TOKEN1  - <  1189>   1183 
e548h: EXE_NEXT_TOKEN2  - <  1197>   1191 
e553h: EXE_NEXT_TOKEN3  - <  1207>   1199 
e563h: EXE_NEXT_TOKEN4  - <  1222>   1209 
e565h: EXE_NUM          - <  1229>    330    738 
e41dh: EXE_PEEK_STMT    - <   925>   1036 
e444h: EXE_POKE_STMT    - <   962>   1042 
e2d4h: EXE_PRINT_STMT   - <   621>   1000 
e2ebh: EXE_PRINT_STMT1  - <   639>    628 
e2fbh: EXE_PRINT_STMT2  - <   647>    641 
e306h: EXE_PRINT_STMT3  - <   653>    649 
e318h: EXE_PRINT_STMT4  - <   663>    655    657    659 
e32ch: EXE_PRINT_STMT_DONE - <   676>    661    671    673 
e2d9h: EXE_PRINT_STMT_LOOP - <   625>    674 
e31eh: EXE_PRINT_STMT_TEST - <   668>    637    645    651 
e22fh: EXE_RELATION     - <   498>    689 
e2a3h: EXE_RELATION_DONE - <   566>    514 
e287h: EXE_RELATION_EQ  - <   550>    512 
e269h: EXE_RELATION_GT  - <   533>    510 
e238h: EXE_RELATION_LOOP - <   505>    528    531    545    548    561    564 
e24bh: EXE_RELATION_LT  - <   516>    508 
e29dh: EXE_REL_NE       - <   562>    559 
e281h: EXE_REL_NGT      - <   546>    543 
e263h: EXE_REL_NLT      - <   529>    526 
e39bh: EXE_RETURN_STMT  - <   761>   1024 
e4f9h: EXE_RUN          - <  1095>   1103 
e502h: EXE_RUN_CONT     - <  1101>   1098 
e51dh: EXE_SET_VARIABLE - <  1133>    727    811    885    940 
e467h: EXE_STMT         - <   995>    698   1086 
e471h: EXE_STMT1        - <  1003>    999 
e4c2h: EXE_STMT10       - <  1057>   1053 
e4d0h: EXE_STMT11       - <  1065>   1059 
e4d9h: EXE_STMT12       - <  1071>   1067 
e47ah: EXE_STMT2        - <  1009>   1005 
e483h: EXE_STMT3        - <  1015>   1011 
e48ch: EXE_STMT4        - <  1021>   1017 
e495h: EXE_STMT5        - <  1027>   1023 
e49eh: EXE_STMT6        - <  1033>   1029 
e4a7h: EXE_STMT7        - <  1039>   1035 
e4b0h: EXE_STMT8        - <  1045>   1041 
e4b9h: EXE_STMT9        - <  1051>   1047 
e109h: EXE_STMT_MSG     - <   243> 
e16dh: EXE_TERM         - <   354>    420    438    450    462    474 
e189h: EXE_TERM_ASTR    - <   371>    364 
e1b5h: EXE_TERM_DONE    - <   403>    369 
e176h: EXE_TERM_LOOP    - <   361>    383    392    401 
e1aah: EXE_TERM_MOD     - <   394>    368 
e19fh: EXE_TERM_SLASH   - <   385>    366 
e13eh: EXE_VARFACTOR    - <   310>    345 
e56eh: EXE_VARIABLE_NUM - <  1244>    311    718    797    863    937 
ea3eh: FOUND            - <  1951>   1934 
ea48h: NOKEYOWRDSFOUND  - <  1959>   1931 
e968h: PARSECHAR1       - <  1793>   1790 
e9b0h: PARSECHAR10      - <  1838>   1835 
e9b8h: PARSECHAR11      - <  1843>   1840 
e9c0h: PARSECHAR12      - <  1848>   1845 
e9c8h: PARSECHAR13      - <  1853>   1850 
e9d0h: PARSECHAR14      - <  1858>   1855 
e9d8h: PARSECHAR15      - <  1863>   1860 
e970h: PARSECHAR2       - <  1798>   1795 
e978h: PARSECHAR3       - <  1803>   1800 
e980h: PARSECHAR4       - <  1808>   1805 
e988h: PARSECHAR5       - <  1813>   1810 
e990h: PARSECHAR6       - <  1818>   1815 
e998h: PARSECHAR7       - <  1823>   1820 
e9a0h: PARSECHAR8       - <  1828>   1825 
e9a8h: PARSECHAR9       - <  1833>   1830 
ed47h: PARSE_ADD16      - <  2639>    444   2107   2488   2666 
ec40h: PARSE_ADDLINE    - <  2388> 
ec50h: PARSE_ADDLINE1   - <  2397>   2394 
ec56h: PARSE_ADDLINELOOP - <  2401>   2429 
ec7fh: PARSE_ADDROOM    - <  2432>   2405   2414 
eb4fh: PARSE_AF         - <  2178>   2175 
ed5fh: PARSE_AND16      - <  2671>    468 
eda2h: PARSE_COMPARE    - <  2758>    524    541    558    826   1290   2412 
         2447 
edb1h: PARSE_COMPAREH   - <  2770>   2762 
edb7h: PARSE_COMPAREH1  - <  2774>   2771 
edbah: PARSE_COMPAREL   - <  2778>   2766 
edc0h: PARSE_COMPAREL1  - <  2782>   2779   2779 
eb66h: PARSE_ERROR_PRINT - <  2205> 
eb67h: PARSE_FINISHED   - <  2211>   2021   2053 
eb82h: PARSE_FINISHED_YES - <  2228>   2215   2221   2224 
eb45h: PARSE_GETNIBBLE  - <  2171>   2136   2143   2150   2157 
e9dbh: PARSE_GET_NEXT_TOK - <  1872>   2005   2040 
e9e0h: PARSE_GNT1       - <  1880> 
e9e7h: PARSE_GNT1LOOP   - <  1884>   1888 
e9f7h: PARSE_GNT2       - <  1896>   1883 
ea05h: PARSE_GNT3       - <  1907>   1899 
ea0bh: PARSE_GNT3LOOP   - <  1911>   1915 
ea1bh: PARSE_GNT4       - <  1922>   1910 
ea5eh: PARSE_GNT_ERROR  - <  1975>   1966   1968 
ea64h: PARSE_INIT       - <  1997>   2265 
0300h: PARSE_INPUT_LINE - <   109> 
ec9eh: PARSE_INSERTLOOP - <  2453>   2459 
ed92h: PARSE_ISDIGIT    - <  2735>   1882   1887   2123 
ed9fh: PARSE_ISDIGIT_NO - <  2744>   2737   2739 
ed75h: PARSE_ISHEX      - <  2708> 
ed82h: PARSE_ISHEX_AF   - <  2715>   2712 
ed8fh: PARSE_ISHEX_NO   - <  2725>   2710   2717   2719 
ed8ch: PARSE_ISHEX_YES  - <  2721>   2713 
e8f9h: PARSE_KEYWORDS   - <  1756>   1927 
eb96h: PARSE_LINE       - <  2264>    181 
ebe1h: PARSE_LINE1      - <  2313>   2299 
ebfdh: PARSE_LINE1DONE  - <  2330>   2322 
ebeah: PARSE_LINE1LOOP  - <  2319>   2329 
ec12h: PARSE_LINE2      - <  2342>   2315 
ec2bh: PARSE_LINE_DONE  - <  2358>   2290 
ebb4h: PARSE_LINE_LOOP  - <  2286>   2311   2340   2344   2356 
ed0ch: PARSE_MUL16      - <  2568>    380   2102 
ed39h: PARSE_MULADD16   - <  2619>   2581 
ed14h: PARSE_MULLOOP    - <  2575>   2615 
ed1dh: PARSE_MULSKIP    - <  2583>   2580 
ea82h: PARSE_NEXT       - <  2020>   2069   2287 
ea89h: PARSE_NEXT1      - <  2025>   2022 
ea91h: PARSE_NEXT1LOOP  - <  2030>   2035 
ea9bh: PARSE_NEXT2      - <  2038>   2033 
eaach: PARSE_NEXT3      - <  2052>   2044   2059 
eabch: PARSE_NEXTDONE   - <  2061>   2054   2057 
eac3h: PARSE_NEXTDONE2  - <  2067>   2064 
eacch: PARSE_NUM        - <  2083>   2274   2300 
eb08h: PARSE_NUM_CHAR   - <  2121>   2090   2094 
eb12h: PARSE_NUM_CHAR1  - <  2127>   2124 
eafch: PARSE_NUM_DONE   - <  2111>   2098 
eadeh: PARSE_NUM_LOOP   - <  2093>   2110 
eb17h: PARSE_NUM_OLD    - <  2133> 
ed6ah: PARSE_OR16       - <  2687>    480 
eb96h: PARSE_POS        - <  2251> 
eca8h: PARSE_REMOVELINE - <  2466>   2390 
ecb4h: PARSE_REMOVELINE1 - <  2473>   2469   2471 
ecc5h: PARSE_REMOVELOOP - <  2489>   2498 
ec8bh: PARSE_ROOMLOOP   - <  2440>   2448 
e958h: PARSE_SINGLECHAR - <  1782>   1898 
eb57h: PARSE_STRING     - <  2188> 
eb60h: PARSE_STRING1    - <  2194>   2191 
ed55h: PARSE_SUB16      - <  2658>    456   1295   2436 
ea7eh: PARSE_TOKEN      - <  2013>   2189   2288 
0400h: PARSE_TOKEN_BUFFER - <   113>   2001   2268   2366   2451 
eb87h: PARSE_VARIABLE_NUM - <  2236>   2345 
ea27h: PCMPLOOP         - <  1932>   1940 
ffcch: SHOWADDR         - <     7>   1371   1744 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    291   1072 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9> 
ffdch: SHOWREGS         - <    11>   1077 
ea35h: SKIPLOOP         - <  1944>   1947 
ea35h: SKIPTOEND        - <  1942>   1937 
ffc0h: STRINGOUT        - <     4>    209    214    219    224    229    234 
          635    678   1076   1370   1402   1441   1449   1457   1465   1473 
         1481   1489   1497   1505   1513   1521   1529   1537   1545   1553 
         1561   1719   1743 
0019h: TOKENIZER_AND    - <    43>    429   1606   1816 
001bh: TOKENIZER_ASTR   - <    45>    363   1626   1826 
0010h: TOKENIZER_CALL   - <    34>   1526   1768 
0015h: TOKENIZER_COMMA  - <    39>    640    935    969   1566   1796 
0024h: TOKENIZER_CR     - <    54>    597    670    704    728    741    847 
          904    943    979   1716   1791   2289   2359 
0009h: TOKENIZER_ELSE   - <    27>   1470   1761 
0014h: TOKENIZER_END    - <    38>   1052   1558   1772 
0001h: TOKENIZER_EOF    - <    19>    160    672    706   1115   1376   2220 
         2223   2404   2518 
0023h: TOKENIZER_EQ     - <    53>    511    723    878   1706   1861 
0000h: TOKENIZER_ERROR  - <    18>   1367   1773   1977 
000ah: TOKENIZER_FOR    - <    28>    858   1028   1478   1762 
000eh: TOKENIZER_GOSUB  - <    32>    736   1016   1510   1766 
000dh: TOKENIZER_GOTO   - <    31>    612   1066   1502   1765 
0022h: TOKENIZER_GT     - <    52>    509   1696   1856 
001eh: TOKENIZER_HASH   - <    48>   1656   1841 
0007h: TOKENIZER_IF     - <    25>    686   1004   1454   1759 
001fh: TOKENIZER_LEFTP  - <    49>    336    658   1666   1836 
0005h: TOKENIZER_LET    - <    23>   1058   1060   1438   1757 
0025h: TOKENIZER_LINENUM - <    55>   1084   1198   1724   2270 
0021h: TOKENIZER_LT     - <    51>    507   1686   1851 
0018h: TOKENIZER_MINUS  - <    42>    427   1596   1811 
001dh: TOKENIZER_MOD    - <    47>    367   1646   1831 
000ch: TOKENIZER_NEXT   - <    30>    792   1046   1494   1764 
0002h: TOKENIZER_NUMBER - <    20>    328    656    739   1182   1382   1890 
         2298 
001ah: TOKENIZER_OR     - <    44>    431   1616   1821 
0012h: TOKENIZER_PEEK   - <    36>    926   1034   1542   1770 
0017h: TOKENIZER_PLUS   - <    41>    425   1586   1806 
0013h: TOKENIZER_POKE   - <    37>    963   1040   1550   1771 
0006h: TOKENIZER_PRINT  - <    24>    622    998   1446   1758 
0011h: TOKENIZER_REM    - <    35>   1534   1769   2043 
000fh: TOKENIZER_RETURN - <    33>    762   1022   1518   1767 
0020h: TOKENIZER_RIGHTP - <    50>    340   1676   1846 
0016h: TOKENIZER_SEMICOLON - <    40>    648   1576   1801 
001ch: TOKENIZER_SLASH  - <    46>    365   1636 
0003h: TOKENIZER_STRING - <    21>    627   1208   1398   1918   2190   2314 
0008h: TOKENIZER_THEN   - <    26>    692   1462   1760 
000bh: TOKENIZER_TO     - <    29>    889   1486   1763 
0004h: TOKENIZER_VARIABLE - <    22>    317    654    721    802    876    941 
         1010   1190   1415   1971   2343 
e636h: TOKL_CALL        - <  1355>   1528 
e5f6h: TOKL_ELSE        - <  1344>   1472 
e631h: TOKL_END         - <  1354>   1560 
e63ch: TOKL_ERROR       - <  1356>   1369   1742 
e5fch: TOKL_FOR         - <  1345>   1480 
e611h: TOKL_GOSUB       - <  1349>   1512 
e60bh: TOKL_GOTO        - <  1348>   1504 
e5ech: TOKL_IF          - <  1342>   1456 
e5e0h: TOKL_LET         - <  1340>   1440 
e605h: TOKL_NEXT        - <  1347>   1496 
e625h: TOKL_PEEK        - <  1352>   1544 
e62bh: TOKL_POKE        - <  1353>   1552 
e5e5h: TOKL_PRINT       - <  1341>   1448 
e620h: TOKL_REM         - <  1351>   1536 
e618h: TOKL_RETURN      - <  1350>   1520 
e5f0h: TOKL_THEN        - <  1343>   1464 
e601h: TOKL_TO          - <  1346>   1488 
ea20h: TOP              - <  1928>   1949 
ffd0h: TOUPPER          - <     8>   2179 
ffc8h: UARTOUT          - <     6>    293   1074   1394   1404   1423   1434 
         1569   1571   1579   1581   1589   1591   1599   1601   1609   1611 
         1619   1621   1629   1631   1639   1641   1649   1651   1659   1661 
         1669   1671   1679   1681   1689   1691   1699   1701   1709   1711 
         1738 
eef0h: ZZZZ             - <  2827> 

2828 Lines assembled
0 Errors
325 Labels
Object Code:3706 bytes

