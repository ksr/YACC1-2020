RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             
   15 0000:             ;
   16 0000:             ; Basic interpreter tokens
   17 0000:             ;
   18 0000:             TOKENIZER_ERROR: EQU 00
   19 0000:             TOKENIZER_EOF: EQU 01
   20 0000:             TOKENIZER_NUMBER: EQU 02
   21 0000:             TOKENIZER_STRING: EQU 03
   22 0000:             TOKENIZER_VARIABLE: EQU 04
   23 0000:             TOKENIZER_LET: EQU 05
   24 0000:             TOKENIZER_PRINT: EQU 06
   25 0000:             TOKENIZER_IF: EQU 07
   26 0000:             TOKENIZER_THEN: EQU 08
   27 0000:             TOKENIZER_ELSE: EQU 09
   28 0000:             TOKENIZER_FOR: EQU 10
   29 0000:             TOKENIZER_TO: EQU 11
   30 0000:             TOKENIZER_NEXT: EQU 12
   31 0000:             TOKENIZER_GOTO: EQU 13
   32 0000:             TOKENIZER_GOSUB: EQU 14
   33 0000:             TOKENIZER_RETURN: EQU 15
   34 0000:             TOKENIZER_CALL: EQU 16
   35 0000:             TOKENIZER_REM: EQU 17
   36 0000:             TOKENIZER_PEEK: EQU 18
   37 0000:             TOKENIZER_POKE: EQU 19
   38 0000:             TOKENIZER_END: EQU 20
   39 0000:             TOKENIZER_COMMA: EQU 21
   40 0000:             TOKENIZER_SEMICOLON: EQU 22
   41 0000:             TOKENIZER_PLUS: EQU 23
   42 0000:             TOKENIZER_MINUS: EQU 24
   43 0000:             TOKENIZER_AND: EQU 25
   44 0000:             TOKENIZER_OR: EQU 26
   45 0000:             TOKENIZER_ASTR: EQU 27
   46 0000:             TOKENIZER_SLASH: EQU 28
   47 0000:             TOKENIZER_MOD: EQU 29
   48 0000:             TOKENIZER_HASH: EQU 30
   49 0000:             TOKENIZER_LEFTP: EQU 31
   50 0000:             TOKENIZER_RIGHTP: EQU 32
   51 0000:             TOKENIZER_LT: EQU 33
   52 0000:             TOKENIZER_GT: EQU 34
   53 0000:             TOKENIZER_EQ: EQU 35
   54 0000:             TOKENIZER_CR: EQU 36
   55 0000:             TOKENIZER_LINENUM: EQU 37
   56 0000:             
   57 0000:             ;
   58 0000:             ; BASIC interpreter user variables area
   59 0000:             ; currently 26 1-byte variables
   60 0000:             ; for now must be 0xAA00 (256 byte) aligned
   61 0000:             ;
   62 0000:             BASIC_VARS: EQU 0100h
   63 0000:             
   64 0000:             ;
   65 0000:             ; Basic interpreter internal variables
   66 0000:             ;
   67 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   68 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   69 0000:             bas_nxtptr:       EQU 0204h ;
   70 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   71 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   72 0000:             bas_currenttoken: EQU 020Ah ; used in parsing
   73 0000:             bas_tokenbuffer:  EQU 020Ch ; Pointer to start of token buffer
   74 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   75 0000:                                         ; this value should be + 1 end of buffer
   76 0000:                                         ; if buffer is 0x1000-0x1fff this is
   77 0000:                                         ; set to 0x2000. Used in moving buffer around
   78 0000:                                         ; in add and remove line
   79 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   80 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   81 0000:             bas_insertptr:    EQU 0214H
   82 0000:             
   83 0000:             ;
   84 0000:             ; FOR-NEXT statement stack ptr and stack data
   85 0000:             ;
   86 0000:             ; for next stack data
   87 0000:             ; format
   88 0000:             ;   2 bytes for variable id (only first byte used for now)
   89 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
   90 0000:             ;   2 bytes ptr to line after for instruction (format HL)
   91 0000:             ; later add step amount
   92 0000:             ;
   93 0000:             bas_forstackptr: EQU 0280h
   94 0000:             bas_forstack: EQU 0282h
   95 0000:             
   96 0000:             ;
   97 0000:             ; GOSUB stack ptr and data
   98 0000:             ;
   99 0000:             ; gosub STACK
  100 0000:             ; format
  101 0000:             ;   2 bytes return location ptr
  102 0000:             ;
  103 0000:             bas_gosubptr: EQU 02c0h
  104 0000:             bas_gosubstack: EQU 02c2h
  105 0000:             
  106 0000:             ;
  107 0000:             ; Basic interpreter text input line buffer
  108 0000:             ;
  109 0000:             parse_input_line: EQU 300h
  110 0000:             ;
  111 0000:             ; Basic interpreter tmp buffer to build up current token line
  112 0000:             ;
  113 0000:             parse_token_buffer: EQU 400h
  114 0000:             ;
  115 0000:             ; Basic interpreter token buffer
  116 0000:             ;
  117 0000:             bas_tok_buf_start: EQU 1000h
  118 0000:             ;
  119 0000:             ; Basic interpreter token buffer end + 1
  120 0000:             ;
  121 0000:             bas_tok_buf_end: EQU 2000h
  122 0000:             ; OR
  123 0000:             ;bas_tok_buf_end: EQU 1100h ;smaller for easy debugging - 256 byte buffer
  124 0000:             
  125 0000:             ;
  126 0000:             ; basic interpreter, add IO and peek/poke
  127 0000:             ;
  128 0000:             
  129 0000:             ;
  130 0000:             ; Basic Interpreter
  131 0000:             ;
  132 0000:             
  133 0000:             ;
  134 0000:             ; BASIC Entry Points
  135 0000:             ;
  136 0000:               ORG 0e000h
  137 e000:             ;
  138 e000:             ; list
  139 e000:             ;
  140 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  141 e003: 04 e6 06          JSR  basic_list
  142 e006: 05                Ret
  143 e007:             
  144 e007:             ;
  145 e007:                   ORG 0e010h
  146 e010:             ;
  147 e010:             ; run
  148 e010:             ;
  149 e010: 04 e4 b5          jsr basic_run
  150 e013: 05                Ret
  151 e014:             
  152 e014:             ;
  153 e014:                   ORG 0e020h
  154 e020:             ;
  155 e020:             ; cold start
  156 e020:             ;
  157 e020:             ; Hack later pass in R7
  158 e020:             ;
  159 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  160 e023: 0e 01             ldai TOKENIZER_EOF          ;write EOF to start of buffer
  161 e025: 4f                stavr r7
  162 e026: ff 02 0c          STR R7,bas_tokenbuffer
  163 e029: 1f 20 00          mviw r7,bas_tok_buf_end
  164 e02c: ff 02 0e          str r7,bas_bufferendhi
  165 e02f: 05                Ret
  166 e030:             
  167 e030:             ;
  168 e030:                   ORG 0e030h
  169 e030:             ;
  170 e030:             ; tests - called from monitor - used to test snippets of code
  171 e030:             ;
  172 e030: 04 e0 77          jsr bigtest
  173 e033:             
  174 e033: 05                ret
  175 e034:             
  176 e034:             ;
  177 e034:                   org 0e050h
  178 e050:             ;
  179 e050:             ; parse line
  180 e050:             ;
  181 e050: 04 eb 55          jsr parse_line
  182 e053: 05                ret
  183 e054:             
  184 e054:             ;
  185 e054:                   ORG 0e060h
  186 e060:             ;
  187 e060:             ; Copy test program into token Buffer, copies 0x0400 bytes
  188 e060:             ;
  189 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  190 e063: 1e ee 00          mviw R6,BASIC_TEST
  191 e066: 1d 04 00          mviw R5,0400h
  192 e069:             
  193 e069:             bas_copyloop:
  194 e069: 46                ldavr R6
  195 e06a: 4f                stavr r7
  196 e06b: 56                incr r6
  197 e06c: 57                incr r7
  198 e06d: 5d                decr r5
  199 e06e: 2d                mvrha r5
  200 e06f: a2 e0 69          brnz bas_copyloop
  201 e072: 25                mvrla r5
  202 e073: a2 e0 69          brnz bas_copyloop
  203 e076: 05                ret
  204 e077:             
  205 e077:             bigtest:
  206 e077: 1f 12 34        mviw r7,01234h
  207 e07a: 04 e5 3b        jsr exe_itoa
  208 e07d: 1f ed 82        mviw r7,CRLF
  209 e080: 04 ff c0        jsr stringout
  210 e083:             
  211 e083: 1f 00 10        mviw r7,010h
  212 e086: 04 e5 3b        jsr exe_itoa
  213 e089: 1f ed 82        mviw r7,CRLF
  214 e08c: 04 ff c0        jsr stringout
  215 e08f:             
  216 e08f: 1f 76 54        mviw r7,07654h
  217 e092: 04 e5 3b        jsr exe_itoa
  218 e095: 1f ed 82        mviw r7,CRLF
  219 e098: 04 ff c0        jsr stringout
  220 e09b:             
  221 e09b: 1f 00 00        mviw r7,00h
  222 e09e: 04 e5 3b        jsr exe_itoa
  223 e0a1: 1f ed 82        mviw r7,CRLF
  224 e0a4: 04 ff c0        jsr stringout
  225 e0a7:             
  226 e0a7: 1f ff fe        mviw r7,0FFFEh
  227 e0aa: 04 e5 3b        jsr exe_itoa
  228 e0ad: 1f ed 82        mviw r7,CRLF
  229 e0b0: 04 ff c0        jsr stringout
  230 e0b3:             
  231 e0b3: 1f 80 12        mviw r7,08012h
  232 e0b6: 04 e5 3b        jsr exe_itoa
  233 e0b9: 1f ed 82        mviw r7,CRLF
  234 e0bc: 04 ff c0        jsr stringout
  235 e0bf: 05              ret
  236 e0c0:             
  237 e0c0:             ;
  238 e0c0:             ; basic interpreter messages
  239 e0c0:             ;
  240 e0c0: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "Accept - unexpected token",0,0ah,0dh
  241 e0dc: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  242 e0ed: 42 41 53 49 
            43 20 54 4f 
            4b 45 4e 20 
            4e 4f 54 20 
            53 55 50 50 
            4f 52 54 45 
            44 20 0a 0d bas_msg3: db "Basic token not supported ",0ah,0dh
  243 e109: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  244 e113:             ;
  245 e113:             ; Basic interpreter - execution engine
  246 e113:             ; Register Usage
  247 e113:             ; R0 - Program Counter
  248 e113:             ; R1 - Stack Pointer
  249 e113:             ; R2 - Direct addressing mode
  250 e113:             ; R3 - Basic Interpreter Token Buffer ptr
  251 e113:             ; R4 - working register  ; or is this for-next stack ptr
  252 e113:             ; R5 - working register  ; or is this gosub stack ptr
  253 e113:             ; R6 - Working register
  254 e113:             ; R7 - parameter passing & return value
  255 e113:             ;
  256 e113:             ;exe: Is this label needed
  257 e113:             ;
  258 e113:             ; void ubasic_init()
  259 e113:             ;
  260 e113:             ; Setup basic interpreter execution engine
  261 e113:             ;
  262 e113:             exe_init:
  263 e113: 09              push
  264 e114: 1d 02 c2        MVIW R5,bas_gosubstack
  265 e117: 1c 02 82        MVIW R4,bas_forstack
  266 e11a: 1e 02 00        MVIW R6,bas_run_ended
  267 e11d: 0e 00           LDAI 0
  268 e11f: 4e              STAVR R6
  269 e120: f3 02 0c        LDR R3,bas_tokenbuffer
  270 e123: 0a              pop
  271 e124: 05              RET
  272 e125:             
  273 e125:             ;
  274 e125:             ; void accept(int)
  275 e125:             ;
  276 e125:             ; compare accumulator with current token then advance to next token in buffer
  277 e125:             ; assume accumulator destroyed
  278 e125:             ;
  279 e125:             exe_accept:
  280 e125: 09              push
  281 e126:             ;
  282 e126:             ; get current token into accumulator
  283 e126:             ;
  284 e126: 43              LDAVR R3
  285 e127: 0b              MVAT
  286 e128: 0a              POP
  287 e129: a8 e1 3a        BREQ exe_accept_done
  288 e12c:             ;
  289 e12c:             ; debug information
  290 e12c:             ;
  291 e12c: 04 ff e0        JSR showbytea
  292 e12f: 0e 2d           ldai '-'
  293 e131: 04 ff c8        JSR uartout
  294 e134: 1f e0 c0        mviw R7,bas_msg1
  295 e137: 04 e4 f2        JSR bas_error
  296 e13a:             ;
  297 e13a:             exe_accept_done:
  298 e13a: 04 e4 f4        jsr exe_next_token
  299 e13d: 05              RET
  300 e13e:             
  301 e13e:             ;
  302 e13e:             ; int varfactor()
  303 e13e:             ;
  304 e13e:             ; get variable id pointed to by exe_variable_num in token stream
  305 e13e:             ; (this is not a value but a variable id)
  306 e13e:             ; value returned by exe_get_variable in r7
  307 e13e:             ;
  308 e13e:             ; return value in R7
  309 e13e:             ;
  310 e13e:             exe_varfactor:
  311 e13e: 04 e5 2d        jsr exe_variable_num    ; get variable number id (one byte for now a-z)
  312 e141:                                         ;into accumulator
  313 e141:             ;
  314 e141:             ; variable id in accumulator, return value in r7
  315 e141:             ;
  316 e141: 04 e4 e7        jsr exe_get_variable
  317 e144: 0e 04           LDAI TOKENIZER_VARIABLE
  318 e146: 04 e1 25        JSR exe_accept
  319 e149: 05              RET
  320 e14a:             
  321 e14a:             ;
  322 e14a:             ; int factor()
  323 e14a:             ; return value in R7
  324 e14a:             ;
  325 e14a:             exe_factor:
  326 e14a:             ;
  327 e14a: 43              LDAVR R3               ;get current token into accumulator
  328 e14b: 0d 02           LDTI TOKENIZER_NUMBER
  329 e14d: aa e1 58        BRNEQ exe_factor1
  330 e150: 04 e5 24        JSR exe_num
  331 e153: 0c              MVTA
  332 e154: 04 e1 25        JSR exe_accept
  333 e157: 05              RET
  334 e158:             
  335 e158:             exe_factor1:
  336 e158: 0d 1f           LDTI TOKENIZER_LEFTP
  337 e15a: aa e1 69        BRNEQ exe_factor2
  338 e15d: 04 e1 25        JSR exe_accept
  339 e160: 04 e1 bc        JSR exe_expr
  340 e163: 0e 20           LDAI TOKENIZER_RIGHTP
  341 e165: 04 e1 25        JSR exe_accept
  342 e168: 05              RET
  343 e169:             
  344 e169:             exe_factor2:
  345 e169: 04 e1 3e        jsr exe_varfactor
  346 e16c: 05              ret
  347 e16d:             
  348 e16d:             ;
  349 e16d:             ; int term()
  350 e16d:             ; R5 = F1
  351 e16d:             ; R6 = F2
  352 e16d:             ; R7 = return value
  353 e16d:             ;
  354 e16d:             exe_term:
  355 e16d: 07 05           pushr r5
  356 e16f: 07 06           pushr r6
  357 e171:             
  358 e171: 04 e1 4a        jsr exe_factor
  359 e174: 0f 57           MOVRR r7,r5
  360 e176:             
  361 e176:             exe_term_loop:
  362 e176: 43              LDAVR R3
  363 e177: 0d 1b           ldti TOKENIZER_ASTR
  364 e179: a8 e1 89        BREQ exe_term_astr
  365 e17c: 0d 1c           LDTI TOKENIZER_SLASH
  366 e17e: a8 e1 9f        breq exe_term_slash
  367 e181: 0d 1d           ldti TOKENIZER_MOD
  368 e183: a8 e1 aa        breq exe_term_mod
  369 e186: a0 e1 b5        br exe_term_done
  370 e189:             
  371 e189:             exe_term_astr:
  372 e189: 04 e4 f4        jsr exe_next_token
  373 e18c: 04 e1 4a        jsr exe_factor
  374 e18f: 0f 67           movrr r7,r6
  375 e191:             ;
  376 e191:             ; do mulitply f1 = f1 * f2
  377 e191:             ;
  378 e191: 07 04           pushr r4
  379 e193: 0f 46           movrr r6,r4
  380 e195: 04 ec cb        jsr PARSE_MUL16
  381 e198: 0f 57           movrr r7,r5
  382 e19a: 08 40           popr r4
  383 e19c: a0 e1 76        BR exe_term_loop
  384 e19f:             
  385 e19f:             exe_term_slash:
  386 e19f: 04 e4 f4        jsr exe_next_token
  387 e1a2: 04 e1 4a        jsr exe_factor
  388 e1a5: 0f 67           movrr r7,r6
  389 e1a7:             ;
  390 e1a7:             ; do divide f1 = f1 / f2
  391 e1a7:             ;
  392 e1a7: a0 e1 76        BR exe_term_loop
  393 e1aa:             
  394 e1aa:             exe_term_mod:
  395 e1aa: 04 e4 f4        jsr exe_next_token
  396 e1ad: 04 e1 4a        jsr exe_factor
  397 e1b0: 0f 67           movrr r7,r6
  398 e1b2:             ;
  399 e1b2:             ; f1 = f1 % f2
  400 e1b2:             ;
  401 e1b2: a0 e1 76        BR exe_term_loop
  402 e1b5:             
  403 e1b5:             exe_term_done:
  404 e1b5: 0f 75           MOVRR r5,r7
  405 e1b7: 08 60           popr r6
  406 e1b9: 08 50           popr r5
  407 e1bb: 05              ret
  408 e1bc:             
  409 e1bc:             ;
  410 e1bc:             ; static VARIABLE_TYPE expr()
  411 e1bc:             ;
  412 e1bc:             ; R5 = t1
  413 e1bc:             ; R6 = t2
  414 e1bc:             ; R7 = return value
  415 e1bc:             ;
  416 e1bc:             exe_expr:
  417 e1bc: 07 05           pushr r5
  418 e1be: 07 06           pushr r6
  419 e1c0:             
  420 e1c0: 04 e1 6d        jsr exe_term
  421 e1c3: 0f 57           MOVRR r7,r5
  422 e1c5:             
  423 e1c5:             exe_expr_loop:
  424 e1c5: 43              LDAVR R3
  425 e1c6: 0d 17           ldtI TOKENIZER_PLUS
  426 e1c8: a8 e1 dd        BREQ exe_expr_plus
  427 e1cb: 0d 18           ldtI TOKENIZER_MINUS
  428 e1cd: a8 e1 ef        breq exe_expr_minus
  429 e1d0: 0d 19           ldtI TOKENIZER_AND
  430 e1d2: a8 e2 01        breq exe_expr_and
  431 e1d5: 0d 1a           ldti TOKENIZER_OR
  432 e1d7: a8 e2 13        breq exe_expr_or
  433 e1da:             
  434 e1da: a0 e2 28        br exe_expr_done
  435 e1dd:             
  436 e1dd:             exe_expr_plus:
  437 e1dd: 04 e4 f4        jsr exe_next_token
  438 e1e0: 04 e1 6d        jsr exe_term
  439 e1e3: 0f 67           movrr r7,r6
  440 e1e5:             ;
  441 e1e5:             ; t1 = t1 + t2
  442 e1e5:             ;
  443 e1e5: 0f 75           movrr r5,r7
  444 e1e7: 04 ed 06        jsr parse_add16
  445 e1ea: 0f 57           movrr r7,r5
  446 e1ec: a0 e1 c5        BR exe_expr_loop
  447 e1ef:             
  448 e1ef:             exe_expr_minus:
  449 e1ef: 04 e4 f4        jsr exe_next_token
  450 e1f2: 04 e1 6d        jsr exe_term
  451 e1f5: 0f 67           movrr r7,r6
  452 e1f7:             ;
  453 e1f7:             ; t1 = t1 - t2
  454 e1f7:             ;
  455 e1f7: 0f 75           movrr r5,r7
  456 e1f9: 04 ed 14        jsr parse_sub16
  457 e1fc: 0f 57           movrr r7,r5
  458 e1fe: a0 e1 c5        BR exe_expr_loop
  459 e201:             
  460 e201:             exe_expr_and:
  461 e201: 04 e4 f4        jsr exe_next_token
  462 e204: 04 e1 6d        jsr exe_term
  463 e207: 0f 67           movrr r7,r6
  464 e209:             ;
  465 e209:             ; t1 = t1 & t2
  466 e209:             ;
  467 e209: 0f 75           movrr r5,r7
  468 e20b: 04 ed 1e        jsr parse_and16
  469 e20e: 0f 57           movrr r7,r5
  470 e210: a0 e1 c5        BR exe_expr_loop
  471 e213:             
  472 e213:             exe_expr_or:
  473 e213: 04 e4 f4        jsr exe_next_token
  474 e216: 04 e1 6d        jsr exe_term
  475 e219: 0f 67           movrr r7,r6
  476 e21b:             ;
  477 e21b:             ; t1 = t1 | t2
  478 e21b:             ;
  479 e21b: 0f 75           movrr r5,r7
  480 e21d: 04 ed 29        jsr parse_or16
  481 e220: 0f 57           movrr r7,r5
  482 e222: a0 e1 c5        BR exe_expr_loop
  483 e225: a0 e1 c5        BR exe_expr_loop
  484 e228:             
  485 e228:             exe_expr_done:
  486 e228: 0f 75           MOVRR r5,r7
  487 e22a: 08 60           popr r6
  488 e22c: 08 50           popr r5
  489 e22e: 05              ret
  490 e22f:             
  491 e22f:             ;
  492 e22f:             ; int relation ()
  493 e22f:             ;
  494 e22f:             ; R5 = r1
  495 e22f:             ; R6 = r2
  496 e22f:             ; R7 = return value
  497 e22f:             ;
  498 e22f:             exe_relation:
  499 e22f: 07 05           pushr r5
  500 e231: 07 06           pushr r6
  501 e233:             
  502 e233: 04 e1 bc        jsr exe_expr
  503 e236: 0f 57           MOVRR r7,r5
  504 e238:             
  505 e238:             exe_relation_loop:
  506 e238: 43              LDAVR R3
  507 e239: 0d 21           LDTI TOKENIZER_LT
  508 e23b: a8 e2 4b        BREQ exe_relation_lt
  509 e23e: 0d 22           ldti TOKENIZER_GT
  510 e240: a8 e2 69        breq exe_relation_gt
  511 e243: 0d 23           ldti TOKENIZER_EQ
  512 e245: a8 e2 87        breq exe_relation_eq
  513 e248:             
  514 e248: a0 e2 a3        br exe_relation_done
  515 e24b:             
  516 e24b:             exe_relation_lt:
  517 e24b: 04 e4 f4        jsr exe_next_token
  518 e24e: 04 e1 bc        jsr exe_expr
  519 e251: 0f 67           movrr r7,r6
  520 e253:             ;
  521 e253:             ; r1 = r1 < r2
  522 e253:             ;
  523 e253: 0f 75           movrr  r5,r7
  524 e255: 04 ed 61        jsr parse_compare
  525 e258: 0d ff           ldti 0ffh
  526 e25a: aa e2 63        BRNEQ exe_rel_nlt
  527 e25d: 1d 00 01        mviw r5,01h
  528 e260: a0 e2 38        BR exe_relation_loop
  529 e263:             exe_rel_nlt:
  530 e263: 1d 00 00        mviw r5,00h
  531 e266: a0 e2 38        BR exe_relation_loop
  532 e269:             
  533 e269:             exe_relation_gt:
  534 e269: 04 e4 f4        jsr exe_next_token
  535 e26c: 04 e1 bc        jsr exe_expr
  536 e26f: 0f 67           movrr r7,r6
  537 e271:             ;
  538 e271:             ; r1 = r1 > r2
  539 e271:             ;
  540 e271: 0f 75           movrr  r5,r7
  541 e273: 04 ed 61        jsr parse_compare
  542 e276: 0d 01           ldti 01h
  543 e278: aa e2 81        BRNEQ exe_rel_ngt
  544 e27b: 1d 00 01        mviw r5,01h
  545 e27e: a0 e2 38        BR exe_relation_loop
  546 e281:             exe_rel_ngt:
  547 e281: 1d 00 00        mviw r5,00h
  548 e284: a0 e2 38        BR exe_relation_loop
  549 e287:             
  550 e287:             exe_relation_eq:
  551 e287: 04 e4 f4        jsr exe_next_token
  552 e28a: 04 e1 bc        jsr exe_expr
  553 e28d: 0f 67           movrr r7,r6
  554 e28f:             ;
  555 e28f:             ; r1 = r1 == r2
  556 e28f:             ;
  557 e28f: 0f 75           movrr  r5,r7
  558 e291: 04 ed 61        jsr parse_compare
  559 e294: a2 e2 9d        brnz exe_rel_ne
  560 e297: 1d 00 01        mviw r5,01h
  561 e29a: a0 e2 38        BR exe_relation_loop
  562 e29d:             exe_rel_ne:
  563 e29d: 1d 00 00        mviw r5,00h
  564 e2a0: a0 e2 38        BR exe_relation_loop
  565 e2a3:             
  566 e2a3:             exe_relation_done:
  567 e2a3: 0f 75           MOVRR r5,r7
  568 e2a5: 08 60           popr r6
  569 e2a7: 08 50           popr r5
  570 e2a9: 05              ret
  571 e2aa:             
  572 e2aa:             ;
  573 e2aa:             ; char * index_find (int linenum)
  574 e2aa:             ;
  575 e2aa:             ; call with line in R7
  576 e2aa:             ; return with val in R7 - tokenbuffer ptr
  577 e2aa:             ; THIS CAN BE REMOVED SINCE IT IS ONLY A SINGLE CALL
  578 e2aa:             ;
  579 e2aa:             exe_index_find:
  580 e2aa: 04 ec 8f        JSR basu_find
  581 e2ad: 05              RET
  582 e2ae:             
  583 e2ae:             ;
  584 e2ae:             ; void jump_linenum(linenum)
  585 e2ae:             ;
  586 e2ae:             ; Linenum in R7
  587 e2ae:             ;
  588 e2ae:             exe_jump_line:
  589 e2ae: 04 e2 aa        JSR exe_index_find
  590 e2b1: 2f              MVRHA R7
  591 e2b2: a2 e2 c5        BRNZ exe_jump_line1
  592 e2b5: 27              MVRLA R7
  593 e2b6: a2 e2 c5        BRNZ exe_jump_line1
  594 e2b9:             ;
  595 e2b9:             ; returned 0 line not found
  596 e2b9:             ;
  597 e2b9: 0e 24           LDAI TOKENIZER_CR
  598 e2bb: 04 e1 25        JSR exe_accept
  599 e2be: 1e 02 00        MVIW r6,bas_run_ended
  600 e2c1: 0e 01           LDAI 1
  601 e2c3: 4e              STAVR R6
  602 e2c4: 05              ret
  603 e2c5:             exe_jump_line1:
  604 e2c5:             ;   jsr tok_goto ; WHAT IS THIS
  605 e2c5: 0f 37           movrr r7,r3
  606 e2c7: 05              ret
  607 e2c8:             
  608 e2c8:             ;
  609 e2c8:             ; void goto_statement()
  610 e2c8:             ;
  611 e2c8:             exe_goto_stmt:
  612 e2c8: 0e 0d           LDAI TOKENIZER_GOTO
  613 e2ca: 04 e1 25        JSR exe_accept
  614 e2cd: 04 e1 bc        JSR exe_expr
  615 e2d0: 04 e2 ae        JSR exe_jump_line
  616 e2d3: 05              RET
  617 e2d4:             
  618 e2d4:             ;
  619 e2d4:             ; void print_statment()
  620 e2d4:             ;
  621 e2d4:             exe_print_stmt:
  622 e2d4: 0e 06           LDAI TOKENIZER_PRINT
  623 e2d6: 04 e1 25        jsr exe_accept
  624 e2d9:             
  625 e2d9:             exe_print_stmt_loop:
  626 e2d9: 43              LDAVR R3
  627 e2da: 0d 03           LDTI TOKENIZER_STRING
  628 e2dc: aa e2 eb        BRNEQ exe_print_stmt1
  629 e2df:             ;
  630 e2df:             ; this should return string to print in r2
  631 e2df:             ; exe_string may not be needed tokenbufferptr is at string ?
  632 e2df:             ;
  633 e2df: 0f 73           movrr r3,r7
  634 e2e1: 57              incr r7
  635 e2e2: 04 ff c0        jsr stringout
  636 e2e5: 04 e4 f4        jsr exe_next_token
  637 e2e8: a0 e3 1e        br exe_print_stmt_test
  638 e2eb:             
  639 e2eb:             exe_print_stmt1:
  640 e2eb: 0d 15           ldti TOKENIZER_COMMA
  641 e2ed: aa e2 fb        BRNEQ exe_print_stmt2
  642 e2f0: 0e 20           LDAI ' '
  643 e2f2: 04 ff c4        JSR charout
  644 e2f5: 04 e4 f4        jsr exe_next_token
  645 e2f8: a0 e3 1e        br exe_print_stmt_test
  646 e2fb:             
  647 e2fb:             exe_print_stmt2:
  648 e2fb: 0d 16           ldti TOKENIZER_SEMICOLON
  649 e2fd: aa e3 06        BRNEQ exe_print_stmt3
  650 e300: 04 e4 f4        jsr exe_next_token
  651 e303: a0 e3 1e        br exe_print_stmt_test
  652 e306:             
  653 e306:             exe_print_stmt3:
  654 e306: 0d 04           ldti TOKENIZER_VARIABLE
  655 e308: a8 e3 18        BREQ exe_print_stmt4
  656 e30b: 0d 02           ldti TOKENIZER_NUMBER
  657 e30d: a8 e3 18        breq exe_print_stmt4
  658 e310: 0d 1f           ldti  TOKENIZER_LEFTP
  659 e312: a8 e3 18        breq exe_print_stmt4
  660 e315:             
  661 e315: a0 e3 2c        br exe_print_stmt_done
  662 e318:             
  663 e318:             exe_print_stmt4:
  664 e318: 04 e1 bc        jsr exe_expr
  665 e31b:                 ;JSR showr7
  666 e31b: 04 e5 3b        jsr exe_itoa
  667 e31e:             
  668 e31e:             exe_print_stmt_test:
  669 e31e: 43              LDAVR R3
  670 e31f: 0d 24           LDTI TOKENIZER_CR
  671 e321: a8 e3 2c        breq exe_print_stmt_done
  672 e324: 0d 01           LDTI TOKENIZER_EOF
  673 e326: a8 e3 2c        breq exe_print_stmt_done
  674 e329: a0 e2 d9        br exe_print_stmt_loop
  675 e32c:             
  676 e32c:             exe_print_stmt_done:
  677 e32c: 1f ed 82        mviw R7,CRLF
  678 e32f: 04 ff c0        jsr stringout
  679 e332: 04 e4 f4        jsr exe_next_token
  680 e335: 05              ret
  681 e336:             
  682 e336:             ;
  683 e336:             ; void if_statement()
  684 e336:             ;
  685 e336:             exe_if_stmt:
  686 e336: 0e 07           LDAI TOKENIZER_IF
  687 e338: 04 e1 25        JSR exe_accept
  688 e33b:             
  689 e33b: 04 e2 2f        JSR exe_relation
  690 e33e: 27              MVRLA R7
  691 e33f: 09              push
  692 e340: 0e 08           LDAI TOKENIZER_THEN
  693 e342: 04 e1 25        JSR exe_accept
  694 e345: 0a              pop
  695 e346:             
  696 e346: 0d 01           LDTI 1
  697 e348: aa e3 4f        BRNEQ exe_if_stmt1
  698 e34b: 04 e4 26        JSR exe_stmt
  699 e34e: 05              ret
  700 e34f:             
  701 e34f:             exe_if_stmt1:
  702 e34f: 04 e4 f4        jsr exe_next_token
  703 e352: 43              LDAVR R3
  704 e353: 0d 24           LDTI TOKENIZER_CR
  705 e355: a8 e3 5e        BREQ EXE_IF_STMT2
  706 e358: 0d 01           LDTI TOKENIZER_EOF
  707 e35a: aa e3 4f        BRNEQ EXE_IF_STMT1
  708 e35d: 05              RET
  709 e35e:             
  710 e35e:             exe_if_stmt2:
  711 e35e: 04 e4 f4        JSR EXE_NEXT_TOKEN
  712 e361: 05              RET
  713 e362:             
  714 e362:             ;
  715 e362:             ; void let_statement()
  716 e362:             ;
  717 e362:             exe_let_stmt:
  718 e362: 04 e5 2d        jsr exe_variable_num
  719 e365: 37              mvarl r7
  720 e366: 0f 67           movrr r7,r6
  721 e368: 0e 04           ldai TOKENIZER_VARIABLE
  722 e36a: 04 e1 25        jsr exe_accept
  723 e36d: 0e 23           ldai TOKENIZER_EQ
  724 e36f: 04 e1 25        jsr exe_accept
  725 e372: 04 e1 bc        jsr exe_expr
  726 e375: 26              mvrla r6
  727 e376: 04 e4 dc        JSR exe_set_variable
  728 e379: 0e 24           ldai TOKENIZER_CR
  729 e37b: 04 e1 25        jsr exe_accept
  730 e37e: 05              ret
  731 e37f:             
  732 e37f:             ;
  733 e37f:             ; void gosub_statement()
  734 e37f:             ;
  735 e37f:             exe_gosub_stmt:
  736 e37f: 0e 0e           ldai TOKENIZER_GOSUB
  737 e381: 04 e1 25        jsr exe_accept
  738 e384: 04 e5 24        jsr exe_num
  739 e387: 0e 02           ldai TOKENIZER_NUMBER
  740 e389: 04 e1 25        jsr exe_accept
  741 e38c: 0e 24           ldai TOKENIZER_CR
  742 e38e: 04 e1 25        jsr exe_accept
  743 e391:             ;
  744 e391:             ; save current token buffer ptr to gosub stack
  745 e391:             ;
  746 e391: 23             mvrla r3
  747 e392: 4d             stavr r5
  748 e393: 55             incr r5
  749 e394: 2b             mvrha r3
  750 e395: 4d             stavr r5
  751 e396: 55             incr  r5
  752 e397:             ;
  753 e397:             ; write new gosub stack ptr location back
  754 e397:             ;
  755 e397: 04 e2 ae       JSR exe_jump_line
  756 e39a: 05             RET
  757 e39b:             
  758 e39b:             ;
  759 e39b:             ; void return_statment()
  760 e39b:             ;
  761 e39b:             exe_return_stmt:
  762 e39b: 0e 0f           ldai TOKENIZER_RETURN
  763 e39d: 04 e1 25        jsr exe_accept
  764 e3a0:             ;
  765 e3a0:             ; setup to use for storage area via R4
  766 e3a0:             ;
  767 e3a0: 5d             decr r5
  768 e3a1: 5d             decr r5
  769 e3a2:             
  770 e3a2: 45             ldavr r5
  771 e3a3: 33             mvarl r3
  772 e3a4: 55             incr r5
  773 e3a5: 45             ldavr r5
  774 e3a6: 3b             mvarh r3
  775 e3a7:             
  776 e3a7: 5d             decr r5
  777 e3a8: 05             ret
  778 e3a9:             
  779 e3a9:             ;
  780 e3a9:             ; void next_statement()
  781 e3a9:             ;
  782 e3a9:             exe_next_stmt:
  783 e3a9:             ;
  784 e3a9:             ; backup to the TO Value
  785 e3a9: 5c              decr r4
  786 e3aa: 5c              decr r4
  787 e3ab: 5c              decr r4
  788 e3ac: 5c              decr r4
  789 e3ad:             ;
  790 e3ad:             ; eat next
  791 e3ad:             ;
  792 e3ad: 0e 0c           ldai TOKENIZER_NEXT
  793 e3af: 04 e1 25        jsr exe_accept
  794 e3b2:             ;
  795 e3b2:             ; get variable id (in accumulator) and hold in r6 lo
  796 e3b2:             ;
  797 e3b2: 04 e5 2d        jsr exe_variable_num
  798 e3b5: 36              mvarl r6
  799 e3b6:             ;
  800 e3b6:             ; eat TOKENIZER_VARIABLE id
  801 e3b6:             ;
  802 e3b6: 0e 04           ldai TOKENIZER_VARIABLE
  803 e3b8: 04 e1 25        jsr exe_accept
  804 e3bb:             ;
  805 e3bb:             ; get variable value, inc by 1 and store - ADD STEP VALUE
  806 e3bb:             ;
  807 e3bb: 26              mvrla r6
  808 e3bc: 04 e4 e7        jsr exe_get_variable
  809 e3bf: 57              incr r7
  810 e3c0: 26              mvrla r6
  811 e3c1: 04 e4 dc        jsr exe_set_variable
  812 e3c4:             ;
  813 e3c4:             ; get TO value into R6
  814 e3c4: 44              ldavr r4
  815 e3c5: 36              mvarl r6
  816 e3c6: 54              incr r4
  817 e3c7: 44              ldavr r4
  818 e3c8: 3e              mvarh r6
  819 e3c9: 54              incr r4
  820 e3ca:             ;
  821 e3ca:             ; for now only compare low byte HACK use compare code
  822 e3ca:             ; r7=r6 00
  823 e3ca:             ; r7>r6 01
  824 e3ca:             ; r7<r6 ff
  825 e3ca:             ;
  826 e3ca: 04 ed 61         jsr parse_compare
  827 e3cd: 0d 01            ldti 01
  828 e3cf: a8 e3 d9         breq exe_next_done
  829 e3d2:             ;    mvrla r6
  830 e3d2:             ;    mvat
  831 e3d2:             ;    mvrla r7
  832 e3d2:             ;    brgt exe_next_done
  833 e3d2:             ;
  834 e3d2: 44              ldavr r4
  835 e3d3: 33              mvarl r3
  836 e3d4: 54              incr r4
  837 e3d5: 44              ldavr r4
  838 e3d6: 3b              mvarh r3
  839 e3d7: 54              incr r4
  840 e3d8: 05              ret
  841 e3d9:             
  842 e3d9:             exe_next_done:
  843 e3d9: 5c            decr r4
  844 e3da: 5c            decr r4
  845 e3db: 5c            decr r4
  846 e3dc: 5c            decr r4
  847 e3dd: 0e 24         ldai TOKENIZER_CR
  848 e3df: 04 e1 25      jsr exe_accept
  849 e3e2: 05            ret
  850 e3e3:             
  851 e3e3:             ;
  852 e3e3:             ; void for_statement()
  853 e3e3:             ;
  854 e3e3:             exe_for_stmt:
  855 e3e3:             ;
  856 e3e3:             ; setup to use for storage area via R4
  857 e3e3:             ;
  858 e3e3: 0e 0a           ldai TOKENIZER_FOR    ; eat FOR
  859 e3e5: 04 e1 25        jsr exe_accept
  860 e3e8:             ;
  861 e3e8:             ; get variable id (in accumulator) and hold in r6 lo
  862 e3e8:             ;
  863 e3e8: 04 e5 2d        jsr exe_variable_num
  864 e3eb: 36              mvarl r6
  865 e3ec:             ;
  866 e3ec:             ; store variable id in FOR storage - hack only lo byte, hi byte 0
  867 e3ec:             ;
  868 e3ec: 4c              stavr r4
  869 e3ed: 54              incr r4
  870 e3ee: 0e 00           ldai 0
  871 e3f0: 4c              stavr r4
  872 e3f1: 54              incr r4
  873 e3f2:             ;
  874 e3f2:             ; eat variable id and = then get starting value
  875 e3f2:             ;
  876 e3f2: 0e 04           ldai TOKENIZER_VARIABLE
  877 e3f4: 04 e1 25        jsr exe_accept
  878 e3f7: 0e 23           ldai TOKENIZER_EQ
  879 e3f9: 04 e1 25        jsr exe_accept
  880 e3fc: 04 e1 bc        jsr exe_expr
  881 e3ff:             ;
  882 e3ff:             ; set variable to starting value
  883 e3ff:             ;
  884 e3ff: 26              mvrla r6
  885 e400: 04 e4 dc        JSR exe_set_variable
  886 e403:             ;
  887 e403:             ; eat TO and get to value
  888 e403:             ;
  889 e403: 0e 0b           ldai TOKENIZER_TO
  890 e405: 04 e1 25        jsr exe_accept
  891 e408: 04 e1 bc        jsr exe_expr
  892 e40b:             ;
  893 e40b:             ; store to value in FOR storage area
  894 e40b:             ;
  895 e40b: 27              mvrla r7
  896 e40c: 4c              stavr r4
  897 e40d: 54              incr r4
  898 e40e: 2f              mvrha r7
  899 e40f: 4c              stavr r4
  900 e410: 54              incr r4
  901 e411:             ;
  902 e411:             ; EAT EOL
  903 e411:             ;
  904 e411: 0e 24           ldai TOKENIZER_CR
  905 e413: 04 e1 25        jsr exe_accept
  906 e416:             ;
  907 e416:             ; store ptr to instruction after FOR in for storage area
  908 e416:             ;
  909 e416: 23              mvrla r3
  910 e417: 4c              stavr r4
  911 e418: 54              incr r4
  912 e419: 2b              mvrha r3
  913 e41a: 4c              stavr r4
  914 e41b: 54              incr r4
  915 e41c:             ;
  916 e41c:             ;   save for stackptr
  917 e41c:             ;
  918 e41c: 05              ret
  919 e41d:             
  920 e41d:             ;
  921 e41d:             ; void peek_statment()
  922 e41d:             ;
  923 e41d:             ;peek_statement(void) {
  924 e41d:             ;    VARIABLE_TYPE peek_addr;
  925 e41d:             ;    int var;
  926 e41d:             ;
  927 e41d:             ;    accept(TOKENIZER_PEEK);
  928 e41d:             ;    peek_addr = expr();
  929 e41d:             ;    accept(TOKENIZER_COMMA);
  930 e41d:             ;    var = tokenizer_variable_num();
  931 e41d:             ;    accept(TOKENIZER_VARIABLE);
  932 e41d:             ;    accept(TOKENIZER_CR);
  933 e41d:             
  934 e41d:             ;    ubasic_set_variable(var, peek_function(peek_addr));
  935 e41d:             
  936 e41d:             exe_peek_stmt:
  937 e41d: 03              halt
  938 e41e:             
  939 e41e:             ;
  940 e41e:             ; void poke_statement()
  941 e41e:             ;
  942 e41e:             ;poke_statement(void) {
  943 e41e:             ;    VARIABLE_TYPE poke_addr;
  944 e41e:             ;    VARIABLE_TYPE value;
  945 e41e:             ;
  946 e41e:             ;    accept(TOKENIZER_POKE);
  947 e41e:             ;    poke_addr = expr();
  948 e41e:             ;    accept(TOKENIZER_COMMA);
  949 e41e:             ;    value = expr();
  950 e41e:             ;    accept(TOKENIZER_CR);
  951 e41e:             
  952 e41e:             ;    poke_function(poke_addr, value);
  953 e41e:             exe_poke_stmt:
  954 e41e: 03              halt
  955 e41f:             
  956 e41f:             ;
  957 e41f:             ; void end_statement()
  958 e41f:             ;
  959 e41f:             exe_end_stmt:
  960 e41f: 1e 02 00        mviw r6,bas_run_ended
  961 e422: 0e 01           LDAI 1
  962 e424: 4e              STAVR r6
  963 e425: 05              ret
  964 e426:             
  965 e426:             ;
  966 e426:             ; void statment()
  967 e426:             ;
  968 e426:             exe_stmt:
  969 e426: 43              LDAVR R3
  970 e427:             
  971 e427: 0d 06           LDTI TOKENIZER_PRINT
  972 e429: aa e4 30        BRNEQ exe_stmt1
  973 e42c: 04 e2 d4        JSR exe_print_stmt
  974 e42f: 05              ret
  975 e430:             
  976 e430:             exe_stmt1:
  977 e430: 0d 07           LDTI TOKENIZER_IF
  978 e432: aa e4 39        BRNEQ exe_stmt2
  979 e435: 04 e3 36        JSR exe_if_stmt
  980 e438: 05              ret
  981 e439:             
  982 e439:             exe_stmt2:
  983 e439: 0d 04           LDTI TOKENIZER_VARIABLE
  984 e43b: aa e4 42        BRNEQ exe_stmt3
  985 e43e: 04 e3 62        JSR exe_let_stmt
  986 e441: 05              ret
  987 e442:             
  988 e442:             exe_stmt3:
  989 e442: 0d 0e           LDTI TOKENIZER_GOSUB
  990 e444: aa e4 4b        BRNEQ exe_stmt4
  991 e447: 04 e3 7f        JSR exe_gosub_stmt
  992 e44a: 05              ret
  993 e44b:             
  994 e44b:             exe_stmt4:
  995 e44b: 0d 0f           LDTI TOKENIZER_RETURN
  996 e44d: aa e4 54        BRNEQ exe_stmt5
  997 e450: 04 e3 9b        JSR exe_return_stmt
  998 e453: 05              ret
  999 e454:             
 1000 e454:             exe_stmt5:
 1001 e454: 0d 0a           LDTI TOKENIZER_FOR
 1002 e456: aa e4 5d        BRNEQ exe_stmt6
 1003 e459: 04 e3 e3        JSR exe_for_stmt
 1004 e45c: 05              ret
 1005 e45d:             
 1006 e45d:             exe_stmt6:
 1007 e45d: 0d 12           LDTI TOKENIZER_PEEK
 1008 e45f: aa e4 66        BRNEQ exe_stmt7
 1009 e462: 04 e4 1d        JSR exe_peek_stmt
 1010 e465: 05              ret
 1011 e466:             
 1012 e466:             exe_stmt7:
 1013 e466: 0d 13           LDTI TOKENIZER_POKE
 1014 e468: aa e4 6f        BRNEQ exe_stmt8
 1015 e46b: 04 e4 1e        JSR exe_poke_stmt
 1016 e46e: 05              ret
 1017 e46f:             
 1018 e46f:             exe_stmt8:
 1019 e46f: 0d 0c           LDTI TOKENIZER_NEXT
 1020 e471: aa e4 78        BRNEQ exe_stmt9
 1021 e474: 04 e3 a9        JSR exe_next_stmt
 1022 e477: 05              ret
 1023 e478:             
 1024 e478:             exe_stmt9:
 1025 e478: 0d 14           LDTI TOKENIZER_END
 1026 e47a: aa e4 81        BRNEQ exe_stmt10
 1027 e47d: 04 e4 1f        JSR exe_end_stmt
 1028 e480: 05              ret
 1029 e481:             
 1030 e481:             exe_stmt10:
 1031 e481: 0d 05           LDTI TOKENIZER_LET
 1032 e483: aa e4 8f        BRNEQ exe_stmt11
 1033 e486: 0e 05           LDAI TOKENIZER_LET
 1034 e488: 04 e1 25        JSR exe_accept
 1035 e48b: 04 e3 62        JSR exe_let_stmt
 1036 e48e: 05              ret
 1037 e48f:             
 1038 e48f:             exe_stmt11:
 1039 e48f: 0d 0d           LDTI TOKENIZER_GOTO
 1040 e491: aa e4 98        BRNEQ exe_stmt12
 1041 e494: 04 e2 c8        JSR exe_goto_stmt
 1042 e497: 05              ret
 1043 e498:             
 1044 e498:             exe_stmt12:
 1045 e498: 04 ff e0        jsr showbytea
 1046 e49b: 0e 3d           ldai '='
 1047 e49d: 04 ff c8        jsr uartout
 1048 e4a0: 1f e0 ed        MVIW R7,bas_msg3
 1049 e4a3: 04 ff c0        jsr stringout
 1050 e4a6: 04 ff dc        JSR SHOWREGS
 1051 e4a9: 04 e4 f2        jsr bas_error
 1052 e4ac:             
 1053 e4ac:             ;
 1054 e4ac:             ; void line_statement (void)
 1055 e4ac:             ;
 1056 e4ac:             exe_line_stmt:
 1057 e4ac: 0e 25           LDAI TOKENIZER_LINENUM
 1058 e4ae: 04 e1 25        jsr exe_accept
 1059 e4b1: 04 e4 26        jsr exe_stmt
 1060 e4b4: 05              ret
 1061 e4b5:             
 1062 e4b5:             ;
 1063 e4b5:             ; void ubasic_run()
 1064 e4b5:             ;
 1065 e4b5:             basic_run:
 1066 e4b5: 04 e1 13        JSR exe_init
 1067 e4b8:             
 1068 e4b8:             exe_run:
 1069 e4b8: 04 e4 c7        jsr exe_finished
 1070 e4bb: 0d 01           LDTI 1
 1071 e4bd: aa e4 c1        BRNEQ exe_run_cont
 1072 e4c0: 05              ret
 1073 e4c1:             
 1074 e4c1:             exe_run_cont:
 1075 e4c1: 04 e4 ac        jsr exe_line_stmt
 1076 e4c4: a0 e4 b8        BR exe_run
 1077 e4c7:             
 1078 e4c7:             ;
 1079 e4c7:             ; int ubasic_finished()
 1080 e4c7:             ;
 1081 e4c7:             exe_finished:
 1082 e4c7: 1a 02 00        MVIW R2,bas_run_ended
 1083 e4ca: 42              LDAVR R2
 1084 e4cb: 0d 01           LDTI 1
 1085 e4cd: a8 e4 d9        BREQ exe_finished_yes
 1086 e4d0:             
 1087 e4d0: 43              ldavr r3
 1088 e4d1: 0d 01           ldti TOKENIZER_EOF
 1089 e4d3: a8 e4 d9        breq exe_finished_yes
 1090 e4d6: 0e 00           ldai 0
 1091 e4d8: 05              ret
 1092 e4d9:             
 1093 e4d9:             exe_finished_yes:
 1094 e4d9: 0e 01           LDAI 1
 1095 e4db: 05              ret
 1096 e4dc:             
 1097 e4dc:             ;
 1098 e4dc:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1099 e4dc:             ;
 1100 e4dc:             ; R7 value (only using low byte)
 1101 e4dc:             ; ACCUMULATOR Variable ref number
 1102 e4dc:             ;
 1103 e4dc:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1104 e4dc:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1105 e4dc:             ;
 1106 e4dc:             exe_set_variable:
 1107 e4dc: 1a 01 00        MVIW R2,BASIC_VARS  ; SEE COMMENT below about memory alignment
 1108 e4df: b6              SHL                 ; memory location x 2 (2 byte vars)
 1109 e4e0: 32              MVARL R2            ; change to add16 to remove align issue
 1110 e4e1:             ;
 1111 e4e1: 27              MVRLA R7
 1112 e4e2: 4a              STAVR R2
 1113 e4e3: 52              INCR r2
 1114 e4e4: 2f              mvrha r7
 1115 e4e5: 4a              stavr r2
 1116 e4e6:             
 1117 e4e6: 05              RET
 1118 e4e7:             ;
 1119 e4e7:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1120 e4e7:             ;
 1121 e4e7:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1122 e4e7:             ;
 1123 e4e7:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1124 e4e7:             ; and only 0-25 (var names a-z) supported
 1125 e4e7:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1126 e4e7:             ;
 1127 e4e7:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1128 e4e7:             ;
 1129 e4e7:             exe_get_variable:
 1130 e4e7: 1a 01 00        MVIW R2,BASIC_VARS
 1131 e4ea: b6              shl
 1132 e4eb: 32              MVARL R2
 1133 e4ec:             ;
 1134 e4ec: 42              LDAVR R2
 1135 e4ed: 37              MVARL R7
 1136 e4ee: 52              INCR R2
 1137 e4ef: 42              LDAVR R2
 1138 e4f0: 3f              MVARH R7
 1139 e4f1: 05              RET
 1140 e4f2:             
 1141 e4f2:             ;
 1142 e4f2:             ; hack this needs work
 1143 e4f2:             ;
 1144 e4f2:             bas_error:
 1145 e4f2: 03            HALT
 1146 e4f3: 05            RET
 1147 e4f4:             
 1148 e4f4:             ;
 1149 e4f4:             ; Tokenizer execute support code
 1150 e4f4:             ;
 1151 e4f4:             ; tokenizer_next - exe version
 1152 e4f4:             ;
 1153 e4f4:             exe_next_token:
 1154 e4f4: 43            ldavr r3
 1155 e4f5: 0d 02         ldti TOKENIZER_NUMBER
 1156 e4f7: aa e4 fe      BRNEQ exe_next_token1
 1157 e4fa: 53            incr r3
 1158 e4fb: 53            incr r3
 1159 e4fc: 53            incr r3
 1160 e4fd: 05            RET
 1161 e4fe:             
 1162 e4fe:             exe_next_token1:
 1163 e4fe: 0d 04         ldti TOKENIZER_VARIABLE
 1164 e500: aa e5 07      BRNEQ exe_next_token2
 1165 e503: 53            incr r3
 1166 e504: 53            incr r3
 1167 e505: 53            incr r3
 1168 e506: 05            RET
 1169 e507:             
 1170 e507:             exe_next_token2:
 1171 e507: 0d 25         ldti TOKENIZER_LINENUM
 1172 e509: aa e5 12      BRNEQ exe_next_token3
 1173 e50c: 53            incr r3
 1174 e50d: 53            incr r3
 1175 e50e: 53            incr r3
 1176 e50f: 53            incr r3
 1177 e510: 53            incr r3
 1178 e511: 05            RET
 1179 e512:             
 1180 e512:             exe_next_token3:
 1181 e512: 0d 03         ldti TOKENIZER_STRING
 1182 e514: aa e5 22      BRNEQ exe_next_token4
 1183 e517: 53            incr r3
 1184 e518:             
 1185 e518:             exe_next_tok3_loop:
 1186 e518: 43            LDAVR R3
 1187 e519: a1 e5 20      BRZ exe_next_tok3_done
 1188 e51c: 53            incr r3
 1189 e51d: a0 e5 18      BR exe_next_tok3_loop
 1190 e520:             
 1191 e520:             exe_next_tok3_done:
 1192 e520: 53            incr r3
 1193 e521: 05            RET
 1194 e522:             
 1195 e522:             exe_next_token4:
 1196 e522: 53            incr r3
 1197 e523: 05            ret
 1198 e524:             
 1199 e524:             ;
 1200 e524:             ; numbers stored low byte followed by high byte in memory
 1201 e524:             ;
 1202 e524:             exe_num:
 1203 e524: 53              incr r3
 1204 e525: 43              ldavr r3
 1205 e526: 37              mvarl r7
 1206 e527: 53              incr r3
 1207 e528: 43              ldavr r3
 1208 e529: 3f              mvarh r7
 1209 e52a: 5b              decr r3
 1210 e52b: 5b              decr r3
 1211 e52c: 05              ret
 1212 e52d:             
 1213 e52d:             ;
 1214 e52d:             ; hack only using low byte of id for now
 1215 e52d:             ; return in accumulator
 1216 e52d:             ;
 1217 e52d:             exe_variable_num:
 1218 e52d: 53              incr r3
 1219 e52e: 43              ldavr r3
 1220 e52f: 5b              decr r3
 1221 e530: 05              ret
 1222 e531:             
 1223 e531:             
 1224 e531:             ;
 1225 e531:             ; Convert number in r7 to ASCII
 1226 e531:             ;
 1227 e531:             ; for for negative numbers
 1228 e531:             ;
 1229 e531: 27 10 03 e8 
            00 64 00 0a 
            00 00       dividers: DW 02710h,03e8h,0064h,000Ah,0000h
 1230 e53b:             
 1231 e53b:             exe_itoa:
 1232 e53b: 09                push
 1233 e53c: 2f                mvrha r7
 1234 e53d: b3 80             andi 080h
 1235 e53f: a1 e5 4e          brz exe_itoa_pos
 1236 e542:             
 1237 e542: 2f                mvrha r7
 1238 e543: b5                inva
 1239 e544: 3f                mvarh r7
 1240 e545: 27                mvrla r7
 1241 e546: b5                inva
 1242 e547: 37                mvarl r7
 1243 e548: 57                incr r7
 1244 e549: 0e 2d             ldai '-'
 1245 e54b: 04 ff c4          jsr charout
 1246 e54e:             
 1247 e54e:             exe_itoa_pos:
 1248 e54e: 07 04             pushr r4    ; dividers ptr
 1249 e550: 07 05             pushr r5    ; value holder
 1250 e552: 1d 00 00          mviw r5,0
 1251 e555: 0e 01             ldai 1
 1252 e557: 3d                mvarh r5
 1253 e558: 07 06             pushr r6    ;
 1254 e55a: 1c e5 31          mviw  r4,dividers
 1255 e55d:             
 1256 e55d:             exe_itoa_loop:
 1257 e55d: 44                ldavr r4
 1258 e55e: 3e                mvarh r6
 1259 e55f: 54                incr r4
 1260 e560: 44                ldavr r4
 1261 e561: 36                mvarl r6
 1262 e562: 5c                decr r4
 1263 e563: 04 ed 61          jsr parse_compare
 1264 e566: 0d ff             ldti 0ffh
 1265 e568: a8 e5 75          breq exe_itoa_next
 1266 e56b: 0e 00             ldai 0
 1267 e56d: 3d                mvarh r5
 1268 e56e: 04 ed 14          jsr PARSE_SUB16
 1269 e571: 55                incr r5
 1270 e572: a0 e5 5d          br exe_itoa_loop
 1271 e575:             
 1272 e575:             exe_itoa_next:
 1273 e575: 2d                mvrha r5
 1274 e576: a2 e5 82          brnz exe_itoa_notyet
 1275 e579: 25                mvrla r5
 1276 e57a: b0 30             addi '0'
 1277 e57c: 04 ff c4          JSR charout
 1278 e57f: 0e 00             ldai 0
 1279 e581: 3d                mvarh r5
 1280 e582:             
 1281 e582:             exe_itoa_notyet:
 1282 e582: 0e 00             ldai 0
 1283 e584: 35                mvarl r5
 1284 e585: 54                incr r4
 1285 e586: 54                incr r4
 1286 e587: 44                ldavr r4
 1287 e588: a2 e5 5d          brnz exe_itoa_loop
 1288 e58b: 54                incr r4
 1289 e58c: 44                ldavr r4
 1290 e58d: 5c                decr r4
 1291 e58e: a2 e5 5d          brnz exe_itoa_loop
 1292 e591:             
 1293 e591:             ;      mvrha r5
 1294 e591:             ;      brz exe_itoa_noones
 1295 e591: 27                mvrla r7
 1296 e592: b0 30             addi '0'
 1297 e594: 04 ff c4          JSR charout
 1298 e597:             exe_itoa_noones:
 1299 e597: 08 60             popr r6
 1300 e599: 08 50             popr r5
 1301 e59b: 08 40             popr r4
 1302 e59d: 0a                pop
 1303 e59e: 05                RET
 1304 e59f:             
 1305 e59f:             
 1306 e59f:             
 1307 e59f:             ;
 1308 e59f:             ; List out token buffer in human readable form
 1309 e59f:             ;
 1310 e59f:             ; list out token buffer
 1311 e59f:             ; buffer address in r7
 1312 e59f:             ;
 1313 e59f: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1314 e5a4: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1315 e5ab: 49 46 20 00 tokl_if: DB "IF ",0
 1316 e5af: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1317 e5b5: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1318 e5bb: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1319 e5c0: 54 4f 20 00 tokl_to: DB "TO ",0
 1320 e5c4: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1321 e5ca: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1322 e5d0: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1323 e5d7: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1324 e5df: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1325 e5e4: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1326 e5ea: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1327 e5f0: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1328 e5f5: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1329 e5fb: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1330 e606:             
 1331 e606:             
 1332 e606:             basic_list:
 1333 e606: 07 03           pushr r3
 1334 e608: 0f 37           movrr r7,r3
 1335 e60a:             
 1336 e60a:             
 1337 e60a:             baslist_loop:
 1338 e60a: 43              ldavr r3
 1339 e60b:             
 1340 e60b: 0d 00           LDTI TOKENIZER_ERROR
 1341 e60d: aa e6 1f        BRNEQ baslist1
 1342 e610: 1f e5 fb        MVIW R7,tokl_error
 1343 e613: 04 ff c0        JSR stringout
 1344 e616: 04 ff cc        JSR showaddr
 1345 e619: a0 e8 b5        BR baslist_done
 1346 e61c: a0 e6 0a        BR baslist_loop
 1347 e61f:             
 1348 e61f:             baslist1:
 1349 e61f: 0d 01           LDTI TOKENIZER_EOF
 1350 e621: aa e6 2a        BRNEQ baslist2
 1351 e624: a0 e8 b5        BR baslist_done
 1352 e627: a0 e6 0a        BR baslist_loop
 1353 e62a:             
 1354 e62a:             baslist2:
 1355 e62a: 0d 02           LDTI TOKENIZER_NUMBER
 1356 e62c: aa e6 41        BRNEQ baslist3
 1357 e62f: 53              incr r3
 1358 e630: 43              ldavr r3
 1359 e631: 37              mvarl r7
 1360 e632: 53              incr r3
 1361 e633: 43              ldavr r3
 1362 e634: 3f              mvarh r7
 1363 e635: 53              INCR R3
 1364 e636:             ;    jsr showr7
 1365 e636: 04 e5 3b        jsr exe_itoa
 1366 e639: 0e 20           ldai ' '
 1367 e63b: 04 ff c8        jsr uartout
 1368 e63e: a0 e6 0a        BR baslist_loop
 1369 e641:             
 1370 e641:             baslist3:
 1371 e641: 0d 03           LDTI TOKENIZER_STRING
 1372 e643: aa e6 5d        BRNEQ baslist4
 1373 e646: 53              incr r3
 1374 e647: 0f 73           movrr r3,r7
 1375 e649: 04 ff c0        jsr stringout
 1376 e64c: 0e 20           ldai ' '
 1377 e64e: 04 ff c8        jsr uartout
 1378 e651:             baslist_string:
 1379 e651: 43              ldavr r3
 1380 e652: a1 e6 59        brz baslist_stringend
 1381 e655: 53              incr r3
 1382 e656: a0 e6 51        br baslist_string
 1383 e659:             baslist_stringend:
 1384 e659: 53              incr r3
 1385 e65a: a0 e6 0a        BR baslist_loop
 1386 e65d:             
 1387 e65d:             baslist4:
 1388 e65d: 0d 04           LDTI TOKENIZER_VARIABLE
 1389 e65f: aa e6 74        BRNEQ baslist5
 1390 e662: 53              incr r3
 1391 e663: 43              ldavr r3
 1392 e664: 0d 41           ldti 'A'
 1393 e666: b8              ADDT
 1394 e667: 53              incr r3
 1395 e668: 53              incr r3
 1396 e669: 04 ff c8        jsr uartout
 1397 e66c:             
 1398 e66c:             ;    ldavr r3
 1399 e66c:             ;    mvarl r7
 1400 e66c:             ;    incr r3
 1401 e66c:             ;    ldavr r3
 1402 e66c:             ;    mvarh r7
 1403 e66c:             ;    INCR R3
 1404 e66c:             ;    jsr showr7
 1405 e66c:             
 1406 e66c: 0e 20           ldai ' '
 1407 e66e: 04 ff c8        jsr uartout
 1408 e671: a0 e6 0a        BR baslist_loop
 1409 e674:             
 1410 e674:             baslist5:
 1411 e674: 0d 05           LDTI TOKENIZER_LET
 1412 e676: aa e6 83        BRNEQ baslist6
 1413 e679: 1f e5 9f        MVIW R7,tokl_let
 1414 e67c: 04 ff c0        JSR stringout
 1415 e67f: 53              INCR R3
 1416 e680: a0 e6 0a        BR baslist_loop
 1417 e683:             
 1418 e683:             baslist6:
 1419 e683: 0d 06           LDTI TOKENIZER_PRINT
 1420 e685: aa e6 92        BRNEQ baslist7
 1421 e688: 1f e5 a4        MVIW R7,tokl_print
 1422 e68b: 04 ff c0        jsr STRINGOUT
 1423 e68e: 53              INCR R3
 1424 e68f: a0 e6 0a        BR baslist_loop
 1425 e692:             
 1426 e692:             baslist7:
 1427 e692: 0d 07           LDTI TOKENIZER_IF
 1428 e694: aa e6 a1        BRNEQ baslist8
 1429 e697: 1f e5 ab        MVIW R7,tokl_if
 1430 e69a: 04 ff c0        JSR stringout
 1431 e69d: 53              INCR R3
 1432 e69e: a0 e6 0a        BR baslist_loop
 1433 e6a1:             
 1434 e6a1:             baslist8:
 1435 e6a1: 0d 08           LDTI TOKENIZER_THEN
 1436 e6a3: aa e6 b0        BRNEQ baslist9
 1437 e6a6: 1f e5 af        MVIW R7,tokl_then
 1438 e6a9: 04 ff c0        JSR stringout
 1439 e6ac: 53              INCR R3
 1440 e6ad: a0 e6 0a        BR baslist_loop
 1441 e6b0:             
 1442 e6b0:             baslist9:
 1443 e6b0: 0d 09           LDTI TOKENIZER_ELSE
 1444 e6b2: aa e6 bf        BRNEQ baslist10
 1445 e6b5: 1f e5 b5        MVIW R7,tokl_else
 1446 e6b8: 04 ff c0        JSR stringout
 1447 e6bb: 53              INCR R3
 1448 e6bc: a0 e6 0a        BR baslist_loop
 1449 e6bf:             
 1450 e6bf:             baslist10:
 1451 e6bf: 0d 0a           LDTI TOKENIZER_FOR
 1452 e6c1: aa e6 ce        BRNEQ baslist11
 1453 e6c4: 1f e5 bb        MVIW R7,tokl_for
 1454 e6c7: 04 ff c0        JSR stringout
 1455 e6ca: 53              INCR R3
 1456 e6cb: a0 e6 0a        BR baslist_loop
 1457 e6ce:             
 1458 e6ce:             baslist11:
 1459 e6ce: 0d 0b           LDTI TOKENIZER_TO
 1460 e6d0: aa e6 dd        BRNEQ baslist12
 1461 e6d3: 1f e5 c0        MVIW R7,tokl_to
 1462 e6d6: 04 ff c0        JSR stringout
 1463 e6d9: 53              INCR R3
 1464 e6da: a0 e6 0a        BR baslist_loop
 1465 e6dd:             
 1466 e6dd:             baslist12:
 1467 e6dd: 0d 0c           LDTI TOKENIZER_NEXT
 1468 e6df: aa e6 ec        BRNEQ baslist13
 1469 e6e2: 1f e5 c4        MVIW R7,tokl_next
 1470 e6e5: 04 ff c0        JSR stringout
 1471 e6e8: 53              INCR R3
 1472 e6e9: a0 e6 0a        BR baslist_loop
 1473 e6ec:             
 1474 e6ec:             baslist13:
 1475 e6ec: 0d 0d           LDTI TOKENIZER_GOTO
 1476 e6ee: aa e6 fb        BRNEQ baslist14
 1477 e6f1: 1f e5 ca        MVIW R7,tokl_goto
 1478 e6f4: 04 ff c0        JSR stringout
 1479 e6f7: 53              INCR R3
 1480 e6f8: a0 e6 0a        BR baslist_loop
 1481 e6fb:             
 1482 e6fb:             baslist14:
 1483 e6fb: 0d 0e           LDTI TOKENIZER_GOSUB
 1484 e6fd: aa e7 0a        BRNEQ baslist15
 1485 e700: 1f e5 d0        MVIW R7,tokl_gosub
 1486 e703: 04 ff c0        JSR stringout
 1487 e706: 53              INCR R3
 1488 e707: a0 e6 0a        BR baslist_loop
 1489 e70a:             
 1490 e70a:             baslist15:
 1491 e70a: 0d 0f           LDTI TOKENIZER_RETURN
 1492 e70c: aa e7 19        BRNEQ baslist16
 1493 e70f: 1f e5 d7        MVIW R7,tokl_return
 1494 e712: 04 ff c0        JSR stringout
 1495 e715: 53              INCR R3
 1496 e716: a0 e6 0a        BR baslist_loop
 1497 e719:             
 1498 e719:             baslist16:
 1499 e719: 0d 10           LDTI TOKENIZER_CALL
 1500 e71b: aa e7 28        BRNEQ baslist17
 1501 e71e: 1f e5 f5        MVIW R7,tokl_call
 1502 e721: 04 ff c0        JSR stringout
 1503 e724: 53              INCR R3
 1504 e725: a0 e6 0a        BR baslist_loop
 1505 e728:             
 1506 e728:             baslist17:
 1507 e728: 0d 11           LDTI TOKENIZER_REM
 1508 e72a: aa e7 37        BRNEQ baslist18
 1509 e72d: 1f e5 df        MVIW R7,tokl_rem
 1510 e730: 04 ff c0        JSR stringout
 1511 e733: 53              INCR R3
 1512 e734: a0 e6 0a        BR baslist_loop
 1513 e737:             
 1514 e737:             baslist18:
 1515 e737: 0d 12           LDTI TOKENIZER_PEEK
 1516 e739: aa e7 46        BRNEQ baslist19
 1517 e73c: 1f e5 e4        MVIW R7,tokl_peek
 1518 e73f: 04 ff c0        JSR stringout
 1519 e742: 53              INCR R3
 1520 e743: a0 e6 0a        BR baslist_loop
 1521 e746:             
 1522 e746:             baslist19:
 1523 e746: 0d 13           LDTI TOKENIZER_POKE
 1524 e748: aa e7 55        BRNEQ baslist20
 1525 e74b: 1f e5 ea        MVIW R7,tokl_poke
 1526 e74e: 04 ff c0        JSR stringout
 1527 e751: 53              INCR R3
 1528 e752: a0 e6 0a        BR baslist_loop
 1529 e755:             
 1530 e755:             baslist20:
 1531 e755: 0d 14           LDTI TOKENIZER_END
 1532 e757: aa e7 64        BRNEQ baslist21
 1533 e75a: 1f e5 f0        MVIW R7,tokl_end
 1534 e75d: 04 ff c0        JSR stringout
 1535 e760: 53              INCR R3
 1536 e761: a0 e6 0a        BR baslist_loop
 1537 e764:             
 1538 e764:             baslist21:
 1539 e764: 0d 15           LDTI TOKENIZER_COMMA
 1540 e766: aa e7 77        BRNEQ baslist22
 1541 e769: 0e 2c           ldai ','
 1542 e76b: 04 ff c8        jsr uartout
 1543 e76e: 0e 20           ldai ' '
 1544 e770: 04 ff c8        jsr uartout
 1545 e773: 53              INCR R3
 1546 e774: a0 e6 0a        BR baslist_loop
 1547 e777:             
 1548 e777:             baslist22:
 1549 e777: 0d 16           LDTI TOKENIZER_SEMICOLON
 1550 e779: aa e7 8a        BRNEQ baslist23
 1551 e77c: 0e 3b           ldai ';'
 1552 e77e: 04 ff c8        jsr uartout
 1553 e781: 0e 20           ldai ' '
 1554 e783: 04 ff c8        jsr uartout
 1555 e786: 53              INCR R3
 1556 e787: a0 e6 0a        BR baslist_loop
 1557 e78a:             
 1558 e78a:             baslist23:
 1559 e78a: 0d 17           LDTI TOKENIZER_PLUS
 1560 e78c: aa e7 9d        BRNEQ baslist24
 1561 e78f: 0e 2b           ldai '+'
 1562 e791: 04 ff c8        jsr uartout
 1563 e794: 0e 20           ldai ' '
 1564 e796: 04 ff c8        jsr uartout
 1565 e799: 53              INCR R3
 1566 e79a: a0 e6 0a        BR baslist_loop
 1567 e79d:             
 1568 e79d:             baslist24:
 1569 e79d: 0d 18           LDTI TOKENIZER_MINUS
 1570 e79f: aa e7 b0        BRNEQ baslist25
 1571 e7a2: 0e 2d           ldai '-'
 1572 e7a4: 04 ff c8        jsr uartout
 1573 e7a7: 0e 20           ldai ' '
 1574 e7a9: 04 ff c8        jsr uartout
 1575 e7ac: 53              INCR R3
 1576 e7ad: a0 e6 0a        BR baslist_loop
 1577 e7b0:             
 1578 e7b0:             baslist25:
 1579 e7b0: 0d 19           LDTI TOKENIZER_AND
 1580 e7b2: aa e7 c3        BRNEQ baslist26
 1581 e7b5: 0e 26           ldai '&'
 1582 e7b7: 04 ff c8        jsr uartout
 1583 e7ba: 0e 20           ldai ' '
 1584 e7bc: 04 ff c8        jsr uartout
 1585 e7bf: 53              INCR R3
 1586 e7c0: a0 e6 0a        BR baslist_loop
 1587 e7c3:             
 1588 e7c3:             baslist26:
 1589 e7c3: 0d 1a           LDTI TOKENIZER_OR
 1590 e7c5: aa e7 d6        BRNEQ baslist27
 1591 e7c8: 0e 7c           ldai '|'
 1592 e7ca: 04 ff c8        jsr uartout
 1593 e7cd: 0e 20           ldai ' '
 1594 e7cf: 04 ff c8        jsr uartout
 1595 e7d2: 53              INCR R3
 1596 e7d3: a0 e6 0a        BR baslist_loop
 1597 e7d6:             
 1598 e7d6:             baslist27:
 1599 e7d6: 0d 1b           LDTI TOKENIZER_ASTR
 1600 e7d8: aa e7 e9        BRNEQ baslist28
 1601 e7db: 0e 2a           ldai '*'
 1602 e7dd: 04 ff c8        jsr uartout
 1603 e7e0: 0e 20           ldai ' '
 1604 e7e2: 04 ff c8        jsr uartout
 1605 e7e5: 53              INCR R3
 1606 e7e6: a0 e6 0a        BR baslist_loop
 1607 e7e9:             
 1608 e7e9:             baslist28:
 1609 e7e9: 0d 1c           LDTI TOKENIZER_SLASH
 1610 e7eb: aa e7 fc        BRNEQ baslist29
 1611 e7ee: 0e 2f           ldai '/'
 1612 e7f0: 04 ff c8        jsr uartout
 1613 e7f3: 0e 20           ldai ' '
 1614 e7f5: 04 ff c8        jsr uartout
 1615 e7f8: 53              INCR R3
 1616 e7f9: a0 e6 0a        BR baslist_loop
 1617 e7fc:             
 1618 e7fc:             baslist29:
 1619 e7fc: 0d 1d           LDTI TOKENIZER_MOD
 1620 e7fe: aa e8 0f        BRNEQ baslist30
 1621 e801: 0e 25           ldai '%'
 1622 e803: 04 ff c8        jsr uartout
 1623 e806: 0e 20           ldai ' '
 1624 e808: 04 ff c8        jsr uartout
 1625 e80b: 53              INCR R3
 1626 e80c: a0 e6 0a        BR baslist_loop
 1627 e80f:             
 1628 e80f:             baslist30:
 1629 e80f: 0d 1e           LDTI TOKENIZER_HASH
 1630 e811: aa e8 22        BRNEQ baslist31
 1631 e814: 0e 23           ldai '#'
 1632 e816: 04 ff c8        jsr uartout
 1633 e819: 0e 20           ldai ' '
 1634 e81b: 04 ff c8        jsr uartout
 1635 e81e: 53              INCR R3
 1636 e81f: a0 e6 0a        BR baslist_loop
 1637 e822:             
 1638 e822:             baslist31:
 1639 e822: 0d 1f           LDTI TOKENIZER_LEFTP
 1640 e824: aa e8 35        BRNEQ baslist32
 1641 e827: 0e 28           ldai '()'
 1642 e829: 04 ff c8        jsr uartout
 1643 e82c: 0e 20           ldai ' '
 1644 e82e: 04 ff c8        jsr uartout
 1645 e831: 53              INCR R3
 1646 e832: a0 e6 0a        BR baslist_loop
 1647 e835:             
 1648 e835:             baslist32:
 1649 e835: 0d 20           LDTI TOKENIZER_RIGHTP
 1650 e837: aa e8 48        BRNEQ baslist33
 1651 e83a: 0e 29           ldai ')'
 1652 e83c: 04 ff c8        jsr uartout
 1653 e83f: 0e 20           ldai ' '
 1654 e841: 04 ff c8        jsr uartout
 1655 e844: 53              INCR R3
 1656 e845: a0 e6 0a        BR baslist_loop
 1657 e848:             
 1658 e848:             baslist33:
 1659 e848: 0d 21           LDTI TOKENIZER_LT
 1660 e84a: aa e8 5b        BRNEQ baslist34
 1661 e84d: 0e 3c           ldai '<'
 1662 e84f: 04 ff c8        jsr uartout
 1663 e852: 0e 20           ldai ' '
 1664 e854: 04 ff c8        jsr uartout
 1665 e857: 53              INCR R3
 1666 e858: a0 e6 0a        BR baslist_loop
 1667 e85b:             
 1668 e85b:             baslist34:
 1669 e85b: 0d 22           LDTI TOKENIZER_GT
 1670 e85d: aa e8 6e        BRNEQ baslist35
 1671 e860: 0e 3e           ldai '>'
 1672 e862: 04 ff c8        jsr uartout
 1673 e865: 0e 20           ldai ' '
 1674 e867: 04 ff c8        jsr uartout
 1675 e86a: 53              INCR R3
 1676 e86b: a0 e6 0a        BR baslist_loop
 1677 e86e:             
 1678 e86e:             baslist35:
 1679 e86e: 0d 23           LDTI TOKENIZER_EQ
 1680 e870: aa e8 81        BRNEQ baslist36
 1681 e873: 0e 3d           ldai '='
 1682 e875: 04 ff c8        jsr uartout
 1683 e878: 0e 20           ldai ' '
 1684 e87a: 04 ff c8        jsr uartout
 1685 e87d: 53              INCR R3
 1686 e87e: a0 e6 0a        BR baslist_loop
 1687 e881:             
 1688 e881:             baslist36:
 1689 e881: 0d 24           LDTI TOKENIZER_CR
 1690 e883: aa e8 90        BRNEQ baslist37
 1691 e886: 1f ed 82        mviw R7,CRLF
 1692 e889: 04 ff c0        jsr stringout
 1693 e88c: 53              INCR R3
 1694 e88d: a0 e6 0a        BR baslist_loop
 1695 e890:             
 1696 e890:             baslist37:
 1697 e890: 0d 25           LDTI TOKENIZER_LINENUM
 1698 e892: aa e8 a9        BRNEQ baslist38
 1699 e895: 53              incr r3
 1700 e896: 43              ldavr r3
 1701 e897: 37              mvarl r7
 1702 e898: 53              incr r3
 1703 e899: 43              ldavr r3
 1704 e89a: 3f              mvarh r7
 1705 e89b: 53              INCR R3
 1706 e89c: 53              incr r3
 1707 e89d: 53              incr r3
 1708 e89e: 04 e5 3b        jsr exe_itoa
 1709 e8a1:                 ;jsr showr7
 1710 e8a1: 0e 20           ldai ' '
 1711 e8a3: 04 ff c8        jsr uartout
 1712 e8a6: a0 e6 0a        BR baslist_loop
 1713 e8a9:             
 1714 e8a9:             baslist38:
 1715 e8a9: 1f e5 fb        MVIW R7,tokl_error
 1716 e8ac: 04 ff c0        JSR stringout
 1717 e8af: 04 ff cc        JSR showaddr
 1718 e8b2: a0 e8 b5        BR baslist_done
 1719 e8b5:             ;
 1720 e8b5:             ; any cleanup
 1721 e8b5:             ;
 1722 e8b5:             baslist_done:
 1723 e8b5: 08 30           popr r3
 1724 e8b7: 05              ret
 1725 e8b8:             
 1726 e8b8:             ;
 1727 e8b8:             ; Basic Interpreter Parser
 1728 e8b8:             ;
 1729 e8b8:             parse_keywords:
 1730 e8b8: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1731 e8bd: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1732 e8c4: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1733 e8c8: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1734 e8ce: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1735 e8d4: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1736 e8d9: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1737 e8dd: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1738 e8e3: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1739 e8e9: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1740 e8f0: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1741 e8f8: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1742 e8fe: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1743 e903: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1744 e909: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1745 e90f: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1746 e914: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1747 e917:             
 1748 e917:             ;
 1749 e917:             ; int singlechar (void)
 1750 e917:             ;
 1751 e917:             ; return TOKEN result in accumulator
 1752 e917:             ;
 1753 e917:             ; ready for testing
 1754 e917:             ;
 1755 e917:             parse_singlechar:
 1756 e917:             ;
 1757 e917: 07 03           pushr r3
 1758 e919: f3 02 02        LDR r3,bas_txtptr
 1759 e91c: 43              ldavr r3
 1760 e91d: 08 30           popr r3
 1761 e91f:             ;
 1762 e91f: 0d 0a           ldti 0ah
 1763 e921: aa e9 27        brneq parsechar1
 1764 e924: 0e 24           ldai TOKENIZER_CR
 1765 e926: 05              ret
 1766 e927:             parsechar1:
 1767 e927: 0d 2c           ldti ','
 1768 e929: aa e9 2f        brneq parsechar2
 1769 e92c: 0e 15           ldai TOKENIZER_COMMA
 1770 e92e: 05              ret
 1771 e92f:             parsechar2:
 1772 e92f: 0d 3b           ldti ';'
 1773 e931: aa e9 37        brneq parsechar3
 1774 e934: 0e 16           ldai TOKENIZER_SEMICOLON
 1775 e936: 05              ret
 1776 e937:             parsechar3:
 1777 e937: 0d 2b           ldti '+'
 1778 e939: aa e9 3f        brneq parsechar4
 1779 e93c: 0e 17           ldai TOKENIZER_PLUS
 1780 e93e: 05              ret
 1781 e93f:             parsechar4:
 1782 e93f: 0d 2d           ldti '-'
 1783 e941: aa e9 47        brneq parsechar5
 1784 e944: 0e 18           ldai TOKENIZER_MINUS
 1785 e946: 05              ret
 1786 e947:             parsechar5:
 1787 e947: 0d 26           ldti '&'
 1788 e949: aa e9 4f        brneq parsechar6
 1789 e94c: 0e 19           ldai TOKENIZER_AND
 1790 e94e: 05              ret
 1791 e94f:             parsechar6:
 1792 e94f: 0d 7c           ldti '|'
 1793 e951: aa e9 57        brneq parsechar7
 1794 e954: 0e 1a           ldai TOKENIZER_OR
 1795 e956: 05              ret
 1796 e957:             parsechar7:
 1797 e957: 0d 2a           ldti '*'
 1798 e959: aa e9 5f        brneq parsechar8
 1799 e95c: 0e 1b           ldai TOKENIZER_ASTR
 1800 e95e: 05              ret
 1801 e95f:             parsechar8:
 1802 e95f: 0d 25           ldti '%'
 1803 e961: aa e9 67        brneq parsechar9
 1804 e964: 0e 1d           ldai TOKENIZER_MOD
 1805 e966: 05              ret
 1806 e967:             parsechar9:
 1807 e967: 0d 28           ldti '('
 1808 e969: aa e9 6f        brneq parsechar10
 1809 e96c: 0e 1f           ldai TOKENIZER_LEFTP
 1810 e96e: 05              ret
 1811 e96f:             parsechar10:
 1812 e96f: 0d 23           ldti '#'
 1813 e971: aa e9 77        brneq parsechar11
 1814 e974: 0e 1e           ldai TOKENIZER_HASH
 1815 e976: 05              ret
 1816 e977:             parsechar11:
 1817 e977: 0d 29           ldti ')'
 1818 e979: aa e9 7f        brneq parsechar12
 1819 e97c: 0e 20           ldai TOKENIZER_RIGHTP
 1820 e97e: 05              ret
 1821 e97f:             parsechar12:
 1822 e97f: 0d 3c           ldti '<'
 1823 e981: aa e9 87        brneq parsechar13
 1824 e984: 0e 21           ldai TOKENIZER_LT
 1825 e986: 05              ret
 1826 e987:             parsechar13:
 1827 e987: 0d 3e           ldti '>'
 1828 e989: aa e9 8f        brneq parsechar14
 1829 e98c: 0e 22           ldai TOKENIZER_GT
 1830 e98e: 05              ret
 1831 e98f:             parsechar14:
 1832 e98f: 0d 3d           ldti '='
 1833 e991: aa e9 97        brneq parsechar15
 1834 e994: 0e 23           ldai TOKENIZER_EQ
 1835 e996: 05              ret
 1836 e997:             parsechar15:
 1837 e997: 0e 00           ldai 0
 1838 e999: 05              ret
 1839 e99a:             
 1840 e99a:             ;
 1841 e99a:             ; int get_next_token(void)
 1842 e99a:             ;
 1843 e99a:             ; under development fix ptr nextptr
 1844 e99a:             
 1845 e99a:             parse_get_next_tok:
 1846 e99a: 07 03           pushr r3
 1847 e99c: f3 02 02        LDR R3,bas_txtptr
 1848 e99f:             ;
 1849 e99f:             ; is digit
 1850 e99f:             ;
 1851 e99f:             ; chcek for number
 1852 e99f:             ;
 1853 e99f:             parse_gnt1:
 1854 e99f: 43              ldavr r3
 1855 e9a0: 04 ed 51        jsr parse_isdigit
 1856 e9a3: a1 e9 b6        brz parse_gnt2
 1857 e9a6:             parse_gnt1loop:
 1858 e9a6: 53              incr R3
 1859 e9a7: 43              ldavr r3
 1860 e9a8: 04 ed 51        jsr parse_isdigit
 1861 e9ab: a2 e9 a6        brnz parse_gnt1loop
 1862 e9ae: fb 02 04        STR r3,bas_nxtptr
 1863 e9b1: 0e 02           ldai TOKENIZER_NUMBER
 1864 e9b3: 08 30           popr r3
 1865 e9b5: 05              ret
 1866 e9b6:             ;
 1867 e9b6:             ; singlechar
 1868 e9b6:             ;
 1869 e9b6:             parse_gnt2:
 1870 e9b6: 43             ldavr r3
 1871 e9b7: 04 e9 17       jsr parse_singlechar
 1872 e9ba: a1 e9 c4       BRZ parse_gnt3
 1873 e9bd: 53             incr r3
 1874 e9be: fb 02 04       STR r3,bas_nxtptr
 1875 e9c1: 08 30          popr r3
 1876 e9c3: 05             ret
 1877 e9c4:             ;
 1878 e9c4:             ; quote
 1879 e9c4:             ;
 1880 e9c4:             parse_gnt3:
 1881 e9c4: 43              ldavr R3
 1882 e9c5: 0d 22           ldti '"'
 1883 e9c7: aa e9 da        brneq parse_gnt4
 1884 e9ca:             parse_gnt3loop:
 1885 e9ca: 53              incr r3
 1886 e9cb: 43              ldavr R3
 1887 e9cc: 0d 22           ldti '"'
 1888 e9ce: aa e9 ca        brneq parse_gnt3loop
 1889 e9d1: 53              incr r3
 1890 e9d2: fb 02 04        STR r3,bas_nxtptr
 1891 e9d5: 0e 03           ldai TOKENIZER_STRING
 1892 e9d7: 08 30           popr r3
 1893 e9d9: 05              ret
 1894 e9da:             ;
 1895 e9da:             parse_gnt4:
 1896 e9da:             ;
 1897 e9da:             ; keyword search
 1898 e9da:             ;
 1899 e9da: 07 04           pushr r4
 1900 e9dc: 1c e8 b8        mviw r4,parse_keywords
 1901 e9df:             top:
 1902 e9df: 44              ldavr r4
 1903 e9e0: f3 02 02        LDR r3,bas_txtptr
 1904 e9e3: a1 ea 07        brz nokeyowrdsfound
 1905 e9e6:             pcmploop:
 1906 e9e6: 44              ldavr r4
 1907 e9e7: a1 e9 fd        brz found
 1908 e9ea: 0b              MVAT
 1909 e9eb: 43              ldavr r3
 1910 e9ec: aa e9 f4        brneq skiptoend
 1911 e9ef: 54              incr r4
 1912 e9f0: 53              incr r3
 1913 e9f1: a0 e9 e6        br pcmploop
 1914 e9f4:             
 1915 e9f4:             skiptoend:
 1916 e9f4:             ;  skip to end of string and skip over token
 1917 e9f4:             skiploop:
 1918 e9f4: 44              ldavr r4
 1919 e9f5: 54              incr r4
 1920 e9f6: a2 e9 f4        brnz skiploop
 1921 e9f9: 54              incr r4
 1922 e9fa: a0 e9 df        br top
 1923 e9fd:             
 1924 e9fd:             found:
 1925 e9fd: fb 02 04        str r3,bas_nxtptr
 1926 ea00: 54              incr r4
 1927 ea01: 44              ldavr r4
 1928 ea02: 08 40           popr r4
 1929 ea04: 08 30           popr r3
 1930 ea06: 05              ret
 1931 ea07:             
 1932 ea07:             nokeyowrdsfound:
 1933 ea07: 08 40           popr r4
 1934 ea09:             ;
 1935 ea09:             ;  check for variables
 1936 ea09:             ;
 1937 ea09: 43              ldavr r3
 1938 ea0a: 0d 41           ldti 'A'
 1939 ea0c: a7 ea 1d        BRLT parse_gnt_error
 1940 ea0f: 0d 5a           ldti 'Z'
 1941 ea11: a9 ea 1d        BRGT parse_gnt_error
 1942 ea14: 53              INCR r3
 1943 ea15: fb 02 04        str r3,bas_nxtptr
 1944 ea18: 0e 04           LDAI tokenizer_variable
 1945 ea1a: 08 30           popr r3
 1946 ea1c: 05              RET
 1947 ea1d:             
 1948 ea1d:             parse_gnt_error:
 1949 ea1d: 03              halt
 1950 ea1e: 0e 00           ldai tokenizer_error
 1951 ea20: 08 30           popr r3
 1952 ea22: 05              ret
 1953 ea23:             
 1954 ea23:             ;
 1955 ea23:             ; void TOKENIZER_GOTO (char * program)
 1956 ea23:             ;
 1957 ea23:             ; under development, may not be needed
 1958 ea23:             ;
 1959 ea23:             ;parse_goto:
 1960 ea23:             ;    str r3,bas_txtptr
 1961 ea23:             ;    jsr parse_get_next_tok
 1962 ea23:             ;    sta bas_currenttoken
 1963 ea23:             ;    ret
 1964 ea23:             
 1965 ea23:             ;
 1966 ea23:             ; void tokenizer_init(int ptr)
 1967 ea23:             ;
 1968 ea23:             ; under development
 1969 ea23:             ;
 1970 ea23:             parse_init:
 1971 ea23:             
 1972 ea23: 07 03           pushr r3
 1973 ea25: ff 02 02        STR R7,bas_txtptr
 1974 ea28: 1b 04 00        MVIW r3,parse_token_buffer
 1975 ea2b: fb 02 06        STR  R3,bas_tokptr
 1976 ea2e: 1b 00 00        mviw r3,0
 1977 ea31: fb 02 08        str r3,bas_tokcounter
 1978 ea34: 04 e9 9a        jsr parse_get_next_tok
 1979 ea37: ed 02 0a        sta bas_currenttoken
 1980 ea3a: 08 30           popr r3
 1981 ea3c: 05              ret
 1982 ea3d:             
 1983 ea3d:             ;
 1984 ea3d:             ; int tokenizer_token(void)
 1985 ea3d:             :
 1986 ea3d:             parse_token:
 1987 ea3d: ec 02 0a        lda bas_currenttoken
 1988 ea40: 05              ret
 1989 ea41:             
 1990 ea41:             ;
 1991 ea41:             ; void tokenizer_next(void) parser version
 1992 ea41:             ;
 1993 ea41:             parse_next:
 1994 ea41: 04 eb 26        jsr parse_finished
 1995 ea44: a1 ea 48        brz parse_next1
 1996 ea47: 05              ret
 1997 ea48:             
 1998 ea48:             parse_next1:
 1999 ea48: 07 03           pushr r3
 2000 ea4a: f3 02 04        ldr r3,bas_nxtptr
 2001 ea4d: fb 02 02        str r3,bas_txtptr
 2002 ea50:             
 2003 ea50:             parse_next1loop:
 2004 ea50: 43              ldavr r3
 2005 ea51: 0d 20           ldti ' '
 2006 ea53: aa ea 5a        brneq parse_next2
 2007 ea56: 53              incr r3
 2008 ea57: a0 ea 50        br parse_next1loop
 2009 ea5a:             
 2010 ea5a:             
 2011 ea5a:             parse_next2:
 2012 ea5a: fb 02 02        str r3,bas_txtptr
 2013 ea5d: 04 e9 9a        jsr parse_get_next_tok
 2014 ea60: ed 02 0a        sta bas_currenttoken
 2015 ea63:             
 2016 ea63: 0d 11           ldti TOKENIZER_REM
 2017 ea65: a8 ea 6b        breq parse_next3
 2018 ea68: 08 30           popr r3
 2019 ea6a: 05              ret
 2020 ea6b:             
 2021 ea6b:             ;
 2022 ea6b:             ; this needs to be fixed
 2023 ea6b:             ; if rem return to parsel line then copy into token buffer
 2024 ea6b:             ;
 2025 ea6b:             parse_next3:
 2026 ea6b: 04 eb 26        JSR parse_finished
 2027 ea6e: a2 ea 7b        BRNZ parse_nextdone
 2028 ea71: 43              ldavr r3
 2029 ea72: 0d 0a           ldti  0ah
 2030 ea74: a8 ea 7b        breq parse_nextdone
 2031 ea77: 53              incr r3
 2032 ea78: a0 ea 6b        br parse_next3
 2033 ea7b:             
 2034 ea7b:             parse_nextdone:
 2035 ea7b: 43              ldavr r3
 2036 ea7c: 0d 0a           ldti  0ah
 2037 ea7e: aa ea 82        brneq parse_nextdone2
 2038 ea81: 53              incr r3
 2039 ea82:             
 2040 ea82:             parse_nextdone2:
 2041 ea82: fb 02 04        str r3,bas_nxtptr
 2042 ea85: 04 ea 41        jsr parse_next
 2043 ea88: 08 30           popr r3
 2044 ea8a: 05              ret
 2045 ea8b:             
 2046 ea8b:             ;
 2047 ea8b:             ; VARIABLE_TYPE tokenizer_num(void)
 2048 ea8b:             ;
 2049 ea8b:             ; Hack for now input characters are ascii hex format HHHH
 2050 ea8b:             ;
 2051 ea8b:             ; value returned in R7
 2052 ea8b:             ;
 2053 ea8b:             ; Should this advance the line ptr?
 2054 ea8b:             ;
 2055 ea8b:             
 2056 ea8b:             parse_num:
 2057 ea8b: 07 03           pushr r3
 2058 ea8d: 07 04           pushr r4
 2059 ea8f: 07 05           pushr r5
 2060 ea91: 07 06           pushr r6
 2061 ea93: 1e 00 00        mviw r6,0           ;accumlate val in r6
 2062 ea96: f3 02 02        LDR r3,bas_txtptr
 2063 ea99: 04 ea c7        jsr parse_num_char
 2064 ea9c:             ;   jsr SHOWBYTEA
 2065 ea9c: 36              mvarl r6
 2066 ea9d:             parse_num_loop:
 2067 ea9d: 04 ea c7        jsr parse_num_char
 2068 eaa0:             ;   jsr showbytea
 2069 eaa0: 09              push
 2070 eaa1: 0d ff           ldti 0FFH
 2071 eaa3: a8 ea bb        breq parse_num_done
 2072 eaa6:             
 2073 eaa6: 0f 56           movrr r6,r5
 2074 eaa8: 1c 00 0a        mviw r4,0ah
 2075 eaab: 04 ec cb        jsr parse_mul16
 2076 eaae:             ;    jsr showr7
 2077 eaae: 0a              pop
 2078 eaaf: 1e 00 00        mviw r6,0
 2079 eab2: 36              mvarl r6
 2080 eab3: 04 ed 06        jsr parse_add16
 2081 eab6: 0f 67           movrr r7,r6
 2082 eab8:             ;    jsr showr7
 2083 eab8: a0 ea 9d        br parse_num_loop
 2084 eabb:             parse_num_done:
 2085 eabb: 0a              pop
 2086 eabc: 0f 76           movrr r6,r7
 2087 eabe: 08 60           popr r6
 2088 eac0: 08 50           popr r5
 2089 eac2: 08 40           popr r4
 2090 eac4: 08 30           popr r3
 2091 eac6:             ;    jsr showr7
 2092 eac6: 05              ret
 2093 eac7:             
 2094 eac7:             parse_num_char:
 2095 eac7: 43              LDAVR R3
 2096 eac8: 04 ed 51        JSR parse_isdigit
 2097 eacb: a2 ea d1        BRNZ parse_num_char1
 2098 eace: 0e ff           ldai 0ffh
 2099 ead0: 05              ret
 2100 ead1:             parse_num_char1:
 2101 ead1: 43              ldavr r3
 2102 ead2: b1 30           SUBI '0'
 2103 ead4: 53              incr r3
 2104 ead5: 05              RET
 2105 ead6:             
 2106 ead6:             parse_num_old:
 2107 ead6: 07 03           pushr r3
 2108 ead8: f3 02 02        LDR r3,bas_txtptr
 2109 eadb: 04 eb 04        JSR parse_getnibble
 2110 eade: b6              SHL
 2111 eadf: b6              SHL
 2112 eae0: b6              SHL
 2113 eae1: b6              SHL
 2114 eae2: b3 f0           ANDI 0f0h
 2115 eae4: 09              Push
 2116 eae5: 04 eb 04        JSR parse_getnibble
 2117 eae8: b3 0f           ANDI 0FH
 2118 eaea: 0b              MVAT
 2119 eaeb: 0a              Pop
 2120 eaec: ba              ORT
 2121 eaed: 3f              MVARH R7
 2122 eaee:             
 2123 eaee: 04 eb 04        JSR parse_getnibble
 2124 eaf1: b6              SHL
 2125 eaf2: b6              shl
 2126 eaf3: b6              shl
 2127 eaf4: b6              shl
 2128 eaf5: b3 f0           ANDI 0f0h
 2129 eaf7: 09              push
 2130 eaf8: 04 eb 04        JSR parse_getnibble
 2131 eafb: b3 0f           ANDI 0FH
 2132 eafd: 0b              MVAT
 2133 eafe: 0a              pop
 2134 eaff: ba              ORT
 2135 eb00: 37              MVARL R7
 2136 eb01: 08 30           popr r3
 2137 eb03: 05              RET
 2138 eb04:             
 2139 eb04:             ;
 2140 eb04:             ; add error checking
 2141 eb04:             ;
 2142 eb04:             ; return hex nibble in accumulator
 2143 eb04:             ;
 2144 eb04:             parse_getnibble:
 2145 eb04: 43                LDAVR R3
 2146 eb05: 53                incr r3
 2147 eb06: 0d 39             LDTI '9'
 2148 eb08: a9 eb 0e          BRGT parse_af
 2149 eb0b: b1 30             SUBI '0'
 2150 eb0d: 05                RET
 2151 eb0e:             parse_af:
 2152 eb0e: 04 ff d0          JSR toupper
 2153 eb11: b1 41             SUBI 'A'
 2154 eb13: b0 0a             ADDI 10
 2155 eb15: 05                RET
 2156 eb16:             ;
 2157 eb16:             ; void tokenizer_string(char *dest, int len)
 2158 eb16:             ;
 2159 eb16:             ; not used, in line parse_line
 2160 eb16:             ;
 2161 eb16:             parse_string:
 2162 eb16: 04 ea 3d        JSR parse_token
 2163 eb19: 0d 03           LDTI TOKENIZER_STRING
 2164 eb1b: a8 eb 1f        BREQ parse_string1
 2165 eb1e: 05              ret
 2166 eb1f:             
 2167 eb1f:             parse_string1:
 2168 eb1f: 07 03           pushr r3
 2169 eb21: f3 02 02        LDR r3,bas_txtptr
 2170 eb24: 43              LDAVR R3
 2171 eb25:             
 2172 eb25:             
 2173 eb25:             ;
 2174 eb25:             ; void tokenizer_error_print(void)
 2175 eb25:             ;
 2176 eb25:             ; fix
 2177 eb25:             ;
 2178 eb25:             parse_error_print:
 2179 eb25: 03              halt
 2180 eb26:             
 2181 eb26:             ;
 2182 eb26:             ; int tokenizer_finished(void)
 2183 eb26:             ;
 2184 eb26:             parse_finished:
 2185 eb26: 07 03           pushr r3
 2186 eb28: f3 02 02        LDR r3,bas_txtptr
 2187 eb2b: 43              ldavr r3
 2188 eb2c: a1 eb 41        brz parse_finished_yes
 2189 eb2f:             ;    ldti 0ah
 2190 eb2f:             ;    breq parse_finished_yes
 2191 eb2f:             ;    ldti 0dh
 2192 eb2f:             ;    breq parse_finished_yes
 2193 eb2f: 0d 01           ldti TOKENIZER_EOF
 2194 eb31: a8 eb 41        breq parse_finished_yes
 2195 eb34: ec 02 0a        lda bas_currenttoken
 2196 eb37: 0d 01           ldti TOKENIZER_EOF
 2197 eb39: a8 eb 41        breq parse_finished_yes
 2198 eb3c: 08 30           popr r3
 2199 eb3e: 0e 00           ldai 0
 2200 eb40: 05              ret
 2201 eb41:             parse_finished_yes:
 2202 eb41: 0e 01           ldai 1
 2203 eb43: 08 30           popr r3
 2204 eb45: 05              ret
 2205 eb46:             
 2206 eb46:             ;
 2207 eb46:             ; int tokenizer_variable_num(void)
 2208 eb46:             ;
 2209 eb46:             parse_variable_num:
 2210 eb46: 07 03             pushr r3
 2211 eb48: f3 02 02          LDR r3,bas_txtptr
 2212 eb4b: 43                ldavr r3
 2213 eb4c: b1 41             subi 'A'
 2214 eb4e: 37                mvarl r7
 2215 eb4f: 0e 00             ldai 0
 2216 eb51: 3f                mvarh r7
 2217 eb52: 08 30             popr r3
 2218 eb54: 05                ret
 2219 eb55:             
 2220 eb55:             ;
 2221 eb55:             ; char *const tokenizer_pos(void)
 2222 eb55:             ;
 2223 eb55:             ; probably not used
 2224 eb55:             parse_pos:
 2225 eb55:             
 2226 eb55:             ;not used old
 2227 eb55:             ; char *tokenize(char *program)
 2228 eb55:             ;
 2229 eb55:             ; parse:
 2230 eb55:             
 2231 eb55:             ;
 2232 eb55:             ; char *tokenizeLine(char *line)
 2233 eb55:             ;
 2234 eb55:             ; assume input text string in parse_input_line
 2235 eb55:             ;
 2236 eb55:             
 2237 eb55:             parse_line:
 2238 eb55: 04 ea 23        JSR PARSE_INIT
 2239 eb58: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2240 eb5b: fb 02 08        str r3,bas_tokcounter
 2241 eb5e: 1b 04 00        MVIW R3,parse_token_buffer
 2242 eb61:             
 2243 eb61: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2244 eb63: 4b              STAVR R3
 2245 eb64: 53              INCR R3
 2246 eb65:             
 2247 eb65: 04 ea 8b        JSR parse_num           ;store line number
 2248 eb68: ff 02 10        str r7,bas_newlinenum
 2249 eb6b: 27              mvrla r7
 2250 eb6c: 4b              stavr r3
 2251 eb6d: 53              incr r3
 2252 eb6e: 2f              mvrha r7
 2253 eb6f: 4b              stavr r3
 2254 eb70: 53              incr r3
 2255 eb71:             
 2256 eb71: 53              incr r3                ; skip over line length - fill in later
 2257 eb72: 53              incr r3
 2258 eb73:             
 2259 eb73:             parse_line_loop:
 2260 eb73: 04 ea 41        JSR parse_next
 2261 eb76: 04 ea 3d        JSR parse_token
 2262 eb79: 0d 24           ldti TOKENIZER_CR
 2263 eb7b: a8 eb ea        BREQ parse_line_done
 2264 eb7e:             
 2265 eb7e: 4b              STAVR R3
 2266 eb7f: 53              INCR R3
 2267 eb80: f5 02 08        ldr r5,bas_tokcounter
 2268 eb83: 55              incr r5
 2269 eb84: fd 02 08        str r5,bas_tokcounter
 2270 eb87:             
 2271 eb87: 0d 02           ldti TOKENIZER_NUMBER
 2272 eb89: aa eb a0        BRNEQ parse_line1
 2273 eb8c: 04 ea 8b        JSR parse_num
 2274 eb8f: 27              mvrla r7
 2275 eb90: 4b              stavr r3
 2276 eb91: 53              incr r3
 2277 eb92: 2f              mvrha r7
 2278 eb93: 4b              stavr r3
 2279 eb94: 53              incr r3
 2280 eb95: f5 02 08        ldr r5,bas_tokcounter
 2281 eb98: 55              incr r5
 2282 eb99: 55              incr r5
 2283 eb9a: fd 02 08        str r5,bas_tokcounter
 2284 eb9d: a0 eb 73        BR parse_line_loop
 2285 eba0:             
 2286 eba0:             parse_line1:
 2287 eba0: 0d 03           ldti TOKENIZER_STRING
 2288 eba2: aa eb d1        BRNEQ parse_line2
 2289 eba5: f4 02 02        ldr r4,bas_txtptr
 2290 eba8: 54              incr r4                   ;skip over opening "
 2291 eba9:             
 2292 eba9:             parse_line1loop:
 2293 eba9: 44              ldavr r4
 2294 ebaa: 0d 22           ldti '"'
 2295 ebac: a8 eb bc        breq parse_line1done
 2296 ebaf: 4b              stavr r3
 2297 ebb0: 53              incr r3
 2298 ebb1: 54              incr r4
 2299 ebb2: f5 02 08        ldr r5,bas_tokcounter
 2300 ebb5: 55              incr r5
 2301 ebb6: fd 02 08        str r5,bas_tokcounter
 2302 ebb9: a0 eb a9        BR parse_line1loop
 2303 ebbc:             parse_line1done:
 2304 ebbc: 54              incr r4                   ;skip over closing "
 2305 ebbd: 0e 00           ldai 0                    ;add null into token buffer
 2306 ebbf: 4b              stavr R3
 2307 ebc0: 53              incr r3
 2308 ebc1: f5 02 08        ldr r5,bas_tokcounter
 2309 ebc4: 55              incr r5
 2310 ebc5: fd 02 08        str r5,bas_tokcounter
 2311 ebc8: fb 02 06        str r3,BAS_TOKPTR
 2312 ebcb: fc 02 02        str r4,bas_txtptr
 2313 ebce: a0 eb 73        BR parse_line_loop
 2314 ebd1:             
 2315 ebd1:             parse_line2:
 2316 ebd1: 0d 04           ldti TOKENIZER_VARIABLE
 2317 ebd3: aa eb 73        BRNEQ parse_line_loop
 2318 ebd6: 04 eb 46        JSR parse_variable_num
 2319 ebd9: 27              mvrla r7
 2320 ebda: 4b              stavr r3
 2321 ebdb: 53              incr r3
 2322 ebdc: 2f              mvrha r7
 2323 ebdd: 4b              stavr r3
 2324 ebde: 53              incr r3
 2325 ebdf: f5 02 08        ldr r5,bas_tokcounter
 2326 ebe2: 55              incr r5
 2327 ebe3: 55              incr r5
 2328 ebe4: fd 02 08        str r5,bas_tokcounter
 2329 ebe7: a0 eb 73        BR parse_line_loop
 2330 ebea:             
 2331 ebea:             parse_line_done:
 2332 ebea: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2333 ebec: 4b              STAVR R3
 2334 ebed: 53              INCR R3
 2335 ebee:             ;    ldr r5,bas_tokcounter
 2336 ebee:             ;    incr r5
 2337 ebee:             ;    str r5,bas_tokcounter
 2338 ebee:             
 2339 ebee: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2340 ebf1: 53              incr r3
 2341 ebf2: 53              incr r3
 2342 ebf3: 53              incr r3
 2343 ebf4: f7 02 08        ldr r7,bas_tokcounter
 2344 ebf7: ff 02 12        str r7,bas_newlinelen
 2345 ebfa: 27              mvrla r7
 2346 ebfb: 4b              stavr r3
 2347 ebfc: 53              incr r3
 2348 ebfd: 2f              mvrha r7
 2349 ebfe: 4b              stavr r3
 2350 ebff:             
 2351 ebff:             ;
 2352 ebff:             ; void addLine(char *buff)
 2353 ebff:             ; since addline is only called from parse_tokenizeline where are these
 2354 ebff:             ; values are know, pass them in or
 2355 ebff:             ; maybe merge addLine to bottom of parse_tokenizeline
 2356 ebff:             ;
 2357 ebff:             ; r7 points to line to insert
 2358 ebff:             ; r6 linenumber
 2359 ebff:             ; r5 linelength
 2360 ebff:             ;
 2361 ebff:             parse_addline:
 2362 ebff: f7 02 10          ldr r7,BAS_NEWLINENUM
 2363 ec02: 04 ec 67          JSR parse_removeline      ; if line number already exists delete it
 2364 ec05: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2365 ec08: 27                mvrla r7
 2366 ec09: 0d 06             ldti 6
 2367 ec0b: aa ec 0f          brneq parse_addline1
 2368 ec0e: 05                ret
 2369 ec0f:             
 2370 ec0f:             parse_addline1:                 ;find insert location
 2371 ec0f: f7 02 10          ldr r7,BAS_NEWLINENUM
 2372 ec12: f3 02 0c          ldr r3,bas_tokenBuffer
 2373 ec15:             
 2374 ec15:             parse_addlineloop:
 2375 ec15: fb 02 14          str r3,bas_insertptr
 2376 ec18: 43                ldavr r3
 2377 ec19: 0d 01             ldti TOKENIZER_EOF
 2378 ec1b: a8 ec 3e          BREQ parse_addroom
 2379 ec1e: 53                incr r3                   ;get line number of line in token buffer into r6
 2380 ec1f: 43                ldavr r3
 2381 ec20: 36                mvarl r6
 2382 ec21: 53                incr r3
 2383 ec22: 43                ldavr r3
 2384 ec23: 3e                mvarh r6
 2385 ec24: 04 ed 61          jsr parse_compare
 2386 ec27: 0d ff             ldti 0ffh
 2387 ec29: a8 ec 3e          breq parse_addroom
 2388 ec2c:             
 2389 ec2c: 53                incr r3                   ;get line length
 2390 ec2d: 43                ldavr r3
 2391 ec2e: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2392 ec31: 36                mvarl r6
 2393 ec32: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2394 ec33: 5e                decr r6
 2395 ec34: 5e                decr r6
 2396 ec35:             
 2397 ec35:             addline_moveptr:              ; advance pointer to next line
 2398 ec35: 53                incr r3
 2399 ec36: 5e                decr r6
 2400 ec37: 26                mvrla r6
 2401 ec38: a2 ec 35          brnz addline_moveptr
 2402 ec3b: a0 ec 15          br parse_addlineloop
 2403 ec3e:             
 2404 ec3e:             
 2405 ec3e:             parse_addroom:               ; make room
 2406 ec3e: 1f 20 00          mviw r7,BAS_TOK_BUF_END
 2407 ec41:             ;      decr r7
 2408 ec41: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2409 ec44: 04 ed 14          jsr parse_sub16
 2410 ec47: 1d 20 00          mviw r5,BAS_TOK_BUF_END
 2411 ec4a:             ;      decr r5
 2412 ec4a:             
 2413 ec4a:             parse_roomloop:
 2414 ec4a: 5f                decr r7
 2415 ec4b: 5d                decr r5
 2416 ec4c: 47                ldavr r7
 2417 ec4d: 4d                stavr r5
 2418 ec4e:             
 2419 ec4e: f6 02 14          ldr r6,bas_insertptr
 2420 ec51: 04 ed 61          jsr PARSE_COMPARE
 2421 ec54: a2 ec 4a          brnz parse_roomloop
 2422 ec57:             
 2423 ec57: f7 02 14          ldr r7,bas_insertptr
 2424 ec5a: 1e 04 00          MVIW R6,parse_token_buffer
 2425 ec5d:             
 2426 ec5d:             parse_insertloop:
 2427 ec5d: 46                ldavr r6
 2428 ec5e: 4f                stavr r7
 2429 ec5f: 56                incr r6
 2430 ec60: 57                incr r7
 2431 ec61: 0d 24             ldti 024h ; sub in actual eol token here
 2432 ec63: aa ec 5d          brneq parse_insertloop
 2433 ec66:             
 2434 ec66: 05                ret
 2435 ec67:             
 2436 ec67:             ;
 2437 ec67:             ; void removeLine(int lineNum)
 2438 ec67:             ;
 2439 ec67:             parse_removeline:
 2440 ec67: 04 ec 8f        JSR basu_find
 2441 ec6a: 2f              mvrha R7
 2442 ec6b: a2 ec 73        brnz parse_removeline1
 2443 ec6e: 27              mvrla R7
 2444 ec6f: a2 ec 73        brnz parse_removeline1
 2445 ec72: 05              ret
 2446 ec73:             parse_removeline1:
 2447 ec73: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2448 ec75: 57              incr r7
 2449 ec76: 57              incr r7
 2450 ec77: 57              incr r7
 2451 ec78: 47              ldavr r7
 2452 ec79: 36              mvarl r6        ; R6 = remove length
 2453 ec7a: 57              incr r7
 2454 ec7b: 47              ldavr r7
 2455 ec7c: 3e              mvarh r6
 2456 ec7d:             
 2457 ec7d: 5f              decr r7         ;backup to start of line
 2458 ec7e: 5f              decr r7
 2459 ec7f: 5f              decr r7
 2460 ec80: 5f              decr r7
 2461 ec81: 04 ed 06        JSR parse_add16
 2462 ec84:             parse_removeloop:
 2463 ec84: 47              ldavr r7
 2464 ec85: 4d              stavr r5
 2465 ec86: 55              incr r5
 2466 ec87: 57              incr r7
 2467 ec88: 2f              MVRHA r7
 2468 ec89:             
 2469 ec89: ee 02 0e        ldt  bas_bufferendhi
 2470 ec8c:             
 2471 ec8c: aa ec 84        brneq parse_removeloop
 2472 ec8f:             ;
 2473 ec8f:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2474 ec8f:             ; since we are moving complete contents of buffer
 2475 ec8f:             ; Make sure it is set during addline
 2476 ec8f:             ;
 2477 ec8f:             
 2478 ec8f:             
 2479 ec8f:             ; run & parse utilites
 2480 ec8f:             ;
 2481 ec8f:             
 2482 ec8f:             ;
 2483 ec8f:             ; find in the token buffer linenum in r7
 2484 ec8f:             ;
 2485 ec8f:             basu_find:
 2486 ec8f: 07 05           pushr r5                  ; save r5
 2487 ec91: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2488 ec94:             
 2489 ec94:             basu_find_loop:
 2490 ec94: 45              ldavr r5                  ;get token
 2491 ec95: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2492 ec97: aa ec a1        brneq basu_find_loop1     ;no continue
 2493 ec9a: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2494 ec9d: 27              mvrla r7
 2495 ec9e: 08 50           popr r5
 2496 eca0: 05              ret
 2497 eca1:             
 2498 eca1:             basu_find_loop1:
 2499 eca1: 55              incr r5                   ;skip past linenum token
 2500 eca2: 27              mvrla r7                  ;test low byte of linenum
 2501 eca3: 0b              MVAT
 2502 eca4: 45              ldavr r5
 2503 eca5: aa ec b8        brneq basu_find1          ;not eqaul
 2504 eca8: 55              incr r5
 2505 eca9: 2f              mvrha r7                  ;test high byte of linenum
 2506 ecaa: 0b              MVAT
 2507 ecab: 45              ldavr r5
 2508 ecac: aa ec b9        brneq basu_find2          ;not equal
 2509 ecaf: 5d              decr r5                   ;if equal backup to linenum token
 2510 ecb0: 5d              decr r5
 2511 ecb1: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2512 ecb3: 0e 01           ldai 1                    ;return 1 in accumulator
 2513 ecb5: 08 50           popr r5
 2514 ecb7: 05              ret
 2515 ecb8:             
 2516 ecb8:             basu_find1:
 2517 ecb8: 55              incr r5                   ;skip over linenum high byte
 2518 ecb9:             basu_find2:
 2519 ecb9: 55              incr r5                   ;get line length
 2520 ecba: 45              ldavr r5
 2521 ecbb: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2522 ecbe: 36              mvarl r6
 2523 ecbf: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2524 ecc0: 5e              decr r6
 2525 ecc1: 5e              decr r6
 2526 ecc2:             basu_find_moveptr:            ; advance pointer to next line
 2527 ecc2: 55              incr r5
 2528 ecc3: 5e              decr r6
 2529 ecc4: 26              mvrla r6
 2530 ecc5: a2 ec c2        brnz basu_find_moveptr
 2531 ecc8: a0 ec 94        br basu_find_loop
 2532 eccb:             
 2533 eccb:             
 2534 eccb:             ;
 2535 eccb:             ; Multiple numbers in R4 and R5
 2536 eccb:             ;
 2537 eccb:             ; Return in R7
 2538 eccb:             ;
 2539 eccb:             ; R6 = Bit counter
 2540 eccb:             ;
 2541 eccb:             parse_mul16:
 2542 eccb: 07 06               pushr r6
 2543 eccd:             
 2544 eccd: 1f 00 00            MVIW R7,0
 2545 ecd0: 1e 00 10            MVIW R6,10h
 2546 ecd3:             ;        jsr showregs
 2547 ecd3:             
 2548 ecd3:             parse_mulloop:
 2549 ecd3:             ;        jsr showregs
 2550 ecd3:             
 2551 ecd3: 25                  mvrla r5
 2552 ecd4: b3 01               andi  01h
 2553 ecd6: a1 ec dc            brz parse_mulskip
 2554 ecd9: 04 ec f8            jsr parse_muladd16
 2555 ecdc:             
 2556 ecdc:             parse_mulskip:
 2557 ecdc:             ;
 2558 ecdc:             ; clear carry flag HACK
 2559 ecdc:             ;
 2560 ecdc: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2561 ecde: e0                  cshl
 2562 ecdf: b0 00               addi 0      ; may not be needed
 2563 ece1:             ;
 2564 ece1: 24                  mvrla r4
 2565 ece2:             ;        jsr showcarry
 2566 ece2: e0                  cshl
 2567 ece3:             ;        jsr showcarry
 2568 ece3: 34                  mvarl r4
 2569 ece4: 2c                  mvrha r4
 2570 ece5:             ;        jsr showcarry
 2571 ece5: e0                  cshl
 2572 ece6:             ;        jsr showcarry
 2573 ece6: 3c                  mvarh r4
 2574 ece7:             
 2575 ece7: 0e 00               ldai 0      ;clear carry
 2576 ece9: e0                  cshl
 2577 ecea:             ;        addi 0
 2578 ecea:             
 2579 ecea: 2d                  mvrha r5
 2580 eceb: e1                  cshr
 2581 ecec: 3d                  mvarh r5
 2582 eced: 25                  mvrla r5
 2583 ecee: e1                  cshr
 2584 ecef: 35                  mvarl r5
 2585 ecf0:             
 2586 ecf0: 5e                  decr r6
 2587 ecf1: 26                  mvrla r6
 2588 ecf2: a2 ec d3            brnz parse_mulloop
 2589 ecf5: 08 60               popr r6
 2590 ecf7: 05                  ret
 2591 ecf8:             
 2592 ecf8:             parse_muladd16:
 2593 ecf8: 0e 00               ldai 0      ;clear carry
 2594 ecfa: e0                  cshl
 2595 ecfb:             
 2596 ecfb: 27                  MVRLA R7
 2597 ecfc: 0b                  MVAT
 2598 ecfd: 24                  mvrla r4
 2599 ecfe: b8                  ADDT
 2600 ecff: 37                  mvarl r7
 2601 ed00:             
 2602 ed00: 2f                  mvrha r7
 2603 ed01: 0b                  MVAT
 2604 ed02: 2c                  mvrha r4
 2605 ed03: e3                  addtc
 2606 ed04: 3f                  mvarh r7
 2607 ed05: 05                  ret
 2608 ed06:             
 2609 ed06:             ;
 2610 ed06:             ; 16 bit ADD r6 and r7, return result in r7
 2611 ed06:             ;
 2612 ed06:             parse_add16:
 2613 ed06:             
 2614 ed06: 0e 00             ldai 0      ;clear carry
 2615 ed08: e0                cshl
 2616 ed09: 26                MVRLA R6
 2617 ed0a: 0b                MVAT
 2618 ed0b: 27                mvrla r7
 2619 ed0c: b8                ADDT
 2620 ed0d: 37                mvarl r7
 2621 ed0e: 2e                mvrha r6
 2622 ed0f: 0b                MVAT
 2623 ed10: 2f                mvrha r7
 2624 ed11: e3                addtc
 2625 ed12: 3f                mvarh r7
 2626 ed13: 05                ret
 2627 ed14:             
 2628 ed14:             ;
 2629 ed14:             ; 16 bit SUB of r6 from r7, return result in r7
 2630 ed14:             ;
 2631 ed14:             parse_sub16:
 2632 ed14: 2e                mvrha r6
 2633 ed15: b5                inva
 2634 ed16: 3e                mvarh r6
 2635 ed17: 26                mvrla r6
 2636 ed18: b5                inva
 2637 ed19: 36                mvarl r6
 2638 ed1a: 56                incr r6
 2639 ed1b: a0 ed 06          br parse_add16
 2640 ed1e:             
 2641 ed1e:             ;
 2642 ed1e:             ; 16 bit AND r6 and r7, return result in r7
 2643 ed1e:             ;
 2644 ed1e:             parse_and16:
 2645 ed1e: 26                MVRLA R6
 2646 ed1f: 0b                MVAT
 2647 ed20: 27                mvrla r7
 2648 ed21: bb                ANDT
 2649 ed22: 37                mvarl r7
 2650 ed23: 2e                mvrha r6
 2651 ed24: 0b                MVAT
 2652 ed25: 2f                mvrha r7
 2653 ed26: bb                ANDT
 2654 ed27: 3f                mvarh r7
 2655 ed28: 05                ret
 2656 ed29:             
 2657 ed29:             ;
 2658 ed29:             ; 16 bit OR r6 and r7, return result in r7
 2659 ed29:             ;
 2660 ed29:             parse_or16:
 2661 ed29: 26                MVRLA R6
 2662 ed2a: 0b                MVAT
 2663 ed2b: 27                mvrla r7
 2664 ed2c: ba                ORT
 2665 ed2d: 37                mvarl r7
 2666 ed2e: 2e                mvrha r6
 2667 ed2f: 0b                MVAT
 2668 ed30: 2f                mvrha r7
 2669 ed31: ba                ORT
 2670 ed32: 3f                mvarh r7
 2671 ed33: 05                ret
 2672 ed34:             
 2673 ed34:             
 2674 ed34:             ;
 2675 ed34:             ; is digit in accumulator hex
 2676 ed34:             ; returns 1 if yes and 0 if no
 2677 ed34:             ;
 2678 ed34:             ; what about upper/lower case
 2679 ed34:             ;
 2680 ed34:             ; destroys tmp register
 2681 ed34:             parse_ishex:
 2682 ed34: 0d 30          ldti '0'
 2683 ed36: a7 ed 4e       brlt parse_ishex_no
 2684 ed39: 0d 39          ldti '9'
 2685 ed3b: a9 ed 41       brgt parse_ishex_af
 2686 ed3e: a0 ed 4b       br parse_ishex_yes
 2687 ed41:             
 2688 ed41:             parse_ishex_af:
 2689 ed41: 0d 41           ldti 'A'
 2690 ed43: a7 ed 4e        brlt parse_ishex_no
 2691 ed46: 0d 46           ldti 'F'
 2692 ed48: a9 ed 4e        brgt parse_ishex_no
 2693 ed4b:             
 2694 ed4b:             parse_ishex_yes:
 2695 ed4b: 0e 01           ldai 1
 2696 ed4d: 05              ret
 2697 ed4e:             
 2698 ed4e:             parse_ishex_no:
 2699 ed4e: 0e 00           ldai 0
 2700 ed50: 05              ret
 2701 ed51:             
 2702 ed51:             ;
 2703 ed51:             ; is digit in accumulator decimal
 2704 ed51:             ; returns 1 if yes and 0 if no
 2705 ed51:             ;
 2706 ed51:             ; destroys tmp register
 2707 ed51:             ;
 2708 ed51:             parse_isdigit:
 2709 ed51: 0d 30          ldti '0'
 2710 ed53: a7 ed 5e       brlt parse_isdigit_no
 2711 ed56: 0d 39          ldti '9'
 2712 ed58: a9 ed 5e       brgt parse_isdigit_no
 2713 ed5b:             
 2714 ed5b: 0e 01           ldai 1
 2715 ed5d: 05              ret
 2716 ed5e:             
 2717 ed5e:             parse_isdigit_no:
 2718 ed5e: 0e 00           ldai 0
 2719 ed60: 05              ret
 2720 ed61:             
 2721 ed61:             ;
 2722 ed61:             ; 16 bit compare r6 and r7
 2723 ed61:             ;
 2724 ed61:             ; returns in accumulator
 2725 ed61:             ; r7=r6 00
 2726 ed61:             ; r7>r6 01
 2727 ed61:             ; r7<r6 ff
 2728 ed61:             ;
 2729 ed61:             ; destory Tmp
 2730 ed61:             ;
 2731 ed61:             parse_compare:
 2732 ed61: 2e            mvrha r6
 2733 ed62: 0b            mvat
 2734 ed63: 2f            mvrha r7
 2735 ed64: aa ed 70      brneq parse_compareh
 2736 ed67: 26            mvrla r6
 2737 ed68: 0b            mvat
 2738 ed69: 27            mvrla r7
 2739 ed6a: aa ed 79      brneq parse_comparel
 2740 ed6d: 0e 00         ldai 0
 2741 ed6f: 05            ret
 2742 ed70:             
 2743 ed70:             parse_compareh:
 2744 ed70: a7 ed 76      brlt parse_compareh1
 2745 ed73: 0e 01         ldai 1
 2746 ed75: 05            ret
 2747 ed76:             parse_compareh1:
 2748 ed76: 0e ff         ldai 0ffh
 2749 ed78: 05            ret
 2750 ed79:             
 2751 ed79:             parse_comparel:
 2752 ed79: a7 ed 7f      brlt parse_comparel1
 2753 ed7c: 0e 01         ldai 1
 2754 ed7e: 05            ret
 2755 ed7f:             parse_comparel1:
 2756 ed7f: 0e ff         ldai 0ffh
 2757 ed81: 05            ret
 2758 ed82:             
 2759 ed82:             ;
 2760 ed82:             ; STRINGS
 2761 ed82:             ;
 2762 ed82: 0a 0d 00    CRLF: DB 0ah,0dh,0
 2763 ed85:             ;
 2764 ed85:             
 2765 ed85:                   ORG 0EE00h
 2766 ee00:             
 2767 ee00:             basic_test:
 2768 ee00:             
 2769 ee00:             ;    DB  25h,0ah,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h,24h,25h,14h,00h
 2770 ee00:             ;    DB  0ah,00h,06h,04h,00h,00h,24h,25h,1eh,00h,11h,00h,04h,00h,00h,23h
 2771 ee00:             ;    DB  04h,00h,00h,17h,02h,01h,00h,24h,25h,28h,00h,13h,00h,07h,04h,00h
 2772 ee00:             ;    DB  00h,21h,02h,0ah,00h,08h,0dh,02h,14h,00h,24h,01h,00h,00h,00h,00h
 2773 ee00:             
 2774 ee00:             ;    DB  25h,0ah,00h,14h,00h,06h,1fh,02h,01h,00h,17h,02h,02h,00h,20h,17h
 2775 ee00:             ;    DB  02h,03h,00h,24h,25h,14h,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h
 2776 ee00:             ;    DB  24h,25h,1eh,00h,0dh,00h,04h,01h,00h,23h,02h,02h,00h,24h,25h,28h
 2777 ee00:             ;    DB  00h,0eh,00h,06h,04h,00h,00h,17h,04h,01h,00h,24h,25h,32h,00h,15h
 2778 ee00:             ;    DB  00h,04h,02h,00h,23h,04h,00h,00h,17h,04h,01h,00h,17h,02h,05h,00h
 2779 ee00:             ;    DB  24h,25h,3ch,00h,0ah,00h,06h,04h,02h,00h,24h,01h,00h,00h,00h,00h
 2780 ee00:             
 2781 ee00: 25 0a 00 0e 
            00 06 03 68 
            65 6c 6c 6f 
            00 24 25 14     DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 2782 ee10: 00 0d 00 04 
            02 00 23 02 
            09 00 24 25 
            1e 00 0a 00     DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 2783 ee20: 06 04 02 00 
            24 25 28 00 
            0d 00 04 04 
            00 23 02 32     DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 2784 ee30: 00 24 25 32 
            00 17 00 06 
            03 68 32 00 
            15 04 02 00     DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 2785 ee40: 15 04 04 00 
            15 02 16 00 
            24 25 3c 00 
            12 00 0a 04     DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 2786 ee50: 03 00 23 02 
            01 00 0b 02 
            05 00 24 25 
            46 00 0a 00     DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 2787 ee60: 06 04 03 00 
            24 25 50 00 
            0a 00 0c 04 
            03 00 24 25     DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 2788 ee70: 51 00 12 00 
            06 03 6e 65 
            78 74 20 64 
            6f 6e 65 00     DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 2789 ee80: 24 25 52 00 
            0a 00 0e 02 
            6e 00 24 25 
            55 00 0a 00     DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 2790 ee90: 0d 02 7d 00 
            24 25 5a 00 
            12 00 06 03 
            6e 65 78 74     DB  0dh,02h,7dh,00h,24h,25h,5ah,0h,12h,00h,06h,03h,6eh,65h,78h,74h
 2791 eea0: 20 64 6f 6e 
            65 00 24 25 
            6e 00 11 00 
            06 03 69 6e     DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 2792 eeb0: 20 67 6f 73 
            75 62 00 24 
            25 70 00 11 
            00 06 03 69     DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 2793 eec0: 6e 20 73 75 
            62 20 32 00 
            24 25 72 00 
            07 00 0f 24     DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 2794 eed0: 25 7d 00 0c 
            00 06 03 65 
            6e 64 00 24 
            25 7e 00 07     DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 2795 eee0: 00 14 24 01 
            00 00 00 00 
            00 00 00 00 
            00 00 00 00     DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 2796 eef0:             
 2797 eef0:             ;
 2798 eef0:             ; The End
 2799 eef0:             ;
 2800 eef0:             ZZZZ:
 2801 eef0: 00            DB   0

ec35h: ADDLINE_MOVEPTR  - <  2397>   2401 
e606h: BASIC_LIST       - <  1332>    141 
e4b5h: BASIC_RUN        - <  1065>    149 
ee00h: BASIC_TEST       - <  2767>    190 
0100h: BASIC_VARS       - <    62>   1107   1130 
e61fh: BASLIST1         - <  1348>   1341 
e6bfh: BASLIST10        - <  1450>   1444 
e6ceh: BASLIST11        - <  1458>   1452 
e6ddh: BASLIST12        - <  1466>   1460 
e6ech: BASLIST13        - <  1474>   1468 
e6fbh: BASLIST14        - <  1482>   1476 
e70ah: BASLIST15        - <  1490>   1484 
e719h: BASLIST16        - <  1498>   1492 
e728h: BASLIST17        - <  1506>   1500 
e737h: BASLIST18        - <  1514>   1508 
e746h: BASLIST19        - <  1522>   1516 
e62ah: BASLIST2         - <  1354>   1350 
e755h: BASLIST20        - <  1530>   1524 
e764h: BASLIST21        - <  1538>   1532 
e777h: BASLIST22        - <  1548>   1540 
e78ah: BASLIST23        - <  1558>   1550 
e79dh: BASLIST24        - <  1568>   1560 
e7b0h: BASLIST25        - <  1578>   1570 
e7c3h: BASLIST26        - <  1588>   1580 
e7d6h: BASLIST27        - <  1598>   1590 
e7e9h: BASLIST28        - <  1608>   1600 
e7fch: BASLIST29        - <  1618>   1610 
e641h: BASLIST3         - <  1370>   1356 
e80fh: BASLIST30        - <  1628>   1620 
e822h: BASLIST31        - <  1638>   1630 
e835h: BASLIST32        - <  1648>   1640 
e848h: BASLIST33        - <  1658>   1650 
e85bh: BASLIST34        - <  1668>   1660 
e86eh: BASLIST35        - <  1678>   1670 
e881h: BASLIST36        - <  1688>   1680 
e890h: BASLIST37        - <  1696>   1690 
e8a9h: BASLIST38        - <  1714>   1698 
e65dh: BASLIST4         - <  1387>   1372 
e674h: BASLIST5         - <  1410>   1389 
e683h: BASLIST6         - <  1418>   1412 
e692h: BASLIST7         - <  1426>   1420 
e6a1h: BASLIST8         - <  1434>   1428 
e6b0h: BASLIST9         - <  1442>   1436 
e8b5h: BASLIST_DONE     - <  1722>   1345   1351   1718 
e60ah: BASLIST_LOOP     - <  1337>   1346   1352   1368   1385   1408   1416 
         1424   1432   1440   1448   1456   1464   1472   1480   1488   1496 
         1504   1512   1520   1528   1536   1546   1556   1566   1576   1586 
         1596   1606   1616   1626   1636   1646   1656   1666   1676   1686 
         1694   1712 
e651h: BASLIST_STRING   - <  1378>   1382 
e659h: BASLIST_STRINGEND - <  1383>   1380 
ec8fh: BASU_FIND        - <  2485>    580   2440 
ecb8h: BASU_FIND1       - <  2516>   2503 
ecb9h: BASU_FIND2       - <  2518>   2508 
ec94h: BASU_FIND_LOOP   - <  2489>   2531 
eca1h: BASU_FIND_LOOP1  - <  2498>   2492 
ecc2h: BASU_FIND_MOVEPTR - <  2526>   2530 
020eh: BAS_BUFFERENDHI  - <    74>    164   2469 
e069h: BAS_COPYLOOP     - <   193>    200    202 
020ah: BAS_CURRENTTOKEN - <    72>   1979   1987   2014   2195 
e4f2h: BAS_ERROR        - <  1144>    295   1051 
0282h: BAS_FORSTACK     - <    94>    265 
0280h: BAS_FORSTACKPTR  - <    93> 
02c0h: BAS_GOSUBPTR     - <   103> 
02c2h: BAS_GOSUBSTACK   - <   104>    264 
0214h: BAS_INSERTPTR    - <    81>   2375   2419   2423 
e0c0h: BAS_MSG1         - <   240>    294 
e0dch: BAS_MSG2         - <   241> 
e0edh: BAS_MSG3         - <   242>   1048 
0212h: BAS_NEWLINELEN   - <    80>   2344   2364   2408 
0210h: BAS_NEWLINENUM   - <    79>   2248   2362   2371 
0204h: BAS_NXTPTR       - <    69>   1862   1874   1890   1925   1943   2000 
         2041 
0200h: BAS_RUN_ENDED    - <    67>    266    599    960   1082 
0208h: BAS_TOKCOUNTER   - <    71>   1977   2240   2267   2269   2280   2283 
         2299   2301   2308   2310   2325   2328   2343 
020ch: BAS_TOKENBUFFER  - <    73>    140    162    269   2372   2487 
0206h: BAS_TOKPTR       - <    70>   1975   2311 
2000h: BAS_TOK_BUF_END  - <   121>    163   2406   2410 
1000h: BAS_TOK_BUF_START - <   117>    159    189 
0202h: BAS_TXTPTR       - <    68>   1758   1847   1903   1973   2001   2012 
         2062   2108   2169   2186   2211   2289   2312 
e077h: BIGTEST          - <   205>    172 
ffc4h: CHAROUT          - <     5>    643   1245   1277   1297 
ed82h: CRLF             - <  2762>    208    213    218    223    228    233 
          677   1691 
e531h: DIVIDERS         - <  1229>   1254 
e125h: EXE_ACCEPT       - <   279>    318    332    338    341    598    613 
          623    687    693    722    724    729    737    740    742    763 
          793    803    848    859    877    879    890    905   1034   1058 
e13ah: EXE_ACCEPT_DONE  - <   297>    287 
e41fh: EXE_END_STMT     - <   959>   1027 
e1bch: EXE_EXPR         - <   416>    339    502    518    535    552    614 
          664    725    880    891 
e201h: EXE_EXPR_AND     - <   460>    430 
e228h: EXE_EXPR_DONE    - <   485>    434 
e1c5h: EXE_EXPR_LOOP    - <   423>    446    458    470    482    483 
e1efh: EXE_EXPR_MINUS   - <   448>    428 
e213h: EXE_EXPR_OR      - <   472>    432 
e1ddh: EXE_EXPR_PLUS    - <   436>    426 
e14ah: EXE_FACTOR       - <   325>    358    373    387    396 
e158h: EXE_FACTOR1      - <   335>    329 
e169h: EXE_FACTOR2      - <   344>    337 
e4c7h: EXE_FINISHED     - <  1081>   1069 
e4d9h: EXE_FINISHED_YES - <  1093>   1085   1089 
e3e3h: EXE_FOR_STMT     - <   854>   1003 
e4e7h: EXE_GET_VARIABLE - <  1129>    316    808 
e37fh: EXE_GOSUB_STMT   - <   735>    991 
e2c8h: EXE_GOTO_STMT    - <   611>   1041 
e336h: EXE_IF_STMT      - <   685>    979 
e34fh: EXE_IF_STMT1     - <   701>    697    707 
e35eh: EXE_IF_STMT2     - <   710>    705 
e2aah: EXE_INDEX_FIND   - <   579>    589 
e113h: EXE_INIT         - <   262>   1066 
e53bh: EXE_ITOA         - <  1231>    207    212    217    222    227    232 
          666   1365   1708 
e55dh: EXE_ITOA_LOOP    - <  1256>   1270   1287   1291 
e575h: EXE_ITOA_NEXT    - <  1272>   1265 
e597h: EXE_ITOA_NOONES  - <  1298> 
e582h: EXE_ITOA_NOTYET  - <  1281>   1274 
e54eh: EXE_ITOA_POS     - <  1247>   1235 
e2aeh: EXE_JUMP_LINE    - <   588>    615    755 
e2c5h: EXE_JUMP_LINE1   - <   603>    591    593 
e362h: EXE_LET_STMT     - <   717>    985   1035 
e4ach: EXE_LINE_STMT    - <  1056>   1075 
e3d9h: EXE_NEXT_DONE    - <   842>    828 
e3a9h: EXE_NEXT_STMT    - <   782>   1021 
e520h: EXE_NEXT_TOK3_DONE - <  1191>   1187 
e518h: EXE_NEXT_TOK3_LOOP - <  1185>   1189 
e4f4h: EXE_NEXT_TOKEN   - <  1153>    298    372    386    395    437    449 
          461    473    517    534    551    636    644    650    679    702 
          711 
e4feh: EXE_NEXT_TOKEN1  - <  1162>   1156 
e507h: EXE_NEXT_TOKEN2  - <  1170>   1164 
e512h: EXE_NEXT_TOKEN3  - <  1180>   1172 
e522h: EXE_NEXT_TOKEN4  - <  1195>   1182 
e524h: EXE_NUM          - <  1202>    330    738 
e41dh: EXE_PEEK_STMT    - <   936>   1009 
e41eh: EXE_POKE_STMT    - <   953>   1015 
e2d4h: EXE_PRINT_STMT   - <   621>    973 
e2ebh: EXE_PRINT_STMT1  - <   639>    628 
e2fbh: EXE_PRINT_STMT2  - <   647>    641 
e306h: EXE_PRINT_STMT3  - <   653>    649 
e318h: EXE_PRINT_STMT4  - <   663>    655    657    659 
e32ch: EXE_PRINT_STMT_DONE - <   676>    661    671    673 
e2d9h: EXE_PRINT_STMT_LOOP - <   625>    674 
e31eh: EXE_PRINT_STMT_TEST - <   668>    637    645    651 
e22fh: EXE_RELATION     - <   498>    689 
e2a3h: EXE_RELATION_DONE - <   566>    514 
e287h: EXE_RELATION_EQ  - <   550>    512 
e269h: EXE_RELATION_GT  - <   533>    510 
e238h: EXE_RELATION_LOOP - <   505>    528    531    545    548    561    564 
e24bh: EXE_RELATION_LT  - <   516>    508 
e29dh: EXE_REL_NE       - <   562>    559 
e281h: EXE_REL_NGT      - <   546>    543 
e263h: EXE_REL_NLT      - <   529>    526 
e39bh: EXE_RETURN_STMT  - <   761>    997 
e4b8h: EXE_RUN          - <  1068>   1076 
e4c1h: EXE_RUN_CONT     - <  1074>   1071 
e4dch: EXE_SET_VARIABLE - <  1106>    727    811    885 
e426h: EXE_STMT         - <   968>    698   1059 
e430h: EXE_STMT1        - <   976>    972 
e481h: EXE_STMT10       - <  1030>   1026 
e48fh: EXE_STMT11       - <  1038>   1032 
e498h: EXE_STMT12       - <  1044>   1040 
e439h: EXE_STMT2        - <   982>    978 
e442h: EXE_STMT3        - <   988>    984 
e44bh: EXE_STMT4        - <   994>    990 
e454h: EXE_STMT5        - <  1000>    996 
e45dh: EXE_STMT6        - <  1006>   1002 
e466h: EXE_STMT7        - <  1012>   1008 
e46fh: EXE_STMT8        - <  1018>   1014 
e478h: EXE_STMT9        - <  1024>   1020 
e109h: EXE_STMT_MSG     - <   243> 
e16dh: EXE_TERM         - <   354>    420    438    450    462    474 
e189h: EXE_TERM_ASTR    - <   371>    364 
e1b5h: EXE_TERM_DONE    - <   403>    369 
e176h: EXE_TERM_LOOP    - <   361>    383    392    401 
e1aah: EXE_TERM_MOD     - <   394>    368 
e19fh: EXE_TERM_SLASH   - <   385>    366 
e13eh: EXE_VARFACTOR    - <   310>    345 
e52dh: EXE_VARIABLE_NUM - <  1217>    311    718    797    863 
e9fdh: FOUND            - <  1924>   1907 
ea07h: NOKEYOWRDSFOUND  - <  1932>   1904 
e927h: PARSECHAR1       - <  1766>   1763 
e96fh: PARSECHAR10      - <  1811>   1808 
e977h: PARSECHAR11      - <  1816>   1813 
e97fh: PARSECHAR12      - <  1821>   1818 
e987h: PARSECHAR13      - <  1826>   1823 
e98fh: PARSECHAR14      - <  1831>   1828 
e997h: PARSECHAR15      - <  1836>   1833 
e92fh: PARSECHAR2       - <  1771>   1768 
e937h: PARSECHAR3       - <  1776>   1773 
e93fh: PARSECHAR4       - <  1781>   1778 
e947h: PARSECHAR5       - <  1786>   1783 
e94fh: PARSECHAR6       - <  1791>   1788 
e957h: PARSECHAR7       - <  1796>   1793 
e95fh: PARSECHAR8       - <  1801>   1798 
e967h: PARSECHAR9       - <  1806>   1803 
ed06h: PARSE_ADD16      - <  2612>    444   2080   2461   2639 
ebffh: PARSE_ADDLINE    - <  2361> 
ec0fh: PARSE_ADDLINE1   - <  2370>   2367 
ec15h: PARSE_ADDLINELOOP - <  2374>   2402 
ec3eh: PARSE_ADDROOM    - <  2405>   2378   2387 
eb0eh: PARSE_AF         - <  2151>   2148 
ed1eh: PARSE_AND16      - <  2644>    468 
ed61h: PARSE_COMPARE    - <  2731>    524    541    558    826   1263   2385 
         2420 
ed70h: PARSE_COMPAREH   - <  2743>   2735 
ed76h: PARSE_COMPAREH1  - <  2747>   2744 
ed79h: PARSE_COMPAREL   - <  2751>   2739 
ed7fh: PARSE_COMPAREL1  - <  2755>   2752   2752 
eb25h: PARSE_ERROR_PRINT - <  2178> 
eb26h: PARSE_FINISHED   - <  2184>   1994   2026 
eb41h: PARSE_FINISHED_YES - <  2201>   2188   2194   2197 
eb04h: PARSE_GETNIBBLE  - <  2144>   2109   2116   2123   2130 
e99ah: PARSE_GET_NEXT_TOK - <  1845>   1978   2013 
e99fh: PARSE_GNT1       - <  1853> 
e9a6h: PARSE_GNT1LOOP   - <  1857>   1861 
e9b6h: PARSE_GNT2       - <  1869>   1856 
e9c4h: PARSE_GNT3       - <  1880>   1872 
e9cah: PARSE_GNT3LOOP   - <  1884>   1888 
e9dah: PARSE_GNT4       - <  1895>   1883 
ea1dh: PARSE_GNT_ERROR  - <  1948>   1939   1941 
ea23h: PARSE_INIT       - <  1970>   2238 
0300h: PARSE_INPUT_LINE - <   109> 
ec5dh: PARSE_INSERTLOOP - <  2426>   2432 
ed51h: PARSE_ISDIGIT    - <  2708>   1855   1860   2096 
ed5eh: PARSE_ISDIGIT_NO - <  2717>   2710   2712 
ed34h: PARSE_ISHEX      - <  2681> 
ed41h: PARSE_ISHEX_AF   - <  2688>   2685 
ed4eh: PARSE_ISHEX_NO   - <  2698>   2683   2690   2692 
ed4bh: PARSE_ISHEX_YES  - <  2694>   2686 
e8b8h: PARSE_KEYWORDS   - <  1729>   1900 
eb55h: PARSE_LINE       - <  2237>    181 
eba0h: PARSE_LINE1      - <  2286>   2272 
ebbch: PARSE_LINE1DONE  - <  2303>   2295 
eba9h: PARSE_LINE1LOOP  - <  2292>   2302 
ebd1h: PARSE_LINE2      - <  2315>   2288 
ebeah: PARSE_LINE_DONE  - <  2331>   2263 
eb73h: PARSE_LINE_LOOP  - <  2259>   2284   2313   2317   2329 
eccbh: PARSE_MUL16      - <  2541>    380   2075 
ecf8h: PARSE_MULADD16   - <  2592>   2554 
ecd3h: PARSE_MULLOOP    - <  2548>   2588 
ecdch: PARSE_MULSKIP    - <  2556>   2553 
ea41h: PARSE_NEXT       - <  1993>   2042   2260 
ea48h: PARSE_NEXT1      - <  1998>   1995 
ea50h: PARSE_NEXT1LOOP  - <  2003>   2008 
ea5ah: PARSE_NEXT2      - <  2011>   2006 
ea6bh: PARSE_NEXT3      - <  2025>   2017   2032 
ea7bh: PARSE_NEXTDONE   - <  2034>   2027   2030 
ea82h: PARSE_NEXTDONE2  - <  2040>   2037 
ea8bh: PARSE_NUM        - <  2056>   2247   2273 
eac7h: PARSE_NUM_CHAR   - <  2094>   2063   2067 
ead1h: PARSE_NUM_CHAR1  - <  2100>   2097 
eabbh: PARSE_NUM_DONE   - <  2084>   2071 
ea9dh: PARSE_NUM_LOOP   - <  2066>   2083 
ead6h: PARSE_NUM_OLD    - <  2106> 
ed29h: PARSE_OR16       - <  2660>    480 
eb55h: PARSE_POS        - <  2224> 
ec67h: PARSE_REMOVELINE - <  2439>   2363 
ec73h: PARSE_REMOVELINE1 - <  2446>   2442   2444 
ec84h: PARSE_REMOVELOOP - <  2462>   2471 
ec4ah: PARSE_ROOMLOOP   - <  2413>   2421 
e917h: PARSE_SINGLECHAR - <  1755>   1871 
eb16h: PARSE_STRING     - <  2161> 
eb1fh: PARSE_STRING1    - <  2167>   2164 
ed14h: PARSE_SUB16      - <  2631>    456   1268   2409 
ea3dh: PARSE_TOKEN      - <  1986>   2162   2261 
0400h: PARSE_TOKEN_BUFFER - <   113>   1974   2241   2339   2424 
eb46h: PARSE_VARIABLE_NUM - <  2209>   2318 
e9e6h: PCMPLOOP         - <  1905>   1913 
ffcch: SHOWADDR         - <     7>   1344   1717 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    291   1045 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9> 
ffdch: SHOWREGS         - <    11>   1050 
e9f4h: SKIPLOOP         - <  1917>   1920 
e9f4h: SKIPTOEND        - <  1915>   1910 
ffc0h: STRINGOUT        - <     4>    209    214    219    224    229    234 
          635    678   1049   1343   1375   1414   1422   1430   1438   1446 
         1454   1462   1470   1478   1486   1494   1502   1510   1518   1526 
         1534   1692   1716 
0019h: TOKENIZER_AND    - <    43>    429   1579   1789 
001bh: TOKENIZER_ASTR   - <    45>    363   1599   1799 
0010h: TOKENIZER_CALL   - <    34>   1499   1741 
0015h: TOKENIZER_COMMA  - <    39>    640   1539   1769 
0024h: TOKENIZER_CR     - <    54>    597    670    704    728    741    847 
          904   1689   1764   2262   2332 
0009h: TOKENIZER_ELSE   - <    27>   1443   1734 
0014h: TOKENIZER_END    - <    38>   1025   1531   1745 
0001h: TOKENIZER_EOF    - <    19>    160    672    706   1088   1349   2193 
         2196   2377   2491 
0023h: TOKENIZER_EQ     - <    53>    511    723    878   1679   1834 
0000h: TOKENIZER_ERROR  - <    18>   1340   1746   1950 
000ah: TOKENIZER_FOR    - <    28>    858   1001   1451   1735 
000eh: TOKENIZER_GOSUB  - <    32>    736    989   1483   1739 
000dh: TOKENIZER_GOTO   - <    31>    612   1039   1475   1738 
0022h: TOKENIZER_GT     - <    52>    509   1669   1829 
001eh: TOKENIZER_HASH   - <    48>   1629   1814 
0007h: TOKENIZER_IF     - <    25>    686    977   1427   1732 
001fh: TOKENIZER_LEFTP  - <    49>    336    658   1639   1809 
0005h: TOKENIZER_LET    - <    23>   1031   1033   1411   1730 
0025h: TOKENIZER_LINENUM - <    55>   1057   1171   1697   2243 
0021h: TOKENIZER_LT     - <    51>    507   1659   1824 
0018h: TOKENIZER_MINUS  - <    42>    427   1569   1784 
001dh: TOKENIZER_MOD    - <    47>    367   1619   1804 
000ch: TOKENIZER_NEXT   - <    30>    792   1019   1467   1737 
0002h: TOKENIZER_NUMBER - <    20>    328    656    739   1155   1355   1863 
         2271 
001ah: TOKENIZER_OR     - <    44>    431   1589   1794 
0012h: TOKENIZER_PEEK   - <    36>   1007   1515   1743 
0017h: TOKENIZER_PLUS   - <    41>    425   1559   1779 
0013h: TOKENIZER_POKE   - <    37>   1013   1523   1744 
0006h: TOKENIZER_PRINT  - <    24>    622    971   1419   1731 
0011h: TOKENIZER_REM    - <    35>   1507   1742   2016 
000fh: TOKENIZER_RETURN - <    33>    762    995   1491   1740 
0020h: TOKENIZER_RIGHTP - <    50>    340   1649   1819 
0016h: TOKENIZER_SEMICOLON - <    40>    648   1549   1774 
001ch: TOKENIZER_SLASH  - <    46>    365   1609 
0003h: TOKENIZER_STRING - <    21>    627   1181   1371   1891   2163   2287 
0008h: TOKENIZER_THEN   - <    26>    692   1435   1733 
000bh: TOKENIZER_TO     - <    29>    889   1459   1736 
0004h: TOKENIZER_VARIABLE - <    22>    317    654    721    802    876    983 
         1163   1388   1944   2316 
e5f5h: TOKL_CALL        - <  1328>   1501 
e5b5h: TOKL_ELSE        - <  1317>   1445 
e5f0h: TOKL_END         - <  1327>   1533 
e5fbh: TOKL_ERROR       - <  1329>   1342   1715 
e5bbh: TOKL_FOR         - <  1318>   1453 
e5d0h: TOKL_GOSUB       - <  1322>   1485 
e5cah: TOKL_GOTO        - <  1321>   1477 
e5abh: TOKL_IF          - <  1315>   1429 
e59fh: TOKL_LET         - <  1313>   1413 
e5c4h: TOKL_NEXT        - <  1320>   1469 
e5e4h: TOKL_PEEK        - <  1325>   1517 
e5eah: TOKL_POKE        - <  1326>   1525 
e5a4h: TOKL_PRINT       - <  1314>   1421 
e5dfh: TOKL_REM         - <  1324>   1509 
e5d7h: TOKL_RETURN      - <  1323>   1493 
e5afh: TOKL_THEN        - <  1316>   1437 
e5c0h: TOKL_TO          - <  1319>   1461 
e9dfh: TOP              - <  1901>   1922 
ffd0h: TOUPPER          - <     8>   2152 
ffc8h: UARTOUT          - <     6>    293   1047   1367   1377   1396   1407 
         1542   1544   1552   1554   1562   1564   1572   1574   1582   1584 
         1592   1594   1602   1604   1612   1614   1622   1624   1632   1634 
         1642   1644   1652   1654   1662   1664   1672   1674   1682   1684 
         1711 
eef0h: ZZZZ             - <  2800> 

2801 Lines assembled
0 Errors
325 Labels
Object Code:3641 bytes

