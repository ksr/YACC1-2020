RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             uartin:     equ 0ffe8h
   15 0000:             
   16 0000:             ;
   17 0000:             ; Basic interpreter tokens
   18 0000:             ;
   19 0000:             TOKENIZER_ERROR: EQU 00
   20 0000:             TOKENIZER_EOF: EQU 01
   21 0000:             TOKENIZER_NUMBER: EQU 02
   22 0000:             TOKENIZER_STRING: EQU 03
   23 0000:             TOKENIZER_VARIABLE: EQU 04
   24 0000:             TOKENIZER_LET: EQU 05
   25 0000:             TOKENIZER_PRINT: EQU 06
   26 0000:             TOKENIZER_IF: EQU 07
   27 0000:             TOKENIZER_THEN: EQU 08
   28 0000:             TOKENIZER_ELSE: EQU 09
   29 0000:             TOKENIZER_FOR: EQU 10
   30 0000:             TOKENIZER_TO: EQU 11
   31 0000:             TOKENIZER_NEXT: EQU 12
   32 0000:             TOKENIZER_GOTO: EQU 13
   33 0000:             TOKENIZER_GOSUB: EQU 14
   34 0000:             TOKENIZER_RETURN: EQU 15
   35 0000:             TOKENIZER_CALL: EQU 16
   36 0000:             TOKENIZER_REM: EQU 17
   37 0000:             TOKENIZER_PEEK: EQU 18
   38 0000:             TOKENIZER_POKE: EQU 19
   39 0000:             TOKENIZER_END: EQU 20
   40 0000:             TOKENIZER_COMMA: EQU 21
   41 0000:             TOKENIZER_SEMICOLON: EQU 22
   42 0000:             TOKENIZER_PLUS: EQU 23
   43 0000:             TOKENIZER_MINUS: EQU 24
   44 0000:             TOKENIZER_AND: EQU 25
   45 0000:             TOKENIZER_OR: EQU 26
   46 0000:             TOKENIZER_ASTR: EQU 27
   47 0000:             TOKENIZER_SLASH: EQU 28
   48 0000:             TOKENIZER_MOD: EQU 29
   49 0000:             TOKENIZER_HASH: EQU 30
   50 0000:             TOKENIZER_LEFTP: EQU 31
   51 0000:             TOKENIZER_RIGHTP: EQU 32
   52 0000:             TOKENIZER_LT: EQU 33
   53 0000:             TOKENIZER_GT: EQU 34
   54 0000:             TOKENIZER_EQ: EQU 35
   55 0000:             TOKENIZER_CR: EQU 36
   56 0000:             TOKENIZER_LINENUM: EQU 37
   57 0000:             TOKENIZER_LIST: EQU 38
   58 0000:             TOKENIZER_RUN: EQU 39
   59 0000:             
   60 0000:             ;
   61 0000:             ; BASIC interpreter user variables area
   62 0000:             ; currently 26 1-byte variables
   63 0000:             ; for now must be 0xAA00 (256 byte) aligned
   64 0000:             ;
   65 0000:             BASIC_VARS: EQU 0100h
   66 0000:             
   67 0000:             ;
   68 0000:             ; Basic interpreter internal variables
   69 0000:             ;
   70 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   71 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   72 0000:             bas_nxtptr:       EQU 0204h ;
   73 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   74 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   75 0000:             bas_currenttoken: EQU 020Ah ; used in parsing
   76 0000:             bas_tokenbuffer:  EQU 020Ch ; Pointer to start of token buffer
   77 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   78 0000:                                         ; this value should be + 1 end of buffer
   79 0000:                                         ; if buffer is 0x1000-0x1fff this is
   80 0000:                                         ; set to 0x2000. Used in moving buffer around
   81 0000:                                         ; in add and remove line
   82 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   83 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   84 0000:             bas_insertptr:    EQU 0214H
   85 0000:             
   86 0000:             ;
   87 0000:             ; FOR-NEXT statement stack ptr and stack data
   88 0000:             ;
   89 0000:             ; for next stack data
   90 0000:             ; format
   91 0000:             ;   2 bytes for variable id (only first byte used for now)
   92 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
   93 0000:             ;   2 bytes ptr to line after for instruction (format HL)
   94 0000:             ; later add step amount
   95 0000:             ;
   96 0000:             bas_forstackptr: EQU 0280h
   97 0000:             bas_forstack: EQU 0282h
   98 0000:             
   99 0000:             ;
  100 0000:             ; GOSUB stack ptr and data
  101 0000:             ;
  102 0000:             ; gosub STACK
  103 0000:             ; format
  104 0000:             ;   2 bytes return location ptr
  105 0000:             ;
  106 0000:             bas_gosubptr: EQU 02c0h
  107 0000:             bas_gosubstack: EQU 02c2h
  108 0000:             
  109 0000:             ;
  110 0000:             ; Basic interpreter text input line buffer
  111 0000:             ;
  112 0000:             parse_input_line: EQU 300h
  113 0000:             ;
  114 0000:             ; Basic interpreter tmp buffer to build up current token line
  115 0000:             ;
  116 0000:             parse_token_buffer: EQU 400h
  117 0000:             ;
  118 0000:             ; Basic interpreter token buffer
  119 0000:             ;
  120 0000:             bas_tok_buf_start: EQU 1000h
  121 0000:             ;
  122 0000:             ; Basic interpreter token buffer end + 1
  123 0000:             ;
  124 0000:             bas_tok_buf_end: EQU 2000h
  125 0000:             ; OR
  126 0000:             ;bas_tok_buf_end: EQU 1100h ;smaller for easy debugging - 256 byte buffer
  127 0000:             
  128 0000:             ;
  129 0000:             ; basic interpreter, add IO and peek/poke
  130 0000:             ;
  131 0000:             
  132 0000:             ;
  133 0000:             ; Basic Interpreter
  134 0000:             ;
  135 0000:             
  136 0000:             ;
  137 0000:             ; BASIC Entry Points
  138 0000:             ;
  139 0000:               ORG 0e000h
  140 e000:             ;
  141 e000:             ; list
  142 e000:             ;
  143 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  144 e003: 04 e6 59          JSR  basic_list
  145 e006: 05                Ret
  146 e007:             
  147 e007:             ;
  148 e007:                   ORG 0e010h
  149 e010:             ;
  150 e010:             ; run
  151 e010:             ;
  152 e010: 04 e5 08          jsr basic_run
  153 e013: 05                Ret
  154 e014:             
  155 e014:             ;
  156 e014:                   ORG 0e020h
  157 e020:             ;
  158 e020:             ; cold start
  159 e020:             ;
  160 e020:             ; Hack later pass in R7
  161 e020:             ;
  162 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  163 e023: 0e 01             ldai TOKENIZER_EOF          ;write EOF to start of buffer
  164 e025: 4f                stavr r7
  165 e026: ff 02 0c          STR R7,bas_tokenbuffer
  166 e029: 1f 20 00          mviw r7,bas_tok_buf_end
  167 e02c: ff 02 0e          str r7,bas_bufferendhi
  168 e02f: 05                Ret
  169 e030:             
  170 e030:             ;
  171 e030:                   ORG 0e030h
  172 e030:             ;
  173 e030:             ; tests - called from monitor - used to test snippets of code
  174 e030:             ;
  175 e030: 04 e0 77          jsr bigtest
  176 e033: 05                ret
  177 e034:             ;
  178 e034:                   org 0e040h
  179 e040:             ;
  180 e040:             ; very basic cmd line driver
  181 e040:             ;
  182 e040: 04 ee 17          jsr basic_interprter
  183 e043: 05                ret
  184 e044:             ;
  185 e044:                   org 0e050h
  186 e050:             ;
  187 e050:             ; parse line
  188 e050:             ;
  189 e050: 04 eb b1          jsr parse_line
  190 e053: 05                ret
  191 e054:             
  192 e054:             ;
  193 e054:                   ORG 0e060h
  194 e060:             ;
  195 e060:             ; Copy test program into token Buffer, copies 0x0400 bytes
  196 e060:             ;
  197 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  198 e063: 1e ef 00          mviw R6,BASIC_TEST
  199 e066: 1d 04 00          mviw R5,0400h
  200 e069:             
  201 e069:             bas_copyloop:
  202 e069: 46                ldavr R6
  203 e06a: 4f                stavr r7
  204 e06b: 56                incr r6
  205 e06c: 57                incr r7
  206 e06d: 5d                decr r5
  207 e06e: 2d                mvrha r5
  208 e06f: a2 e0 69          brnz bas_copyloop
  209 e072: 25                mvrla r5
  210 e073: a2 e0 69          brnz bas_copyloop
  211 e076: 05                ret
  212 e077:             
  213 e077:             bigtest:
  214 e077: 1f 12 34        mviw r7,01234h
  215 e07a: 04 e5 8e        jsr exe_itoa
  216 e07d: 1f ee 39        mviw r7,CRLF
  217 e080: 04 ff c0        jsr stringout
  218 e083:             
  219 e083: 1f 00 10        mviw r7,010h
  220 e086: 04 e5 8e        jsr exe_itoa
  221 e089: 1f ee 39        mviw r7,CRLF
  222 e08c: 04 ff c0        jsr stringout
  223 e08f:             
  224 e08f: 1f 76 54        mviw r7,07654h
  225 e092: 04 e5 8e        jsr exe_itoa
  226 e095: 1f ee 39        mviw r7,CRLF
  227 e098: 04 ff c0        jsr stringout
  228 e09b:             
  229 e09b: 1f 00 00        mviw r7,00h
  230 e09e: 04 e5 8e        jsr exe_itoa
  231 e0a1: 1f ee 39        mviw r7,CRLF
  232 e0a4: 04 ff c0        jsr stringout
  233 e0a7:             
  234 e0a7: 1f ff fe        mviw r7,0FFFEh
  235 e0aa: 04 e5 8e        jsr exe_itoa
  236 e0ad: 1f ee 39        mviw r7,CRLF
  237 e0b0: 04 ff c0        jsr stringout
  238 e0b3:             
  239 e0b3: 1f 80 12        mviw r7,08012h
  240 e0b6: 04 e5 8e        jsr exe_itoa
  241 e0b9: 1f ee 39        mviw r7,CRLF
  242 e0bc: 04 ff c0        jsr stringout
  243 e0bf: 05              ret
  244 e0c0:             
  245 e0c0:             ;
  246 e0c0:             ; basic interpreter messages
  247 e0c0:             ;
  248 e0c0: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "Accept - unexpected token",0,0ah,0dh
  249 e0dc: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  250 e0ed: 42 41 53 49 
            43 20 54 4f 
            4b 45 4e 20 
            4e 4f 54 20 
            53 55 50 50 
            4f 52 54 45 
            44 20 0a 0d bas_msg3: db "Basic token not supported ",0ah,0dh
  251 e109: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  252 e113: 55 4e 4b 4e 
            4f 57 4e 20 
            43 4f 4d 4d 
            41 4e 44 00 
            0a 0d       parse_cmd_error: db "UNKNOWN COMMAND",0,0ah,0DH
  253 e125:             
  254 e125:             ;
  255 e125:             ; Basic interpreter - execution engine
  256 e125:             ; Register Usage
  257 e125:             ; R0 - Program Counter
  258 e125:             ; R1 - Stack Pointer
  259 e125:             ; R2 - Direct addressing mode
  260 e125:             ; R3 - Basic Interpreter Token Buffer ptr
  261 e125:             ; R4 - working register  ; or is this for-next stack ptr
  262 e125:             ; R5 - working register  ; or is this gosub stack ptr
  263 e125:             ; R6 - Working register
  264 e125:             ; R7 - parameter passing & return value
  265 e125:             ;
  266 e125:             ;exe: Is this label needed
  267 e125:             ;
  268 e125:             ; void ubasic_init()
  269 e125:             ;
  270 e125:             ; Setup basic interpreter execution engine
  271 e125:             ;
  272 e125:             exe_init:
  273 e125: 09              push
  274 e126: 1d 02 c2        MVIW R5,bas_gosubstack
  275 e129: 1c 02 82        MVIW R4,bas_forstack
  276 e12c: 1e 02 00        MVIW R6,bas_run_ended
  277 e12f: 0e 00           LDAI 0
  278 e131: 4e              STAVR R6
  279 e132: f3 02 0c        LDR R3,bas_tokenbuffer
  280 e135: 0a              pop
  281 e136: 05              RET
  282 e137:             
  283 e137:             ;
  284 e137:             ; void accept(int)
  285 e137:             ;
  286 e137:             ; compare accumulator with current token then advance to next token in buffer
  287 e137:             ; assume accumulator destroyed
  288 e137:             ;
  289 e137:             exe_accept:
  290 e137: 09              push
  291 e138:             ;
  292 e138:             ; get current token into accumulator
  293 e138:             ;
  294 e138:             ; FIX: Switch to BRNEQ to error state and save a branch
  295 e138:             ;
  296 e138: 43              LDAVR R3
  297 e139: 0b              MVAT
  298 e13a: 0a              POP
  299 e13b: a8 e1 4c        BREQ exe_accept_done
  300 e13e:             ;
  301 e13e:             ; debug information
  302 e13e:             ;
  303 e13e: 04 ff e0        JSR showbytea
  304 e141: 0e 2d           ldai '-'
  305 e143: 04 ff c8        JSR uartout
  306 e146: 1f e0 c0        mviw R7,bas_msg1
  307 e149: 04 e5 45        JSR bas_error
  308 e14c:             ;
  309 e14c:             exe_accept_done:
  310 e14c: 04 e5 47        jsr exe_next_token
  311 e14f: 05              RET
  312 e150:             
  313 e150:             ;
  314 e150:             ; int varfactor()
  315 e150:             ;
  316 e150:             ; get variable id pointed to by exe_variable_num in token stream
  317 e150:             ; (this is not a value but a variable id)
  318 e150:             ; value returned by exe_get_variable in r7
  319 e150:             ;
  320 e150:             ; return value in R7
  321 e150:             ;
  322 e150:             exe_varfactor:
  323 e150: 04 e5 80        jsr exe_variable_num    ; get variable number id (one byte for now a-z)
  324 e153:                                         ;into accumulator
  325 e153:             ;
  326 e153:             ; variable id in accumulator, return value in r7
  327 e153:             ;
  328 e153: 04 e5 3a        jsr exe_get_variable
  329 e156: 0e 04           LDAI TOKENIZER_VARIABLE
  330 e158: 04 e1 37        JSR exe_accept
  331 e15b: 05              RET
  332 e15c:             
  333 e15c:             ;
  334 e15c:             ; int factor()
  335 e15c:             ; return value in R7
  336 e15c:             ;
  337 e15c:             exe_factor:
  338 e15c:             ;
  339 e15c: 43              LDAVR R3               ;get current token into accumulator
  340 e15d: 0d 02           LDTI TOKENIZER_NUMBER
  341 e15f: aa e1 6a        BRNEQ exe_factor1
  342 e162: 04 e5 77        JSR exe_num
  343 e165: 0c              MVTA
  344 e166: 04 e1 37        JSR exe_accept
  345 e169: 05              RET
  346 e16a:             
  347 e16a:             exe_factor1:
  348 e16a: 0d 1f           LDTI TOKENIZER_LEFTP
  349 e16c: aa e1 7b        BRNEQ exe_factor2
  350 e16f: 04 e1 37        JSR exe_accept
  351 e172: 04 e1 ce        JSR exe_expr
  352 e175: 0e 20           LDAI TOKENIZER_RIGHTP
  353 e177: 04 e1 37        JSR exe_accept
  354 e17a: 05              RET
  355 e17b:             
  356 e17b:             exe_factor2:
  357 e17b: 04 e1 50        jsr exe_varfactor
  358 e17e: 05              ret
  359 e17f:             
  360 e17f:             ;
  361 e17f:             ; int term()
  362 e17f:             ; R5 = F1
  363 e17f:             ; R6 = F2
  364 e17f:             ; R7 = return value
  365 e17f:             ;
  366 e17f:             exe_term:
  367 e17f: 07 05           pushr r5
  368 e181: 07 06           pushr r6
  369 e183:             
  370 e183: 04 e1 5c        jsr exe_factor
  371 e186: 0f 57           MOVRR r7,r5
  372 e188:             
  373 e188:             exe_term_loop:
  374 e188: 43              LDAVR R3
  375 e189: 0d 1b           ldti TOKENIZER_ASTR
  376 e18b: a8 e1 9b        BREQ exe_term_astr
  377 e18e: 0d 1c           LDTI TOKENIZER_SLASH
  378 e190: a8 e1 b1        breq exe_term_slash
  379 e193: 0d 1d           ldti TOKENIZER_MOD
  380 e195: a8 e1 bc        breq exe_term_mod
  381 e198: a0 e1 c7        br exe_term_done
  382 e19b:             
  383 e19b:             exe_term_astr:
  384 e19b: 04 e5 47        jsr exe_next_token
  385 e19e: 04 e1 5c        jsr exe_factor
  386 e1a1: 0f 67           movrr r7,r6
  387 e1a3:             ;
  388 e1a3:             ; do mulitply f1 = f1 * f2
  389 e1a3:             ;
  390 e1a3: 07 04           pushr r4
  391 e1a5: 0f 46           movrr r6,r4
  392 e1a7: 04 ed 5c        jsr PARSE_MUL16
  393 e1aa: 0f 57           movrr r7,r5
  394 e1ac: 08 40           popr r4
  395 e1ae: a0 e1 88        BR exe_term_loop
  396 e1b1:             
  397 e1b1:             exe_term_slash:
  398 e1b1: 04 e5 47        jsr exe_next_token
  399 e1b4: 04 e1 5c        jsr exe_factor
  400 e1b7: 0f 67           movrr r7,r6
  401 e1b9:             ;
  402 e1b9:             ; do divide f1 = f1 / f2
  403 e1b9:             ;
  404 e1b9: a0 e1 88        BR exe_term_loop
  405 e1bc:             
  406 e1bc:             exe_term_mod:
  407 e1bc: 04 e5 47        jsr exe_next_token
  408 e1bf: 04 e1 5c        jsr exe_factor
  409 e1c2: 0f 67           movrr r7,r6
  410 e1c4:             ;
  411 e1c4:             ; f1 = f1 % f2
  412 e1c4:             ;
  413 e1c4: a0 e1 88        BR exe_term_loop
  414 e1c7:             
  415 e1c7:             exe_term_done:
  416 e1c7: 0f 75           MOVRR r5,r7
  417 e1c9: 08 60           popr r6
  418 e1cb: 08 50           popr r5
  419 e1cd: 05              ret
  420 e1ce:             
  421 e1ce:             ;
  422 e1ce:             ; static VARIABLE_TYPE expr()
  423 e1ce:             ;
  424 e1ce:             ; R5 = t1
  425 e1ce:             ; R6 = t2
  426 e1ce:             ; R7 = return value
  427 e1ce:             ;
  428 e1ce:             exe_expr:
  429 e1ce: 07 05           pushr r5
  430 e1d0: 07 06           pushr r6
  431 e1d2:             
  432 e1d2: 04 e1 7f        jsr exe_term
  433 e1d5: 0f 57           MOVRR r7,r5
  434 e1d7:             
  435 e1d7:             exe_expr_loop:
  436 e1d7: 43              LDAVR R3
  437 e1d8: 0d 17           ldtI TOKENIZER_PLUS
  438 e1da: a8 e1 ef        BREQ exe_expr_plus
  439 e1dd: 0d 18           ldtI TOKENIZER_MINUS
  440 e1df: a8 e2 01        breq exe_expr_minus
  441 e1e2: 0d 19           ldtI TOKENIZER_AND
  442 e1e4: a8 e2 13        breq exe_expr_and
  443 e1e7: 0d 1a           ldti TOKENIZER_OR
  444 e1e9: a8 e2 25        breq exe_expr_or
  445 e1ec:             
  446 e1ec: a0 e2 3a        br exe_expr_done
  447 e1ef:             
  448 e1ef:             exe_expr_plus:
  449 e1ef: 04 e5 47        jsr exe_next_token
  450 e1f2: 04 e1 7f        jsr exe_term
  451 e1f5: 0f 67           movrr r7,r6
  452 e1f7:             ;
  453 e1f7:             ; t1 = t1 + t2
  454 e1f7:             ;
  455 e1f7: 0f 75           movrr r5,r7
  456 e1f9: 04 ed 97        jsr parse_add16
  457 e1fc: 0f 57           movrr r7,r5
  458 e1fe: a0 e1 d7        BR exe_expr_loop
  459 e201:             
  460 e201:             exe_expr_minus:
  461 e201: 04 e5 47        jsr exe_next_token
  462 e204: 04 e1 7f        jsr exe_term
  463 e207: 0f 67           movrr r7,r6
  464 e209:             ;
  465 e209:             ; t1 = t1 - t2
  466 e209:             ;
  467 e209: 0f 75           movrr r5,r7
  468 e20b: 04 ed a5        jsr parse_sub16
  469 e20e: 0f 57           movrr r7,r5
  470 e210: a0 e1 d7        BR exe_expr_loop
  471 e213:             
  472 e213:             exe_expr_and:
  473 e213: 04 e5 47        jsr exe_next_token
  474 e216: 04 e1 7f        jsr exe_term
  475 e219: 0f 67           movrr r7,r6
  476 e21b:             ;
  477 e21b:             ; t1 = t1 & t2
  478 e21b:             ;
  479 e21b: 0f 75           movrr r5,r7
  480 e21d: 04 ed af        jsr parse_and16
  481 e220: 0f 57           movrr r7,r5
  482 e222: a0 e1 d7        BR exe_expr_loop
  483 e225:             
  484 e225:             exe_expr_or:
  485 e225: 04 e5 47        jsr exe_next_token
  486 e228: 04 e1 7f        jsr exe_term
  487 e22b: 0f 67           movrr r7,r6
  488 e22d:             ;
  489 e22d:             ; t1 = t1 | t2
  490 e22d:             ;
  491 e22d: 0f 75           movrr r5,r7
  492 e22f: 04 ed ba        jsr parse_or16
  493 e232: 0f 57           movrr r7,r5
  494 e234: a0 e1 d7        BR exe_expr_loop
  495 e237: a0 e1 d7        BR exe_expr_loop
  496 e23a:             
  497 e23a:             exe_expr_done:
  498 e23a: 0f 75           MOVRR r5,r7
  499 e23c: 08 60           popr r6
  500 e23e: 08 50           popr r5
  501 e240: 05              ret
  502 e241:             
  503 e241:             ;
  504 e241:             ; int relation ()
  505 e241:             ;
  506 e241:             ; R5 = r1
  507 e241:             ; R6 = r2
  508 e241:             ; R7 = return value
  509 e241:             ;
  510 e241:             exe_relation:
  511 e241: 07 05           pushr r5
  512 e243: 07 06           pushr r6
  513 e245:             
  514 e245: 04 e1 ce        jsr exe_expr
  515 e248: 0f 57           MOVRR r7,r5
  516 e24a:             
  517 e24a:             exe_relation_loop:
  518 e24a: 43              LDAVR R3
  519 e24b: 0d 21           LDTI TOKENIZER_LT
  520 e24d: a8 e2 5d        BREQ exe_relation_lt
  521 e250: 0d 22           ldti TOKENIZER_GT
  522 e252: a8 e2 7b        breq exe_relation_gt
  523 e255: 0d 23           ldti TOKENIZER_EQ
  524 e257: a8 e2 99        breq exe_relation_eq
  525 e25a:             
  526 e25a: a0 e2 b5        br exe_relation_done
  527 e25d:             
  528 e25d:             exe_relation_lt:
  529 e25d: 04 e5 47        jsr exe_next_token
  530 e260: 04 e1 ce        jsr exe_expr
  531 e263: 0f 67           movrr r7,r6
  532 e265:             ;
  533 e265:             ; r1 = r1 < r2
  534 e265:             ;
  535 e265: 0f 75           movrr  r5,r7
  536 e267: 04 ed f2        jsr parse_compare
  537 e26a: 0d ff           ldti 0ffh
  538 e26c: aa e2 75        BRNEQ exe_rel_nlt
  539 e26f: 1d 00 01        mviw r5,01h
  540 e272: a0 e2 4a        BR exe_relation_loop
  541 e275:             exe_rel_nlt:
  542 e275: 1d 00 00        mviw r5,00h
  543 e278: a0 e2 4a        BR exe_relation_loop
  544 e27b:             
  545 e27b:             exe_relation_gt:
  546 e27b: 04 e5 47        jsr exe_next_token
  547 e27e: 04 e1 ce        jsr exe_expr
  548 e281: 0f 67           movrr r7,r6
  549 e283:             ;
  550 e283:             ; r1 = r1 > r2
  551 e283:             ;
  552 e283: 0f 75           movrr  r5,r7
  553 e285: 04 ed f2        jsr parse_compare
  554 e288: 0d 01           ldti 01h
  555 e28a: aa e2 93        BRNEQ exe_rel_ngt
  556 e28d: 1d 00 01        mviw r5,01h
  557 e290: a0 e2 4a        BR exe_relation_loop
  558 e293:             exe_rel_ngt:
  559 e293: 1d 00 00        mviw r5,00h
  560 e296: a0 e2 4a        BR exe_relation_loop
  561 e299:             
  562 e299:             exe_relation_eq:
  563 e299: 04 e5 47        jsr exe_next_token
  564 e29c: 04 e1 ce        jsr exe_expr
  565 e29f: 0f 67           movrr r7,r6
  566 e2a1:             ;
  567 e2a1:             ; r1 = r1 == r2
  568 e2a1:             ;
  569 e2a1: 0f 75           movrr  r5,r7
  570 e2a3: 04 ed f2        jsr parse_compare
  571 e2a6: a2 e2 af        brnz exe_rel_ne
  572 e2a9: 1d 00 01        mviw r5,01h
  573 e2ac: a0 e2 4a        BR exe_relation_loop
  574 e2af:             exe_rel_ne:
  575 e2af: 1d 00 00        mviw r5,00h
  576 e2b2: a0 e2 4a        BR exe_relation_loop
  577 e2b5:             
  578 e2b5:             exe_relation_done:
  579 e2b5: 0f 75           MOVRR r5,r7
  580 e2b7: 08 60           popr r6
  581 e2b9: 08 50           popr r5
  582 e2bb: 05              ret
  583 e2bc:             
  584 e2bc:             ;
  585 e2bc:             ; char * index_find (int linenum)
  586 e2bc:             ;
  587 e2bc:             ; call with line in R7
  588 e2bc:             ; return with val in R7 - tokenbuffer ptr
  589 e2bc:             ; THIS CAN BE REMOVED SINCE IT IS ONLY A SINGLE CALL
  590 e2bc:             ;
  591 e2bc:             exe_index_find:
  592 e2bc: 04 ed 20        JSR basu_find
  593 e2bf: 05              RET
  594 e2c0:             
  595 e2c0:             ;
  596 e2c0:             ; void jump_linenum(linenum)
  597 e2c0:             ;
  598 e2c0:             ; Linenum in R7
  599 e2c0:             ;
  600 e2c0:             exe_jump_line:
  601 e2c0: 04 e2 bc        JSR exe_index_find
  602 e2c3: 2f              MVRHA R7
  603 e2c4: a2 e2 d7        BRNZ exe_jump_line1
  604 e2c7: 27              MVRLA R7
  605 e2c8: a2 e2 d7        BRNZ exe_jump_line1
  606 e2cb:             ;
  607 e2cb:             ; returned 0 line not found
  608 e2cb:             ;
  609 e2cb: 0e 24           LDAI TOKENIZER_CR
  610 e2cd: 04 e1 37        JSR exe_accept
  611 e2d0: 1e 02 00        MVIW r6,bas_run_ended
  612 e2d3: 0e 01           LDAI 1
  613 e2d5: 4e              STAVR R6
  614 e2d6: 05              ret
  615 e2d7:             exe_jump_line1:
  616 e2d7:             ;   jsr tok_goto ; WHAT IS THIS
  617 e2d7: 0f 37           movrr r7,r3
  618 e2d9: 05              ret
  619 e2da:             
  620 e2da:             ;
  621 e2da:             ; void goto_statement()
  622 e2da:             ;
  623 e2da:             exe_goto_stmt:
  624 e2da: 0e 0d           LDAI TOKENIZER_GOTO
  625 e2dc: 04 e1 37        JSR exe_accept
  626 e2df: 04 e1 ce        JSR exe_expr
  627 e2e2: 04 e2 c0        JSR exe_jump_line
  628 e2e5: 05              RET
  629 e2e6:             
  630 e2e6:             ;
  631 e2e6:             ; void print_statment()
  632 e2e6:             ;
  633 e2e6:             exe_print_stmt:
  634 e2e6: 0e 06           LDAI TOKENIZER_PRINT
  635 e2e8: 04 e1 37        jsr exe_accept
  636 e2eb:             
  637 e2eb:             exe_print_stmt_loop:
  638 e2eb: 43              LDAVR R3
  639 e2ec: 0d 03           LDTI TOKENIZER_STRING
  640 e2ee: aa e2 fd        BRNEQ exe_print_stmt1
  641 e2f1:             ;
  642 e2f1:             ; this should return string to print in r2
  643 e2f1:             ; exe_string may not be needed tokenbufferptr is at string ?
  644 e2f1:             ;
  645 e2f1: 0f 73           movrr r3,r7
  646 e2f3: 57              incr r7
  647 e2f4: 04 ff c0        jsr stringout
  648 e2f7: 04 e5 47        jsr exe_next_token
  649 e2fa: a0 e3 30        br exe_print_stmt_test
  650 e2fd:             
  651 e2fd:             exe_print_stmt1:
  652 e2fd: 0d 15           ldti TOKENIZER_COMMA
  653 e2ff: aa e3 0d        BRNEQ exe_print_stmt2
  654 e302: 0e 20           LDAI ' '
  655 e304: 04 ff c4        JSR charout
  656 e307: 04 e5 47        jsr exe_next_token
  657 e30a: a0 e3 30        br exe_print_stmt_test
  658 e30d:             
  659 e30d:             exe_print_stmt2:
  660 e30d: 0d 16           ldti TOKENIZER_SEMICOLON
  661 e30f: aa e3 18        BRNEQ exe_print_stmt3
  662 e312: 04 e5 47        jsr exe_next_token
  663 e315: a0 e3 30        br exe_print_stmt_test
  664 e318:             
  665 e318:             exe_print_stmt3:
  666 e318: 0d 04           ldti TOKENIZER_VARIABLE
  667 e31a: a8 e3 2a        BREQ exe_print_stmt4
  668 e31d: 0d 02           ldti TOKENIZER_NUMBER
  669 e31f: a8 e3 2a        breq exe_print_stmt4
  670 e322: 0d 1f           ldti  TOKENIZER_LEFTP
  671 e324: a8 e3 2a        breq exe_print_stmt4
  672 e327:             
  673 e327: a0 e3 3e        br exe_print_stmt_done
  674 e32a:             
  675 e32a:             exe_print_stmt4:
  676 e32a: 04 e1 ce        jsr exe_expr
  677 e32d:                 ;JSR showr7
  678 e32d: 04 e5 8e        jsr exe_itoa
  679 e330:             
  680 e330:             exe_print_stmt_test:
  681 e330: 43              LDAVR R3
  682 e331: 0d 24           LDTI TOKENIZER_CR
  683 e333: a8 e3 3e        breq exe_print_stmt_done
  684 e336: 0d 01           LDTI TOKENIZER_EOF
  685 e338: a8 e3 3e        breq exe_print_stmt_done
  686 e33b: a0 e2 eb        br exe_print_stmt_loop
  687 e33e:             
  688 e33e:             exe_print_stmt_done:
  689 e33e: 1f ee 39        mviw R7,CRLF
  690 e341: 04 ff c0        jsr stringout
  691 e344: 04 e5 47        jsr exe_next_token
  692 e347: 05              ret
  693 e348:             
  694 e348:             ;
  695 e348:             ; void if_statement()
  696 e348:             ;
  697 e348:             exe_if_stmt:
  698 e348: 0e 07           LDAI TOKENIZER_IF
  699 e34a: 04 e1 37        JSR exe_accept
  700 e34d:             
  701 e34d: 04 e2 41        JSR exe_relation
  702 e350: 27              MVRLA R7
  703 e351: 09              push
  704 e352: 0e 08           LDAI TOKENIZER_THEN
  705 e354: 04 e1 37        JSR exe_accept
  706 e357: 0a              pop
  707 e358:             
  708 e358: 0d 01           LDTI 1
  709 e35a: aa e3 61        BRNEQ exe_if_stmt1
  710 e35d: 04 e4 79        JSR exe_stmt
  711 e360: 05              ret
  712 e361:             
  713 e361:             exe_if_stmt1:
  714 e361: 04 e5 47        jsr exe_next_token
  715 e364: 43              LDAVR R3
  716 e365: 0d 24           LDTI TOKENIZER_CR
  717 e367: a8 e3 70        BREQ EXE_IF_STMT2
  718 e36a: 0d 01           LDTI TOKENIZER_EOF
  719 e36c: aa e3 61        BRNEQ EXE_IF_STMT1
  720 e36f: 05              RET
  721 e370:             
  722 e370:             exe_if_stmt2:
  723 e370: 04 e5 47        JSR EXE_NEXT_TOKEN
  724 e373: 05              RET
  725 e374:             
  726 e374:             ;
  727 e374:             ; void let_statement()
  728 e374:             ;
  729 e374:             exe_let_stmt:
  730 e374: 04 e5 80        jsr exe_variable_num
  731 e377: 37              mvarl r7
  732 e378: 0f 67           movrr r7,r6
  733 e37a: 0e 04           ldai TOKENIZER_VARIABLE
  734 e37c: 04 e1 37        jsr exe_accept
  735 e37f: 0e 23           ldai TOKENIZER_EQ
  736 e381: 04 e1 37        jsr exe_accept
  737 e384: 04 e1 ce        jsr exe_expr
  738 e387: 26              mvrla r6
  739 e388: 04 e5 2f        JSR exe_set_variable
  740 e38b: 0e 24           ldai TOKENIZER_CR
  741 e38d: 04 e1 37        jsr exe_accept
  742 e390: 05              ret
  743 e391:             
  744 e391:             ;
  745 e391:             ; void gosub_statement()
  746 e391:             ;
  747 e391:             exe_gosub_stmt:
  748 e391: 0e 0e           ldai TOKENIZER_GOSUB
  749 e393: 04 e1 37        jsr exe_accept
  750 e396: 04 e5 77        jsr exe_num
  751 e399: 0e 02           ldai TOKENIZER_NUMBER
  752 e39b: 04 e1 37        jsr exe_accept
  753 e39e: 0e 24           ldai TOKENIZER_CR
  754 e3a0: 04 e1 37        jsr exe_accept
  755 e3a3:             ;
  756 e3a3:             ; save current token buffer ptr to gosub stack
  757 e3a3:             ;
  758 e3a3: 23             mvrla r3
  759 e3a4: 4d             stavr r5
  760 e3a5: 55             incr r5
  761 e3a6: 2b             mvrha r3
  762 e3a7: 4d             stavr r5
  763 e3a8: 55             incr  r5
  764 e3a9:             ;
  765 e3a9:             ; write new gosub stack ptr location back
  766 e3a9:             ;
  767 e3a9: 04 e2 c0       JSR exe_jump_line
  768 e3ac: 05             RET
  769 e3ad:             
  770 e3ad:             ;
  771 e3ad:             ; void return_statment()
  772 e3ad:             ;
  773 e3ad:             exe_return_stmt:
  774 e3ad: 0e 0f           ldai TOKENIZER_RETURN
  775 e3af: 04 e1 37        jsr exe_accept
  776 e3b2:             ;
  777 e3b2:             ; setup to use for storage area via R4
  778 e3b2:             ;
  779 e3b2: 5d             decr r5
  780 e3b3: 5d             decr r5
  781 e3b4:             
  782 e3b4: 45             ldavr r5
  783 e3b5: 33             mvarl r3
  784 e3b6: 55             incr r5
  785 e3b7: 45             ldavr r5
  786 e3b8: 3b             mvarh r3
  787 e3b9:             
  788 e3b9: 5d             decr r5
  789 e3ba: 05             ret
  790 e3bb:             
  791 e3bb:             ;
  792 e3bb:             ; void next_statement()
  793 e3bb:             ;
  794 e3bb:             exe_next_stmt:
  795 e3bb:             ;
  796 e3bb:             ; backup to the TO Value
  797 e3bb: 5c              decr r4
  798 e3bc: 5c              decr r4
  799 e3bd: 5c              decr r4
  800 e3be: 5c              decr r4
  801 e3bf:             ;
  802 e3bf:             ; eat next
  803 e3bf:             ;
  804 e3bf: 0e 0c           ldai TOKENIZER_NEXT
  805 e3c1: 04 e1 37        jsr exe_accept
  806 e3c4:             ;
  807 e3c4:             ; get variable id (in accumulator) and hold in r6 lo
  808 e3c4:             ;
  809 e3c4: 04 e5 80        jsr exe_variable_num
  810 e3c7: 36              mvarl r6
  811 e3c8:             ;
  812 e3c8:             ; eat TOKENIZER_VARIABLE id
  813 e3c8:             ;
  814 e3c8: 0e 04           ldai TOKENIZER_VARIABLE
  815 e3ca: 04 e1 37        jsr exe_accept
  816 e3cd:             ;
  817 e3cd:             ; get variable value, inc by 1 and store - ADD STEP VALUE
  818 e3cd:             ;
  819 e3cd: 26              mvrla r6
  820 e3ce: 04 e5 3a        jsr exe_get_variable
  821 e3d1: 57              incr r7
  822 e3d2: 26              mvrla r6
  823 e3d3: 04 e5 2f        jsr exe_set_variable
  824 e3d6:             ;
  825 e3d6:             ; get TO value into R6
  826 e3d6: 44              ldavr r4
  827 e3d7: 36              mvarl r6
  828 e3d8: 54              incr r4
  829 e3d9: 44              ldavr r4
  830 e3da: 3e              mvarh r6
  831 e3db: 54              incr r4
  832 e3dc:             ;
  833 e3dc:             ; for now only compare low byte HACK use compare code
  834 e3dc:             ; r7=r6 00
  835 e3dc:             ; r7>r6 01
  836 e3dc:             ; r7<r6 ff
  837 e3dc:             ;
  838 e3dc: 04 ed f2         jsr parse_compare
  839 e3df: 0d 01            ldti 01
  840 e3e1: a8 e3 eb         breq exe_next_done
  841 e3e4:             ;    mvrla r6
  842 e3e4:             ;    mvat
  843 e3e4:             ;    mvrla r7
  844 e3e4:             ;    brgt exe_next_done
  845 e3e4:             ;
  846 e3e4: 44              ldavr r4
  847 e3e5: 33              mvarl r3
  848 e3e6: 54              incr r4
  849 e3e7: 44              ldavr r4
  850 e3e8: 3b              mvarh r3
  851 e3e9: 54              incr r4
  852 e3ea: 05              ret
  853 e3eb:             
  854 e3eb:             exe_next_done:
  855 e3eb: 5c            decr r4
  856 e3ec: 5c            decr r4
  857 e3ed: 5c            decr r4
  858 e3ee: 5c            decr r4
  859 e3ef: 0e 24         ldai TOKENIZER_CR
  860 e3f1: 04 e1 37      jsr exe_accept
  861 e3f4: 05            ret
  862 e3f5:             
  863 e3f5:             ;
  864 e3f5:             ; void for_statement()
  865 e3f5:             ;
  866 e3f5:             exe_for_stmt:
  867 e3f5:             ;
  868 e3f5:             ; setup to use for storage area via R4
  869 e3f5:             ;
  870 e3f5: 0e 0a           ldai TOKENIZER_FOR    ; eat FOR
  871 e3f7: 04 e1 37        jsr exe_accept
  872 e3fa:             ;
  873 e3fa:             ; get variable id (in accumulator) and hold in r6 lo
  874 e3fa:             ;
  875 e3fa: 04 e5 80        jsr exe_variable_num
  876 e3fd: 36              mvarl r6
  877 e3fe:             ;
  878 e3fe:             ; store variable id in FOR storage - hack only lo byte, hi byte 0
  879 e3fe:             ;
  880 e3fe: 4c              stavr r4
  881 e3ff: 54              incr r4
  882 e400: 0e 00           ldai 0
  883 e402: 4c              stavr r4
  884 e403: 54              incr r4
  885 e404:             ;
  886 e404:             ; eat variable id and = then get starting value
  887 e404:             ;
  888 e404: 0e 04           ldai TOKENIZER_VARIABLE
  889 e406: 04 e1 37        jsr exe_accept
  890 e409: 0e 23           ldai TOKENIZER_EQ
  891 e40b: 04 e1 37        jsr exe_accept
  892 e40e: 04 e1 ce        jsr exe_expr
  893 e411:             ;
  894 e411:             ; set variable to starting value
  895 e411:             ;
  896 e411: 26              mvrla r6
  897 e412: 04 e5 2f        JSR exe_set_variable
  898 e415:             ;
  899 e415:             ; eat TO and get to value
  900 e415:             ;
  901 e415: 0e 0b           ldai TOKENIZER_TO
  902 e417: 04 e1 37        jsr exe_accept
  903 e41a: 04 e1 ce        jsr exe_expr
  904 e41d:             ;
  905 e41d:             ; store to value in FOR storage area
  906 e41d:             ;
  907 e41d: 27              mvrla r7
  908 e41e: 4c              stavr r4
  909 e41f: 54              incr r4
  910 e420: 2f              mvrha r7
  911 e421: 4c              stavr r4
  912 e422: 54              incr r4
  913 e423:             ;
  914 e423:             ; EAT EOL
  915 e423:             ;
  916 e423: 0e 24           ldai TOKENIZER_CR
  917 e425: 04 e1 37        jsr exe_accept
  918 e428:             ;
  919 e428:             ; store ptr to instruction after FOR in for storage area
  920 e428:             ;
  921 e428: 23              mvrla r3
  922 e429: 4c              stavr r4
  923 e42a: 54              incr r4
  924 e42b: 2b              mvrha r3
  925 e42c: 4c              stavr r4
  926 e42d: 54              incr r4
  927 e42e:             ;
  928 e42e:             ;   save for stackptr
  929 e42e:             ;
  930 e42e: 05              ret
  931 e42f:             
  932 e42f:             ;
  933 e42f:             ; void peek_statment()
  934 e42f:             ;
  935 e42f:             ;peek_statement(void) {
  936 e42f:             ;
  937 e42f:             exe_peek_stmt:
  938 e42f: 0e 12           ldai TOKENIZER_PEEK   ; eat PEEK
  939 e431: 04 e1 37        jsr exe_accept
  940 e434: 04 e1 ce        jsr exe_expr
  941 e437: 47              LDAVR R7
  942 e438: 37              MVARL R7
  943 e439: 0e 00           LDAI 0
  944 e43b: 3f              MVARH R7
  945 e43c: 07 07           PUSHR R7
  946 e43e:             
  947 e43e: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
  948 e440: 04 e1 37        jsr exe_accept
  949 e443: 04 e5 80        jsr exe_variable_num
  950 e446: 08 70           popr r7
  951 e448:             
  952 e448: 04 e5 2f        jsr  EXE_SET_VARIABLE
  953 e44b: 0e 04           ldai TOKENIZER_VARIABLE
  954 e44d: 04 e1 37        jsr EXE_ACCEPT
  955 e450: 0e 24           ldai TOKENIZER_CR
  956 e452: 04 e1 37        jsr exe_accept
  957 e455: 05              RET
  958 e456:             
  959 e456:             ;
  960 e456:             ; void poke_statement()
  961 e456:             ;
  962 e456:             ;poke_statement(void) {
  963 e456:             ;    VARIABLE_TYPE poke_addr;
  964 e456:             ;    VARIABLE_TYPE value;
  965 e456:             ;
  966 e456:             ;    accept(TOKENIZER_POKE);
  967 e456:             ;    poke_addr = expr();
  968 e456:             ;    accept(TOKENIZER_COMMA);
  969 e456:             ;    value = expr();
  970 e456:             ;    accept(TOKENIZER_CR);
  971 e456:             
  972 e456:             ;    poke_function(poke_addr, value);
  973 e456:             
  974 e456:             exe_poke_stmt:
  975 e456: 0e 13           ldai TOKENIZER_POKE   ; eat PEEK
  976 e458: 04 e1 37        jsr exe_accept
  977 e45b:             
  978 e45b: 04 e1 ce        jsr exe_expr
  979 e45e: 07 07           PUSHR R7
  980 e460:             
  981 e460: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
  982 e462: 04 e1 37        jsr exe_accept
  983 e465:             
  984 e465: 04 e1 ce        jsr exe_expr
  985 e468: 27              MVRLA R7
  986 e469:             
  987 e469: 08 70           POPR R7
  988 e46b:             
  989 e46b: 4f              STAVR R7
  990 e46c:             
  991 e46c: 0e 24           ldai TOKENIZER_CR
  992 e46e: 04 e1 37        jsr exe_accept
  993 e471: 05              RET
  994 e472:             
  995 e472:             ;
  996 e472:             ; void end_statement()
  997 e472:             ;
  998 e472:             exe_end_stmt:
  999 e472: 1e 02 00        mviw r6,bas_run_ended
 1000 e475: 0e 01           LDAI 1
 1001 e477: 4e              STAVR r6
 1002 e478: 05              ret
 1003 e479:             
 1004 e479:             ;
 1005 e479:             ; void statment()
 1006 e479:             ;
 1007 e479:             exe_stmt:
 1008 e479: 43              LDAVR R3
 1009 e47a:             
 1010 e47a: 0d 06           LDTI TOKENIZER_PRINT
 1011 e47c: aa e4 83        BRNEQ exe_stmt1
 1012 e47f: 04 e2 e6        JSR exe_print_stmt
 1013 e482: 05              ret
 1014 e483:             
 1015 e483:             exe_stmt1:
 1016 e483: 0d 07           LDTI TOKENIZER_IF
 1017 e485: aa e4 8c        BRNEQ exe_stmt2
 1018 e488: 04 e3 48        JSR exe_if_stmt
 1019 e48b: 05              ret
 1020 e48c:             
 1021 e48c:             exe_stmt2:
 1022 e48c: 0d 04           LDTI TOKENIZER_VARIABLE
 1023 e48e: aa e4 95        BRNEQ exe_stmt3
 1024 e491: 04 e3 74        JSR exe_let_stmt
 1025 e494: 05              ret
 1026 e495:             
 1027 e495:             exe_stmt3:
 1028 e495: 0d 0e           LDTI TOKENIZER_GOSUB
 1029 e497: aa e4 9e        BRNEQ exe_stmt4
 1030 e49a: 04 e3 91        JSR exe_gosub_stmt
 1031 e49d: 05              ret
 1032 e49e:             
 1033 e49e:             exe_stmt4:
 1034 e49e: 0d 0f           LDTI TOKENIZER_RETURN
 1035 e4a0: aa e4 a7        BRNEQ exe_stmt5
 1036 e4a3: 04 e3 ad        JSR exe_return_stmt
 1037 e4a6: 05              ret
 1038 e4a7:             
 1039 e4a7:             exe_stmt5:
 1040 e4a7: 0d 0a           LDTI TOKENIZER_FOR
 1041 e4a9: aa e4 b0        BRNEQ exe_stmt6
 1042 e4ac: 04 e3 f5        JSR exe_for_stmt
 1043 e4af: 05              ret
 1044 e4b0:             
 1045 e4b0:             exe_stmt6:
 1046 e4b0: 0d 12           LDTI TOKENIZER_PEEK
 1047 e4b2: aa e4 b9        BRNEQ exe_stmt7
 1048 e4b5: 04 e4 2f        JSR exe_peek_stmt
 1049 e4b8: 05              ret
 1050 e4b9:             
 1051 e4b9:             exe_stmt7:
 1052 e4b9: 0d 13           LDTI TOKENIZER_POKE
 1053 e4bb: aa e4 c2        BRNEQ exe_stmt8
 1054 e4be: 04 e4 56        JSR exe_poke_stmt
 1055 e4c1: 05              ret
 1056 e4c2:             
 1057 e4c2:             exe_stmt8:
 1058 e4c2: 0d 0c           LDTI TOKENIZER_NEXT
 1059 e4c4: aa e4 cb        BRNEQ exe_stmt9
 1060 e4c7: 04 e3 bb        JSR exe_next_stmt
 1061 e4ca: 05              ret
 1062 e4cb:             
 1063 e4cb:             exe_stmt9:
 1064 e4cb: 0d 14           LDTI TOKENIZER_END
 1065 e4cd: aa e4 d4        BRNEQ exe_stmt10
 1066 e4d0: 04 e4 72        JSR exe_end_stmt
 1067 e4d3: 05              ret
 1068 e4d4:             
 1069 e4d4:             exe_stmt10:
 1070 e4d4: 0d 05           LDTI TOKENIZER_LET
 1071 e4d6: aa e4 e2        BRNEQ exe_stmt11
 1072 e4d9: 0e 05           LDAI TOKENIZER_LET
 1073 e4db: 04 e1 37        JSR exe_accept
 1074 e4de: 04 e3 74        JSR exe_let_stmt
 1075 e4e1: 05              ret
 1076 e4e2:             
 1077 e4e2:             exe_stmt11:
 1078 e4e2: 0d 0d           LDTI TOKENIZER_GOTO
 1079 e4e4: aa e4 eb        BRNEQ exe_stmt12
 1080 e4e7: 04 e2 da        JSR exe_goto_stmt
 1081 e4ea: 05              ret
 1082 e4eb:             
 1083 e4eb:             exe_stmt12:
 1084 e4eb: 04 ff e0        jsr showbytea
 1085 e4ee: 0e 3d           ldai '='
 1086 e4f0: 04 ff c8        jsr uartout
 1087 e4f3: 1f e0 ed        MVIW R7,bas_msg3
 1088 e4f6: 04 ff c0        jsr stringout
 1089 e4f9: 04 ff dc        JSR SHOWREGS
 1090 e4fc: 04 e5 45        jsr bas_error
 1091 e4ff:             
 1092 e4ff:             ;
 1093 e4ff:             ; void line_statement (void)
 1094 e4ff:             ;
 1095 e4ff:             exe_line_stmt:
 1096 e4ff: 0e 25           LDAI TOKENIZER_LINENUM
 1097 e501: 04 e1 37        jsr exe_accept
 1098 e504: 04 e4 79        jsr exe_stmt
 1099 e507: 05              ret
 1100 e508:             
 1101 e508:             ;
 1102 e508:             ; void ubasic_run()
 1103 e508:             ;
 1104 e508:             basic_run:
 1105 e508: 04 e1 25        JSR exe_init
 1106 e50b:             
 1107 e50b:             exe_run:
 1108 e50b: 04 e5 1a        jsr exe_finished
 1109 e50e: 0d 01           LDTI 1
 1110 e510: aa e5 14        BRNEQ exe_run_cont
 1111 e513: 05              ret
 1112 e514:             
 1113 e514:             exe_run_cont:
 1114 e514: 04 e4 ff        jsr exe_line_stmt
 1115 e517: a0 e5 0b        BR exe_run
 1116 e51a:             
 1117 e51a:             ;
 1118 e51a:             ; int ubasic_finished()
 1119 e51a:             ;
 1120 e51a:             exe_finished:
 1121 e51a: 1a 02 00        MVIW R2,bas_run_ended
 1122 e51d: 42              LDAVR R2
 1123 e51e: 0d 01           LDTI 1
 1124 e520: a8 e5 2c        BREQ exe_finished_yes
 1125 e523:             
 1126 e523: 43              ldavr r3
 1127 e524: 0d 01           ldti TOKENIZER_EOF
 1128 e526: a8 e5 2c        breq exe_finished_yes
 1129 e529: 0e 00           ldai 0
 1130 e52b: 05              ret
 1131 e52c:             
 1132 e52c:             exe_finished_yes:
 1133 e52c: 0e 01           LDAI 1
 1134 e52e: 05              ret
 1135 e52f:             
 1136 e52f:             ;
 1137 e52f:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1138 e52f:             ;
 1139 e52f:             ; R7 value (only using low byte)
 1140 e52f:             ; ACCUMULATOR Variable ref number
 1141 e52f:             ;
 1142 e52f:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1143 e52f:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1144 e52f:             ;
 1145 e52f:             exe_set_variable:
 1146 e52f: 1a 01 00        MVIW R2,BASIC_VARS  ; SEE COMMENT below about memory alignment
 1147 e532: b6              SHL                 ; memory location x 2 (2 byte vars)
 1148 e533: 32              MVARL R2            ; change to add16 to remove align issue
 1149 e534:             ;
 1150 e534: 27              MVRLA R7
 1151 e535: 4a              STAVR R2
 1152 e536: 52              INCR r2
 1153 e537: 2f              mvrha r7
 1154 e538: 4a              stavr r2
 1155 e539:             
 1156 e539: 05              RET
 1157 e53a:             ;
 1158 e53a:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1159 e53a:             ;
 1160 e53a:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1161 e53a:             ;
 1162 e53a:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1163 e53a:             ; and only 0-25 (var names a-z) supported
 1164 e53a:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1165 e53a:             ;
 1166 e53a:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1167 e53a:             ;
 1168 e53a:             exe_get_variable:
 1169 e53a: 1a 01 00        MVIW R2,BASIC_VARS
 1170 e53d: b6              shl
 1171 e53e: 32              MVARL R2
 1172 e53f:             ;
 1173 e53f: 42              LDAVR R2
 1174 e540: 37              MVARL R7
 1175 e541: 52              INCR R2
 1176 e542: 42              LDAVR R2
 1177 e543: 3f              MVARH R7
 1178 e544: 05              RET
 1179 e545:             
 1180 e545:             ;
 1181 e545:             ; hack this needs work
 1182 e545:             ;
 1183 e545:             bas_error:
 1184 e545: 03            HALT
 1185 e546: 05            RET
 1186 e547:             
 1187 e547:             ;
 1188 e547:             ; Tokenizer execute support code
 1189 e547:             ;
 1190 e547:             ; tokenizer_next - exe version
 1191 e547:             ;
 1192 e547:             exe_next_token:
 1193 e547: 43            ldavr r3
 1194 e548: 0d 02         ldti TOKENIZER_NUMBER
 1195 e54a: aa e5 51      BRNEQ exe_next_token1
 1196 e54d: 53            incr r3
 1197 e54e: 53            incr r3
 1198 e54f: 53            incr r3
 1199 e550: 05            RET
 1200 e551:             
 1201 e551:             exe_next_token1:
 1202 e551: 0d 04         ldti TOKENIZER_VARIABLE
 1203 e553: aa e5 5a      BRNEQ exe_next_token2
 1204 e556: 53            incr r3
 1205 e557: 53            incr r3
 1206 e558: 53            incr r3
 1207 e559: 05            RET
 1208 e55a:             
 1209 e55a:             exe_next_token2:
 1210 e55a: 0d 25         ldti TOKENIZER_LINENUM
 1211 e55c: aa e5 65      BRNEQ exe_next_token3
 1212 e55f: 53            incr r3
 1213 e560: 53            incr r3
 1214 e561: 53            incr r3
 1215 e562: 53            incr r3
 1216 e563: 53            incr r3
 1217 e564: 05            RET
 1218 e565:             
 1219 e565:             exe_next_token3:
 1220 e565: 0d 03         ldti TOKENIZER_STRING
 1221 e567: aa e5 75      BRNEQ exe_next_token4
 1222 e56a: 53            incr r3
 1223 e56b:             
 1224 e56b:             exe_next_tok3_loop:
 1225 e56b: 43            LDAVR R3
 1226 e56c: a1 e5 73      BRZ exe_next_tok3_done
 1227 e56f: 53            incr r3
 1228 e570: a0 e5 6b      BR exe_next_tok3_loop
 1229 e573:             
 1230 e573:             exe_next_tok3_done:
 1231 e573: 53            incr r3
 1232 e574: 05            RET
 1233 e575:             
 1234 e575:             exe_next_token4:
 1235 e575: 53            incr r3
 1236 e576: 05            ret
 1237 e577:             
 1238 e577:             ;
 1239 e577:             ; numbers stored low byte followed by high byte in memory
 1240 e577:             ;
 1241 e577:             exe_num:
 1242 e577: 53              incr r3
 1243 e578: 43              ldavr r3
 1244 e579: 37              mvarl r7
 1245 e57a: 53              incr r3
 1246 e57b: 43              ldavr r3
 1247 e57c: 3f              mvarh r7
 1248 e57d: 5b              decr r3
 1249 e57e: 5b              decr r3
 1250 e57f: 05              ret
 1251 e580:             
 1252 e580:             ;
 1253 e580:             ; hack only using low byte of id for now
 1254 e580:             ; return in accumulator
 1255 e580:             ;
 1256 e580:             exe_variable_num:
 1257 e580: 53              incr r3
 1258 e581: 43              ldavr r3
 1259 e582: 5b              decr r3
 1260 e583: 05              ret
 1261 e584:             
 1262 e584:             
 1263 e584:             ;
 1264 e584:             ; Convert number in r7 to ASCII
 1265 e584:             ;
 1266 e584:             ; for for negative numbers
 1267 e584:             ;
 1268 e584: 27 10 03 e8 
            00 64 00 0a 
            00 00       dividers: DW 02710h,03e8h,0064h,000Ah,0000h
 1269 e58e:             
 1270 e58e:             exe_itoa:
 1271 e58e: 09                push
 1272 e58f: 2f                mvrha r7
 1273 e590: b3 80             andi 080h
 1274 e592: a1 e5 a1          brz exe_itoa_pos
 1275 e595:             
 1276 e595: 2f                mvrha r7
 1277 e596: b5                inva
 1278 e597: 3f                mvarh r7
 1279 e598: 27                mvrla r7
 1280 e599: b5                inva
 1281 e59a: 37                mvarl r7
 1282 e59b: 57                incr r7
 1283 e59c: 0e 2d             ldai '-'
 1284 e59e: 04 ff c4          jsr charout
 1285 e5a1:             
 1286 e5a1:             exe_itoa_pos:
 1287 e5a1: 07 04             pushr r4    ; dividers ptr
 1288 e5a3: 07 05             pushr r5    ; value holder
 1289 e5a5: 1d 00 00          mviw r5,0
 1290 e5a8: 0e 01             ldai 1
 1291 e5aa: 3d                mvarh r5
 1292 e5ab: 07 06             pushr r6    ;
 1293 e5ad: 1c e5 84          mviw  r4,dividers
 1294 e5b0:             
 1295 e5b0:             exe_itoa_loop:
 1296 e5b0: 44                ldavr r4
 1297 e5b1: 3e                mvarh r6
 1298 e5b2: 54                incr r4
 1299 e5b3: 44                ldavr r4
 1300 e5b4: 36                mvarl r6
 1301 e5b5: 5c                decr r4
 1302 e5b6: 04 ed f2          jsr parse_compare
 1303 e5b9: 0d ff             ldti 0ffh
 1304 e5bb: a8 e5 c8          breq exe_itoa_next
 1305 e5be: 0e 00             ldai 0
 1306 e5c0: 3d                mvarh r5
 1307 e5c1: 04 ed a5          jsr PARSE_SUB16
 1308 e5c4: 55                incr r5
 1309 e5c5: a0 e5 b0          br exe_itoa_loop
 1310 e5c8:             
 1311 e5c8:             exe_itoa_next:
 1312 e5c8: 2d                mvrha r5
 1313 e5c9: a2 e5 d5          brnz exe_itoa_notyet
 1314 e5cc: 25                mvrla r5
 1315 e5cd: b0 30             addi '0'
 1316 e5cf: 04 ff c4          JSR charout
 1317 e5d2: 0e 00             ldai 0
 1318 e5d4: 3d                mvarh r5
 1319 e5d5:             
 1320 e5d5:             exe_itoa_notyet:
 1321 e5d5: 0e 00             ldai 0
 1322 e5d7: 35                mvarl r5
 1323 e5d8: 54                incr r4
 1324 e5d9: 54                incr r4
 1325 e5da: 44                ldavr r4
 1326 e5db: a2 e5 b0          brnz exe_itoa_loop
 1327 e5de: 54                incr r4
 1328 e5df: 44                ldavr r4
 1329 e5e0: 5c                decr r4
 1330 e5e1: a2 e5 b0          brnz exe_itoa_loop
 1331 e5e4:             
 1332 e5e4:             ;      mvrha r5
 1333 e5e4:             ;      brz exe_itoa_noones
 1334 e5e4: 27                mvrla r7
 1335 e5e5: b0 30             addi '0'
 1336 e5e7: 04 ff c4          JSR charout
 1337 e5ea:             exe_itoa_noones:
 1338 e5ea: 08 60             popr r6
 1339 e5ec: 08 50             popr r5
 1340 e5ee: 08 40             popr r4
 1341 e5f0: 0a                pop
 1342 e5f1: 05                RET
 1343 e5f2:             
 1344 e5f2:             
 1345 e5f2:             
 1346 e5f2:             ;
 1347 e5f2:             ; List out token buffer in human readable form
 1348 e5f2:             ;
 1349 e5f2:             ; list out token buffer
 1350 e5f2:             ; buffer address in r7
 1351 e5f2:             ;
 1352 e5f2: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1353 e5f7: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1354 e5fe: 49 46 20 00 tokl_if: DB "IF ",0
 1355 e602: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1356 e608: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1357 e60e: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1358 e613: 54 4f 20 00 tokl_to: DB "TO ",0
 1359 e617: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1360 e61d: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1361 e623: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1362 e62a: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1363 e632: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1364 e637: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1365 e63d: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1366 e643: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1367 e648: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1368 e64e: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1369 e659:             
 1370 e659:             
 1371 e659:             basic_list:
 1372 e659: 07 03           pushr r3
 1373 e65b: 0f 37           movrr r7,r3
 1374 e65d:             
 1375 e65d:             
 1376 e65d:             baslist_loop:
 1377 e65d: 43              ldavr r3
 1378 e65e:             
 1379 e65e: 0d 00           LDTI TOKENIZER_ERROR
 1380 e660: aa e6 72        BRNEQ baslist1
 1381 e663: 1f e6 4e        MVIW R7,tokl_error
 1382 e666: 04 ff c0        JSR stringout
 1383 e669: 04 ff cc        JSR showaddr
 1384 e66c: a0 e9 08        BR baslist_done
 1385 e66f: a0 e6 5d        BR baslist_loop
 1386 e672:             
 1387 e672:             baslist1:
 1388 e672: 0d 01           LDTI TOKENIZER_EOF
 1389 e674: aa e6 7d        BRNEQ baslist2
 1390 e677: a0 e9 08        BR baslist_done
 1391 e67a: a0 e6 5d        BR baslist_loop
 1392 e67d:             
 1393 e67d:             baslist2:
 1394 e67d: 0d 02           LDTI TOKENIZER_NUMBER
 1395 e67f: aa e6 94        BRNEQ baslist3
 1396 e682: 53              incr r3
 1397 e683: 43              ldavr r3
 1398 e684: 37              mvarl r7
 1399 e685: 53              incr r3
 1400 e686: 43              ldavr r3
 1401 e687: 3f              mvarh r7
 1402 e688: 53              INCR R3
 1403 e689:             ;    jsr showr7
 1404 e689: 04 e5 8e        jsr exe_itoa
 1405 e68c: 0e 20           ldai ' '
 1406 e68e: 04 ff c8        jsr uartout
 1407 e691: a0 e6 5d        BR baslist_loop
 1408 e694:             
 1409 e694:             baslist3:
 1410 e694: 0d 03           LDTI TOKENIZER_STRING
 1411 e696: aa e6 b0        BRNEQ baslist4
 1412 e699: 53              incr r3
 1413 e69a: 0f 73           movrr r3,r7
 1414 e69c: 04 ff c0        jsr stringout
 1415 e69f: 0e 20           ldai ' '
 1416 e6a1: 04 ff c8        jsr uartout
 1417 e6a4:             baslist_string:
 1418 e6a4: 43              ldavr r3
 1419 e6a5: a1 e6 ac        brz baslist_stringend
 1420 e6a8: 53              incr r3
 1421 e6a9: a0 e6 a4        br baslist_string
 1422 e6ac:             baslist_stringend:
 1423 e6ac: 53              incr r3
 1424 e6ad: a0 e6 5d        BR baslist_loop
 1425 e6b0:             
 1426 e6b0:             baslist4:
 1427 e6b0: 0d 04           LDTI TOKENIZER_VARIABLE
 1428 e6b2: aa e6 c7        BRNEQ baslist5
 1429 e6b5: 53              incr r3
 1430 e6b6: 43              ldavr r3
 1431 e6b7: 0d 41           ldti 'A'
 1432 e6b9: b8              ADDT
 1433 e6ba: 53              incr r3
 1434 e6bb: 53              incr r3
 1435 e6bc: 04 ff c8        jsr uartout
 1436 e6bf:             
 1437 e6bf:             ;    ldavr r3
 1438 e6bf:             ;    mvarl r7
 1439 e6bf:             ;    incr r3
 1440 e6bf:             ;    ldavr r3
 1441 e6bf:             ;    mvarh r7
 1442 e6bf:             ;    INCR R3
 1443 e6bf:             ;    jsr showr7
 1444 e6bf:             
 1445 e6bf: 0e 20           ldai ' '
 1446 e6c1: 04 ff c8        jsr uartout
 1447 e6c4: a0 e6 5d        BR baslist_loop
 1448 e6c7:             
 1449 e6c7:             baslist5:
 1450 e6c7: 0d 05           LDTI TOKENIZER_LET
 1451 e6c9: aa e6 d6        BRNEQ baslist6
 1452 e6cc: 1f e5 f2        MVIW R7,tokl_let
 1453 e6cf: 04 ff c0        JSR stringout
 1454 e6d2: 53              INCR R3
 1455 e6d3: a0 e6 5d        BR baslist_loop
 1456 e6d6:             
 1457 e6d6:             baslist6:
 1458 e6d6: 0d 06           LDTI TOKENIZER_PRINT
 1459 e6d8: aa e6 e5        BRNEQ baslist7
 1460 e6db: 1f e5 f7        MVIW R7,tokl_print
 1461 e6de: 04 ff c0        jsr STRINGOUT
 1462 e6e1: 53              INCR R3
 1463 e6e2: a0 e6 5d        BR baslist_loop
 1464 e6e5:             
 1465 e6e5:             baslist7:
 1466 e6e5: 0d 07           LDTI TOKENIZER_IF
 1467 e6e7: aa e6 f4        BRNEQ baslist8
 1468 e6ea: 1f e5 fe        MVIW R7,tokl_if
 1469 e6ed: 04 ff c0        JSR stringout
 1470 e6f0: 53              INCR R3
 1471 e6f1: a0 e6 5d        BR baslist_loop
 1472 e6f4:             
 1473 e6f4:             baslist8:
 1474 e6f4: 0d 08           LDTI TOKENIZER_THEN
 1475 e6f6: aa e7 03        BRNEQ baslist9
 1476 e6f9: 1f e6 02        MVIW R7,tokl_then
 1477 e6fc: 04 ff c0        JSR stringout
 1478 e6ff: 53              INCR R3
 1479 e700: a0 e6 5d        BR baslist_loop
 1480 e703:             
 1481 e703:             baslist9:
 1482 e703: 0d 09           LDTI TOKENIZER_ELSE
 1483 e705: aa e7 12        BRNEQ baslist10
 1484 e708: 1f e6 08        MVIW R7,tokl_else
 1485 e70b: 04 ff c0        JSR stringout
 1486 e70e: 53              INCR R3
 1487 e70f: a0 e6 5d        BR baslist_loop
 1488 e712:             
 1489 e712:             baslist10:
 1490 e712: 0d 0a           LDTI TOKENIZER_FOR
 1491 e714: aa e7 21        BRNEQ baslist11
 1492 e717: 1f e6 0e        MVIW R7,tokl_for
 1493 e71a: 04 ff c0        JSR stringout
 1494 e71d: 53              INCR R3
 1495 e71e: a0 e6 5d        BR baslist_loop
 1496 e721:             
 1497 e721:             baslist11:
 1498 e721: 0d 0b           LDTI TOKENIZER_TO
 1499 e723: aa e7 30        BRNEQ baslist12
 1500 e726: 1f e6 13        MVIW R7,tokl_to
 1501 e729: 04 ff c0        JSR stringout
 1502 e72c: 53              INCR R3
 1503 e72d: a0 e6 5d        BR baslist_loop
 1504 e730:             
 1505 e730:             baslist12:
 1506 e730: 0d 0c           LDTI TOKENIZER_NEXT
 1507 e732: aa e7 3f        BRNEQ baslist13
 1508 e735: 1f e6 17        MVIW R7,tokl_next
 1509 e738: 04 ff c0        JSR stringout
 1510 e73b: 53              INCR R3
 1511 e73c: a0 e6 5d        BR baslist_loop
 1512 e73f:             
 1513 e73f:             baslist13:
 1514 e73f: 0d 0d           LDTI TOKENIZER_GOTO
 1515 e741: aa e7 4e        BRNEQ baslist14
 1516 e744: 1f e6 1d        MVIW R7,tokl_goto
 1517 e747: 04 ff c0        JSR stringout
 1518 e74a: 53              INCR R3
 1519 e74b: a0 e6 5d        BR baslist_loop
 1520 e74e:             
 1521 e74e:             baslist14:
 1522 e74e: 0d 0e           LDTI TOKENIZER_GOSUB
 1523 e750: aa e7 5d        BRNEQ baslist15
 1524 e753: 1f e6 23        MVIW R7,tokl_gosub
 1525 e756: 04 ff c0        JSR stringout
 1526 e759: 53              INCR R3
 1527 e75a: a0 e6 5d        BR baslist_loop
 1528 e75d:             
 1529 e75d:             baslist15:
 1530 e75d: 0d 0f           LDTI TOKENIZER_RETURN
 1531 e75f: aa e7 6c        BRNEQ baslist16
 1532 e762: 1f e6 2a        MVIW R7,tokl_return
 1533 e765: 04 ff c0        JSR stringout
 1534 e768: 53              INCR R3
 1535 e769: a0 e6 5d        BR baslist_loop
 1536 e76c:             
 1537 e76c:             baslist16:
 1538 e76c: 0d 10           LDTI TOKENIZER_CALL
 1539 e76e: aa e7 7b        BRNEQ baslist17
 1540 e771: 1f e6 48        MVIW R7,tokl_call
 1541 e774: 04 ff c0        JSR stringout
 1542 e777: 53              INCR R3
 1543 e778: a0 e6 5d        BR baslist_loop
 1544 e77b:             
 1545 e77b:             baslist17:
 1546 e77b: 0d 11           LDTI TOKENIZER_REM
 1547 e77d: aa e7 8a        BRNEQ baslist18
 1548 e780: 1f e6 32        MVIW R7,tokl_rem
 1549 e783: 04 ff c0        JSR stringout
 1550 e786: 53              INCR R3
 1551 e787: a0 e6 5d        BR baslist_loop
 1552 e78a:             
 1553 e78a:             baslist18:
 1554 e78a: 0d 12           LDTI TOKENIZER_PEEK
 1555 e78c: aa e7 99        BRNEQ baslist19
 1556 e78f: 1f e6 37        MVIW R7,tokl_peek
 1557 e792: 04 ff c0        JSR stringout
 1558 e795: 53              INCR R3
 1559 e796: a0 e6 5d        BR baslist_loop
 1560 e799:             
 1561 e799:             baslist19:
 1562 e799: 0d 13           LDTI TOKENIZER_POKE
 1563 e79b: aa e7 a8        BRNEQ baslist20
 1564 e79e: 1f e6 3d        MVIW R7,tokl_poke
 1565 e7a1: 04 ff c0        JSR stringout
 1566 e7a4: 53              INCR R3
 1567 e7a5: a0 e6 5d        BR baslist_loop
 1568 e7a8:             
 1569 e7a8:             baslist20:
 1570 e7a8: 0d 14           LDTI TOKENIZER_END
 1571 e7aa: aa e7 b7        BRNEQ baslist21
 1572 e7ad: 1f e6 43        MVIW R7,tokl_end
 1573 e7b0: 04 ff c0        JSR stringout
 1574 e7b3: 53              INCR R3
 1575 e7b4: a0 e6 5d        BR baslist_loop
 1576 e7b7:             
 1577 e7b7:             baslist21:
 1578 e7b7: 0d 15           LDTI TOKENIZER_COMMA
 1579 e7b9: aa e7 ca        BRNEQ baslist22
 1580 e7bc: 0e 2c           ldai ','
 1581 e7be: 04 ff c8        jsr uartout
 1582 e7c1: 0e 20           ldai ' '
 1583 e7c3: 04 ff c8        jsr uartout
 1584 e7c6: 53              INCR R3
 1585 e7c7: a0 e6 5d        BR baslist_loop
 1586 e7ca:             
 1587 e7ca:             baslist22:
 1588 e7ca: 0d 16           LDTI TOKENIZER_SEMICOLON
 1589 e7cc: aa e7 dd        BRNEQ baslist23
 1590 e7cf: 0e 3b           ldai ';'
 1591 e7d1: 04 ff c8        jsr uartout
 1592 e7d4: 0e 20           ldai ' '
 1593 e7d6: 04 ff c8        jsr uartout
 1594 e7d9: 53              INCR R3
 1595 e7da: a0 e6 5d        BR baslist_loop
 1596 e7dd:             
 1597 e7dd:             baslist23:
 1598 e7dd: 0d 17           LDTI TOKENIZER_PLUS
 1599 e7df: aa e7 f0        BRNEQ baslist24
 1600 e7e2: 0e 2b           ldai '+'
 1601 e7e4: 04 ff c8        jsr uartout
 1602 e7e7: 0e 20           ldai ' '
 1603 e7e9: 04 ff c8        jsr uartout
 1604 e7ec: 53              INCR R3
 1605 e7ed: a0 e6 5d        BR baslist_loop
 1606 e7f0:             
 1607 e7f0:             baslist24:
 1608 e7f0: 0d 18           LDTI TOKENIZER_MINUS
 1609 e7f2: aa e8 03        BRNEQ baslist25
 1610 e7f5: 0e 2d           ldai '-'
 1611 e7f7: 04 ff c8        jsr uartout
 1612 e7fa: 0e 20           ldai ' '
 1613 e7fc: 04 ff c8        jsr uartout
 1614 e7ff: 53              INCR R3
 1615 e800: a0 e6 5d        BR baslist_loop
 1616 e803:             
 1617 e803:             baslist25:
 1618 e803: 0d 19           LDTI TOKENIZER_AND
 1619 e805: aa e8 16        BRNEQ baslist26
 1620 e808: 0e 26           ldai '&'
 1621 e80a: 04 ff c8        jsr uartout
 1622 e80d: 0e 20           ldai ' '
 1623 e80f: 04 ff c8        jsr uartout
 1624 e812: 53              INCR R3
 1625 e813: a0 e6 5d        BR baslist_loop
 1626 e816:             
 1627 e816:             baslist26:
 1628 e816: 0d 1a           LDTI TOKENIZER_OR
 1629 e818: aa e8 29        BRNEQ baslist27
 1630 e81b: 0e 7c           ldai '|'
 1631 e81d: 04 ff c8        jsr uartout
 1632 e820: 0e 20           ldai ' '
 1633 e822: 04 ff c8        jsr uartout
 1634 e825: 53              INCR R3
 1635 e826: a0 e6 5d        BR baslist_loop
 1636 e829:             
 1637 e829:             baslist27:
 1638 e829: 0d 1b           LDTI TOKENIZER_ASTR
 1639 e82b: aa e8 3c        BRNEQ baslist28
 1640 e82e: 0e 2a           ldai '*'
 1641 e830: 04 ff c8        jsr uartout
 1642 e833: 0e 20           ldai ' '
 1643 e835: 04 ff c8        jsr uartout
 1644 e838: 53              INCR R3
 1645 e839: a0 e6 5d        BR baslist_loop
 1646 e83c:             
 1647 e83c:             baslist28:
 1648 e83c: 0d 1c           LDTI TOKENIZER_SLASH
 1649 e83e: aa e8 4f        BRNEQ baslist29
 1650 e841: 0e 2f           ldai '/'
 1651 e843: 04 ff c8        jsr uartout
 1652 e846: 0e 20           ldai ' '
 1653 e848: 04 ff c8        jsr uartout
 1654 e84b: 53              INCR R3
 1655 e84c: a0 e6 5d        BR baslist_loop
 1656 e84f:             
 1657 e84f:             baslist29:
 1658 e84f: 0d 1d           LDTI TOKENIZER_MOD
 1659 e851: aa e8 62        BRNEQ baslist30
 1660 e854: 0e 25           ldai '%'
 1661 e856: 04 ff c8        jsr uartout
 1662 e859: 0e 20           ldai ' '
 1663 e85b: 04 ff c8        jsr uartout
 1664 e85e: 53              INCR R3
 1665 e85f: a0 e6 5d        BR baslist_loop
 1666 e862:             
 1667 e862:             baslist30:
 1668 e862: 0d 1e           LDTI TOKENIZER_HASH
 1669 e864: aa e8 75        BRNEQ baslist31
 1670 e867: 0e 23           ldai '#'
 1671 e869: 04 ff c8        jsr uartout
 1672 e86c: 0e 20           ldai ' '
 1673 e86e: 04 ff c8        jsr uartout
 1674 e871: 53              INCR R3
 1675 e872: a0 e6 5d        BR baslist_loop
 1676 e875:             
 1677 e875:             baslist31:
 1678 e875: 0d 1f           LDTI TOKENIZER_LEFTP
 1679 e877: aa e8 88        BRNEQ baslist32
 1680 e87a: 0e 28           ldai '()'
 1681 e87c: 04 ff c8        jsr uartout
 1682 e87f: 0e 20           ldai ' '
 1683 e881: 04 ff c8        jsr uartout
 1684 e884: 53              INCR R3
 1685 e885: a0 e6 5d        BR baslist_loop
 1686 e888:             
 1687 e888:             baslist32:
 1688 e888: 0d 20           LDTI TOKENIZER_RIGHTP
 1689 e88a: aa e8 9b        BRNEQ baslist33
 1690 e88d: 0e 29           ldai ')'
 1691 e88f: 04 ff c8        jsr uartout
 1692 e892: 0e 20           ldai ' '
 1693 e894: 04 ff c8        jsr uartout
 1694 e897: 53              INCR R3
 1695 e898: a0 e6 5d        BR baslist_loop
 1696 e89b:             
 1697 e89b:             baslist33:
 1698 e89b: 0d 21           LDTI TOKENIZER_LT
 1699 e89d: aa e8 ae        BRNEQ baslist34
 1700 e8a0: 0e 3c           ldai '<'
 1701 e8a2: 04 ff c8        jsr uartout
 1702 e8a5: 0e 20           ldai ' '
 1703 e8a7: 04 ff c8        jsr uartout
 1704 e8aa: 53              INCR R3
 1705 e8ab: a0 e6 5d        BR baslist_loop
 1706 e8ae:             
 1707 e8ae:             baslist34:
 1708 e8ae: 0d 22           LDTI TOKENIZER_GT
 1709 e8b0: aa e8 c1        BRNEQ baslist35
 1710 e8b3: 0e 3e           ldai '>'
 1711 e8b5: 04 ff c8        jsr uartout
 1712 e8b8: 0e 20           ldai ' '
 1713 e8ba: 04 ff c8        jsr uartout
 1714 e8bd: 53              INCR R3
 1715 e8be: a0 e6 5d        BR baslist_loop
 1716 e8c1:             
 1717 e8c1:             baslist35:
 1718 e8c1: 0d 23           LDTI TOKENIZER_EQ
 1719 e8c3: aa e8 d4        BRNEQ baslist36
 1720 e8c6: 0e 3d           ldai '='
 1721 e8c8: 04 ff c8        jsr uartout
 1722 e8cb: 0e 20           ldai ' '
 1723 e8cd: 04 ff c8        jsr uartout
 1724 e8d0: 53              INCR R3
 1725 e8d1: a0 e6 5d        BR baslist_loop
 1726 e8d4:             
 1727 e8d4:             baslist36:
 1728 e8d4: 0d 24           LDTI TOKENIZER_CR
 1729 e8d6: aa e8 e3        BRNEQ baslist37
 1730 e8d9: 1f ee 39        mviw R7,CRLF
 1731 e8dc: 04 ff c0        jsr stringout
 1732 e8df: 53              INCR R3
 1733 e8e0: a0 e6 5d        BR baslist_loop
 1734 e8e3:             
 1735 e8e3:             baslist37:
 1736 e8e3: 0d 25           LDTI TOKENIZER_LINENUM
 1737 e8e5: aa e8 fc        BRNEQ baslist38
 1738 e8e8: 53              incr r3
 1739 e8e9: 43              ldavr r3
 1740 e8ea: 37              mvarl r7
 1741 e8eb: 53              incr r3
 1742 e8ec: 43              ldavr r3
 1743 e8ed: 3f              mvarh r7
 1744 e8ee: 53              INCR R3
 1745 e8ef: 53              incr r3
 1746 e8f0: 53              incr r3
 1747 e8f1: 04 e5 8e        jsr exe_itoa
 1748 e8f4:                 ;jsr showr7
 1749 e8f4: 0e 20           ldai ' '
 1750 e8f6: 04 ff c8        jsr uartout
 1751 e8f9: a0 e6 5d        BR baslist_loop
 1752 e8fc:             
 1753 e8fc:             baslist38:
 1754 e8fc: 1f e6 4e        MVIW R7,tokl_error
 1755 e8ff: 04 ff c0        JSR stringout
 1756 e902: 04 ff cc        JSR showaddr
 1757 e905: a0 e9 08        BR baslist_done
 1758 e908:             ;
 1759 e908:             ; any cleanup
 1760 e908:             ;
 1761 e908:             baslist_done:
 1762 e908: 08 30           popr r3
 1763 e90a: 05              ret
 1764 e90b:             
 1765 e90b:             ;
 1766 e90b:             ; Basic Interpreter Parser
 1767 e90b:             ;
 1768 e90b:             parse_keywords:
 1769 e90b: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1770 e910: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1771 e917: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1772 e91b: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1773 e921: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1774 e927: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1775 e92c: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1776 e930: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1777 e936: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1778 e93c: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1779 e943: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1780 e94b: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1781 e951: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1782 e956: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1783 e95c: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1784 e962: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1785 e967: 4c 49 53 54 
            00 26             DB "list",0,TOKENIZER_LIST
 1786 e96d: 52 55 4e 00 
            27                DB "run",0,TOKENIZER_RUN
 1787 e972: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1788 e975:             
 1789 e975:             
 1790 e975:             ;
 1791 e975:             ; int singlechar (void)
 1792 e975:             ;
 1793 e975:             ; return TOKEN result in accumulator
 1794 e975:             ;
 1795 e975:             ; ready for testing
 1796 e975:             ;
 1797 e975:             parse_singlechar:
 1798 e975:             ;
 1799 e975: 07 03           pushr r3
 1800 e977: f3 02 02        LDR r3,bas_txtptr
 1801 e97a: 43              ldavr r3
 1802 e97b: 08 30           popr r3
 1803 e97d:             ;
 1804 e97d: 0d 0a           ldti 0ah
 1805 e97f: aa e9 85        brneq parsechar1
 1806 e982: 0e 24           ldai TOKENIZER_CR
 1807 e984: 05              ret
 1808 e985:             parsechar1:
 1809 e985: 0d 2c           ldti ','
 1810 e987: aa e9 8d        brneq parsechar2
 1811 e98a: 0e 15           ldai TOKENIZER_COMMA
 1812 e98c: 05              ret
 1813 e98d:             parsechar2:
 1814 e98d: 0d 3b           ldti ';'
 1815 e98f: aa e9 95        brneq parsechar3
 1816 e992: 0e 16           ldai TOKENIZER_SEMICOLON
 1817 e994: 05              ret
 1818 e995:             parsechar3:
 1819 e995: 0d 2b           ldti '+'
 1820 e997: aa e9 9d        brneq parsechar4
 1821 e99a: 0e 17           ldai TOKENIZER_PLUS
 1822 e99c: 05              ret
 1823 e99d:             parsechar4:
 1824 e99d: 0d 2d           ldti '-'
 1825 e99f: aa e9 a5        brneq parsechar5
 1826 e9a2: 0e 18           ldai TOKENIZER_MINUS
 1827 e9a4: 05              ret
 1828 e9a5:             parsechar5:
 1829 e9a5: 0d 26           ldti '&'
 1830 e9a7: aa e9 ad        brneq parsechar6
 1831 e9aa: 0e 19           ldai TOKENIZER_AND
 1832 e9ac: 05              ret
 1833 e9ad:             parsechar6:
 1834 e9ad: 0d 7c           ldti '|'
 1835 e9af: aa e9 b5        brneq parsechar7
 1836 e9b2: 0e 1a           ldai TOKENIZER_OR
 1837 e9b4: 05              ret
 1838 e9b5:             parsechar7:
 1839 e9b5: 0d 2a           ldti '*'
 1840 e9b7: aa e9 bd        brneq parsechar8
 1841 e9ba: 0e 1b           ldai TOKENIZER_ASTR
 1842 e9bc: 05              ret
 1843 e9bd:             parsechar8:
 1844 e9bd: 0d 25           ldti '%'
 1845 e9bf: aa e9 c5        brneq parsechar9
 1846 e9c2: 0e 1d           ldai TOKENIZER_MOD
 1847 e9c4: 05              ret
 1848 e9c5:             parsechar9:
 1849 e9c5: 0d 28           ldti '('
 1850 e9c7: aa e9 cd        brneq parsechar10
 1851 e9ca: 0e 1f           ldai TOKENIZER_LEFTP
 1852 e9cc: 05              ret
 1853 e9cd:             parsechar10:
 1854 e9cd: 0d 23           ldti '#'
 1855 e9cf: aa e9 d5        brneq parsechar11
 1856 e9d2: 0e 1e           ldai TOKENIZER_HASH
 1857 e9d4: 05              ret
 1858 e9d5:             parsechar11:
 1859 e9d5: 0d 29           ldti ')'
 1860 e9d7: aa e9 dd        brneq parsechar12
 1861 e9da: 0e 20           ldai TOKENIZER_RIGHTP
 1862 e9dc: 05              ret
 1863 e9dd:             parsechar12:
 1864 e9dd: 0d 3c           ldti '<'
 1865 e9df: aa e9 e5        brneq parsechar13
 1866 e9e2: 0e 21           ldai TOKENIZER_LT
 1867 e9e4: 05              ret
 1868 e9e5:             parsechar13:
 1869 e9e5: 0d 3e           ldti '>'
 1870 e9e7: aa e9 ed        brneq parsechar14
 1871 e9ea: 0e 22           ldai TOKENIZER_GT
 1872 e9ec: 05              ret
 1873 e9ed:             parsechar14:
 1874 e9ed: 0d 3d           ldti '='
 1875 e9ef: aa e9 f5        brneq parsechar15
 1876 e9f2: 0e 23           ldai TOKENIZER_EQ
 1877 e9f4: 05              ret
 1878 e9f5:             parsechar15:
 1879 e9f5: 0e 00           ldai 0
 1880 e9f7: 05              ret
 1881 e9f8:             
 1882 e9f8:             ;
 1883 e9f8:             ; int get_next_token(void)
 1884 e9f8:             ;
 1885 e9f8:             ; under development fix ptr nextptr
 1886 e9f8:             
 1887 e9f8:             parse_get_next_tok:
 1888 e9f8: 07 03           pushr r3
 1889 e9fa: f3 02 02        LDR R3,bas_txtptr
 1890 e9fd:             ;
 1891 e9fd:             ; is digit
 1892 e9fd:             ;
 1893 e9fd:             ; chcek for number
 1894 e9fd:             ;
 1895 e9fd:             parse_gnt1:
 1896 e9fd: 43              ldavr r3
 1897 e9fe: 04 ed e2        jsr parse_isdigit
 1898 ea01: a1 ea 14        brz parse_gnt2
 1899 ea04:             parse_gnt1loop:
 1900 ea04: 53              incr R3
 1901 ea05: 43              ldavr r3
 1902 ea06: 04 ed e2        jsr parse_isdigit
 1903 ea09: a2 ea 04        brnz parse_gnt1loop
 1904 ea0c: fb 02 04        STR r3,bas_nxtptr
 1905 ea0f: 0e 02           ldai TOKENIZER_NUMBER
 1906 ea11: 08 30           popr r3
 1907 ea13: 05              ret
 1908 ea14:             ;
 1909 ea14:             ; singlechar
 1910 ea14:             ;
 1911 ea14:             parse_gnt2:
 1912 ea14: 43             ldavr r3
 1913 ea15: 04 e9 75       jsr parse_singlechar
 1914 ea18: a1 ea 22       BRZ parse_gnt3
 1915 ea1b: 53             incr r3
 1916 ea1c: fb 02 04       STR r3,bas_nxtptr
 1917 ea1f: 08 30          popr r3
 1918 ea21: 05             ret
 1919 ea22:             ;
 1920 ea22:             ; quote
 1921 ea22:             ;
 1922 ea22:             parse_gnt3:
 1923 ea22: 43              ldavr R3
 1924 ea23: 0d 22           ldti '"'
 1925 ea25: aa ea 38        brneq parse_gnt4
 1926 ea28:             parse_gnt3loop:
 1927 ea28: 53              incr r3
 1928 ea29: 43              ldavr R3
 1929 ea2a: 0d 22           ldti '"'
 1930 ea2c: aa ea 28        brneq parse_gnt3loop
 1931 ea2f: 53              incr r3
 1932 ea30: fb 02 04        STR r3,bas_nxtptr
 1933 ea33: 0e 03           ldai TOKENIZER_STRING
 1934 ea35: 08 30           popr r3
 1935 ea37: 05              ret
 1936 ea38:             ;
 1937 ea38:             parse_gnt4:
 1938 ea38:             ;
 1939 ea38:             ; keyword search
 1940 ea38:             ;
 1941 ea38: 07 04           pushr r4
 1942 ea3a: 1c e9 0b        mviw r4,parse_keywords
 1943 ea3d:             top:
 1944 ea3d: 44              ldavr r4
 1945 ea3e: f3 02 02        LDR r3,bas_txtptr
 1946 ea41: a1 ea 65        brz nokeyowrdsfound
 1947 ea44:             pcmploop:
 1948 ea44: 44              ldavr r4
 1949 ea45: a1 ea 5b        brz found
 1950 ea48: 0b              MVAT
 1951 ea49: 43              ldavr r3
 1952 ea4a: aa ea 52        brneq skiptoend
 1953 ea4d: 54              incr r4
 1954 ea4e: 53              incr r3
 1955 ea4f: a0 ea 44        br pcmploop
 1956 ea52:             
 1957 ea52:             skiptoend:
 1958 ea52:             ;  skip to end of string and skip over token
 1959 ea52:             skiploop:
 1960 ea52: 44              ldavr r4
 1961 ea53: 54              incr r4
 1962 ea54: a2 ea 52        brnz skiploop
 1963 ea57: 54              incr r4
 1964 ea58: a0 ea 3d        br top
 1965 ea5b:             
 1966 ea5b:             found:
 1967 ea5b: fb 02 04        str r3,bas_nxtptr
 1968 ea5e: 54              incr r4
 1969 ea5f: 44              ldavr r4
 1970 ea60: 08 40           popr r4
 1971 ea62: 08 30           popr r3
 1972 ea64: 05              ret
 1973 ea65:             
 1974 ea65:             nokeyowrdsfound:
 1975 ea65: 08 40           popr r4
 1976 ea67:             ;
 1977 ea67:             ;  check for variables
 1978 ea67:             ;
 1979 ea67: 43              ldavr r3
 1980 ea68: 0d 41           ldti 'A'
 1981 ea6a: a7 ea 7b        BRLT parse_gnt_error
 1982 ea6d: 0d 5a           ldti 'Z'
 1983 ea6f: a9 ea 7b        BRGT parse_gnt_error
 1984 ea72: 53              INCR r3
 1985 ea73: fb 02 04        str r3,bas_nxtptr
 1986 ea76: 0e 04           LDAI tokenizer_variable
 1987 ea78: 08 30           popr r3
 1988 ea7a: 05              RET
 1989 ea7b:             
 1990 ea7b:             parse_gnt_error:
 1991 ea7b:             ;    halt
 1992 ea7b: 0e 00           ldai tokenizer_error
 1993 ea7d: 08 30           popr r3
 1994 ea7f: 05              ret
 1995 ea80:             
 1996 ea80:             ;
 1997 ea80:             ; void TOKENIZER_GOTO (char * program)
 1998 ea80:             ;
 1999 ea80:             ; under development, may not be needed
 2000 ea80:             ;
 2001 ea80:             ;parse_goto:
 2002 ea80:             ;    str r3,bas_txtptr
 2003 ea80:             ;    jsr parse_get_next_tok
 2004 ea80:             ;    sta bas_currenttoken
 2005 ea80:             ;    ret
 2006 ea80:             
 2007 ea80:             ;
 2008 ea80:             ; void tokenizer_init(int ptr)
 2009 ea80:             ;
 2010 ea80:             ; paramater ptr : R7 Points to text input line
 2011 ea80:             ;
 2012 ea80:             ; under development
 2013 ea80:             ;
 2014 ea80:             parse_init:
 2015 ea80:             
 2016 ea80: 07 03           pushr r3
 2017 ea82: ff 02 02        STR R7,bas_txtptr
 2018 ea85: 1b 04 00        MVIW r3,parse_token_buffer
 2019 ea88: fb 02 06        STR  R3,bas_tokptr
 2020 ea8b: 1b 00 00        mviw r3,0
 2021 ea8e: fb 02 08        str r3,bas_tokcounter
 2022 ea91: 04 e9 f8        jsr parse_get_next_tok
 2023 ea94: ed 02 0a        sta bas_currenttoken
 2024 ea97: 08 30           popr r3
 2025 ea99: 05              ret
 2026 ea9a:             
 2027 ea9a:             ;
 2028 ea9a:             ; int tokenizer_token(void)
 2029 ea9a:             :
 2030 ea9a:             parse_token:
 2031 ea9a: ec 02 0a        lda bas_currenttoken
 2032 ea9d: 05              ret
 2033 ea9e:             
 2034 ea9e:             ;
 2035 ea9e:             ; void tokenizer_next(void) parser version
 2036 ea9e:             ;
 2037 ea9e:             parse_next:
 2038 ea9e: 04 eb 82        jsr parse_finished
 2039 eaa1: a1 ea a5        brz parse_next1
 2040 eaa4: 05              ret
 2041 eaa5:             
 2042 eaa5:             parse_next1:
 2043 eaa5: 07 03           pushr r3
 2044 eaa7: f3 02 04        ldr r3,bas_nxtptr
 2045 eaaa: fb 02 02        str r3,bas_txtptr
 2046 eaad:             
 2047 eaad:             parse_next1loop:
 2048 eaad: 43              ldavr r3
 2049 eaae: 0d 20           ldti ' '
 2050 eab0: aa ea b7        brneq parse_next2
 2051 eab3: 53              incr r3
 2052 eab4: a0 ea ad        br parse_next1loop
 2053 eab7:             
 2054 eab7:             
 2055 eab7:             parse_next2:
 2056 eab7: fb 02 02        str r3,bas_txtptr
 2057 eaba: 04 e9 f8        jsr parse_get_next_tok
 2058 eabd: ed 02 0a        sta bas_currenttoken
 2059 eac0:             
 2060 eac0: 0d 11           ldti TOKENIZER_REM
 2061 eac2: a8 ea c8        breq parse_next3
 2062 eac5: 08 30           popr r3
 2063 eac7: 05              ret
 2064 eac8:             
 2065 eac8:             ;
 2066 eac8:             ; this needs to be fixed
 2067 eac8:             ; if rem return to parsel line then copy into token buffer
 2068 eac8:             ;
 2069 eac8:             parse_next3:
 2070 eac8: 04 eb 82        JSR parse_finished
 2071 eacb: a2 ea d8        BRNZ parse_nextdone
 2072 eace: 43              ldavr r3
 2073 eacf: 0d 0a           ldti  0ah
 2074 ead1: a8 ea d8        breq parse_nextdone
 2075 ead4: 53              incr r3
 2076 ead5: a0 ea c8        br parse_next3
 2077 ead8:             
 2078 ead8:             parse_nextdone:
 2079 ead8: 43              ldavr r3
 2080 ead9: 0d 0a           ldti  0ah
 2081 eadb: aa ea df        brneq parse_nextdone2
 2082 eade: 53              incr r3
 2083 eadf:             
 2084 eadf:             parse_nextdone2:
 2085 eadf: fb 02 04        str r3,bas_nxtptr
 2086 eae2: 04 ea 9e        jsr parse_next
 2087 eae5: 08 30           popr r3
 2088 eae7: 05              ret
 2089 eae8:             
 2090 eae8:             ;
 2091 eae8:             ; VARIABLE_TYPE tokenizer_num(void)
 2092 eae8:             ;
 2093 eae8:             ; Hack for now input characters are ascii hex format HHHH
 2094 eae8:             ;
 2095 eae8:             ; value returned in R7
 2096 eae8:             ;
 2097 eae8:             ; Should this advance the line ptr?
 2098 eae8:             ;
 2099 eae8:             
 2100 eae8:             parse_num:
 2101 eae8: 07 03           pushr r3
 2102 eaea: 07 04           pushr r4
 2103 eaec: 07 05           pushr r5
 2104 eaee: 07 06           pushr r6
 2105 eaf0: 1e 00 00        mviw r6,0           ;accumlate val in r6
 2106 eaf3: f3 02 02        LDR r3,bas_txtptr
 2107 eaf6: 04 eb 24        jsr parse_num_char
 2108 eaf9:             ;   jsr SHOWBYTEA
 2109 eaf9: 36              mvarl r6
 2110 eafa:             parse_num_loop:
 2111 eafa: 04 eb 24        jsr parse_num_char
 2112 eafd:             ;   jsr showbytea
 2113 eafd: 09              push
 2114 eafe: 0d ff           ldti 0FFH
 2115 eb00: a8 eb 18        breq parse_num_done
 2116 eb03:             
 2117 eb03: 0f 56           movrr r6,r5
 2118 eb05: 1c 00 0a        mviw r4,0ah
 2119 eb08: 04 ed 5c        jsr parse_mul16
 2120 eb0b:             ;    jsr showr7
 2121 eb0b: 0a              pop
 2122 eb0c: 1e 00 00        mviw r6,0
 2123 eb0f: 36              mvarl r6
 2124 eb10: 04 ed 97        jsr parse_add16
 2125 eb13: 0f 67           movrr r7,r6
 2126 eb15:             ;    jsr showr7
 2127 eb15: a0 ea fa        br parse_num_loop
 2128 eb18:             parse_num_done:
 2129 eb18: 0a              pop
 2130 eb19: 0f 76           movrr r6,r7
 2131 eb1b: 08 60           popr r6
 2132 eb1d: 08 50           popr r5
 2133 eb1f: 08 40           popr r4
 2134 eb21: 08 30           popr r3
 2135 eb23:             ;    jsr showr7
 2136 eb23: 05              ret
 2137 eb24:             
 2138 eb24:             parse_num_char:
 2139 eb24: 43              LDAVR R3
 2140 eb25: 04 ed e2        JSR parse_isdigit
 2141 eb28: a2 eb 2e        BRNZ parse_num_char1
 2142 eb2b: 0e ff           ldai 0ffh
 2143 eb2d: 05              ret
 2144 eb2e:             parse_num_char1:
 2145 eb2e: 43              ldavr r3
 2146 eb2f: b1 30           SUBI '0'
 2147 eb31: 53              incr r3
 2148 eb32: 05              RET
 2149 eb33:             
 2150 eb33:             parse_num_old:
 2151 eb33: 07 03           pushr r3
 2152 eb35: f3 02 02        LDR r3,bas_txtptr
 2153 eb38: 04 eb 61        JSR parse_getnibble
 2154 eb3b: b6              SHL
 2155 eb3c: b6              SHL
 2156 eb3d: b6              SHL
 2157 eb3e: b6              SHL
 2158 eb3f: b3 f0           ANDI 0f0h
 2159 eb41: 09              Push
 2160 eb42: 04 eb 61        JSR parse_getnibble
 2161 eb45: b3 0f           ANDI 0FH
 2162 eb47: 0b              MVAT
 2163 eb48: 0a              Pop
 2164 eb49: ba              ORT
 2165 eb4a: 3f              MVARH R7
 2166 eb4b:             
 2167 eb4b: 04 eb 61        JSR parse_getnibble
 2168 eb4e: b6              SHL
 2169 eb4f: b6              shl
 2170 eb50: b6              shl
 2171 eb51: b6              shl
 2172 eb52: b3 f0           ANDI 0f0h
 2173 eb54: 09              push
 2174 eb55: 04 eb 61        JSR parse_getnibble
 2175 eb58: b3 0f           ANDI 0FH
 2176 eb5a: 0b              MVAT
 2177 eb5b: 0a              pop
 2178 eb5c: ba              ORT
 2179 eb5d: 37              MVARL R7
 2180 eb5e: 08 30           popr r3
 2181 eb60: 05              RET
 2182 eb61:             
 2183 eb61:             ;
 2184 eb61:             ; add error checking
 2185 eb61:             ;
 2186 eb61:             ; return hex nibble in accumulator
 2187 eb61:             ;
 2188 eb61:             parse_getnibble:
 2189 eb61: 43                LDAVR R3
 2190 eb62: 53                incr r3
 2191 eb63: 0d 39             LDTI '9'
 2192 eb65: a9 eb 6b          BRGT parse_af
 2193 eb68: b1 30             SUBI '0'
 2194 eb6a: 05                RET
 2195 eb6b:             parse_af:
 2196 eb6b: 04 ff d0          JSR toupper
 2197 eb6e: b1 41             SUBI 'A'
 2198 eb70: b0 0a             ADDI 10
 2199 eb72: 05                RET
 2200 eb73:             ;
 2201 eb73:             ; void tokenizer_string(char *dest, int len)
 2202 eb73:             ;
 2203 eb73:             ; not used, in line parse_line
 2204 eb73:             ;
 2205 eb73:             parse_string:
 2206 eb73: 04 ea 9a        JSR parse_token
 2207 eb76: 0d 03           LDTI TOKENIZER_STRING
 2208 eb78: a8 eb 7c        BREQ parse_string1
 2209 eb7b: 05              ret
 2210 eb7c:             
 2211 eb7c:             parse_string1:
 2212 eb7c: 07 03           pushr r3
 2213 eb7e: f3 02 02        LDR r3,bas_txtptr
 2214 eb81: 43              LDAVR R3
 2215 eb82:             
 2216 eb82:             
 2217 eb82:             ;
 2218 eb82:             ; void tokenizer_error_print(void)
 2219 eb82:             ;
 2220 eb82:             ; fix
 2221 eb82:             ;
 2222 eb82:             ;parse_error_print:
 2223 eb82:             ;    halt
 2224 eb82:             
 2225 eb82:             ;
 2226 eb82:             ; int tokenizer_finished(void)
 2227 eb82:             ;
 2228 eb82:             parse_finished:
 2229 eb82: 07 03           pushr r3
 2230 eb84: f3 02 02        LDR r3,bas_txtptr
 2231 eb87: 43              ldavr r3
 2232 eb88: a1 eb 9d        brz parse_finished_yes
 2233 eb8b:             ;    ldti 0ah
 2234 eb8b:             ;    breq parse_finished_yes
 2235 eb8b:             ;    ldti 0dh
 2236 eb8b:             ;    breq parse_finished_yes
 2237 eb8b: 0d 01           ldti TOKENIZER_EOF
 2238 eb8d: a8 eb 9d        breq parse_finished_yes
 2239 eb90: ec 02 0a        lda bas_currenttoken
 2240 eb93: 0d 01           ldti TOKENIZER_EOF
 2241 eb95: a8 eb 9d        breq parse_finished_yes
 2242 eb98: 08 30           popr r3
 2243 eb9a: 0e 00           ldai 0
 2244 eb9c: 05              ret
 2245 eb9d:             parse_finished_yes:
 2246 eb9d: 0e 01           ldai 1
 2247 eb9f: 08 30           popr r3
 2248 eba1: 05              ret
 2249 eba2:             
 2250 eba2:             ;
 2251 eba2:             ; int tokenizer_variable_num(void)
 2252 eba2:             ;
 2253 eba2:             parse_variable_num:
 2254 eba2: 07 03             pushr r3
 2255 eba4: f3 02 02          LDR r3,bas_txtptr
 2256 eba7: 43                ldavr r3
 2257 eba8: b1 41             subi 'A'
 2258 ebaa: 37                mvarl r7
 2259 ebab: 0e 00             ldai 0
 2260 ebad: 3f                mvarh r7
 2261 ebae: 08 30             popr r3
 2262 ebb0: 05                ret
 2263 ebb1:             
 2264 ebb1:             ;
 2265 ebb1:             ; char *const tokenizer_pos(void)
 2266 ebb1:             ;
 2267 ebb1:             ; probably not used
 2268 ebb1:             parse_pos:
 2269 ebb1:             
 2270 ebb1:             ;not used old
 2271 ebb1:             ; char *tokenize(char *program)
 2272 ebb1:             ;
 2273 ebb1:             ; parse:
 2274 ebb1:             
 2275 ebb1:             ;
 2276 ebb1:             ; char *tokenizeLine(char *line)
 2277 ebb1:             ;
 2278 ebb1:             ; assume input text string in parse_input_line
 2279 ebb1:             ;
 2280 ebb1:             
 2281 ebb1:             parse_line:
 2282 ebb1: 04 ea 80        JSR PARSE_INIT
 2283 ebb4:             
 2284 ebb4: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2285 ebb7: fb 02 08        str r3,bas_tokcounter
 2286 ebba: 1b 04 00        MVIW R3,parse_token_buffer
 2287 ebbd:             
 2288 ebbd: 07 03           pushr r3
 2289 ebbf: f3 02 02        LDR r3,bas_txtptr
 2290 ebc2: 43              ldavr r3
 2291 ebc3: 04 ed e2        jsr parse_isdigit
 2292 ebc6: 08 30           popr r3
 2293 ebc8: 0d 01           ldti 1
 2294 ebca: a8 eb f2        breq parse_code
 2295 ebcd: 04 e9 f8        jsr parse_get_next_tok
 2296 ebd0:             
 2297 ebd0: 0d 26           ldti tokenizer_list
 2298 ebd2: aa eb dc        brneq parse_line_run
 2299 ebd5: f7 02 0c        ldr r7,bas_tokenbuffer
 2300 ebd8: 04 e6 59        JSR  basic_list
 2301 ebdb: 05              RET
 2302 ebdc:             
 2303 ebdc:             parse_line_run:
 2304 ebdc: 0d 27           ldti TOKENIZER_RUN
 2305 ebde: aa eb e5        brneq parse_line_error
 2306 ebe1: 04 e5 08        jsr basic_run
 2307 ebe4: 05              RET
 2308 ebe5:             parse_line_error:
 2309 ebe5: 1f e1 13        mviw r7,parse_cmd_error
 2310 ebe8: 04 ff c0        jsr stringout
 2311 ebeb: 1f ee 39        mviw r7,CRLF
 2312 ebee: 04 ff c0        jsr stringout
 2313 ebf1: 05              ret
 2314 ebf2:             
 2315 ebf2:             parse_code:
 2316 ebf2: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2317 ebf4: 4b              STAVR R3
 2318 ebf5: 53              INCR R3
 2319 ebf6:             
 2320 ebf6: 04 ea e8        JSR parse_num           ;store line number
 2321 ebf9: ff 02 10        str r7,bas_newlinenum
 2322 ebfc: 27              mvrla r7
 2323 ebfd: 4b              stavr r3
 2324 ebfe: 53              incr r3
 2325 ebff: 2f              mvrha r7
 2326 ec00: 4b              stavr r3
 2327 ec01: 53              incr r3
 2328 ec02:             
 2329 ec02: 53              incr r3                ; skip over line length - fill in later
 2330 ec03: 53              incr r3
 2331 ec04:             
 2332 ec04:             parse_line_loop:
 2333 ec04: 04 ea 9e        JSR parse_next
 2334 ec07: 04 ea 9a        JSR parse_token
 2335 ec0a: 0d 24           ldti TOKENIZER_CR
 2336 ec0c: a8 ec 7b        BREQ parse_line_done
 2337 ec0f:             
 2338 ec0f: 4b              STAVR R3
 2339 ec10: 53              INCR R3
 2340 ec11: f5 02 08        ldr r5,bas_tokcounter
 2341 ec14: 55              incr r5
 2342 ec15: fd 02 08        str r5,bas_tokcounter
 2343 ec18:             
 2344 ec18: 0d 02           ldti TOKENIZER_NUMBER
 2345 ec1a: aa ec 31        BRNEQ parse_line1
 2346 ec1d: 04 ea e8        JSR parse_num
 2347 ec20: 27              mvrla r7
 2348 ec21: 4b              stavr r3
 2349 ec22: 53              incr r3
 2350 ec23: 2f              mvrha r7
 2351 ec24: 4b              stavr r3
 2352 ec25: 53              incr r3
 2353 ec26: f5 02 08        ldr r5,bas_tokcounter
 2354 ec29: 55              incr r5
 2355 ec2a: 55              incr r5
 2356 ec2b: fd 02 08        str r5,bas_tokcounter
 2357 ec2e: a0 ec 04        BR parse_line_loop
 2358 ec31:             
 2359 ec31:             parse_line1:
 2360 ec31: 0d 03           ldti TOKENIZER_STRING
 2361 ec33: aa ec 62        BRNEQ parse_line2
 2362 ec36: f4 02 02        ldr r4,bas_txtptr
 2363 ec39: 54              incr r4                   ;skip over opening "
 2364 ec3a:             
 2365 ec3a:             parse_line1loop:
 2366 ec3a: 44              ldavr r4
 2367 ec3b: 0d 22           ldti '"'
 2368 ec3d: a8 ec 4d        breq parse_line1done
 2369 ec40: 4b              stavr r3
 2370 ec41: 53              incr r3
 2371 ec42: 54              incr r4
 2372 ec43: f5 02 08        ldr r5,bas_tokcounter
 2373 ec46: 55              incr r5
 2374 ec47: fd 02 08        str r5,bas_tokcounter
 2375 ec4a: a0 ec 3a        BR parse_line1loop
 2376 ec4d:             parse_line1done:
 2377 ec4d: 54              incr r4                   ;skip over closing "
 2378 ec4e: 0e 00           ldai 0                    ;add null into token buffer
 2379 ec50: 4b              stavr R3
 2380 ec51: 53              incr r3
 2381 ec52: f5 02 08        ldr r5,bas_tokcounter
 2382 ec55: 55              incr r5
 2383 ec56: fd 02 08        str r5,bas_tokcounter
 2384 ec59: fb 02 06        str r3,BAS_TOKPTR
 2385 ec5c: fc 02 02        str r4,bas_txtptr
 2386 ec5f: a0 ec 04        BR parse_line_loop
 2387 ec62:             
 2388 ec62:             parse_line2:
 2389 ec62: 0d 04           ldti TOKENIZER_VARIABLE
 2390 ec64: aa ec 04        BRNEQ parse_line_loop
 2391 ec67: 04 eb a2        JSR parse_variable_num
 2392 ec6a: 27              mvrla r7
 2393 ec6b: 4b              stavr r3
 2394 ec6c: 53              incr r3
 2395 ec6d: 2f              mvrha r7
 2396 ec6e: 4b              stavr r3
 2397 ec6f: 53              incr r3
 2398 ec70: f5 02 08        ldr r5,bas_tokcounter
 2399 ec73: 55              incr r5
 2400 ec74: 55              incr r5
 2401 ec75: fd 02 08        str r5,bas_tokcounter
 2402 ec78: a0 ec 04        BR parse_line_loop
 2403 ec7b:             
 2404 ec7b:             parse_line_done:
 2405 ec7b: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2406 ec7d: 4b              STAVR R3
 2407 ec7e: 53              INCR R3
 2408 ec7f:             ;    ldr r5,bas_tokcounter
 2409 ec7f:             ;    incr r5
 2410 ec7f:             ;    str r5,bas_tokcounter
 2411 ec7f:             
 2412 ec7f: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2413 ec82: 53              incr r3
 2414 ec83: 53              incr r3
 2415 ec84: 53              incr r3
 2416 ec85: f7 02 08        ldr r7,bas_tokcounter
 2417 ec88: ff 02 12        str r7,bas_newlinelen
 2418 ec8b: 27              mvrla r7
 2419 ec8c: 4b              stavr r3
 2420 ec8d: 53              incr r3
 2421 ec8e: 2f              mvrha r7
 2422 ec8f: 4b              stavr r3
 2423 ec90:             
 2424 ec90:             ;
 2425 ec90:             ; void addLine(char *buff)
 2426 ec90:             ; since addline is only called from parse_tokenizeline where are these
 2427 ec90:             ; values are know, pass them in or
 2428 ec90:             ; maybe merge addLine to bottom of parse_tokenizeline
 2429 ec90:             ;
 2430 ec90:             ; r7 points to line to insert
 2431 ec90:             ; r6 linenumber
 2432 ec90:             ; r5 linelength
 2433 ec90:             ;
 2434 ec90:             parse_addline:
 2435 ec90: f7 02 10          ldr r7,BAS_NEWLINENUM
 2436 ec93: 04 ec f8          JSR parse_removeline      ; if line number already exists delete it
 2437 ec96: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2438 ec99: 27                mvrla r7
 2439 ec9a: 0d 06             ldti 6
 2440 ec9c: aa ec a0          brneq parse_addline1
 2441 ec9f: 05                ret
 2442 eca0:             
 2443 eca0:             parse_addline1:                 ;find insert location
 2444 eca0: f7 02 10          ldr r7,BAS_NEWLINENUM
 2445 eca3: f3 02 0c          ldr r3,bas_tokenBuffer
 2446 eca6:             
 2447 eca6:             parse_addlineloop:
 2448 eca6: fb 02 14          str r3,bas_insertptr
 2449 eca9: 43                ldavr r3
 2450 ecaa: 0d 01             ldti TOKENIZER_EOF
 2451 ecac: a8 ec cf          BREQ parse_addroom
 2452 ecaf: 53                incr r3                   ;get line number of line in token buffer into r6
 2453 ecb0: 43                ldavr r3
 2454 ecb1: 36                mvarl r6
 2455 ecb2: 53                incr r3
 2456 ecb3: 43                ldavr r3
 2457 ecb4: 3e                mvarh r6
 2458 ecb5: 04 ed f2          jsr parse_compare
 2459 ecb8: 0d ff             ldti 0ffh
 2460 ecba: a8 ec cf          breq parse_addroom
 2461 ecbd:             
 2462 ecbd: 53                incr r3                   ;get line length
 2463 ecbe: 43                ldavr r3
 2464 ecbf: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2465 ecc2: 36                mvarl r6
 2466 ecc3: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2467 ecc4: 5e                decr r6
 2468 ecc5: 5e                decr r6
 2469 ecc6:             
 2470 ecc6:             addline_moveptr:              ; advance pointer to next line
 2471 ecc6: 53                incr r3
 2472 ecc7: 5e                decr r6
 2473 ecc8: 26                mvrla r6
 2474 ecc9: a2 ec c6          brnz addline_moveptr
 2475 eccc: a0 ec a6          br parse_addlineloop
 2476 eccf:             
 2477 eccf:             
 2478 eccf:             parse_addroom:               ; make room
 2479 eccf: 1f 20 00          mviw r7,BAS_TOK_BUF_END
 2480 ecd2:             ;      decr r7
 2481 ecd2: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2482 ecd5: 04 ed a5          jsr parse_sub16
 2483 ecd8: 1d 20 00          mviw r5,BAS_TOK_BUF_END
 2484 ecdb:             ;      decr r5
 2485 ecdb:             
 2486 ecdb:             parse_roomloop:
 2487 ecdb: 5f                decr r7
 2488 ecdc: 5d                decr r5
 2489 ecdd: 47                ldavr r7
 2490 ecde: 4d                stavr r5
 2491 ecdf:             
 2492 ecdf: f6 02 14          ldr r6,bas_insertptr
 2493 ece2: 04 ed f2          jsr PARSE_COMPARE
 2494 ece5: a2 ec db          brnz parse_roomloop
 2495 ece8:             
 2496 ece8: f7 02 14          ldr r7,bas_insertptr
 2497 eceb: 1e 04 00          MVIW R6,parse_token_buffer
 2498 ecee:             
 2499 ecee:             parse_insertloop:
 2500 ecee: 46                ldavr r6
 2501 ecef: 4f                stavr r7
 2502 ecf0: 56                incr r6
 2503 ecf1: 57                incr r7
 2504 ecf2: 0d 24             ldti 024h ; sub in actual eol token here
 2505 ecf4: aa ec ee          brneq parse_insertloop
 2506 ecf7:             
 2507 ecf7: 05                ret
 2508 ecf8:             
 2509 ecf8:             ;
 2510 ecf8:             ; void removeLine(int lineNum)
 2511 ecf8:             ;
 2512 ecf8:             parse_removeline:
 2513 ecf8: 04 ed 20        JSR basu_find
 2514 ecfb: 2f              mvrha R7
 2515 ecfc: a2 ed 04        brnz parse_removeline1
 2516 ecff: 27              mvrla R7
 2517 ed00: a2 ed 04        brnz parse_removeline1
 2518 ed03: 05              ret
 2519 ed04:             parse_removeline1:
 2520 ed04: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2521 ed06: 57              incr r7
 2522 ed07: 57              incr r7
 2523 ed08: 57              incr r7
 2524 ed09: 47              ldavr r7
 2525 ed0a: 36              mvarl r6        ; R6 = remove length
 2526 ed0b: 57              incr r7
 2527 ed0c: 47              ldavr r7
 2528 ed0d: 3e              mvarh r6
 2529 ed0e:             
 2530 ed0e: 5f              decr r7         ;backup to start of line
 2531 ed0f: 5f              decr r7
 2532 ed10: 5f              decr r7
 2533 ed11: 5f              decr r7
 2534 ed12: 04 ed 97        JSR parse_add16
 2535 ed15:             parse_removeloop:
 2536 ed15: 47              ldavr r7
 2537 ed16: 4d              stavr r5
 2538 ed17: 55              incr r5
 2539 ed18: 57              incr r7
 2540 ed19: 2f              MVRHA r7
 2541 ed1a:             
 2542 ed1a: ee 02 0e        ldt  bas_bufferendhi
 2543 ed1d:             
 2544 ed1d: aa ed 15        brneq parse_removeloop
 2545 ed20:             ;
 2546 ed20:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2547 ed20:             ; since we are moving complete contents of buffer
 2548 ed20:             ; Make sure it is set during addline
 2549 ed20:             ;
 2550 ed20:             
 2551 ed20:             
 2552 ed20:             ; run & parse utilites
 2553 ed20:             ;
 2554 ed20:             
 2555 ed20:             ;
 2556 ed20:             ; find in the token buffer linenum in r7
 2557 ed20:             ;
 2558 ed20:             basu_find:
 2559 ed20: 07 05           pushr r5                  ; save r5
 2560 ed22: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2561 ed25:             
 2562 ed25:             basu_find_loop:
 2563 ed25: 45              ldavr r5                  ;get token
 2564 ed26: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2565 ed28: aa ed 32        brneq basu_find_loop1     ;no continue
 2566 ed2b: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2567 ed2e: 27              mvrla r7
 2568 ed2f: 08 50           popr r5
 2569 ed31: 05              ret
 2570 ed32:             
 2571 ed32:             basu_find_loop1:
 2572 ed32: 55              incr r5                   ;skip past linenum token
 2573 ed33: 27              mvrla r7                  ;test low byte of linenum
 2574 ed34: 0b              MVAT
 2575 ed35: 45              ldavr r5
 2576 ed36: aa ed 49        brneq basu_find1          ;not eqaul
 2577 ed39: 55              incr r5
 2578 ed3a: 2f              mvrha r7                  ;test high byte of linenum
 2579 ed3b: 0b              MVAT
 2580 ed3c: 45              ldavr r5
 2581 ed3d: aa ed 4a        brneq basu_find2          ;not equal
 2582 ed40: 5d              decr r5                   ;if equal backup to linenum token
 2583 ed41: 5d              decr r5
 2584 ed42: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2585 ed44: 0e 01           ldai 1                    ;return 1 in accumulator
 2586 ed46: 08 50           popr r5
 2587 ed48: 05              ret
 2588 ed49:             
 2589 ed49:             basu_find1:
 2590 ed49: 55              incr r5                   ;skip over linenum high byte
 2591 ed4a:             basu_find2:
 2592 ed4a: 55              incr r5                   ;get line length
 2593 ed4b: 45              ldavr r5
 2594 ed4c: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2595 ed4f: 36              mvarl r6
 2596 ed50: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2597 ed51: 5e              decr r6
 2598 ed52: 5e              decr r6
 2599 ed53:             basu_find_moveptr:            ; advance pointer to next line
 2600 ed53: 55              incr r5
 2601 ed54: 5e              decr r6
 2602 ed55: 26              mvrla r6
 2603 ed56: a2 ed 53        brnz basu_find_moveptr
 2604 ed59: a0 ed 25        br basu_find_loop
 2605 ed5c:             
 2606 ed5c:             
 2607 ed5c:             ;
 2608 ed5c:             ; Multiple numbers in R4 and R5
 2609 ed5c:             ;
 2610 ed5c:             ; Return in R7
 2611 ed5c:             ;
 2612 ed5c:             ; R6 = Bit counter
 2613 ed5c:             ;
 2614 ed5c:             parse_mul16:
 2615 ed5c: 07 06               pushr r6
 2616 ed5e:             
 2617 ed5e: 1f 00 00            MVIW R7,0
 2618 ed61: 1e 00 10            MVIW R6,10h
 2619 ed64:             ;        jsr showregs
 2620 ed64:             
 2621 ed64:             parse_mulloop:
 2622 ed64:             ;        jsr showregs
 2623 ed64:             
 2624 ed64: 25                  mvrla r5
 2625 ed65: b3 01               andi  01h
 2626 ed67: a1 ed 6d            brz parse_mulskip
 2627 ed6a: 04 ed 89            jsr parse_muladd16
 2628 ed6d:             
 2629 ed6d:             parse_mulskip:
 2630 ed6d:             ;
 2631 ed6d:             ; clear carry flag HACK
 2632 ed6d:             ;
 2633 ed6d: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2634 ed6f: e0                  cshl
 2635 ed70: b0 00               addi 0      ; may not be needed
 2636 ed72:             ;
 2637 ed72: 24                  mvrla r4
 2638 ed73:             ;        jsr showcarry
 2639 ed73: e0                  cshl
 2640 ed74:             ;        jsr showcarry
 2641 ed74: 34                  mvarl r4
 2642 ed75: 2c                  mvrha r4
 2643 ed76:             ;        jsr showcarry
 2644 ed76: e0                  cshl
 2645 ed77:             ;        jsr showcarry
 2646 ed77: 3c                  mvarh r4
 2647 ed78:             
 2648 ed78: 0e 00               ldai 0      ;clear carry
 2649 ed7a: e0                  cshl
 2650 ed7b:             ;        addi 0
 2651 ed7b:             
 2652 ed7b: 2d                  mvrha r5
 2653 ed7c: e1                  cshr
 2654 ed7d: 3d                  mvarh r5
 2655 ed7e: 25                  mvrla r5
 2656 ed7f: e1                  cshr
 2657 ed80: 35                  mvarl r5
 2658 ed81:             
 2659 ed81: 5e                  decr r6
 2660 ed82: 26                  mvrla r6
 2661 ed83: a2 ed 64            brnz parse_mulloop
 2662 ed86: 08 60               popr r6
 2663 ed88: 05                  ret
 2664 ed89:             
 2665 ed89:             parse_muladd16:
 2666 ed89: 0e 00               ldai 0      ;clear carry
 2667 ed8b: e0                  cshl
 2668 ed8c:             
 2669 ed8c: 27                  MVRLA R7
 2670 ed8d: 0b                  MVAT
 2671 ed8e: 24                  mvrla r4
 2672 ed8f: b8                  ADDT
 2673 ed90: 37                  mvarl r7
 2674 ed91:             
 2675 ed91: 2f                  mvrha r7
 2676 ed92: 0b                  MVAT
 2677 ed93: 2c                  mvrha r4
 2678 ed94: e3                  addtc
 2679 ed95: 3f                  mvarh r7
 2680 ed96: 05                  ret
 2681 ed97:             
 2682 ed97:             ;
 2683 ed97:             ; 16 bit ADD r6 and r7, return result in r7
 2684 ed97:             ;
 2685 ed97:             parse_add16:
 2686 ed97:             
 2687 ed97: 0e 00             ldai 0      ;clear carry
 2688 ed99: e0                cshl
 2689 ed9a: 26                MVRLA R6
 2690 ed9b: 0b                MVAT
 2691 ed9c: 27                mvrla r7
 2692 ed9d: b8                ADDT
 2693 ed9e: 37                mvarl r7
 2694 ed9f: 2e                mvrha r6
 2695 eda0: 0b                MVAT
 2696 eda1: 2f                mvrha r7
 2697 eda2: e3                addtc
 2698 eda3: 3f                mvarh r7
 2699 eda4: 05                ret
 2700 eda5:             
 2701 eda5:             ;
 2702 eda5:             ; 16 bit SUB of r6 from r7, return result in r7
 2703 eda5:             ;
 2704 eda5:             parse_sub16:
 2705 eda5: 2e                mvrha r6
 2706 eda6: b5                inva
 2707 eda7: 3e                mvarh r6
 2708 eda8: 26                mvrla r6
 2709 eda9: b5                inva
 2710 edaa: 36                mvarl r6
 2711 edab: 56                incr r6
 2712 edac: a0 ed 97          br parse_add16
 2713 edaf:             
 2714 edaf:             ;
 2715 edaf:             ; 16 bit AND r6 and r7, return result in r7
 2716 edaf:             ;
 2717 edaf:             parse_and16:
 2718 edaf: 26                MVRLA R6
 2719 edb0: 0b                MVAT
 2720 edb1: 27                mvrla r7
 2721 edb2: bb                ANDT
 2722 edb3: 37                mvarl r7
 2723 edb4: 2e                mvrha r6
 2724 edb5: 0b                MVAT
 2725 edb6: 2f                mvrha r7
 2726 edb7: bb                ANDT
 2727 edb8: 3f                mvarh r7
 2728 edb9: 05                ret
 2729 edba:             
 2730 edba:             ;
 2731 edba:             ; 16 bit OR r6 and r7, return result in r7
 2732 edba:             ;
 2733 edba:             parse_or16:
 2734 edba: 26                MVRLA R6
 2735 edbb: 0b                MVAT
 2736 edbc: 27                mvrla r7
 2737 edbd: ba                ORT
 2738 edbe: 37                mvarl r7
 2739 edbf: 2e                mvrha r6
 2740 edc0: 0b                MVAT
 2741 edc1: 2f                mvrha r7
 2742 edc2: ba                ORT
 2743 edc3: 3f                mvarh r7
 2744 edc4: 05                ret
 2745 edc5:             
 2746 edc5:             
 2747 edc5:             ;
 2748 edc5:             ; is digit in accumulator hex
 2749 edc5:             ; returns 1 if yes and 0 if no
 2750 edc5:             ;
 2751 edc5:             ; what about upper/lower case
 2752 edc5:             ;
 2753 edc5:             ; destroys tmp register
 2754 edc5:             parse_ishex:
 2755 edc5: 0d 30          ldti '0'
 2756 edc7: a7 ed df       brlt parse_ishex_no
 2757 edca: 0d 39          ldti '9'
 2758 edcc: a9 ed d2       brgt parse_ishex_af
 2759 edcf: a0 ed dc       br parse_ishex_yes
 2760 edd2:             
 2761 edd2:             parse_ishex_af:
 2762 edd2: 0d 41           ldti 'A'
 2763 edd4: a7 ed df        brlt parse_ishex_no
 2764 edd7: 0d 46           ldti 'F'
 2765 edd9: a9 ed df        brgt parse_ishex_no
 2766 eddc:             
 2767 eddc:             parse_ishex_yes:
 2768 eddc: 0e 01           ldai 1
 2769 edde: 05              ret
 2770 eddf:             
 2771 eddf:             parse_ishex_no:
 2772 eddf: 0e 00           ldai 0
 2773 ede1: 05              ret
 2774 ede2:             
 2775 ede2:             ;
 2776 ede2:             ; is digit in accumulator decimal
 2777 ede2:             ; returns 1 if yes and 0 if no
 2778 ede2:             ;
 2779 ede2:             ; destroys tmp register
 2780 ede2:             ;
 2781 ede2:             parse_isdigit:
 2782 ede2: 0d 30          ldti '0'
 2783 ede4: a7 ed ef       brlt parse_isdigit_no
 2784 ede7: 0d 39          ldti '9'
 2785 ede9: a9 ed ef       brgt parse_isdigit_no
 2786 edec:             
 2787 edec: 0e 01           ldai 1
 2788 edee: 05              ret
 2789 edef:             
 2790 edef:             parse_isdigit_no:
 2791 edef: 0e 00           ldai 0
 2792 edf1: 05              ret
 2793 edf2:             
 2794 edf2:             ;
 2795 edf2:             ; 16 bit compare r6 and r7
 2796 edf2:             ;
 2797 edf2:             ; returns in accumulator
 2798 edf2:             ; r7=r6 00
 2799 edf2:             ; r7>r6 01
 2800 edf2:             ; r7<r6 ff
 2801 edf2:             ;
 2802 edf2:             ; destory Tmp
 2803 edf2:             ;
 2804 edf2:             parse_compare:
 2805 edf2: 2e            mvrha r6
 2806 edf3: 0b            mvat
 2807 edf4: 2f            mvrha r7
 2808 edf5: aa ee 01      brneq parse_compareh
 2809 edf8: 26            mvrla r6
 2810 edf9: 0b            mvat
 2811 edfa: 27            mvrla r7
 2812 edfb: aa ee 0a      brneq parse_comparel
 2813 edfe: 0e 00         ldai 0
 2814 ee00: 05            ret
 2815 ee01:             
 2816 ee01:             parse_compareh:
 2817 ee01: a7 ee 07      brlt parse_compareh1
 2818 ee04: 0e 01         ldai 1
 2819 ee06: 05            ret
 2820 ee07:             parse_compareh1:
 2821 ee07: 0e ff         ldai 0ffh
 2822 ee09: 05            ret
 2823 ee0a:             
 2824 ee0a:             parse_comparel:
 2825 ee0a: a7 ee 10      brlt parse_comparel1
 2826 ee0d: 0e 01         ldai 1
 2827 ee0f: 05            ret
 2828 ee10:             parse_comparel1:
 2829 ee10: 0e ff         ldai 0ffh
 2830 ee12: 05            ret
 2831 ee13:             
 2832 ee13: 3e 3e 3e 00 basic_prompt: db ">>>",0
 2833 ee17:             basic_interprter:
 2834 ee17:                     ;build input string
 2835 ee17:                     ;point register to BUFFER
 2836 ee17:                     ;loop fetch chars
 2837 ee17:                     ;until CR
 2838 ee17:                     ;be sure line ends with a NULL or CR
 2839 ee17:                     ;what does parse require???
 2840 ee17: 1f ee 13            MVIW R7,basic_prompt
 2841 ee1a: 04 ff c0            JSR stringout
 2842 ee1d:             
 2843 ee1d: 1b 03 00            mviw r3,parse_input_line
 2844 ee20:             
 2845 ee20:             parse_inputloop:
 2846 ee20: 04 ff e8            jsr uartin
 2847 ee23: 4b                  stavr r3
 2848 ee24: 53                  incr r3
 2849 ee25: 0d 0a               ldti 0ah  ;1 changed from 0a to 0D for new emulator code, changed back
 2850 ee27: aa ee 20            brneq parse_inputloop
 2851 ee2a: 1f ee 39            MVIW R7,CRLF
 2852 ee2d: 04 ff c0            JSR STRINGOUT
 2853 ee30:             
 2854 ee30: 1f 03 00            mviw r7,parse_input_line
 2855 ee33: 04 eb b1            JSR parse_line
 2856 ee36:             
 2857 ee36: a0 ee 17            BR basic_interprter
 2858 ee39:             
 2859 ee39:             ;
 2860 ee39:             ; STRINGS
 2861 ee39:             ;
 2862 ee39: 0a 0d 00    CRLF: DB 0ah,0dh,0
 2863 ee3c:             ;
 2864 ee3c:             
 2865 ee3c:                   ORG 0EF00h
 2866 ef00:             
 2867 ef00:             basic_test:
 2868 ef00:             
 2869 ef00:             ;    DB  25h,0ah,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h,24h,25h,14h,00h
 2870 ef00:             ;    DB  0ah,00h,06h,04h,00h,00h,24h,25h,1eh,00h,11h,00h,04h,00h,00h,23h
 2871 ef00:             ;    DB  04h,00h,00h,17h,02h,01h,00h,24h,25h,28h,00h,13h,00h,07h,04h,00h
 2872 ef00:             ;    DB  00h,21h,02h,0ah,00h,08h,0dh,02h,14h,00h,24h,01h,00h,00h,00h,00h
 2873 ef00:             
 2874 ef00:             ;    DB  25h,0ah,00h,14h,00h,06h,1fh,02h,01h,00h,17h,02h,02h,00h,20h,17h
 2875 ef00:             ;    DB  02h,03h,00h,24h,25h,14h,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h
 2876 ef00:             ;    DB  24h,25h,1eh,00h,0dh,00h,04h,01h,00h,23h,02h,02h,00h,24h,25h,28h
 2877 ef00:             ;    DB  00h,0eh,00h,06h,04h,00h,00h,17h,04h,01h,00h,24h,25h,32h,00h,15h
 2878 ef00:             ;    DB  00h,04h,02h,00h,23h,04h,00h,00h,17h,04h,01h,00h,17h,02h,05h,00h
 2879 ef00:             ;    DB  24h,25h,3ch,00h,0ah,00h,06h,04h,02h,00h,24h,01h,00h,00h,00h,00h
 2880 ef00:             
 2881 ef00: 25 0a 00 0e 
            00 06 03 68 
            65 6c 6c 6f 
            00 24 25 14     DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 2882 ef10: 00 0d 00 04 
            02 00 23 02 
            09 00 24 25 
            1e 00 0a 00     DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 2883 ef20: 06 04 02 00 
            24 25 28 00 
            0d 00 04 04 
            00 23 02 32     DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 2884 ef30: 00 24 25 32 
            00 17 00 06 
            03 68 32 00 
            15 04 02 00     DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 2885 ef40: 15 04 04 00 
            15 02 16 00 
            24 25 3c 00 
            12 00 0a 04     DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 2886 ef50: 03 00 23 02 
            01 00 0b 02 
            05 00 24 25 
            46 00 0a 00     DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 2887 ef60: 06 04 03 00 
            24 25 50 00 
            0a 00 0c 04 
            03 00 24 25     DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 2888 ef70: 51 00 12 00 
            06 03 6e 65 
            78 74 20 64 
            6f 6e 65 00     DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 2889 ef80: 24 25 52 00 
            0a 00 0e 02 
            6e 00 24 25 
            55 00 0a 00     DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 2890 ef90: 0d 02 7d 00 
            24 25 5a 00 
            12 00 06 03 
            6e 65 78 74     DB  0dh,02h,7dh,00h,24h,25h,5ah,0h,12h,00h,06h,03h,6eh,65h,78h,74h
 2891 efa0: 20 64 6f 6e 
            65 00 24 25 
            6e 00 11 00 
            06 03 69 6e     DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 2892 efb0: 20 67 6f 73 
            75 62 00 24 
            25 70 00 11 
            00 06 03 69     DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 2893 efc0: 6e 20 73 75 
            62 20 32 00 
            24 25 72 00 
            07 00 0f 24     DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 2894 efd0: 25 7d 00 0c 
            00 06 03 65 
            6e 64 00 24 
            25 7e 00 07     DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 2895 efe0: 00 14 24 01 
            00 00 00 00 
            00 00 00 00 
            00 00 00 00     DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 2896 eff0:             
 2897 eff0:             ;
 2898 eff0:             ; The End
 2899 eff0:             ;
 2900 eff0:             ZZZZ:
 2901 eff0: 00            DB   0

ecc6h: ADDLINE_MOVEPTR  - <  2470>   2474 
ee17h: BASIC_INTERPRTER - <  2833>    182   2857   2857 
e659h: BASIC_LIST       - <  1371>    144   2300 
ee13h: BASIC_PROMPT     - <  2832>   2840 
e508h: BASIC_RUN        - <  1104>    152   2306 
ef00h: BASIC_TEST       - <  2867>    198 
0100h: BASIC_VARS       - <    65>   1146   1169 
e672h: BASLIST1         - <  1387>   1380 
e712h: BASLIST10        - <  1489>   1483 
e721h: BASLIST11        - <  1497>   1491 
e730h: BASLIST12        - <  1505>   1499 
e73fh: BASLIST13        - <  1513>   1507 
e74eh: BASLIST14        - <  1521>   1515 
e75dh: BASLIST15        - <  1529>   1523 
e76ch: BASLIST16        - <  1537>   1531 
e77bh: BASLIST17        - <  1545>   1539 
e78ah: BASLIST18        - <  1553>   1547 
e799h: BASLIST19        - <  1561>   1555 
e67dh: BASLIST2         - <  1393>   1389 
e7a8h: BASLIST20        - <  1569>   1563 
e7b7h: BASLIST21        - <  1577>   1571 
e7cah: BASLIST22        - <  1587>   1579 
e7ddh: BASLIST23        - <  1597>   1589 
e7f0h: BASLIST24        - <  1607>   1599 
e803h: BASLIST25        - <  1617>   1609 
e816h: BASLIST26        - <  1627>   1619 
e829h: BASLIST27        - <  1637>   1629 
e83ch: BASLIST28        - <  1647>   1639 
e84fh: BASLIST29        - <  1657>   1649 
e694h: BASLIST3         - <  1409>   1395 
e862h: BASLIST30        - <  1667>   1659 
e875h: BASLIST31        - <  1677>   1669 
e888h: BASLIST32        - <  1687>   1679 
e89bh: BASLIST33        - <  1697>   1689 
e8aeh: BASLIST34        - <  1707>   1699 
e8c1h: BASLIST35        - <  1717>   1709 
e8d4h: BASLIST36        - <  1727>   1719 
e8e3h: BASLIST37        - <  1735>   1729 
e8fch: BASLIST38        - <  1753>   1737 
e6b0h: BASLIST4         - <  1426>   1411 
e6c7h: BASLIST5         - <  1449>   1428 
e6d6h: BASLIST6         - <  1457>   1451 
e6e5h: BASLIST7         - <  1465>   1459 
e6f4h: BASLIST8         - <  1473>   1467 
e703h: BASLIST9         - <  1481>   1475 
e908h: BASLIST_DONE     - <  1761>   1384   1390   1757 
e65dh: BASLIST_LOOP     - <  1376>   1385   1391   1407   1424   1447   1455 
         1463   1471   1479   1487   1495   1503   1511   1519   1527   1535 
         1543   1551   1559   1567   1575   1585   1595   1605   1615   1625 
         1635   1645   1655   1665   1675   1685   1695   1705   1715   1725 
         1733   1751 
e6a4h: BASLIST_STRING   - <  1417>   1421 
e6ach: BASLIST_STRINGEND - <  1422>   1419 
ed20h: BASU_FIND        - <  2558>    592   2513 
ed49h: BASU_FIND1       - <  2589>   2576 
ed4ah: BASU_FIND2       - <  2591>   2581 
ed25h: BASU_FIND_LOOP   - <  2562>   2604 
ed32h: BASU_FIND_LOOP1  - <  2571>   2565 
ed53h: BASU_FIND_MOVEPTR - <  2599>   2603 
020eh: BAS_BUFFERENDHI  - <    77>    167   2542 
e069h: BAS_COPYLOOP     - <   201>    208    210 
020ah: BAS_CURRENTTOKEN - <    75>   2023   2031   2058   2239 
e545h: BAS_ERROR        - <  1183>    307   1090 
0282h: BAS_FORSTACK     - <    97>    275 
0280h: BAS_FORSTACKPTR  - <    96> 
02c0h: BAS_GOSUBPTR     - <   106> 
02c2h: BAS_GOSUBSTACK   - <   107>    274 
0214h: BAS_INSERTPTR    - <    84>   2448   2492   2496 
e0c0h: BAS_MSG1         - <   248>    306 
e0dch: BAS_MSG2         - <   249> 
e0edh: BAS_MSG3         - <   250>   1087 
0212h: BAS_NEWLINELEN   - <    83>   2417   2437   2481 
0210h: BAS_NEWLINENUM   - <    82>   2321   2435   2444 
0204h: BAS_NXTPTR       - <    72>   1904   1916   1932   1967   1985   2044 
         2085 
0200h: BAS_RUN_ENDED    - <    70>    276    611    999   1121 
0208h: BAS_TOKCOUNTER   - <    74>   2021   2285   2340   2342   2353   2356 
         2372   2374   2381   2383   2398   2401   2416 
020ch: BAS_TOKENBUFFER  - <    76>    143    165    279   2299   2445   2560 
0206h: BAS_TOKPTR       - <    73>   2019   2384 
2000h: BAS_TOK_BUF_END  - <   124>    166   2479   2483 
1000h: BAS_TOK_BUF_START - <   120>    162    197 
0202h: BAS_TXTPTR       - <    71>   1800   1889   1945   2017   2045   2056 
         2106   2152   2213   2230   2255   2289   2362   2385 
e077h: BIGTEST          - <   213>    175 
ffc4h: CHAROUT          - <     5>    655   1284   1316   1336 
ee39h: CRLF             - <  2862>    216    221    226    231    236    241 
          689   1730   2311   2851 
e584h: DIVIDERS         - <  1268>   1293 
e137h: EXE_ACCEPT       - <   289>    330    344    350    353    610    625 
          635    699    705    734    736    741    749    752    754    775 
          805    815    860    871    889    891    902    917    939    948 
          954    956    976    982    992   1073   1097 
e14ch: EXE_ACCEPT_DONE  - <   309>    299 
e472h: EXE_END_STMT     - <   998>   1066 
e1ceh: EXE_EXPR         - <   428>    351    514    530    547    564    626 
          676    737    892    903    940    978    984 
e213h: EXE_EXPR_AND     - <   472>    442 
e23ah: EXE_EXPR_DONE    - <   497>    446 
e1d7h: EXE_EXPR_LOOP    - <   435>    458    470    482    494    495 
e201h: EXE_EXPR_MINUS   - <   460>    440 
e225h: EXE_EXPR_OR      - <   484>    444 
e1efh: EXE_EXPR_PLUS    - <   448>    438 
e15ch: EXE_FACTOR       - <   337>    370    385    399    408 
e16ah: EXE_FACTOR1      - <   347>    341 
e17bh: EXE_FACTOR2      - <   356>    349 
e51ah: EXE_FINISHED     - <  1120>   1108 
e52ch: EXE_FINISHED_YES - <  1132>   1124   1128 
e3f5h: EXE_FOR_STMT     - <   866>   1042 
e53ah: EXE_GET_VARIABLE - <  1168>    328    820 
e391h: EXE_GOSUB_STMT   - <   747>   1030 
e2dah: EXE_GOTO_STMT    - <   623>   1080 
e348h: EXE_IF_STMT      - <   697>   1018 
e361h: EXE_IF_STMT1     - <   713>    709    719 
e370h: EXE_IF_STMT2     - <   722>    717 
e2bch: EXE_INDEX_FIND   - <   591>    601 
e125h: EXE_INIT         - <   272>   1105 
e58eh: EXE_ITOA         - <  1270>    215    220    225    230    235    240 
          678   1404   1747 
e5b0h: EXE_ITOA_LOOP    - <  1295>   1309   1326   1330 
e5c8h: EXE_ITOA_NEXT    - <  1311>   1304 
e5eah: EXE_ITOA_NOONES  - <  1337> 
e5d5h: EXE_ITOA_NOTYET  - <  1320>   1313 
e5a1h: EXE_ITOA_POS     - <  1286>   1274 
e2c0h: EXE_JUMP_LINE    - <   600>    627    767 
e2d7h: EXE_JUMP_LINE1   - <   615>    603    605 
e374h: EXE_LET_STMT     - <   729>   1024   1074 
e4ffh: EXE_LINE_STMT    - <  1095>   1114 
e3ebh: EXE_NEXT_DONE    - <   854>    840 
e3bbh: EXE_NEXT_STMT    - <   794>   1060 
e573h: EXE_NEXT_TOK3_DONE - <  1230>   1226 
e56bh: EXE_NEXT_TOK3_LOOP - <  1224>   1228 
e547h: EXE_NEXT_TOKEN   - <  1192>    310    384    398    407    449    461 
          473    485    529    546    563    648    656    662    691    714 
          723 
e551h: EXE_NEXT_TOKEN1  - <  1201>   1195 
e55ah: EXE_NEXT_TOKEN2  - <  1209>   1203 
e565h: EXE_NEXT_TOKEN3  - <  1219>   1211 
e575h: EXE_NEXT_TOKEN4  - <  1234>   1221 
e577h: EXE_NUM          - <  1241>    342    750 
e42fh: EXE_PEEK_STMT    - <   937>   1048 
e456h: EXE_POKE_STMT    - <   974>   1054 
e2e6h: EXE_PRINT_STMT   - <   633>   1012 
e2fdh: EXE_PRINT_STMT1  - <   651>    640 
e30dh: EXE_PRINT_STMT2  - <   659>    653 
e318h: EXE_PRINT_STMT3  - <   665>    661 
e32ah: EXE_PRINT_STMT4  - <   675>    667    669    671 
e33eh: EXE_PRINT_STMT_DONE - <   688>    673    683    685 
e2ebh: EXE_PRINT_STMT_LOOP - <   637>    686 
e330h: EXE_PRINT_STMT_TEST - <   680>    649    657    663 
e241h: EXE_RELATION     - <   510>    701 
e2b5h: EXE_RELATION_DONE - <   578>    526 
e299h: EXE_RELATION_EQ  - <   562>    524 
e27bh: EXE_RELATION_GT  - <   545>    522 
e24ah: EXE_RELATION_LOOP - <   517>    540    543    557    560    573    576 
e25dh: EXE_RELATION_LT  - <   528>    520 
e2afh: EXE_REL_NE       - <   574>    571 
e293h: EXE_REL_NGT      - <   558>    555 
e275h: EXE_REL_NLT      - <   541>    538 
e3adh: EXE_RETURN_STMT  - <   773>   1036 
e50bh: EXE_RUN          - <  1107>   1115 
e514h: EXE_RUN_CONT     - <  1113>   1110 
e52fh: EXE_SET_VARIABLE - <  1145>    739    823    897    952 
e479h: EXE_STMT         - <  1007>    710   1098 
e483h: EXE_STMT1        - <  1015>   1011 
e4d4h: EXE_STMT10       - <  1069>   1065 
e4e2h: EXE_STMT11       - <  1077>   1071 
e4ebh: EXE_STMT12       - <  1083>   1079 
e48ch: EXE_STMT2        - <  1021>   1017 
e495h: EXE_STMT3        - <  1027>   1023 
e49eh: EXE_STMT4        - <  1033>   1029 
e4a7h: EXE_STMT5        - <  1039>   1035 
e4b0h: EXE_STMT6        - <  1045>   1041 
e4b9h: EXE_STMT7        - <  1051>   1047 
e4c2h: EXE_STMT8        - <  1057>   1053 
e4cbh: EXE_STMT9        - <  1063>   1059 
e109h: EXE_STMT_MSG     - <   251> 
e17fh: EXE_TERM         - <   366>    432    450    462    474    486 
e19bh: EXE_TERM_ASTR    - <   383>    376 
e1c7h: EXE_TERM_DONE    - <   415>    381 
e188h: EXE_TERM_LOOP    - <   373>    395    404    413 
e1bch: EXE_TERM_MOD     - <   406>    380 
e1b1h: EXE_TERM_SLASH   - <   397>    378 
e150h: EXE_VARFACTOR    - <   322>    357 
e580h: EXE_VARIABLE_NUM - <  1256>    323    730    809    875    949 
ea5bh: FOUND            - <  1966>   1949 
ea65h: NOKEYOWRDSFOUND  - <  1974>   1946 
e985h: PARSECHAR1       - <  1808>   1805 
e9cdh: PARSECHAR10      - <  1853>   1850 
e9d5h: PARSECHAR11      - <  1858>   1855 
e9ddh: PARSECHAR12      - <  1863>   1860 
e9e5h: PARSECHAR13      - <  1868>   1865 
e9edh: PARSECHAR14      - <  1873>   1870 
e9f5h: PARSECHAR15      - <  1878>   1875 
e98dh: PARSECHAR2       - <  1813>   1810 
e995h: PARSECHAR3       - <  1818>   1815 
e99dh: PARSECHAR4       - <  1823>   1820 
e9a5h: PARSECHAR5       - <  1828>   1825 
e9adh: PARSECHAR6       - <  1833>   1830 
e9b5h: PARSECHAR7       - <  1838>   1835 
e9bdh: PARSECHAR8       - <  1843>   1840 
e9c5h: PARSECHAR9       - <  1848>   1845 
ed97h: PARSE_ADD16      - <  2685>    456   2124   2534   2712 
ec90h: PARSE_ADDLINE    - <  2434> 
eca0h: PARSE_ADDLINE1   - <  2443>   2440 
eca6h: PARSE_ADDLINELOOP - <  2447>   2475 
eccfh: PARSE_ADDROOM    - <  2478>   2451   2460 
eb6bh: PARSE_AF         - <  2195>   2192 
edafh: PARSE_AND16      - <  2717>    480 
e113h: PARSE_CMD_ERROR  - <   252>   2309 
ebf2h: PARSE_CODE       - <  2315>   2294 
edf2h: PARSE_COMPARE    - <  2804>    536    553    570    838   1302   2458 
         2493 
ee01h: PARSE_COMPAREH   - <  2816>   2808 
ee07h: PARSE_COMPAREH1  - <  2820>   2817 
ee0ah: PARSE_COMPAREL   - <  2824>   2812 
ee10h: PARSE_COMPAREL1  - <  2828>   2825 
eb82h: PARSE_FINISHED   - <  2228>   2038   2070 
eb9dh: PARSE_FINISHED_YES - <  2245>   2232   2238   2241 
eb61h: PARSE_GETNIBBLE  - <  2188>   2153   2160   2167   2174 
e9f8h: PARSE_GET_NEXT_TOK - <  1887>   2022   2057   2295 
e9fdh: PARSE_GNT1       - <  1895> 
ea04h: PARSE_GNT1LOOP   - <  1899>   1903 
ea14h: PARSE_GNT2       - <  1911>   1898 
ea22h: PARSE_GNT3       - <  1922>   1914 
ea28h: PARSE_GNT3LOOP   - <  1926>   1930 
ea38h: PARSE_GNT4       - <  1937>   1925 
ea7bh: PARSE_GNT_ERROR  - <  1990>   1981   1983 
ea80h: PARSE_INIT       - <  2014>   2282 
ee20h: PARSE_INPUTLOOP  - <  2845>   2850 
0300h: PARSE_INPUT_LINE - <   112>   2843   2854 
eceeh: PARSE_INSERTLOOP - <  2499>   2505 
ede2h: PARSE_ISDIGIT    - <  2781>   1897   1902   2140   2291 
edefh: PARSE_ISDIGIT_NO - <  2790>   2783   2785 
edc5h: PARSE_ISHEX      - <  2754> 
edd2h: PARSE_ISHEX_AF   - <  2761>   2758 
eddfh: PARSE_ISHEX_NO   - <  2771>   2756   2763   2765 
eddch: PARSE_ISHEX_YES  - <  2767>   2759 
e90bh: PARSE_KEYWORDS   - <  1768>   1942 
ebb1h: PARSE_LINE       - <  2281>    189   2855 
ec31h: PARSE_LINE1      - <  2359>   2345 
ec4dh: PARSE_LINE1DONE  - <  2376>   2368 
ec3ah: PARSE_LINE1LOOP  - <  2365>   2375 
ec62h: PARSE_LINE2      - <  2388>   2361 
ec7bh: PARSE_LINE_DONE  - <  2404>   2336 
ebe5h: PARSE_LINE_ERROR - <  2308>   2305 
ec04h: PARSE_LINE_LOOP  - <  2332>   2357   2386   2390   2402 
ebdch: PARSE_LINE_RUN   - <  2303>   2298 
ed5ch: PARSE_MUL16      - <  2614>    392   2119 
ed89h: PARSE_MULADD16   - <  2665>   2627 
ed64h: PARSE_MULLOOP    - <  2621>   2661 
ed6dh: PARSE_MULSKIP    - <  2629>   2626 
ea9eh: PARSE_NEXT       - <  2037>   2086   2333 
eaa5h: PARSE_NEXT1      - <  2042>   2039 
eaadh: PARSE_NEXT1LOOP  - <  2047>   2052 
eab7h: PARSE_NEXT2      - <  2055>   2050 
eac8h: PARSE_NEXT3      - <  2069>   2061   2076 
ead8h: PARSE_NEXTDONE   - <  2078>   2071   2074 
eadfh: PARSE_NEXTDONE2  - <  2084>   2081 
eae8h: PARSE_NUM        - <  2100>   2320   2346 
eb24h: PARSE_NUM_CHAR   - <  2138>   2107   2111 
eb2eh: PARSE_NUM_CHAR1  - <  2144>   2141 
eb18h: PARSE_NUM_DONE   - <  2128>   2115 
eafah: PARSE_NUM_LOOP   - <  2110>   2127 
eb33h: PARSE_NUM_OLD    - <  2150> 
edbah: PARSE_OR16       - <  2733>    492 
ebb1h: PARSE_POS        - <  2268> 
ecf8h: PARSE_REMOVELINE - <  2512>   2436 
ed04h: PARSE_REMOVELINE1 - <  2519>   2515   2517 
ed15h: PARSE_REMOVELOOP - <  2535>   2544 
ecdbh: PARSE_ROOMLOOP   - <  2486>   2494 
e975h: PARSE_SINGLECHAR - <  1797>   1913 
eb73h: PARSE_STRING     - <  2205> 
eb7ch: PARSE_STRING1    - <  2211>   2208 
eda5h: PARSE_SUB16      - <  2704>    468   1307   2482 
ea9ah: PARSE_TOKEN      - <  2030>   2206   2334 
0400h: PARSE_TOKEN_BUFFER - <   116>   2018   2286   2412   2497 
eba2h: PARSE_VARIABLE_NUM - <  2253>   2391 
ea44h: PCMPLOOP         - <  1947>   1955 
ffcch: SHOWADDR         - <     7>   1383   1756 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    303   1084 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9> 
ffdch: SHOWREGS         - <    11>   1089 
ea52h: SKIPLOOP         - <  1959>   1962 
ea52h: SKIPTOEND        - <  1957>   1952 
ffc0h: STRINGOUT        - <     4>    217    222    227    232    237    242 
          647    690   1088   1382   1414   1453   1461   1469   1477   1485 
         1493   1501   1509   1517   1525   1533   1541   1549   1557   1565 
         1573   1731   1755   2310   2312   2841   2852 
0019h: TOKENIZER_AND    - <    44>    441   1618   1831 
001bh: TOKENIZER_ASTR   - <    46>    375   1638   1841 
0010h: TOKENIZER_CALL   - <    35>   1538   1780 
0015h: TOKENIZER_COMMA  - <    40>    652    947    981   1578   1811 
0024h: TOKENIZER_CR     - <    55>    609    682    716    740    753    859 
          916    955    991   1728   1806   2335   2405 
0009h: TOKENIZER_ELSE   - <    28>   1482   1773 
0014h: TOKENIZER_END    - <    39>   1064   1570   1784 
0001h: TOKENIZER_EOF    - <    20>    163    684    718   1127   1388   2237 
         2240   2450   2564 
0023h: TOKENIZER_EQ     - <    54>    523    735    890   1718   1876 
0000h: TOKENIZER_ERROR  - <    19>   1379   1787   1992 
000ah: TOKENIZER_FOR    - <    29>    870   1040   1490   1774 
000eh: TOKENIZER_GOSUB  - <    33>    748   1028   1522   1778 
000dh: TOKENIZER_GOTO   - <    32>    624   1078   1514   1777 
0022h: TOKENIZER_GT     - <    53>    521   1708   1871 
001eh: TOKENIZER_HASH   - <    49>   1668   1856 
0007h: TOKENIZER_IF     - <    26>    698   1016   1466   1771 
001fh: TOKENIZER_LEFTP  - <    50>    348    670   1678   1851 
0005h: TOKENIZER_LET    - <    24>   1070   1072   1450   1769 
0025h: TOKENIZER_LINENUM - <    56>   1096   1210   1736   2316 
0026h: TOKENIZER_LIST   - <    57>   1785   2297 
0021h: TOKENIZER_LT     - <    52>    519   1698   1866 
0018h: TOKENIZER_MINUS  - <    43>    439   1608   1826 
001dh: TOKENIZER_MOD    - <    48>    379   1658   1846 
000ch: TOKENIZER_NEXT   - <    31>    804   1058   1506   1776 
0002h: TOKENIZER_NUMBER - <    21>    340    668    751   1194   1394   1905 
         2344 
001ah: TOKENIZER_OR     - <    45>    443   1628   1836 
0012h: TOKENIZER_PEEK   - <    37>    938   1046   1554   1782 
0017h: TOKENIZER_PLUS   - <    42>    437   1598   1821 
0013h: TOKENIZER_POKE   - <    38>    975   1052   1562   1783 
0006h: TOKENIZER_PRINT  - <    25>    634   1010   1458   1770 
0011h: TOKENIZER_REM    - <    36>   1546   1781   2060 
000fh: TOKENIZER_RETURN - <    34>    774   1034   1530   1779 
0020h: TOKENIZER_RIGHTP - <    51>    352   1688   1861 
0027h: TOKENIZER_RUN    - <    58>   1786   2304 
0016h: TOKENIZER_SEMICOLON - <    41>    660   1588   1816 
001ch: TOKENIZER_SLASH  - <    47>    377   1648 
0003h: TOKENIZER_STRING - <    22>    639   1220   1410   1933   2207   2360 
0008h: TOKENIZER_THEN   - <    27>    704   1474   1772 
000bh: TOKENIZER_TO     - <    30>    901   1498   1775 
0004h: TOKENIZER_VARIABLE - <    23>    329    666    733    814    888    953 
         1022   1202   1427   1986   2389 
e648h: TOKL_CALL        - <  1367>   1540 
e608h: TOKL_ELSE        - <  1356>   1484 
e643h: TOKL_END         - <  1366>   1572 
e64eh: TOKL_ERROR       - <  1368>   1381   1754 
e60eh: TOKL_FOR         - <  1357>   1492 
e623h: TOKL_GOSUB       - <  1361>   1524 
e61dh: TOKL_GOTO        - <  1360>   1516 
e5feh: TOKL_IF          - <  1354>   1468 
e5f2h: TOKL_LET         - <  1352>   1452 
e617h: TOKL_NEXT        - <  1359>   1508 
e637h: TOKL_PEEK        - <  1364>   1556 
e63dh: TOKL_POKE        - <  1365>   1564 
e5f7h: TOKL_PRINT       - <  1353>   1460 
e632h: TOKL_REM         - <  1363>   1548 
e62ah: TOKL_RETURN      - <  1362>   1532 
e602h: TOKL_THEN        - <  1355>   1476 
e613h: TOKL_TO          - <  1358>   1500 
ea3dh: TOP              - <  1943>   1964 
ffd0h: TOUPPER          - <     8>   2196 
ffe8h: UARTIN           - <    14>   2846 
ffc8h: UARTOUT          - <     6>    305   1086   1406   1416   1435   1446 
         1581   1583   1591   1593   1601   1603   1611   1613   1621   1623 
         1631   1633   1641   1643   1651   1653   1661   1663   1671   1673 
         1681   1683   1691   1693   1701   1703   1711   1713   1721   1723 
         1750 
eff0h: ZZZZ             - <  2900> 

2901 Lines assembled
0 Errors
334 Labels
Object Code:3828 bytes

