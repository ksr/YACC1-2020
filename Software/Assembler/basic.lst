RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
92 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             uartin:     equ 0ffe8h
   15 0000:             charavail:  equ 0ffech
   16 0000:             
   17 0000:             ;
   18 0000:             ; Basic interpreter tokens
   19 0000:             ;
   20 0000:             TOKENIZER_ERROR: EQU 00
   21 0000:             TOKENIZER_EOF: EQU 01
   22 0000:             TOKENIZER_NUMBER: EQU 02
   23 0000:             TOKENIZER_STRING: EQU 03
   24 0000:             TOKENIZER_VARIABLE: EQU 04
   25 0000:             TOKENIZER_LET: EQU 05
   26 0000:             TOKENIZER_PRINT: EQU 06
   27 0000:             TOKENIZER_IF: EQU 07
   28 0000:             TOKENIZER_THEN: EQU 08
   29 0000:             TOKENIZER_ELSE: EQU 09
   30 0000:             TOKENIZER_FOR: EQU 10
   31 0000:             TOKENIZER_TO: EQU 11
   32 0000:             TOKENIZER_NEXT: EQU 12
   33 0000:             TOKENIZER_GOTO: EQU 13
   34 0000:             TOKENIZER_GOSUB: EQU 14
   35 0000:             TOKENIZER_RETURN: EQU 15
   36 0000:             TOKENIZER_CALL: EQU 16
   37 0000:             TOKENIZER_REM: EQU 17
   38 0000:             TOKENIZER_PEEK: EQU 18
   39 0000:             TOKENIZER_POKE: EQU 19
   40 0000:             TOKENIZER_END: EQU 20
   41 0000:             TOKENIZER_COMMA: EQU 21
   42 0000:             TOKENIZER_SEMICOLON: EQU 22
   43 0000:             TOKENIZER_PLUS: EQU 23
   44 0000:             TOKENIZER_MINUS: EQU 24
   45 0000:             TOKENIZER_AND: EQU 25
   46 0000:             TOKENIZER_OR: EQU 26
   47 0000:             TOKENIZER_ASTR: EQU 27
   48 0000:             TOKENIZER_SLASH: EQU 28
   49 0000:             TOKENIZER_MOD: EQU 29
   50 0000:             TOKENIZER_HASH: EQU 30
   51 0000:             TOKENIZER_LEFTP: EQU 31
   52 0000:             TOKENIZER_RIGHTP: EQU 32
   53 0000:             TOKENIZER_LT: EQU 33
   54 0000:             TOKENIZER_GT: EQU 34
   55 0000:             TOKENIZER_EQ: EQU 35
   56 0000:             TOKENIZER_CR: EQU 36
   57 0000:             TOKENIZER_LINENUM: EQU 37
   58 0000:             TOKENIZER_LIST: EQU 38
   59 0000:             TOKENIZER_RUN: EQU 39
   60 0000:             TOKENIZER_NEW: EQU 40
   61 0000:             TOKENIZER_EXIT: EQU 41
   62 0000:             TOKENIZER_INPUT: EQU 42
   63 0000:             TOKENIZER_INP: EQU 43
   64 0000:             TOKENIZER_OUTP: EQU 44
   65 0000:             TOKENIZER_ON: EQU 45
   66 0000:             TOKENIZER_OFF: EQU 46
   67 0000:             
   68 0000:             
   69 0000:             ;
   70 0000:             ; BASIC interpreter user variables area
   71 0000:             ; currently 26 1-byte variables
   72 0000:             ; for now must be 0xAA00 (256 byte) aligned
   73 0000:             ;
   74 0000:             BASIC_VARS: EQU 0100h
   75 0000:             
   76 0000:             ;
   77 0000:             ; Basic interpreter internal variables
   78 0000:             ;
   79 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   80 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   81 0000:             bas_nxtptr:       EQU 0204h ;
   82 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   83 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   84 0000:             bas_currenttoken: EQU 020Ah ; used in parsing
   85 0000:             bas_tokenbuffer:  EQU 020Ch ; Pointer to start of token buffer
   86 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   87 0000:                                         ; this value should be + 1 end of buffer
   88 0000:                                         ; if buffer is 0x1000-0x1fff this is
   89 0000:                                         ; set to 0x2000. Used in moving buffer around
   90 0000:                                         ; in add and remove line
   91 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   92 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   93 0000:             bas_insertptr:    EQU 0214H
   94 0000:             bas_negflag:      EQU 0216H ; PROCESS NEGATIVE NUMBER
   95 0000:             
   96 0000:             ;
   97 0000:             ; FOR-NEXT statement stack ptr and stack data
   98 0000:             ;
   99 0000:             ; for next stack data
  100 0000:             ; format
  101 0000:             ;   2 bytes for variable id (only first byte used for now)
  102 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
  103 0000:             ;   2 bytes ptr to line after for instruction (format HL)
  104 0000:             ; later add step amount
  105 0000:             ;
  106 0000:             bas_forstackptr: EQU 0280h
  107 0000:             bas_forstack: EQU 0282h
  108 0000:             
  109 0000:             ;
  110 0000:             ; GOSUB stack ptr and data
  111 0000:             ;
  112 0000:             ; gosub STACK
  113 0000:             ; format
  114 0000:             ;   2 bytes return location ptr
  115 0000:             ;
  116 0000:             bas_gosubptr: EQU 02c0h
  117 0000:             bas_gosubstack: EQU 02c2h
  118 0000:             
  119 0000:             ;
  120 0000:             ; Basic interpreter text input line buffer
  121 0000:             ;
  122 0000:             parse_input_line: EQU 300h
  123 0000:             ;
  124 0000:             ; Basic interpreter tmp buffer to build up current token line
  125 0000:             ;
  126 0000:             parse_token_buffer: EQU 400h
  127 0000:             ;
  128 0000:             ; Basic interpreter token buffer
  129 0000:             ;
  130 0000:             bas_tok_buf_start: EQU 1000h
  131 0000:             ;
  132 0000:             ; Basic interpreter token buffer end + 1
  133 0000:             ;
  134 0000:             bas_tok_buf_end: EQU 2000h
  135 0000:             ; OR
  136 0000:             ;bas_tok_buf_end: EQU 1100h ;smaller for easy debugging - 256 byte buffer
  137 0000:             
  138 0000:             ;
  139 0000:             ; basic interpreter, add IO and peek/poke
  140 0000:             ;
  141 0000:             
  142 0000:             ;
  143 0000:             ; Basic Interpreter
  144 0000:             ;
  145 0000:             
  146 0000:             ;
  147 0000:             ; BASIC Entry Points
  148 0000:             ;
  149 0000:               ORG 0e000h
  150 e000:             ;
  151 e000:             ; list
  152 e000:             ;
  153 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  154 e003: 04 e6 e6          JSR  basic_list
  155 e006: 05                Ret
  156 e007:             
  157 e007:             ;
  158 e007:                   ORG 0e010h
  159 e010:             ;
  160 e010:             ; run
  161 e010:             ;
  162 e010: 04 e5 78          jsr basic_run
  163 e013: 05                Ret
  164 e014:             
  165 e014:             ;
  166 e014:                   ORG 0e020h
  167 e020:             ;
  168 e020:             ; cold start
  169 e020:             ;
  170 e020:             ; Hack later pass in R7
  171 e020:             ;
  172 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  173 e023: 0e 01             ldai TOKENIZER_EOF          ;write EOF to start of buffer
  174 e025: 4f                stavr r7
  175 e026: ef 02 0c          STR R7,bas_tokenbuffer
  176 e029: 1f 20 00          mviw r7,bas_tok_buf_end
  177 e02c: ef 02 0e          str r7,bas_bufferendhi
  178 e02f: 05                Ret
  179 e030:             
  180 e030:             ;
  181 e030:                   ORG 0e030h
  182 e030:             ;
  183 e030:             ; tests - called from monitor - used to test snippets of code
  184 e030:             ;
  185 e030: 04 e0 60          jsr bigtest
  186 e033: 05                ret
  187 e034:             ;
  188 e034:                   org 0e040h
  189 e040:             ;
  190 e040:             ; very basic cmd line driver
  191 e040:             ;
  192 e040: 04 ef 63          jsr basic_interprter
  193 e043: 05                ret
  194 e044:             ;
  195 e044:                   org 0e050h
  196 e050:             ;
  197 e050:             ; parse line
  198 e050:             ;
  199 e050: 04 ec 8d          jsr parse_line
  200 e053: 05                ret
  201 e054:             
  202 e054:             ;
  203 e054:                   ORG 0e060h
  204 e060:             ;
  205 e060:             ; Copy test program into token Buffer, copies 0x0400 bytes
  206 e060:             ;
  207 e060:             ;      mviw R7,bas_tok_buf_start
  208 e060:             ;     mviw R6,BASIC_TEST
  209 e060:             ;      mviw R5,0400h
  210 e060:             ;
  211 e060:             ;bas_copyloop:
  212 e060:             ;      ldavr R6
  213 e060:             ;      stavr r7
  214 e060:             ;      incr r6
  215 e060:             ;      incr r7
  216 e060:             ;      decr r5
  217 e060:             ;      mvrha r5
  218 e060:             ;      brnz bas_copyloop
  219 e060:             ;      mvrla r5
  220 e060:             ;      brnz bas_copyloop
  221 e060:             ;      ret
  222 e060:             
  223 e060:             bigtest:
  224 e060: 1d 00 69        mviw r5,0105
  225 e063: 1c 00 0a        mviw r4,0010
  226 e066: 04 ee 61        jsr parse_div16
  227 e069: 04 ff dc        jsr showregs
  228 e06c: 1f ef 9f        mviw r7,CRLF
  229 e06f: 04 ff c0        jsr stringout
  230 e072:             
  231 e072: 1d 00 69        mviw r5,0105
  232 e075: 1c 00 0a        mviw r4,0010
  233 e078: 04 ee 82        jsr parse_mod16
  234 e07b: 04 ff dc        jsr showregs
  235 e07e: 1f ef 9f        mviw r7,CRLF
  236 e081: 04 ff c0        jsr stringout
  237 e084:             
  238 e084: 1f 12 34        mviw r7,01234h
  239 e087: 04 e6 00        jsr exe_itoa
  240 e08a: 1f ef 9f        mviw r7,CRLF
  241 e08d: 04 ff c0        jsr stringout
  242 e090:             
  243 e090:             
  244 e090: 05              ret
  245 e091:             
  246 e091:             ;
  247 e091:             ; basic interpreter messages
  248 e091:             ;
  249 e091: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "accept - unexpected token",0,0ah,0dh
  250 e0ad: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  251 e0be: 54 4f 4b 45 
            4e 20 4e 4f 
            54 20 53 55 
            50 50 4f 52 
            54 45 44 20 
            0a 0d       bas_msg3: db "token not supported ",0ah,0dh
  252 e0d4: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  253 e0de: 55 4e 4b 4e 
            4f 57 4e 20 
            43 4f 4d 4d 
            41 4e 44 00 
            0a 0d       parse_cmd_error: db "UNKNOWN COMMAND",0,0ah,0DH
  254 e0f0:             
  255 e0f0:             ;
  256 e0f0:             ; Basic interpreter - execution engine
  257 e0f0:             ; Register Usage
  258 e0f0:             ; R0 - Program Counter
  259 e0f0:             ; R1 - Stack Pointer
  260 e0f0:             ; R2 - Direct addressing mode
  261 e0f0:             ; R3 - Basic Interpreter Token Buffer ptr
  262 e0f0:             ; R4 - working register  ; or is this for-next stack ptr
  263 e0f0:             ; R5 - working register  ; or is this gosub stack ptr
  264 e0f0:             ; R6 - Working register
  265 e0f0:             ; R7 - parameter passing & return value
  266 e0f0:             ;
  267 e0f0:             ;exe: Is this label needed
  268 e0f0:             ;
  269 e0f0:             ; void ubasic_init()
  270 e0f0:             ;
  271 e0f0:             ; Setup basic interpreter execution engine
  272 e0f0:             ;
  273 e0f0:             exe_init:
  274 e0f0: 09              push
  275 e0f1: 1d 02 c2        MVIW R5,bas_gosubstack
  276 e0f4: 1c 02 82        MVIW R4,bas_forstack
  277 e0f7: 1e 02 00        MVIW R6,bas_run_ended
  278 e0fa: 0e 00           LDAI 0
  279 e0fc: 4e              STAVR R6
  280 e0fd: f3 02 0c        LDR R3,bas_tokenbuffer
  281 e100: 0a              pop
  282 e101: 05              RET
  283 e102:             
  284 e102:             ;
  285 e102:             ; void accept(int)
  286 e102:             ;
  287 e102:             ; compare accumulator with current token then advance to next token in buffer
  288 e102:             ; assume accumulator destroyed
  289 e102:             ;
  290 e102:             exe_accept:
  291 e102: 09              push
  292 e103:             ;
  293 e103:             ; get current token into accumulator
  294 e103:             ;
  295 e103:             ; FIX: Switch to BRNEQ to error state and save a branch
  296 e103:             ;
  297 e103: 43              LDAVR R3
  298 e104: 0b              MVAT
  299 e105: 0a              POP
  300 e106: a8 e1 17        BREQ exe_accept_done
  301 e109:             ;
  302 e109:             ; debug information
  303 e109:             ;
  304 e109: 04 ff e0        JSR showbytea
  305 e10c: 0e 23           ldai '#'
  306 e10e: 04 ff c8        JSR uartout
  307 e111: 1f e0 91        mviw R7,bas_msg1
  308 e114: 04 e5 b7        JSR bas_error
  309 e117:             ;
  310 e117:             exe_accept_done:
  311 e117: 04 e5 b9        jsr exe_next_token
  312 e11a: 05              RET
  313 e11b:             
  314 e11b:             ;
  315 e11b:             ; int varfactor()
  316 e11b:             ;
  317 e11b:             ; get variable id pointed to by exe_variable_num in token stream
  318 e11b:             ; (this is not a value but a variable id)
  319 e11b:             ; value returned by exe_get_variable in r7
  320 e11b:             ;
  321 e11b:             ; return value in R7
  322 e11b:             ;
  323 e11b:             exe_varfactor:
  324 e11b: 04 e5 f2        jsr exe_variable_num    ; get variable number id (one byte for now a-z)
  325 e11e:                                         ;into accumulator
  326 e11e:             ;
  327 e11e:             ; variable id in accumulator, return value in r7
  328 e11e:             ;
  329 e11e: 04 e5 ac        jsr exe_get_variable
  330 e121: 0e 04           LDAI TOKENIZER_VARIABLE
  331 e123: 04 e1 02        JSR exe_accept
  332 e126: 05              RET
  333 e127:             
  334 e127:             ;
  335 e127:             ; int factor()
  336 e127:             ; return value in R7
  337 e127:             ;
  338 e127:             ; IS MOVE T TO A NEEDED IN ALL THESE :
  339 e127:             ;
  340 e127:             exe_factor:
  341 e127:             ;
  342 e127: 43              LDAVR R3               ;get current token into accumulator
  343 e128: 0d 17           LDTI TOKENIZER_PLUS
  344 e12a: aa e1 35        BRNEQ exe_factor1A
  345 e12d: 04 e1 02        JSR exe_accept
  346 e130: 04 e1 27        JSR EXE_FACTOR
  347 e133: 0c              MVTA
  348 e134: 05              RET
  349 e135:             
  350 e135:             exe_factor1A:
  351 e135: 43              LDAVR R3               ;get current token into accumulator
  352 e136: 0d 18           LDTI TOKENIZER_MINUS
  353 e138: aa e1 46        BRNEQ exe_factor1B
  354 e13b: 04 e1 02        JSR exe_accept
  355 e13e: 04 e1 27        JSR EXE_FACTOR
  356 e141: 04 ee f4        JSR PARSE_NEG
  357 e144: 0c              MVTA
  358 e145: 05              RET
  359 e146:             
  360 e146:             exe_factor1B:
  361 e146: 43              LDAVR R3               ;get current token into accumulator
  362 e147: 0d 02           LDTI TOKENIZER_NUMBER
  363 e149: aa e1 54        BRNEQ exe_factor1
  364 e14c: 04 e5 e9        JSR exe_num
  365 e14f: 0c              MVTA
  366 e150: 04 e1 02        JSR exe_accept
  367 e153: 05              RET
  368 e154:             
  369 e154:             exe_factor1:
  370 e154: 0d 1f           LDTI TOKENIZER_LEFTP
  371 e156: aa e1 65        BRNEQ exe_factor2
  372 e159: 04 e1 02        JSR exe_accept
  373 e15c: 04 e1 ce        JSR exe_expr
  374 e15f: 0e 20           LDAI TOKENIZER_RIGHTP
  375 e161: 04 e1 02        JSR exe_accept
  376 e164: 05              RET
  377 e165:             
  378 e165:             exe_factor2:
  379 e165: 04 e1 1b        jsr exe_varfactor
  380 e168: 05              ret
  381 e169:             
  382 e169:             ;
  383 e169:             ; int term()
  384 e169:             ; R5 = F1
  385 e169:             ; R6 = F2
  386 e169:             ; R7 = return value
  387 e169:             ;
  388 e169:             exe_term:
  389 e169: 07 05           pushr r5
  390 e16b: 07 06           pushr r6
  391 e16d:             
  392 e16d: 04 e1 27        jsr exe_factor
  393 e170: 0f 57           MOVRR r7,r5
  394 e172:             
  395 e172:             exe_term_loop:
  396 e172: 43              LDAVR R3
  397 e173: 0d 1b           ldti TOKENIZER_ASTR
  398 e175: a8 e1 85        BREQ exe_term_astr
  399 e178: 0d 1c           LDTI TOKENIZER_SLASH
  400 e17a: a8 e1 9b        breq exe_term_slash
  401 e17d: 0d 1d           ldti TOKENIZER_MOD
  402 e17f: a8 e1 b1        breq exe_term_mod
  403 e182: a0 e1 c7        br exe_term_done
  404 e185:             
  405 e185:             exe_term_astr:
  406 e185: 04 e5 b9        jsr exe_next_token
  407 e188: 04 e1 27        jsr exe_factor
  408 e18b: 0f 67           movrr r7,r6
  409 e18d:             ;
  410 e18d:             ; do mulitply f1 = f1 * f2
  411 e18d:             ;
  412 e18d: 07 04           pushr r4
  413 e18f: 0f 46           movrr r6,r4
  414 e191: 04 ee a1        jsr PARSE_MUL16
  415 e194: 0f 57           movrr r7,r5
  416 e196: 08 40           popr r4
  417 e198: a0 e1 72        BR exe_term_loop
  418 e19b:             
  419 e19b:             exe_term_slash:
  420 e19b: 04 e5 b9        jsr exe_next_token
  421 e19e: 04 e1 27        jsr exe_factor
  422 e1a1: 0f 67           movrr r7,r6
  423 e1a3:             ;
  424 e1a3:             ; do divide f1 = f1 / f2
  425 e1a3:             ;
  426 e1a3: 07 04           pushr r4
  427 e1a5: 0f 46           movrr r6,r4
  428 e1a7: 04 ee 61        jsr PARSE_DIV16
  429 e1aa: 0f 57           movrr r7,r5
  430 e1ac: 08 40           popr r4
  431 e1ae: a0 e1 72        BR exe_term_loop
  432 e1b1:             
  433 e1b1:             exe_term_mod:
  434 e1b1: 04 e5 b9        jsr exe_next_token
  435 e1b4: 04 e1 27        jsr exe_factor
  436 e1b7: 0f 67           movrr r7,r6
  437 e1b9:             ;
  438 e1b9:             ; f1 = f1 % f2
  439 e1b9:             ;
  440 e1b9: 07 04           pushr r4
  441 e1bb: 0f 46           movrr r6,r4
  442 e1bd: 04 ee 82        jsr PARSE_MOD16
  443 e1c0: 0f 57           movrr r7,r5
  444 e1c2: 08 40           popr r4
  445 e1c4: a0 e1 72        BR exe_term_loop
  446 e1c7:             
  447 e1c7:             exe_term_done:
  448 e1c7: 0f 75           MOVRR r5,r7
  449 e1c9: 08 60           popr r6
  450 e1cb: 08 50           popr r5
  451 e1cd: 05              ret
  452 e1ce:             
  453 e1ce:             ;
  454 e1ce:             ; static VARIABLE_TYPE expr()
  455 e1ce:             ;
  456 e1ce:             ; R5 = t1
  457 e1ce:             ; R6 = t2
  458 e1ce:             ; R7 = return value
  459 e1ce:             ;
  460 e1ce:             exe_expr:
  461 e1ce: 07 05           pushr r5
  462 e1d0: 07 06           pushr r6
  463 e1d2:             
  464 e1d2: 04 e1 69        jsr exe_term
  465 e1d5: 0f 57           MOVRR r7,r5
  466 e1d7:             
  467 e1d7:             exe_expr_loop:
  468 e1d7: 43              LDAVR R3
  469 e1d8: 0d 17           ldtI TOKENIZER_PLUS
  470 e1da: a8 e1 ef        BREQ exe_expr_plus
  471 e1dd: 0d 18           ldtI TOKENIZER_MINUS
  472 e1df: a8 e2 01        breq exe_expr_minus
  473 e1e2: 0d 19           ldtI TOKENIZER_AND
  474 e1e4: a8 e2 13        breq exe_expr_and
  475 e1e7: 0d 1a           ldti TOKENIZER_OR
  476 e1e9: a8 e2 25        breq exe_expr_or
  477 e1ec:             
  478 e1ec: a0 e2 3a        br exe_expr_done
  479 e1ef:             
  480 e1ef:             exe_expr_plus:
  481 e1ef: 04 e5 b9        jsr exe_next_token
  482 e1f2: 04 e1 69        jsr exe_term
  483 e1f5: 0f 67           movrr r7,r6
  484 e1f7:             ;
  485 e1f7:             ; t1 = t1 + t2
  486 e1f7:             ;
  487 e1f7: 0f 75           movrr r5,r7
  488 e1f9: 04 ee dc        jsr parse_add16
  489 e1fc: 0f 57           movrr r7,r5
  490 e1fe: a0 e1 d7        BR exe_expr_loop
  491 e201:             
  492 e201:             exe_expr_minus:
  493 e201: 04 e5 b9        jsr exe_next_token
  494 e204: 04 e1 69        jsr exe_term
  495 e207: 0f 67           movrr r7,r6
  496 e209:             ;
  497 e209:             ; t1 = t1 - t2
  498 e209:             ;
  499 e209: 0f 75           movrr r5,r7
  500 e20b: 04 ee ea        jsr parse_sub16
  501 e20e: 0f 57           movrr r7,r5
  502 e210: a0 e1 d7        BR exe_expr_loop
  503 e213:             
  504 e213:             exe_expr_and:
  505 e213: 04 e5 b9        jsr exe_next_token
  506 e216: 04 e1 69        jsr exe_term
  507 e219: 0f 67           movrr r7,r6
  508 e21b:             ;
  509 e21b:             ; t1 = t1 & t2
  510 e21b:             ;
  511 e21b: 0f 75           movrr r5,r7
  512 e21d: 04 ee fc        jsr parse_and16
  513 e220: 0f 57           movrr r7,r5
  514 e222: a0 e1 d7        BR exe_expr_loop
  515 e225:             
  516 e225:             exe_expr_or:
  517 e225: 04 e5 b9        jsr exe_next_token
  518 e228: 04 e1 69        jsr exe_term
  519 e22b: 0f 67           movrr r7,r6
  520 e22d:             ;
  521 e22d:             ; t1 = t1 | t2
  522 e22d:             ;
  523 e22d: 0f 75           movrr r5,r7
  524 e22f: 04 ef 07        jsr parse_or16
  525 e232: 0f 57           movrr r7,r5
  526 e234: a0 e1 d7        BR exe_expr_loop
  527 e237: a0 e1 d7        BR exe_expr_loop
  528 e23a:             
  529 e23a:             exe_expr_done:
  530 e23a: 0f 75           MOVRR r5,r7
  531 e23c: 08 60           popr r6
  532 e23e: 08 50           popr r5
  533 e240: 05              ret
  534 e241:             
  535 e241:             ;
  536 e241:             ; int relation ()
  537 e241:             ;
  538 e241:             ; R5 = r1
  539 e241:             ; R6 = r2
  540 e241:             ; R7 = return value
  541 e241:             ;
  542 e241:             exe_relation:
  543 e241: 07 05           pushr r5
  544 e243: 07 06           pushr r6
  545 e245:             
  546 e245: 04 e1 ce        jsr exe_expr
  547 e248: 0f 57           MOVRR r7,r5
  548 e24a:             
  549 e24a:             exe_relation_loop:
  550 e24a: 43              LDAVR R3
  551 e24b: 0d 21           LDTI TOKENIZER_LT
  552 e24d: a8 e2 5d        BREQ exe_relation_lt
  553 e250: 0d 22           ldti TOKENIZER_GT
  554 e252: a8 e2 7b        breq exe_relation_gt
  555 e255: 0d 23           ldti TOKENIZER_EQ
  556 e257: a8 e2 99        breq exe_relation_eq
  557 e25a:             
  558 e25a: a0 e2 b5        br exe_relation_done
  559 e25d:             
  560 e25d:             exe_relation_lt:
  561 e25d: 04 e5 b9        jsr exe_next_token
  562 e260: 04 e1 ce        jsr exe_expr
  563 e263: 0f 67           movrr r7,r6
  564 e265:             ;
  565 e265:             ; r1 = r1 < r2
  566 e265:             ;
  567 e265: 0f 75           movrr  r5,r7
  568 e267: 04 ef 3f        jsr parse_compare
  569 e26a: 0d ff           ldti 0ffh
  570 e26c: aa e2 75        BRNEQ exe_rel_nlt
  571 e26f: 1d 00 01        mviw r5,01h
  572 e272: a0 e2 4a        BR exe_relation_loop
  573 e275:             exe_rel_nlt:
  574 e275: 1d 00 00        mviw r5,00h
  575 e278: a0 e2 4a        BR exe_relation_loop
  576 e27b:             
  577 e27b:             exe_relation_gt:
  578 e27b: 04 e5 b9        jsr exe_next_token
  579 e27e: 04 e1 ce        jsr exe_expr
  580 e281: 0f 67           movrr r7,r6
  581 e283:             ;
  582 e283:             ; r1 = r1 > r2
  583 e283:             ;
  584 e283: 0f 75           movrr  r5,r7
  585 e285: 04 ef 3f        jsr parse_compare
  586 e288: 0d 01           ldti 01h
  587 e28a: aa e2 93        BRNEQ exe_rel_ngt
  588 e28d: 1d 00 01        mviw r5,01h
  589 e290: a0 e2 4a        BR exe_relation_loop
  590 e293:             exe_rel_ngt:
  591 e293: 1d 00 00        mviw r5,00h
  592 e296: a0 e2 4a        BR exe_relation_loop
  593 e299:             
  594 e299:             exe_relation_eq:
  595 e299: 04 e5 b9        jsr exe_next_token
  596 e29c: 04 e1 ce        jsr exe_expr
  597 e29f: 0f 67           movrr r7,r6
  598 e2a1:             ;
  599 e2a1:             ; r1 = r1 == r2
  600 e2a1:             ;
  601 e2a1: 0f 75           movrr  r5,r7
  602 e2a3: 04 ef 3f        jsr parse_compare
  603 e2a6: a2 e2 af        brnz exe_rel_ne
  604 e2a9: 1d 00 01        mviw r5,01h
  605 e2ac: a0 e2 4a        BR exe_relation_loop
  606 e2af:             exe_rel_ne:
  607 e2af: 1d 00 00        mviw r5,00h
  608 e2b2: a0 e2 4a        BR exe_relation_loop
  609 e2b5:             
  610 e2b5:             exe_relation_done:
  611 e2b5: 0f 75           MOVRR r5,r7
  612 e2b7: 08 60           popr r6
  613 e2b9: 08 50           popr r5
  614 e2bb: 05              ret
  615 e2bc:             
  616 e2bc:             ;
  617 e2bc:             ; char * index_find (int linenum)
  618 e2bc:             ;
  619 e2bc:             ; call with line in R7
  620 e2bc:             ; return with val in R7 - tokenbuffer ptr
  621 e2bc:             ; THIS CAN BE REMOVED SINCE IT IS ONLY A SINGLE CALL
  622 e2bc:             ;
  623 e2bc:             exe_index_find:
  624 e2bc: 04 ee 25        JSR basu_find
  625 e2bf: 05              RET
  626 e2c0:             
  627 e2c0:             ;
  628 e2c0:             ; void jump_linenum(linenum)
  629 e2c0:             ;
  630 e2c0:             ; Linenum in R7
  631 e2c0:             ;
  632 e2c0:             exe_jump_line:
  633 e2c0: 04 e2 bc        JSR exe_index_find
  634 e2c3: 2f              MVRHA R7
  635 e2c4: a2 e2 d7        BRNZ exe_jump_line1
  636 e2c7: 27              MVRLA R7
  637 e2c8: a2 e2 d7        BRNZ exe_jump_line1
  638 e2cb:             ;
  639 e2cb:             ; returned 0 line not found
  640 e2cb:             ;
  641 e2cb: 0e 24           LDAI TOKENIZER_CR
  642 e2cd: 04 e1 02        JSR exe_accept
  643 e2d0: 1e 02 00        MVIW r6,bas_run_ended
  644 e2d3: 0e 01           LDAI 1
  645 e2d5: 4e              STAVR R6
  646 e2d6: 05              ret
  647 e2d7:             exe_jump_line1:
  648 e2d7:             ;   jsr tok_goto ; WHAT IS THIS
  649 e2d7: 0f 37           movrr r7,r3
  650 e2d9: 05              ret
  651 e2da:             
  652 e2da:             ;
  653 e2da:             ; void goto_statement()
  654 e2da:             ;
  655 e2da:             exe_goto_stmt:
  656 e2da: 0e 0d           LDAI TOKENIZER_GOTO
  657 e2dc: 04 e1 02        JSR exe_accept
  658 e2df: 04 e1 ce        JSR exe_expr
  659 e2e2: 04 e2 c0        JSR exe_jump_line
  660 e2e5: 05              RET
  661 e2e6:             
  662 e2e6:             ;
  663 e2e6:             ; void print_statment()
  664 e2e6:             ;
  665 e2e6:             exe_print_stmt:
  666 e2e6: 0e 06           LDAI TOKENIZER_PRINT
  667 e2e8: 04 e1 02        jsr exe_accept
  668 e2eb:             
  669 e2eb:             exe_print_stmt_loop:
  670 e2eb: 43              LDAVR R3
  671 e2ec: 0d 03           LDTI TOKENIZER_STRING
  672 e2ee: aa e2 fd        BRNEQ exe_print_stmt1
  673 e2f1:             ;
  674 e2f1:             ; this should return string to print in r2
  675 e2f1:             ; exe_string may not be needed tokenbufferptr is at string ?
  676 e2f1:             ;
  677 e2f1: 0f 73           movrr r3,r7
  678 e2f3: 57              incr r7
  679 e2f4: 04 ff c0        jsr stringout
  680 e2f7: 04 e5 b9        jsr exe_next_token
  681 e2fa: a0 e3 30        br exe_print_stmt_test
  682 e2fd:             
  683 e2fd:             exe_print_stmt1:
  684 e2fd: 0d 15           ldti TOKENIZER_COMMA
  685 e2ff: aa e3 0d        BRNEQ exe_print_stmt2
  686 e302: 0e 20           LDAI ' '
  687 e304: 04 ff c4        JSR charout
  688 e307: 04 e5 b9        jsr exe_next_token
  689 e30a: a0 e3 30        br exe_print_stmt_test
  690 e30d:             
  691 e30d:             exe_print_stmt2:
  692 e30d: 0d 16           ldti TOKENIZER_SEMICOLON
  693 e30f: aa e3 18        BRNEQ exe_print_stmt3
  694 e312: 04 e5 b9        jsr exe_next_token
  695 e315: a0 e3 30        br exe_print_stmt_test
  696 e318:             
  697 e318:             exe_print_stmt3:
  698 e318: 0d 04           ldti TOKENIZER_VARIABLE
  699 e31a: a8 e3 2a        BREQ exe_print_stmt4
  700 e31d: 0d 02           ldti TOKENIZER_NUMBER
  701 e31f: a8 e3 2a        breq exe_print_stmt4
  702 e322: 0d 1f           ldti  TOKENIZER_LEFTP
  703 e324: a8 e3 2a        breq exe_print_stmt4
  704 e327:             
  705 e327: a0 e3 3e        br exe_print_stmt_done
  706 e32a:             
  707 e32a:             exe_print_stmt4:
  708 e32a: 04 e1 ce        jsr exe_expr
  709 e32d:                 ;JSR showr7
  710 e32d: 04 e6 00        jsr exe_itoa
  711 e330:             
  712 e330:             exe_print_stmt_test:
  713 e330: 43              LDAVR R3
  714 e331: 0d 24           LDTI TOKENIZER_CR
  715 e333: a8 e3 3e        breq exe_print_stmt_done
  716 e336: 0d 01           LDTI TOKENIZER_EOF
  717 e338: a8 e3 3e        breq exe_print_stmt_done
  718 e33b: a0 e2 eb        br exe_print_stmt_loop
  719 e33e:             
  720 e33e:             exe_print_stmt_done:
  721 e33e: 1f ef 9f        mviw R7,CRLF
  722 e341: 04 ff c0        jsr stringout
  723 e344: 04 e5 b9        jsr exe_next_token
  724 e347: 05              ret
  725 e348:             
  726 e348:             ;
  727 e348:             ; void if_statement()
  728 e348:             ;
  729 e348:             exe_if_stmt:
  730 e348: 0e 07           LDAI TOKENIZER_IF
  731 e34a: 04 e1 02        JSR exe_accept
  732 e34d:             
  733 e34d: 04 e2 41        JSR exe_relation
  734 e350: 27              MVRLA R7
  735 e351: 09              push
  736 e352: 0e 08           LDAI TOKENIZER_THEN
  737 e354: 04 e1 02        JSR exe_accept
  738 e357: 0a              pop
  739 e358:             
  740 e358: 0d 01           LDTI 1
  741 e35a: aa e3 61        BRNEQ exe_if_stmt1
  742 e35d: 04 e4 ac        JSR exe_stmt
  743 e360: 05              ret
  744 e361:             
  745 e361:             exe_if_stmt1:
  746 e361: 04 e5 b9        jsr exe_next_token
  747 e364: 43              LDAVR R3
  748 e365: 0d 24           LDTI TOKENIZER_CR
  749 e367: a8 e3 70        BREQ EXE_IF_STMT2
  750 e36a: 0d 01           LDTI TOKENIZER_EOF
  751 e36c: aa e3 61        BRNEQ EXE_IF_STMT1
  752 e36f: 05              RET
  753 e370:             
  754 e370:             exe_if_stmt2:
  755 e370: 04 e5 b9        JSR EXE_NEXT_TOKEN
  756 e373: 05              RET
  757 e374:             
  758 e374:             ;
  759 e374:             ; void let_statement()
  760 e374:             ;
  761 e374:             exe_let_stmt:
  762 e374: 04 e5 f2        jsr exe_variable_num
  763 e377: 37              mvarl r7
  764 e378: 0f 67           movrr r7,r6
  765 e37a: 0e 04           ldai TOKENIZER_VARIABLE
  766 e37c: 04 e1 02        jsr exe_accept
  767 e37f: 0e 23           ldai TOKENIZER_EQ
  768 e381: 04 e1 02        jsr exe_accept
  769 e384: 04 e1 ce        jsr exe_expr
  770 e387: 26              mvrla r6
  771 e388: 04 e5 a1        JSR exe_set_variable
  772 e38b: 0e 24           ldai TOKENIZER_CR
  773 e38d: 04 e1 02        jsr exe_accept
  774 e390: 05              ret
  775 e391:             
  776 e391:             ;
  777 e391:             ; void gosub_statement()
  778 e391:             ;
  779 e391:             exe_gosub_stmt:
  780 e391: 0e 0e           ldai TOKENIZER_GOSUB
  781 e393: 04 e1 02        jsr exe_accept
  782 e396: 04 e5 e9        jsr exe_num
  783 e399: 0e 02           ldai TOKENIZER_NUMBER
  784 e39b: 04 e1 02        jsr exe_accept
  785 e39e: 0e 24           ldai TOKENIZER_CR
  786 e3a0: 04 e1 02        jsr exe_accept
  787 e3a3:             ;
  788 e3a3:             ; save current token buffer ptr to gosub stack
  789 e3a3:             ;
  790 e3a3: 23             mvrla r3
  791 e3a4: 4d             stavr r5
  792 e3a5: 55             incr r5
  793 e3a6: 2b             mvrha r3
  794 e3a7: 4d             stavr r5
  795 e3a8: 55             incr  r5
  796 e3a9:             ;
  797 e3a9:             ; write new gosub stack ptr location back
  798 e3a9:             ;
  799 e3a9: 04 e2 c0       JSR exe_jump_line
  800 e3ac: 05             RET
  801 e3ad:             
  802 e3ad:             ;
  803 e3ad:             ; void return_statment()
  804 e3ad:             ;
  805 e3ad:             exe_return_stmt:
  806 e3ad: 0e 0f           ldai TOKENIZER_RETURN
  807 e3af: 04 e1 02        jsr exe_accept
  808 e3b2:             ;
  809 e3b2:             ; setup to use for storage area via R4
  810 e3b2:             ;
  811 e3b2: 5d             decr r5
  812 e3b3: 5d             decr r5
  813 e3b4:             
  814 e3b4: 45             ldavr r5
  815 e3b5: 33             mvarl r3
  816 e3b6: 55             incr r5
  817 e3b7: 45             ldavr r5
  818 e3b8: 3b             mvarh r3
  819 e3b9:             
  820 e3b9: 5d             decr r5
  821 e3ba: 05             ret
  822 e3bb:             
  823 e3bb:             ;
  824 e3bb:             ; void next_statement()
  825 e3bb:             ;
  826 e3bb:             exe_next_stmt:
  827 e3bb:             ;
  828 e3bb:             ; backup to the TO Value
  829 e3bb: 5c              decr r4
  830 e3bc: 5c              decr r4
  831 e3bd: 5c              decr r4
  832 e3be: 5c              decr r4
  833 e3bf:             ;
  834 e3bf:             ; eat next
  835 e3bf:             ;
  836 e3bf: 0e 0c           ldai TOKENIZER_NEXT
  837 e3c1: 04 e1 02        jsr exe_accept
  838 e3c4:             ;
  839 e3c4:             ; get variable id (in accumulator) and hold in r6 lo
  840 e3c4:             ;
  841 e3c4: 04 e5 f2        jsr exe_variable_num
  842 e3c7: 36              mvarl r6
  843 e3c8:             ;
  844 e3c8:             ; eat TOKENIZER_VARIABLE id
  845 e3c8:             ;
  846 e3c8: 0e 04           ldai TOKENIZER_VARIABLE
  847 e3ca: 04 e1 02        jsr exe_accept
  848 e3cd:             ;
  849 e3cd:             ; get variable value, inc by 1 and store - ADD STEP VALUE
  850 e3cd:             ;
  851 e3cd: 26              mvrla r6
  852 e3ce: 04 e5 ac        jsr exe_get_variable
  853 e3d1: 57              incr r7
  854 e3d2: 26              mvrla r6
  855 e3d3: 04 e5 a1        jsr exe_set_variable
  856 e3d6:             ;
  857 e3d6:             ; get TO value into R6
  858 e3d6: 44              ldavr r4
  859 e3d7: 36              mvarl r6
  860 e3d8: 54              incr r4
  861 e3d9: 44              ldavr r4
  862 e3da: 3e              mvarh r6
  863 e3db: 54              incr r4
  864 e3dc:             ;
  865 e3dc:             ; for now only compare low byte HACK use compare code
  866 e3dc:             ; r7=r6 00
  867 e3dc:             ; r7>r6 01
  868 e3dc:             ; r7<r6 ff
  869 e3dc:             ;
  870 e3dc: 04 ef 3f         jsr parse_compare
  871 e3df: 0d 01            ldti 01
  872 e3e1: a8 e3 eb         breq exe_next_done
  873 e3e4:             ;    mvrla r6
  874 e3e4:             ;    mvat
  875 e3e4:             ;    mvrla r7
  876 e3e4:             ;    brgt exe_next_done
  877 e3e4:             ;
  878 e3e4: 44              ldavr r4
  879 e3e5: 33              mvarl r3
  880 e3e6: 54              incr r4
  881 e3e7: 44              ldavr r4
  882 e3e8: 3b              mvarh r3
  883 e3e9: 54              incr r4
  884 e3ea: 05              ret
  885 e3eb:             
  886 e3eb:             exe_next_done:
  887 e3eb: 5c            decr r4
  888 e3ec: 5c            decr r4
  889 e3ed: 5c            decr r4
  890 e3ee: 5c            decr r4
  891 e3ef: 0e 24         ldai TOKENIZER_CR
  892 e3f1: 04 e1 02      jsr exe_accept
  893 e3f4: 05            ret
  894 e3f5:             
  895 e3f5:             ;
  896 e3f5:             ; void for_statement()
  897 e3f5:             ;
  898 e3f5:             exe_for_stmt:
  899 e3f5:             ;
  900 e3f5:             ; setup to use for storage area via R4
  901 e3f5:             ;
  902 e3f5: 0e 0a           ldai TOKENIZER_FOR    ; eat FOR
  903 e3f7: 04 e1 02        jsr exe_accept
  904 e3fa:             ;
  905 e3fa:             ; get variable id (in accumulator) and hold in r6 lo
  906 e3fa:             ;
  907 e3fa: 04 e5 f2        jsr exe_variable_num
  908 e3fd: 36              mvarl r6
  909 e3fe:             ;
  910 e3fe:             ; store variable id in FOR storage - hack only lo byte, hi byte 0
  911 e3fe:             ;
  912 e3fe: 4c              stavr r4
  913 e3ff: 54              incr r4
  914 e400: 0e 00           ldai 0
  915 e402: 4c              stavr r4
  916 e403: 54              incr r4
  917 e404:             ;
  918 e404:             ; eat variable id and = then get starting value
  919 e404:             ;
  920 e404: 0e 04           ldai TOKENIZER_VARIABLE
  921 e406: 04 e1 02        jsr exe_accept
  922 e409: 0e 23           ldai TOKENIZER_EQ
  923 e40b: 04 e1 02        jsr exe_accept
  924 e40e: 04 e1 ce        jsr exe_expr
  925 e411:             ;
  926 e411:             ; set variable to starting value
  927 e411:             ;
  928 e411: 26              mvrla r6
  929 e412: 04 e5 a1        JSR exe_set_variable
  930 e415:             ;
  931 e415:             ; eat TO and get to value
  932 e415:             ;
  933 e415: 0e 0b           ldai TOKENIZER_TO
  934 e417: 04 e1 02        jsr exe_accept
  935 e41a: 04 e1 ce        jsr exe_expr
  936 e41d:             ;
  937 e41d:             ; store to value in FOR storage area
  938 e41d:             ;
  939 e41d: 27              mvrla r7
  940 e41e: 4c              stavr r4
  941 e41f: 54              incr r4
  942 e420: 2f              mvrha r7
  943 e421: 4c              stavr r4
  944 e422: 54              incr r4
  945 e423:             ;
  946 e423:             ; EAT EOL
  947 e423:             ;
  948 e423: 0e 24           ldai TOKENIZER_CR
  949 e425: 04 e1 02        jsr exe_accept
  950 e428:             ;
  951 e428:             ; store ptr to instruction after FOR in for storage area
  952 e428:             ;
  953 e428: 23              mvrla r3
  954 e429: 4c              stavr r4
  955 e42a: 54              incr r4
  956 e42b: 2b              mvrha r3
  957 e42c: 4c              stavr r4
  958 e42d: 54              incr r4
  959 e42e:             ;
  960 e42e:             ;   save for stackptr
  961 e42e:             ;
  962 e42e: 05              ret
  963 e42f:             
  964 e42f:             ;
  965 e42f:             ; INP
  966 e42f:             ;
  967 e42f:             exe_inp_stmt:
  968 e42f: 0e 2b           ldai TOKENIZER_INP   ; eat INP
  969 e431: 04 e1 02        jsr exe_accept
  970 e434: 05              ret
  971 e435:             
  972 e435:             ;
  973 e435:             ; outp
  974 e435:             ;
  975 e435:             exe_outp_stmt:
  976 e435: 0e 2c           ldai TOKENIZER_OUTP   ; eat OUTP
  977 e437: 04 e1 02        jsr exe_accept
  978 e43a: 05              ret
  979 e43b:             
  980 e43b:             ;
  981 e43b:             ; INPUT
  982 e43b:             ;
  983 e43b:             exe_input_stmt:
  984 e43b: 0e 2a           ldai TOKENIZER_INPUT   ; eat INPUT
  985 e43d: 04 e1 02        jsr exe_accept
  986 e440: 04 e5 f2        jsr exe_variable_num
  987 e443: 09              Push
  988 e444:             
  989 e444: 1f 03 00        mviw r7,parse_input_line
  990 e447:             
  991 e447: 04 ef 7c        jsr get_inputline
  992 e44a:             
  993 e44a: 1f 03 00        mviw r7,parse_input_line
  994 e44d: ef 02 02        str r7,bas_txtptr
  995 e450:             
  996 e450:             
  997 e450: 04 eb ee        jsr parse_num
  998 e453: 0a              pop
  999 e454: 04 e5 a1        jsr  EXE_SET_VARIABLE
 1000 e457:             
 1001 e457: 0e 04           ldai TOKENIZER_VARIABLE
 1002 e459: 04 e1 02        jsr EXE_ACCEPT
 1003 e45c: 0e 24           ldai TOKENIZER_CR
 1004 e45e: 04 e1 02        jsr exe_accept
 1005 e461: 05              RET
 1006 e462:             ;
 1007 e462:             ; void peek_statment()
 1008 e462:             ;
 1009 e462:             ;peek_statement(void) {
 1010 e462:             ;
 1011 e462:             exe_peek_stmt:
 1012 e462: 0e 12           ldai TOKENIZER_PEEK   ; eat PEEK
 1013 e464: 04 e1 02        jsr exe_accept
 1014 e467: 04 e1 ce        jsr exe_expr
 1015 e46a: 47              LDAVR R7
 1016 e46b: 37              MVARL R7
 1017 e46c: 0e 00           LDAI 0
 1018 e46e: 3f              MVARH R7
 1019 e46f: 07 07           PUSHR R7
 1020 e471:             
 1021 e471: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
 1022 e473: 04 e1 02        jsr exe_accept
 1023 e476: 04 e5 f2        jsr exe_variable_num
 1024 e479: 08 70           popr r7
 1025 e47b:             
 1026 e47b: 04 e5 a1        jsr  EXE_SET_VARIABLE
 1027 e47e: 0e 04           ldai TOKENIZER_VARIABLE
 1028 e480: 04 e1 02        jsr EXE_ACCEPT
 1029 e483: 0e 24           ldai TOKENIZER_CR
 1030 e485: 04 e1 02        jsr exe_accept
 1031 e488: 05              RET
 1032 e489:             
 1033 e489:             ;
 1034 e489:             ; void poke_statement()
 1035 e489:             ;
 1036 e489:             ;poke_statement(void) {
 1037 e489:             ;    VARIABLE_TYPE poke_addr;
 1038 e489:             ;    VARIABLE_TYPE value;
 1039 e489:             ;
 1040 e489:             ;    accept(TOKENIZER_POKE);
 1041 e489:             ;    poke_addr = expr();
 1042 e489:             ;    accept(TOKENIZER_COMMA);
 1043 e489:             ;    value = expr();
 1044 e489:             ;    accept(TOKENIZER_CR);
 1045 e489:             
 1046 e489:             ;    poke_function(poke_addr, value);
 1047 e489:             
 1048 e489:             exe_poke_stmt:
 1049 e489: 0e 13           ldai TOKENIZER_POKE   ; eat PEEK
 1050 e48b: 04 e1 02        jsr exe_accept
 1051 e48e:             
 1052 e48e: 04 e1 ce        jsr exe_expr
 1053 e491: 07 07           PUSHR R7
 1054 e493:             
 1055 e493: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
 1056 e495: 04 e1 02        jsr exe_accept
 1057 e498:             
 1058 e498: 04 e1 ce        jsr exe_expr
 1059 e49b: 27              MVRLA R7
 1060 e49c:             
 1061 e49c: 08 70           POPR R7
 1062 e49e:             
 1063 e49e: 4f              STAVR R7
 1064 e49f:             
 1065 e49f: 0e 24           ldai TOKENIZER_CR
 1066 e4a1: 04 e1 02        jsr exe_accept
 1067 e4a4: 05              RET
 1068 e4a5:             
 1069 e4a5:             ;
 1070 e4a5:             ; void end_statement()
 1071 e4a5:             ;
 1072 e4a5:             exe_end_stmt:
 1073 e4a5: 1e 02 00        mviw r6,bas_run_ended
 1074 e4a8: 0e 01           LDAI 1
 1075 e4aa: 4e              STAVR r6
 1076 e4ab: 05              ret
 1077 e4ac:             
 1078 e4ac:             ;
 1079 e4ac:             ; void statment()
 1080 e4ac:             ;
 1081 e4ac:             exe_stmt:
 1082 e4ac: 43              LDAVR R3
 1083 e4ad:             
 1084 e4ad: 0d 04           LDTI TOKENIZER_VARIABLE
 1085 e4af: aa e4 b6        BRNEQ exe_stmt1
 1086 e4b2: 04 e3 74        JSR exe_let_stmt
 1087 e4b5: 05              ret
 1088 e4b6:             
 1089 e4b6:             exe_stmt1:
 1090 e4b6: 0d 07           LDTI TOKENIZER_IF
 1091 e4b8: aa e4 bf        BRNEQ exe_stmt2
 1092 e4bb: 04 e3 48        JSR exe_if_stmt
 1093 e4be: 05              ret
 1094 e4bf:             
 1095 e4bf:             exe_stmt2:
 1096 e4bf: 0d 0c           LDTI TOKENIZER_NEXT
 1097 e4c1: aa e4 c8        BRNEQ exe_stmt3
 1098 e4c4: 04 e3 bb        JSR exe_next_stmt
 1099 e4c7: 05              ret
 1100 e4c8:             
 1101 e4c8:             exe_stmt3:
 1102 e4c8: 0d 06           LDTI TOKENIZER_PRINT
 1103 e4ca: aa e4 d1        BRNEQ exe_stmt4
 1104 e4cd: 04 e2 e6        JSR exe_print_stmt
 1105 e4d0: 05              ret
 1106 e4d1:             
 1107 e4d1:             exe_stmt4:
 1108 e4d1: 0d 0a           LDTI TOKENIZER_FOR
 1109 e4d3: aa e4 da        BRNEQ exe_stmt5
 1110 e4d6: 04 e3 f5        JSR exe_for_stmt
 1111 e4d9: 05              ret
 1112 e4da:             
 1113 e4da:             exe_stmt5:
 1114 e4da: 0d 0d           LDTI TOKENIZER_GOTO
 1115 e4dc: aa e4 e3        BRNEQ exe_stmt5a
 1116 e4df: 04 e2 da        JSR exe_goto_stmt
 1117 e4e2: 05              ret
 1118 e4e3:             
 1119 e4e3:             exe_stmt5a:
 1120 e4e3: 0d 2d           LDTI TOKENIZER_ON
 1121 e4e5: aa e4 f4        BRNEQ exe_stmt5b
 1122 e4e8: 0e 2d           ldai TOKENIZER_ON
 1123 e4ea: 04 e1 02        jsr exe_accept
 1124 e4ed: 0e 24           ldai TOKENIZER_CR
 1125 e4ef: 04 e1 02        jsr exe_accept
 1126 e4f2: 01              ON
 1127 e4f3: 05              ret
 1128 e4f4:             
 1129 e4f4:             exe_stmt5b:
 1130 e4f4: 0d 2e           LDTI TOKENIZER_OFF
 1131 e4f6: aa e5 05        BRNEQ exe_stmt6
 1132 e4f9: 0e 2e           ldai TOKENIZER_OFF
 1133 e4fb: 04 e1 02        jsr exe_accept
 1134 e4fe: 0e 24           ldai TOKENIZER_CR
 1135 e500: 04 e1 02        jsr exe_accept
 1136 e503: 02              OFF
 1137 e504: 05              ret
 1138 e505:             
 1139 e505:             exe_stmt6:
 1140 e505: 0d 2a           LDTI TOKENIZER_INPUT
 1141 e507: aa e5 0e        BRNEQ exe_stmt7
 1142 e50a: 04 e4 3b        JSR exe_input_stmt
 1143 e50d: 05              ret
 1144 e50e:             
 1145 e50e:             exe_stmt7:
 1146 e50e: 0d 0e           LDTI TOKENIZER_GOSUB
 1147 e510: aa e5 17        BRNEQ exe_stmt8
 1148 e513: 04 e3 91        JSR exe_gosub_stmt
 1149 e516: 05              ret
 1150 e517:             
 1151 e517:             exe_stmt8:
 1152 e517: 0d 0f           LDTI TOKENIZER_RETURN
 1153 e519: aa e5 20        BRNEQ exe_stmt9
 1154 e51c: 04 e3 ad        JSR exe_return_stmt
 1155 e51f: 05              ret
 1156 e520:             
 1157 e520:             exe_stmt9:
 1158 e520: 0d 12           LDTI TOKENIZER_PEEK
 1159 e522: aa e5 29        BRNEQ exe_stmt10
 1160 e525: 04 e4 62        JSR exe_peek_stmt
 1161 e528: 05              ret
 1162 e529:             
 1163 e529:             exe_stmt10:
 1164 e529: 0d 13           LDTI TOKENIZER_POKE
 1165 e52b: aa e5 32        BRNEQ exe_stmt11
 1166 e52e: 04 e4 89        JSR exe_poke_stmt
 1167 e531: 05              ret
 1168 e532:             
 1169 e532:             exe_stmt11:
 1170 e532: 0d 14           LDTI TOKENIZER_END
 1171 e534: aa e5 3b        BRNEQ exe_stmt12
 1172 e537: 04 e4 a5        JSR exe_end_stmt
 1173 e53a: 05              ret
 1174 e53b:             
 1175 e53b:             exe_stmt12:
 1176 e53b: 0d 05           LDTI TOKENIZER_LET
 1177 e53d: aa e5 49        BRNEQ exe_stmt13
 1178 e540: 0e 05           LDAI TOKENIZER_LET
 1179 e542: 04 e1 02        JSR exe_accept
 1180 e545: 04 e3 74        JSR exe_let_stmt
 1181 e548: 05              ret
 1182 e549:             
 1183 e549:             exe_stmt13:
 1184 e549: 0d 2b           LDTI TOKENIZER_INP
 1185 e54b: aa e5 52        BRNEQ exe_stmt14
 1186 e54e: 04 e4 2f        JSR exe_inp_stmt
 1187 e551: 05              ret
 1188 e552:             
 1189 e552:             exe_stmt14:
 1190 e552: 0d 2c           LDTI TOKENIZER_OUTP
 1191 e554: aa e5 5b        BRNEQ exe_stmt15
 1192 e557: 04 e4 35        JSR exe_outp_stmt
 1193 e55a: 05              ret
 1194 e55b:             
 1195 e55b:             exe_stmt15:
 1196 e55b: 04 ff e0        jsr showbytea
 1197 e55e: 0e 3d           ldai '='
 1198 e560: 04 ff c8        jsr uartout
 1199 e563: 1f e0 be        MVIW R7,bas_msg3
 1200 e566: 04 ff c0        jsr stringout
 1201 e569: 04 ff dc        JSR SHOWREGS
 1202 e56c: 04 e5 b7        jsr bas_error
 1203 e56f:             
 1204 e56f:             ;
 1205 e56f:             ; void line_statement (void)
 1206 e56f:             ;
 1207 e56f:             ; IS LINENUM NEEDED? CAN we skip over here?
 1208 e56f:             ;
 1209 e56f:             exe_line_stmt:
 1210 e56f: 0e 25           LDAI TOKENIZER_LINENUM
 1211 e571: 04 e1 02        jsr exe_accept
 1212 e574: 04 e4 ac        jsr exe_stmt
 1213 e577: 05              ret
 1214 e578:             
 1215 e578:             ;
 1216 e578:             ; void ubasic_run()
 1217 e578:             ;
 1218 e578:             basic_run:
 1219 e578: 04 e0 f0        JSR exe_init
 1220 e57b:             
 1221 e57b:             exe_run:
 1222 e57b: 04 e5 8a        jsr exe_finished
 1223 e57e: 0d 01           LDTI 1
 1224 e580: aa e5 84        BRNEQ exe_run_cont
 1225 e583: 05              ret
 1226 e584:             
 1227 e584:             exe_run_cont:
 1228 e584: 04 e5 6f        jsr exe_line_stmt
 1229 e587: a0 e5 7b        BR exe_run
 1230 e58a:             
 1231 e58a:             ;
 1232 e58a:             ; int ubasic_finished()
 1233 e58a:             ;
 1234 e58a:             exe_finished:
 1235 e58a:             ;    MVIW R2,bas_run_ended
 1236 e58a:             ;    LDAVR R2
 1237 e58a: 04 ef 8d        JSR test_input
 1238 e58d: e4 02 00        LDA bas_run_ended
 1239 e590: 0d 01           LDTI 1
 1240 e592: a8 e5 9e        BREQ exe_finished_yes
 1241 e595:             
 1242 e595: 43              ldavr r3
 1243 e596: 0d 01           ldti TOKENIZER_EOF
 1244 e598: a8 e5 9e        breq exe_finished_yes
 1245 e59b: 0e 00           ldai 0
 1246 e59d: 05              ret
 1247 e59e:             
 1248 e59e:             exe_finished_yes:
 1249 e59e: 0e 01           LDAI 1
 1250 e5a0: 05              ret
 1251 e5a1:             
 1252 e5a1:             ;
 1253 e5a1:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1254 e5a1:             ;
 1255 e5a1:             ; R7 value (only using low byte)
 1256 e5a1:             ; ACCUMULATOR Variable ref number
 1257 e5a1:             ;
 1258 e5a1:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1259 e5a1:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1260 e5a1:             ;
 1261 e5a1:             exe_set_variable:
 1262 e5a1: 1a 01 00        MVIW R2,BASIC_VARS  ; SEE COMMENT below about memory alignment
 1263 e5a4: b6              SHL                 ; memory location x 2 (2 byte vars)
 1264 e5a5: 32              MVARL R2            ; change to add16 to remove align issue
 1265 e5a6:             ;
 1266 e5a6: 27              MVRLA R7
 1267 e5a7: 4a              STAVR R2
 1268 e5a8: 52              INCR r2
 1269 e5a9: 2f              mvrha r7
 1270 e5aa: 4a              stavr r2
 1271 e5ab:             
 1272 e5ab: 05              RET
 1273 e5ac:             ;
 1274 e5ac:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1275 e5ac:             ;
 1276 e5ac:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1277 e5ac:             ;
 1278 e5ac:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1279 e5ac:             ; and only 0-25 (var names a-z) supported
 1280 e5ac:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1281 e5ac:             ;
 1282 e5ac:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1283 e5ac:             ;
 1284 e5ac:             exe_get_variable:
 1285 e5ac: 1a 01 00        MVIW R2,BASIC_VARS
 1286 e5af: b6              shl
 1287 e5b0: 32              MVARL R2
 1288 e5b1:             ;
 1289 e5b1: 42              LDAVR R2
 1290 e5b2: 37              MVARL R7
 1291 e5b3: 52              INCR R2
 1292 e5b4: 42              LDAVR R2
 1293 e5b5: 3f              MVARH R7
 1294 e5b6: 05              RET
 1295 e5b7:             
 1296 e5b7:             ;
 1297 e5b7:             ; hack this needs work
 1298 e5b7:             ;
 1299 e5b7:             bas_error:
 1300 e5b7: 03            HALT
 1301 e5b8: 05            RET
 1302 e5b9:             
 1303 e5b9:             ;
 1304 e5b9:             ; Tokenizer execute support code
 1305 e5b9:             ;
 1306 e5b9:             ; tokenizer_next - exe version
 1307 e5b9:             ;
 1308 e5b9:             exe_next_token:
 1309 e5b9: 43            ldavr r3
 1310 e5ba: 0d 02         ldti TOKENIZER_NUMBER
 1311 e5bc: aa e5 c3      BRNEQ exe_next_token1
 1312 e5bf: 53            incr r3
 1313 e5c0: 53            incr r3
 1314 e5c1: 53            incr r3
 1315 e5c2: 05            RET
 1316 e5c3:             
 1317 e5c3:             exe_next_token1:
 1318 e5c3: 0d 04         ldti TOKENIZER_VARIABLE
 1319 e5c5: aa e5 cc      BRNEQ exe_next_token2
 1320 e5c8: 53            incr r3
 1321 e5c9: 53            incr r3
 1322 e5ca: 53            incr r3
 1323 e5cb: 05            RET
 1324 e5cc:             
 1325 e5cc:             exe_next_token2:
 1326 e5cc: 0d 25         ldti TOKENIZER_LINENUM
 1327 e5ce: aa e5 d7      BRNEQ exe_next_token3
 1328 e5d1: 53            incr r3
 1329 e5d2: 53            incr r3
 1330 e5d3: 53            incr r3
 1331 e5d4: 53            incr r3
 1332 e5d5: 53            incr r3
 1333 e5d6: 05            RET
 1334 e5d7:             
 1335 e5d7:             exe_next_token3:
 1336 e5d7: 0d 03         ldti TOKENIZER_STRING
 1337 e5d9: aa e5 e7      BRNEQ exe_next_token4
 1338 e5dc: 53            incr r3
 1339 e5dd:             
 1340 e5dd:             exe_next_tok3_loop:
 1341 e5dd: 43            LDAVR R3
 1342 e5de: a1 e5 e5      BRZ exe_next_tok3_done
 1343 e5e1: 53            incr r3
 1344 e5e2: a0 e5 dd      BR exe_next_tok3_loop
 1345 e5e5:             
 1346 e5e5:             exe_next_tok3_done:
 1347 e5e5: 53            incr r3
 1348 e5e6: 05            RET
 1349 e5e7:             
 1350 e5e7:             exe_next_token4:
 1351 e5e7: 53            incr r3
 1352 e5e8: 05            ret
 1353 e5e9:             
 1354 e5e9:             ;
 1355 e5e9:             ; numbers stored low byte followed by high byte in memory
 1356 e5e9:             ;
 1357 e5e9:             exe_num:
 1358 e5e9: 53              incr r3
 1359 e5ea: 43              ldavr r3
 1360 e5eb: 37              mvarl r7
 1361 e5ec: 53              incr r3
 1362 e5ed: 43              ldavr r3
 1363 e5ee: 3f              mvarh r7
 1364 e5ef: 5b              decr r3
 1365 e5f0: 5b              decr r3
 1366 e5f1: 05              ret
 1367 e5f2:             
 1368 e5f2:             ;
 1369 e5f2:             ; hack only using low byte of id for now
 1370 e5f2:             ; return in accumulator
 1371 e5f2:             ;
 1372 e5f2:             exe_variable_num:
 1373 e5f2: 53              incr r3
 1374 e5f3: 43              ldavr r3
 1375 e5f4: 5b              decr r3
 1376 e5f5: 05              ret
 1377 e5f6:             
 1378 e5f6:             
 1379 e5f6:             ;
 1380 e5f6:             ; Convert number in r7 to ASCII
 1381 e5f6:             ;
 1382 e5f6:             ; for for negative numbers
 1383 e5f6:             ;
 1384 e5f6: 27 10 03 e8 
            00 64 00 0a 
            00 00       dividers: DW 02710h,03e8h,0064h,000Ah,0000h
 1385 e600:             
 1386 e600:             exe_itoa:
 1387 e600: 09                push
 1388 e601: 2f                mvrha r7
 1389 e602: b3 80             andi 080h
 1390 e604: a1 e6 13          brz exe_itoa_pos
 1391 e607:             
 1392 e607: 2f                mvrha r7
 1393 e608: b5                inva
 1394 e609: 3f                mvarh r7
 1395 e60a: 27                mvrla r7
 1396 e60b: b5                inva
 1397 e60c: 37                mvarl r7
 1398 e60d: 57                incr r7
 1399 e60e: 0e 2d             ldai '-'
 1400 e610: 04 ff c4          jsr charout
 1401 e613:             
 1402 e613:             exe_itoa_pos:
 1403 e613: 07 04             pushr r4    ; dividers ptr
 1404 e615: 07 05             pushr r5    ; value holder
 1405 e617: 1d 00 00          mviw r5,0
 1406 e61a: 0e 01             ldai 1
 1407 e61c: 3d                mvarh r5
 1408 e61d: 07 06             pushr r6    ;
 1409 e61f: 1c e5 f6          mviw  r4,dividers
 1410 e622:             
 1411 e622:             exe_itoa_loop:
 1412 e622: 44                ldavr r4
 1413 e623: 3e                mvarh r6
 1414 e624: 54                incr r4
 1415 e625: 44                ldavr r4
 1416 e626: 36                mvarl r6
 1417 e627: 5c                decr r4
 1418 e628: 04 ef 3f          jsr parse_compare
 1419 e62b: 0d ff             ldti 0ffh
 1420 e62d: a8 e6 3a          breq exe_itoa_next
 1421 e630: 0e 00             ldai 0
 1422 e632: 3d                mvarh r5
 1423 e633: 04 ee ea          jsr PARSE_SUB16
 1424 e636: 55                incr r5
 1425 e637: a0 e6 22          br exe_itoa_loop
 1426 e63a:             
 1427 e63a:             exe_itoa_next:
 1428 e63a: 2d                mvrha r5
 1429 e63b: a2 e6 47          brnz exe_itoa_notyet
 1430 e63e: 25                mvrla r5
 1431 e63f: b0 30             addi '0'
 1432 e641: 04 ff c4          JSR charout
 1433 e644: 0e 00             ldai 0
 1434 e646: 3d                mvarh r5
 1435 e647:             
 1436 e647:             exe_itoa_notyet:
 1437 e647: 0e 00             ldai 0
 1438 e649: 35                mvarl r5
 1439 e64a: 54                incr r4
 1440 e64b: 54                incr r4
 1441 e64c: 44                ldavr r4
 1442 e64d: a2 e6 22          brnz exe_itoa_loop
 1443 e650: 54                incr r4
 1444 e651: 44                ldavr r4
 1445 e652: 5c                decr r4
 1446 e653: a2 e6 22          brnz exe_itoa_loop
 1447 e656:             
 1448 e656:             ;      mvrha r5
 1449 e656:             ;      brz exe_itoa_noones
 1450 e656: 27                mvrla r7
 1451 e657: b0 30             addi '0'
 1452 e659: 04 ff c4          JSR charout
 1453 e65c:             exe_itoa_noones:
 1454 e65c: 08 60             popr r6
 1455 e65e: 08 50             popr r5
 1456 e660: 08 40             popr r4
 1457 e662: 0a                pop
 1458 e663: 05                RET
 1459 e664:             
 1460 e664:             
 1461 e664:             
 1462 e664:             ;
 1463 e664:             ; List out token buffer in human readable form
 1464 e664:             ;
 1465 e664:             ; list out token buffer
 1466 e664:             ; buffer address in r7
 1467 e664:             ;
 1468 e664: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1469 e669: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1470 e670: 49 46 20 00 tokl_if: DB "IF ",0
 1471 e674: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1472 e67a: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1473 e680: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1474 e685: 54 4f 20 00 tokl_to: DB "TO ",0
 1475 e689: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1476 e68f: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1477 e695: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1478 e69c: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1479 e6a4: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1480 e6a9: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1481 e6af: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1482 e6b5: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1483 e6ba: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1484 e6c0: 49 4e 50 55 
            54 20 00    tokl_input: DB "INPUT ",0
 1485 e6c7: 49 4e 50 20 
            00          tokl_inp: DB "INP ",0
 1486 e6cc: 4f 55 54 50 
            20 00       tokl_outp: DB "OUTP ",0
 1487 e6d2: 4f 4e 20 00 tokl_on: DB "ON ",0
 1488 e6d6: 4f 46 46 20 
            00          tokl_off: DB "OFF ",0
 1489 e6db: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1490 e6e6:             
 1491 e6e6:             
 1492 e6e6:             basic_list:
 1493 e6e6: 07 03           pushr r3
 1494 e6e8: 0f 37           movrr r7,r3
 1495 e6ea:             
 1496 e6ea:             
 1497 e6ea:             baslist_loop:
 1498 e6ea: 43              ldavr r3
 1499 e6eb:             
 1500 e6eb: 0d 00           LDTI TOKENIZER_ERROR
 1501 e6ed: aa e6 ff        BRNEQ baslist1
 1502 e6f0: 1f e6 db        MVIW R7,tokl_error
 1503 e6f3: 04 ff c0        JSR stringout
 1504 e6f6: 04 ff cc        JSR showaddr
 1505 e6f9: a0 e9 e0        BR baslist_done
 1506 e6fc: a0 e6 ea        BR baslist_loop
 1507 e6ff:             
 1508 e6ff:             baslist1:
 1509 e6ff: 0d 01           LDTI TOKENIZER_EOF
 1510 e701: aa e7 0a        BRNEQ baslist2
 1511 e704: a0 e9 e0        BR baslist_done
 1512 e707: a0 e6 ea        BR baslist_loop
 1513 e70a:             
 1514 e70a:             baslist2:
 1515 e70a: 0d 02           LDTI TOKENIZER_NUMBER
 1516 e70c: aa e7 21        BRNEQ baslist3
 1517 e70f: 53              incr r3
 1518 e710: 43              ldavr r3
 1519 e711: 37              mvarl r7
 1520 e712: 53              incr r3
 1521 e713: 43              ldavr r3
 1522 e714: 3f              mvarh r7
 1523 e715: 53              INCR R3
 1524 e716:             ;    jsr showr7
 1525 e716: 04 e6 00        jsr exe_itoa
 1526 e719: 0e 20           ldai ' '
 1527 e71b: 04 ff c8        jsr uartout
 1528 e71e: a0 e6 ea        BR baslist_loop
 1529 e721:             
 1530 e721:             baslist3:
 1531 e721:             ;
 1532 e721:             ; output quotes around string
 1533 e721:             ;
 1534 e721: 0d 03           LDTI TOKENIZER_STRING
 1535 e723: aa e7 3d        BRNEQ baslist4
 1536 e726: 53              incr r3
 1537 e727: 0f 73           movrr r3,r7
 1538 e729: 04 ff c0        jsr stringout
 1539 e72c: 0e 20           ldai ' '
 1540 e72e: 04 ff c8        jsr uartout
 1541 e731:             
 1542 e731:             ;
 1543 e731:             ; does r7 point to end of string here?
 1544 e731:             ;
 1545 e731:             baslist_string:
 1546 e731: 43              ldavr r3
 1547 e732: a1 e7 39        brz baslist_stringend
 1548 e735: 53              incr r3
 1549 e736: a0 e7 31        br baslist_string
 1550 e739:             
 1551 e739:             baslist_stringend:
 1552 e739: 53              incr r3
 1553 e73a: a0 e6 ea        BR baslist_loop
 1554 e73d:             
 1555 e73d:             baslist4:
 1556 e73d: 0d 04           LDTI TOKENIZER_VARIABLE
 1557 e73f: aa e7 54        BRNEQ baslist5
 1558 e742: 53              incr r3
 1559 e743: 43              ldavr r3
 1560 e744: 0d 41           ldti 'A'
 1561 e746: b8              ADDT
 1562 e747: 53              incr r3
 1563 e748: 53              incr r3
 1564 e749: 04 ff c8        jsr uartout
 1565 e74c:             
 1566 e74c:             ;    ldavr r3
 1567 e74c:             ;    mvarl r7
 1568 e74c:             ;    incr r3
 1569 e74c:             ;    ldavr r3
 1570 e74c:             ;    mvarh r7
 1571 e74c:             ;    INCR R3
 1572 e74c:             ;    jsr showr7
 1573 e74c:             
 1574 e74c: 0e 20           ldai ' '
 1575 e74e: 04 ff c8        jsr uartout
 1576 e751: a0 e6 ea        BR baslist_loop
 1577 e754:             
 1578 e754:             baslist5:
 1579 e754: 0d 05           LDTI TOKENIZER_LET
 1580 e756: aa e7 63        BRNEQ baslist6
 1581 e759: 1f e6 64        MVIW R7,tokl_let
 1582 e75c: 04 ff c0        JSR stringout
 1583 e75f: 53              INCR R3
 1584 e760: a0 e6 ea        BR baslist_loop
 1585 e763:             
 1586 e763:             baslist6:
 1587 e763: 0d 06           LDTI TOKENIZER_PRINT
 1588 e765: aa e7 72        BRNEQ baslist7
 1589 e768: 1f e6 69        MVIW R7,tokl_print
 1590 e76b: 04 ff c0        jsr STRINGOUT
 1591 e76e: 53              INCR R3
 1592 e76f: a0 e6 ea        BR baslist_loop
 1593 e772:             
 1594 e772:             baslist7:
 1595 e772: 0d 07           LDTI TOKENIZER_IF
 1596 e774: aa e7 81        BRNEQ baslist8
 1597 e777: 1f e6 70        MVIW R7,tokl_if
 1598 e77a: 04 ff c0        JSR stringout
 1599 e77d: 53              INCR R3
 1600 e77e: a0 e6 ea        BR baslist_loop
 1601 e781:             
 1602 e781:             baslist8:
 1603 e781: 0d 08           LDTI TOKENIZER_THEN
 1604 e783: aa e7 90        BRNEQ baslist9
 1605 e786: 1f e6 74        MVIW R7,tokl_then
 1606 e789: 04 ff c0        JSR stringout
 1607 e78c: 53              INCR R3
 1608 e78d: a0 e6 ea        BR baslist_loop
 1609 e790:             
 1610 e790:             baslist9:
 1611 e790: 0d 09           LDTI TOKENIZER_ELSE
 1612 e792: aa e7 9f        BRNEQ baslist10
 1613 e795: 1f e6 7a        MVIW R7,tokl_else
 1614 e798: 04 ff c0        JSR stringout
 1615 e79b: 53              INCR R3
 1616 e79c: a0 e6 ea        BR baslist_loop
 1617 e79f:             
 1618 e79f:             baslist10:
 1619 e79f: 0d 0a           LDTI TOKENIZER_FOR
 1620 e7a1: aa e7 ae        BRNEQ baslist11
 1621 e7a4: 1f e6 80        MVIW R7,tokl_for
 1622 e7a7: 04 ff c0        JSR stringout
 1623 e7aa: 53              INCR R3
 1624 e7ab: a0 e6 ea        BR baslist_loop
 1625 e7ae:             
 1626 e7ae:             baslist11:
 1627 e7ae: 0d 0b           LDTI TOKENIZER_TO
 1628 e7b0: aa e7 bd        BRNEQ baslist12
 1629 e7b3: 1f e6 85        MVIW R7,tokl_to
 1630 e7b6: 04 ff c0        JSR stringout
 1631 e7b9: 53              INCR R3
 1632 e7ba: a0 e6 ea        BR baslist_loop
 1633 e7bd:             
 1634 e7bd:             baslist12:
 1635 e7bd: 0d 0c           LDTI TOKENIZER_NEXT
 1636 e7bf: aa e7 cc        BRNEQ baslist13
 1637 e7c2: 1f e6 89        MVIW R7,tokl_next
 1638 e7c5: 04 ff c0        JSR stringout
 1639 e7c8: 53              INCR R3
 1640 e7c9: a0 e6 ea        BR baslist_loop
 1641 e7cc:             
 1642 e7cc:             baslist13:
 1643 e7cc: 0d 0d           LDTI TOKENIZER_GOTO
 1644 e7ce: aa e7 db        BRNEQ baslist14
 1645 e7d1: 1f e6 8f        MVIW R7,tokl_goto
 1646 e7d4: 04 ff c0        JSR stringout
 1647 e7d7: 53              INCR R3
 1648 e7d8: a0 e6 ea        BR baslist_loop
 1649 e7db:             
 1650 e7db:             baslist14:
 1651 e7db: 0d 0e           LDTI TOKENIZER_GOSUB
 1652 e7dd: aa e7 ea        BRNEQ baslist15
 1653 e7e0: 1f e6 95        MVIW R7,tokl_gosub
 1654 e7e3: 04 ff c0        JSR stringout
 1655 e7e6: 53              INCR R3
 1656 e7e7: a0 e6 ea        BR baslist_loop
 1657 e7ea:             
 1658 e7ea:             baslist15:
 1659 e7ea: 0d 0f           LDTI TOKENIZER_RETURN
 1660 e7ec: aa e7 f9        BRNEQ baslist16
 1661 e7ef: 1f e6 9c        MVIW R7,tokl_return
 1662 e7f2: 04 ff c0        JSR stringout
 1663 e7f5: 53              INCR R3
 1664 e7f6: a0 e6 ea        BR baslist_loop
 1665 e7f9:             
 1666 e7f9:             baslist16:
 1667 e7f9: 0d 10           LDTI TOKENIZER_CALL
 1668 e7fb: aa e8 08        BRNEQ baslist17
 1669 e7fe: 1f e6 ba        MVIW R7,tokl_call
 1670 e801: 04 ff c0        JSR stringout
 1671 e804: 53              INCR R3
 1672 e805: a0 e6 ea        BR baslist_loop
 1673 e808:             
 1674 e808:             baslist17:
 1675 e808: 0d 11           LDTI TOKENIZER_REM
 1676 e80a: aa e8 17        BRNEQ baslist18
 1677 e80d: 1f e6 a4        MVIW R7,tokl_rem
 1678 e810: 04 ff c0        JSR stringout
 1679 e813: 53              INCR R3
 1680 e814: a0 e6 ea        BR baslist_loop
 1681 e817:             
 1682 e817:             baslist18:
 1683 e817: 0d 12           LDTI TOKENIZER_PEEK
 1684 e819: aa e8 26        BRNEQ baslist19
 1685 e81c: 1f e6 a9        MVIW R7,tokl_peek
 1686 e81f: 04 ff c0        JSR stringout
 1687 e822: 53              INCR R3
 1688 e823: a0 e6 ea        BR baslist_loop
 1689 e826:             
 1690 e826:             baslist19:
 1691 e826: 0d 13           LDTI TOKENIZER_POKE
 1692 e828: aa e8 35        BRNEQ baslist20
 1693 e82b: 1f e6 af        MVIW R7,tokl_poke
 1694 e82e: 04 ff c0        JSR stringout
 1695 e831: 53              INCR R3
 1696 e832: a0 e6 ea        BR baslist_loop
 1697 e835:             
 1698 e835:             baslist20:
 1699 e835: 0d 14           LDTI TOKENIZER_END
 1700 e837: aa e8 44        BRNEQ baslist20a
 1701 e83a: 1f e6 b5        MVIW R7,tokl_end
 1702 e83d: 04 ff c0        JSR stringout
 1703 e840: 53              INCR R3
 1704 e841: a0 e6 ea        BR baslist_loop
 1705 e844:             
 1706 e844:             baslist20a:
 1707 e844: 0d 2d           LDTI TOKENIZER_ON
 1708 e846: aa e8 53        BRNEQ baslist20b
 1709 e849: 1f e6 d2        MVIW R7,tokl_on
 1710 e84c: 04 ff c0        JSR stringout
 1711 e84f: 53              INCR R3
 1712 e850: a0 e6 ea        BR baslist_loop
 1713 e853:             
 1714 e853:             baslist20b:
 1715 e853: 0d 2e           LDTI TOKENIZER_OFF
 1716 e855: aa e8 62        BRNEQ baslist21
 1717 e858: 1f e6 d6        MVIW R7,tokl_off
 1718 e85b: 04 ff c0        JSR stringout
 1719 e85e: 53              INCR R3
 1720 e85f: a0 e6 ea        BR baslist_loop
 1721 e862:             
 1722 e862:             baslist21:
 1723 e862: 0d 15           LDTI TOKENIZER_COMMA
 1724 e864: aa e8 75        BRNEQ baslist22
 1725 e867: 0e 2c           ldai ','
 1726 e869: 04 ff c8        jsr uartout
 1727 e86c: 0e 20           ldai ' '
 1728 e86e: 04 ff c8        jsr uartout
 1729 e871: 53              INCR R3
 1730 e872: a0 e6 ea        BR baslist_loop
 1731 e875:             
 1732 e875:             baslist22:
 1733 e875: 0d 16           LDTI TOKENIZER_SEMICOLON
 1734 e877: aa e8 88        BRNEQ baslist23
 1735 e87a: 0e 3b           ldai ';'
 1736 e87c: 04 ff c8        jsr uartout
 1737 e87f: 0e 20           ldai ' '
 1738 e881: 04 ff c8        jsr uartout
 1739 e884: 53              INCR R3
 1740 e885: a0 e6 ea        BR baslist_loop
 1741 e888:             
 1742 e888:             baslist23:
 1743 e888: 0d 17           LDTI TOKENIZER_PLUS
 1744 e88a: aa e8 9b        BRNEQ baslist24
 1745 e88d: 0e 2b           ldai '+'
 1746 e88f: 04 ff c8        jsr uartout
 1747 e892: 0e 20           ldai ' '
 1748 e894: 04 ff c8        jsr uartout
 1749 e897: 53              INCR R3
 1750 e898: a0 e6 ea        BR baslist_loop
 1751 e89b:             
 1752 e89b:             baslist24:
 1753 e89b: 0d 18           LDTI TOKENIZER_MINUS
 1754 e89d: aa e8 ae        BRNEQ baslist25
 1755 e8a0: 0e 2d           ldai '-'
 1756 e8a2: 04 ff c8        jsr uartout
 1757 e8a5: 0e 20           ldai ' '
 1758 e8a7: 04 ff c8        jsr uartout
 1759 e8aa: 53              INCR R3
 1760 e8ab: a0 e6 ea        BR baslist_loop
 1761 e8ae:             
 1762 e8ae:             baslist25:
 1763 e8ae: 0d 19           LDTI TOKENIZER_AND
 1764 e8b0: aa e8 c1        BRNEQ baslist26
 1765 e8b3: 0e 26           ldai '&'
 1766 e8b5: 04 ff c8        jsr uartout
 1767 e8b8: 0e 20           ldai ' '
 1768 e8ba: 04 ff c8        jsr uartout
 1769 e8bd: 53              INCR R3
 1770 e8be: a0 e6 ea        BR baslist_loop
 1771 e8c1:             
 1772 e8c1:             baslist26:
 1773 e8c1: 0d 1a           LDTI TOKENIZER_OR
 1774 e8c3: aa e8 d4        BRNEQ baslist27
 1775 e8c6: 0e 7c           ldai '|'
 1776 e8c8: 04 ff c8        jsr uartout
 1777 e8cb: 0e 20           ldai ' '
 1778 e8cd: 04 ff c8        jsr uartout
 1779 e8d0: 53              INCR R3
 1780 e8d1: a0 e6 ea        BR baslist_loop
 1781 e8d4:             
 1782 e8d4:             baslist27:
 1783 e8d4: 0d 1b           LDTI TOKENIZER_ASTR
 1784 e8d6: aa e8 e7        BRNEQ baslist28
 1785 e8d9: 0e 2a           ldai '*'
 1786 e8db: 04 ff c8        jsr uartout
 1787 e8de: 0e 20           ldai ' '
 1788 e8e0: 04 ff c8        jsr uartout
 1789 e8e3: 53              INCR R3
 1790 e8e4: a0 e6 ea        BR baslist_loop
 1791 e8e7:             
 1792 e8e7:             baslist28:
 1793 e8e7: 0d 1c           LDTI TOKENIZER_SLASH
 1794 e8e9: aa e8 fa        BRNEQ baslist29
 1795 e8ec: 0e 2f           ldai '/'
 1796 e8ee: 04 ff c8        jsr uartout
 1797 e8f1: 0e 20           ldai ' '
 1798 e8f3: 04 ff c8        jsr uartout
 1799 e8f6: 53              INCR R3
 1800 e8f7: a0 e6 ea        BR baslist_loop
 1801 e8fa:             
 1802 e8fa:             baslist29:
 1803 e8fa: 0d 1d           LDTI TOKENIZER_MOD
 1804 e8fc: aa e9 0d        BRNEQ baslist30
 1805 e8ff: 0e 25           ldai '%'
 1806 e901: 04 ff c8        jsr uartout
 1807 e904: 0e 20           ldai ' '
 1808 e906: 04 ff c8        jsr uartout
 1809 e909: 53              INCR R3
 1810 e90a: a0 e6 ea        BR baslist_loop
 1811 e90d:             
 1812 e90d:             baslist30:
 1813 e90d: 0d 1e           LDTI TOKENIZER_HASH
 1814 e90f: aa e9 20        BRNEQ baslist31
 1815 e912: 0e 23           ldai '#'
 1816 e914: 04 ff c8        jsr uartout
 1817 e917: 0e 20           ldai ' '
 1818 e919: 04 ff c8        jsr uartout
 1819 e91c: 53              INCR R3
 1820 e91d: a0 e6 ea        BR baslist_loop
 1821 e920:             
 1822 e920:             baslist31:
 1823 e920: 0d 1f           LDTI TOKENIZER_LEFTP
 1824 e922: aa e9 33        BRNEQ baslist32
 1825 e925: 0e 28           ldai '()'
 1826 e927: 04 ff c8        jsr uartout
 1827 e92a: 0e 20           ldai ' '
 1828 e92c: 04 ff c8        jsr uartout
 1829 e92f: 53              INCR R3
 1830 e930: a0 e6 ea        BR baslist_loop
 1831 e933:             
 1832 e933:             baslist32:
 1833 e933: 0d 20           LDTI TOKENIZER_RIGHTP
 1834 e935: aa e9 46        BRNEQ baslist33
 1835 e938: 0e 29           ldai ')'
 1836 e93a: 04 ff c8        jsr uartout
 1837 e93d: 0e 20           ldai ' '
 1838 e93f: 04 ff c8        jsr uartout
 1839 e942: 53              INCR R3
 1840 e943: a0 e6 ea        BR baslist_loop
 1841 e946:             
 1842 e946:             baslist33:
 1843 e946: 0d 21           LDTI TOKENIZER_LT
 1844 e948: aa e9 59        BRNEQ baslist34
 1845 e94b: 0e 3c           ldai '<'
 1846 e94d: 04 ff c8        jsr uartout
 1847 e950: 0e 20           ldai ' '
 1848 e952: 04 ff c8        jsr uartout
 1849 e955: 53              INCR R3
 1850 e956: a0 e6 ea        BR baslist_loop
 1851 e959:             
 1852 e959:             baslist34:
 1853 e959: 0d 22           LDTI TOKENIZER_GT
 1854 e95b: aa e9 6c        BRNEQ baslist35
 1855 e95e: 0e 3e           ldai '>'
 1856 e960: 04 ff c8        jsr uartout
 1857 e963: 0e 20           ldai ' '
 1858 e965: 04 ff c8        jsr uartout
 1859 e968: 53              INCR R3
 1860 e969: a0 e6 ea        BR baslist_loop
 1861 e96c:             
 1862 e96c:             baslist35:
 1863 e96c: 0d 23           LDTI TOKENIZER_EQ
 1864 e96e: aa e9 7f        BRNEQ baslist36
 1865 e971: 0e 3d           ldai '='
 1866 e973: 04 ff c8        jsr uartout
 1867 e976: 0e 20           ldai ' '
 1868 e978: 04 ff c8        jsr uartout
 1869 e97b: 53              INCR R3
 1870 e97c: a0 e6 ea        BR baslist_loop
 1871 e97f:             
 1872 e97f:             baslist36:
 1873 e97f: 0d 24           LDTI TOKENIZER_CR
 1874 e981: aa e9 8e        BRNEQ baslist37
 1875 e984: 1f ef 9f        mviw R7,CRLF
 1876 e987: 04 ff c0        jsr stringout
 1877 e98a: 53              INCR R3
 1878 e98b: a0 e6 ea        BR baslist_loop
 1879 e98e:             
 1880 e98e:             baslist37:
 1881 e98e: 0d 25           LDTI TOKENIZER_LINENUM
 1882 e990: aa e9 a7        BRNEQ baslist38
 1883 e993: 53              incr r3
 1884 e994: 43              ldavr r3
 1885 e995: 37              mvarl r7
 1886 e996: 53              incr r3
 1887 e997: 43              ldavr r3
 1888 e998: 3f              mvarh r7
 1889 e999: 53              INCR R3
 1890 e99a: 53              incr r3         ;skip over line length
 1891 e99b: 53              incr r3
 1892 e99c: 04 e6 00        jsr exe_itoa
 1893 e99f:                 ;jsr showr7
 1894 e99f: 0e 20           ldai ' '
 1895 e9a1: 04 ff c8        jsr uartout
 1896 e9a4: a0 e6 ea        BR baslist_loop
 1897 e9a7:             
 1898 e9a7:             baslist38:
 1899 e9a7: 0d 2a           LDTI TOKENIZER_INPUT
 1900 e9a9: aa e9 b6        BRNEQ baslist39
 1901 e9ac: 1f e6 c0        MVIW R7,tokl_input
 1902 e9af: 04 ff c0        JSR stringout
 1903 e9b2: 53              INCR R3
 1904 e9b3: a0 e6 ea        BR baslist_loop
 1905 e9b6:             
 1906 e9b6:             baslist39:
 1907 e9b6: 0d 2b           LDTI TOKENIZER_INP
 1908 e9b8: aa e9 c5        BRNEQ baslist40
 1909 e9bb: 1f e6 c7        MVIW R7,tokl_inp
 1910 e9be: 04 ff c0        JSR stringout
 1911 e9c1: 53              INCR R3
 1912 e9c2: a0 e6 ea        BR baslist_loop
 1913 e9c5:             
 1914 e9c5:             baslist40:
 1915 e9c5: 0d 2c           LDTI TOKENIZER_OUTP
 1916 e9c7: aa e9 d4        BRNEQ baslist41
 1917 e9ca: 1f e6 cc        MVIW R7,tokl_outp
 1918 e9cd: 04 ff c0        JSR stringout
 1919 e9d0: 53              INCR R3
 1920 e9d1: a0 e6 ea        BR baslist_loop
 1921 e9d4:             
 1922 e9d4:             baslist41:
 1923 e9d4: 1f e6 db        MVIW R7,tokl_error
 1924 e9d7: 04 ff c0        JSR stringout
 1925 e9da: 04 ff cc        JSR showaddr
 1926 e9dd: a0 e9 e0        BR baslist_done
 1927 e9e0:             ;
 1928 e9e0:             ; any cleanup
 1929 e9e0:             ;
 1930 e9e0:             baslist_done:
 1931 e9e0: 08 30           popr r3
 1932 e9e2: 05              ret
 1933 e9e3:             
 1934 e9e3:             ;
 1935 e9e3:             ; BASIC Interpreter Parser
 1936 e9e3:             ;
 1937 e9e3:             parse_keywords:
 1938 e9e3: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1939 e9e8: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1940 e9ef: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1941 e9f3: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1942 e9f9: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1943 e9ff: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1944 ea04: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1945 ea08: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1946 ea0e: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1947 ea14: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1948 ea1b: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1949 ea23: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1950 ea29: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1951 ea2e: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1952 ea34: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1953 ea3a: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1954 ea3f: 4c 49 53 54 
            00 26             DB "list",0,TOKENIZER_LIST
 1955 ea45: 52 55 4e 00 
            27                DB "run",0,TOKENIZER_RUN
 1956 ea4a: 4e 45 57 00 
            28                DB "new",0,TOKENIZER_NEW
 1957 ea4f: 45 58 49 54 
            00 29             DB "exit",0,TOKENIZER_EXIT
 1958 ea55: 49 4e 50 55 
            54 00 2a          DB "input",0,TOKENIZER_INPUT
 1959 ea5c: 49 4e 50 00 
            2b                DB "inp",0,TOKENIZER_INP
 1960 ea61: 4f 55 54 50 
            00 2c             DB "outp",0,TOKENIZER_OUTP
 1961 ea67: 4f 4e 00 2d       DB "on",0,TOKENIZER_ON
 1962 ea6b: 4f 46 46 00 
            2e                DB "off",0,TOKENIZER_OFF
 1963 ea70: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1964 ea73:             
 1965 ea73:             ;
 1966 ea73:             ; int singlechar (void)
 1967 ea73:             ;
 1968 ea73:             ; return TOKEN result in accumulator
 1969 ea73:             ;
 1970 ea73:             ; ready for testing
 1971 ea73:             ;
 1972 ea73:             parse_singlechar:
 1973 ea73:             ;
 1974 ea73: 07 03           pushr r3
 1975 ea75: f3 02 02        LDR r3,bas_txtptr
 1976 ea78: 43              ldavr r3
 1977 ea79: 08 30           popr r3
 1978 ea7b:             ;
 1979 ea7b: 0d 0a           ldti 0ah
 1980 ea7d: aa ea 83        brneq parsechar1
 1981 ea80: 0e 24           ldai TOKENIZER_CR
 1982 ea82: 05              ret
 1983 ea83:             parsechar1:
 1984 ea83: 0d 2c           ldti ','
 1985 ea85: aa ea 8b        brneq parsechar2
 1986 ea88: 0e 15           ldai TOKENIZER_COMMA
 1987 ea8a: 05              ret
 1988 ea8b:             parsechar2:
 1989 ea8b: 0d 3b           ldti ';'
 1990 ea8d: aa ea 93        brneq parsechar3
 1991 ea90: 0e 16           ldai TOKENIZER_SEMICOLON
 1992 ea92: 05              ret
 1993 ea93:             parsechar3:
 1994 ea93: 0d 2b           ldti '+'
 1995 ea95: aa ea 9b        brneq parsechar4
 1996 ea98: 0e 17           ldai TOKENIZER_PLUS
 1997 ea9a: 05              ret
 1998 ea9b:             parsechar4:
 1999 ea9b: 0d 2d           ldti '-'
 2000 ea9d: aa ea a3        brneq parsechar5
 2001 eaa0: 0e 18           ldai TOKENIZER_MINUS
 2002 eaa2: 05              ret
 2003 eaa3:             parsechar5:
 2004 eaa3: 0d 26           ldti '&'
 2005 eaa5: aa ea ab        brneq parsechar6
 2006 eaa8: 0e 19           ldai TOKENIZER_AND
 2007 eaaa: 05              ret
 2008 eaab:             parsechar6:
 2009 eaab: 0d 7c           ldti '|'
 2010 eaad: aa ea b3        brneq parsechar7
 2011 eab0: 0e 1a           ldai TOKENIZER_OR
 2012 eab2: 05              ret
 2013 eab3:             parsechar7:
 2014 eab3: 0d 2a           ldti '*'
 2015 eab5: aa ea bb        brneq parsechar7A
 2016 eab8: 0e 1b           ldai TOKENIZER_ASTR
 2017 eaba: 05              ret
 2018 eabb:             parsechar7A:
 2019 eabb: 0d 2f           ldti '/'
 2020 eabd: aa ea c3        brneq parsechar8
 2021 eac0: 0e 1c           ldai TOKENIZER_SLASH
 2022 eac2: 05              ret
 2023 eac3:             parsechar8:
 2024 eac3: 0d 25           ldti '%'
 2025 eac5: aa ea cb        brneq parsechar9
 2026 eac8: 0e 1d           ldai TOKENIZER_MOD
 2027 eaca: 05              ret
 2028 eacb:             parsechar9:
 2029 eacb: 0d 28           ldti '('
 2030 eacd: aa ea d3        brneq parsechar10
 2031 ead0: 0e 1f           ldai TOKENIZER_LEFTP
 2032 ead2: 05              ret
 2033 ead3:             parsechar10:
 2034 ead3: 0d 23           ldti '#'
 2035 ead5: aa ea db        brneq parsechar11
 2036 ead8: 0e 1e           ldai TOKENIZER_HASH
 2037 eada: 05              ret
 2038 eadb:             parsechar11:
 2039 eadb: 0d 29           ldti ')'
 2040 eadd: aa ea e3        brneq parsechar12
 2041 eae0: 0e 20           ldai TOKENIZER_RIGHTP
 2042 eae2: 05              ret
 2043 eae3:             parsechar12:
 2044 eae3: 0d 3c           ldti '<'
 2045 eae5: aa ea eb        brneq parsechar13
 2046 eae8: 0e 21           ldai TOKENIZER_LT
 2047 eaea: 05              ret
 2048 eaeb:             parsechar13:
 2049 eaeb: 0d 3e           ldti '>'
 2050 eaed: aa ea f3        brneq parsechar14
 2051 eaf0: 0e 22           ldai TOKENIZER_GT
 2052 eaf2: 05              ret
 2053 eaf3:             parsechar14:
 2054 eaf3: 0d 3d           ldti '='
 2055 eaf5: aa ea fb        brneq parsechar15
 2056 eaf8: 0e 23           ldai TOKENIZER_EQ
 2057 eafa: 05              ret
 2058 eafb:             parsechar15:
 2059 eafb: 0e 00           ldai 0
 2060 eafd: 05              ret
 2061 eafe:             
 2062 eafe:             ;
 2063 eafe:             ; int get_next_token(void)
 2064 eafe:             ;
 2065 eafe:             ; under development fix ptr nextptr
 2066 eafe:             
 2067 eafe:             parse_get_next_tok:
 2068 eafe: 07 03           pushr r3
 2069 eb00: f3 02 02        LDR R3,bas_txtptr
 2070 eb03:             ;
 2071 eb03:             ; is digit
 2072 eb03:             ;
 2073 eb03:             ; chcek for number
 2074 eb03:             ;
 2075 eb03:             parse_gnt1:
 2076 eb03: 43              ldavr r3
 2077 eb04:             ;    ldti '-'
 2078 eb04:             ;    brneq parse_gnt1_chkpos
 2079 eb04:             ;    incr r3
 2080 eb04:             ;    ldavr r3
 2081 eb04:             ;    jsr parse_isdigit
 2082 eb04:             ;    brz parse_gnt1_notneg
 2083 eb04:             ;    br parse_gnt1
 2084 eb04:             
 2085 eb04:             parse_gnt1_chkpos:
 2086 eb04: 04 ef 2f        jsr parse_isdigit
 2087 eb07: a1 eb 1a        brz parse_gnt2
 2088 eb0a:             
 2089 eb0a:             parse_gnt1loop:
 2090 eb0a: 53              incr R3
 2091 eb0b: 43              ldavr r3
 2092 eb0c: 04 ef 2f        jsr parse_isdigit
 2093 eb0f: a2 eb 0a        brnz parse_gnt1loop
 2094 eb12: eb 02 04        STR r3,bas_nxtptr
 2095 eb15: 0e 02           ldai TOKENIZER_NUMBER
 2096 eb17: 08 30           popr r3
 2097 eb19: 05              ret
 2098 eb1a:             
 2099 eb1a:             ;parse_gnt1_notneg:
 2100 eb1a:             ;    decr r3
 2101 eb1a:             
 2102 eb1a:             ;
 2103 eb1a:             ; singlechar
 2104 eb1a:             ;
 2105 eb1a:             parse_gnt2:
 2106 eb1a: 43             ldavr r3
 2107 eb1b: 04 ea 73       jsr parse_singlechar
 2108 eb1e: a1 eb 28       BRZ parse_gnt3
 2109 eb21: 53             incr r3
 2110 eb22: eb 02 04       STR r3,bas_nxtptr
 2111 eb25: 08 30          popr r3
 2112 eb27: 05             ret
 2113 eb28:             ;
 2114 eb28:             ; quote
 2115 eb28:             ;
 2116 eb28:             parse_gnt3:
 2117 eb28: 43              ldavr R3
 2118 eb29: 0d 22           ldti '"'
 2119 eb2b: aa eb 3e        brneq parse_gnt4
 2120 eb2e:             parse_gnt3loop:
 2121 eb2e: 53              incr r3
 2122 eb2f: 43              ldavr R3
 2123 eb30: 0d 22           ldti '"'
 2124 eb32: aa eb 2e        brneq parse_gnt3loop
 2125 eb35: 53              incr r3
 2126 eb36: eb 02 04        STR r3,bas_nxtptr
 2127 eb39: 0e 03           ldai TOKENIZER_STRING
 2128 eb3b: 08 30           popr r3
 2129 eb3d: 05              ret
 2130 eb3e:             ;
 2131 eb3e:             parse_gnt4:
 2132 eb3e:             ;
 2133 eb3e:             ; keyword search
 2134 eb3e:             ;
 2135 eb3e: 07 04           pushr r4
 2136 eb40: 1c e9 e3        mviw r4,parse_keywords
 2137 eb43:             top:
 2138 eb43: 44              ldavr r4
 2139 eb44: f3 02 02        LDR r3,bas_txtptr
 2140 eb47: a1 eb 6b        brz nokeyowrdsfound
 2141 eb4a:             pcmploop:
 2142 eb4a: 44              ldavr r4
 2143 eb4b: a1 eb 61        brz found
 2144 eb4e: 0b              MVAT
 2145 eb4f: 43              ldavr r3
 2146 eb50: aa eb 58        brneq skiptoend
 2147 eb53: 54              incr r4
 2148 eb54: 53              incr r3
 2149 eb55: a0 eb 4a        br pcmploop
 2150 eb58:             
 2151 eb58:             skiptoend:
 2152 eb58:             ;  skip to end of string and skip over token
 2153 eb58:             skiploop:
 2154 eb58: 44              ldavr r4
 2155 eb59: 54              incr r4
 2156 eb5a: a2 eb 58        brnz skiploop
 2157 eb5d: 54              incr r4
 2158 eb5e: a0 eb 43        br top
 2159 eb61:             
 2160 eb61:             found:
 2161 eb61: eb 02 04        str r3,bas_nxtptr
 2162 eb64: 54              incr r4
 2163 eb65: 44              ldavr r4
 2164 eb66: 08 40           popr r4
 2165 eb68: 08 30           popr r3
 2166 eb6a: 05              ret
 2167 eb6b:             
 2168 eb6b:             nokeyowrdsfound:
 2169 eb6b: 08 40           popr r4
 2170 eb6d:             ;
 2171 eb6d:             ;  check for variables
 2172 eb6d:             ;
 2173 eb6d: 43              ldavr r3
 2174 eb6e: 0d 41           ldti 'A'
 2175 eb70: a7 eb 81        BRLT parse_gnt_error
 2176 eb73: 0d 5a           ldti 'Z'
 2177 eb75: a9 eb 81        BRGT parse_gnt_error
 2178 eb78: 53              INCR r3
 2179 eb79: eb 02 04        str r3,bas_nxtptr
 2180 eb7c: 0e 04           LDAI tokenizer_variable
 2181 eb7e: 08 30           popr r3
 2182 eb80: 05              RET
 2183 eb81:             
 2184 eb81:             parse_gnt_error:
 2185 eb81:             ;    halt
 2186 eb81: 0e 00           ldai tokenizer_error
 2187 eb83: 08 30           popr r3
 2188 eb85: 05              ret
 2189 eb86:             
 2190 eb86:             ;
 2191 eb86:             ; void TOKENIZER_GOTO (char * program)
 2192 eb86:             ;
 2193 eb86:             ; under development, may not be needed
 2194 eb86:             ;
 2195 eb86:             ;parse_goto:
 2196 eb86:             ;    str r3,bas_txtptr
 2197 eb86:             ;    jsr parse_get_next_tok
 2198 eb86:             ;    sta bas_currenttoken
 2199 eb86:             ;    ret
 2200 eb86:             
 2201 eb86:             ;
 2202 eb86:             ; void tokenizer_init(int ptr)
 2203 eb86:             ;
 2204 eb86:             ; paramater ptr : R7 Points to text input line
 2205 eb86:             ;
 2206 eb86:             ; under development
 2207 eb86:             ;
 2208 eb86:             parse_init:
 2209 eb86:             
 2210 eb86: 07 03           pushr r3
 2211 eb88: ef 02 02        STR R7,bas_txtptr
 2212 eb8b: 1b 04 00        MVIW r3,parse_token_buffer
 2213 eb8e: eb 02 06        STR  R3,bas_tokptr
 2214 eb91: 1b 00 00        mviw r3,0
 2215 eb94: eb 02 08        str r3,bas_tokcounter
 2216 eb97: 04 ea fe        jsr parse_get_next_tok
 2217 eb9a: e5 02 0a        sta bas_currenttoken
 2218 eb9d: 08 30           popr r3
 2219 eb9f: 05              ret
 2220 eba0:             
 2221 eba0:             ;
 2222 eba0:             ; int tokenizer_token(void)
 2223 eba0:             :
 2224 eba0:             parse_token:
 2225 eba0: e4 02 0a        lda bas_currenttoken
 2226 eba3: 05              ret
 2227 eba4:             
 2228 eba4:             ;
 2229 eba4:             ; void tokenizer_next(void) parser version
 2230 eba4:             ;
 2231 eba4:             parse_next:
 2232 eba4: 04 ec 5e        jsr parse_finished
 2233 eba7: a1 eb ab        brz parse_next1
 2234 ebaa: 05              ret
 2235 ebab:             
 2236 ebab:             parse_next1:
 2237 ebab: 07 03           pushr r3
 2238 ebad: f3 02 04        ldr r3,bas_nxtptr
 2239 ebb0: eb 02 02        str r3,bas_txtptr
 2240 ebb3:             
 2241 ebb3:             parse_next1loop:
 2242 ebb3: 43              ldavr r3
 2243 ebb4: 0d 20           ldti ' '
 2244 ebb6: aa eb bd        brneq parse_next2
 2245 ebb9: 53              incr r3
 2246 ebba: a0 eb b3        br parse_next1loop
 2247 ebbd:             
 2248 ebbd:             
 2249 ebbd:             parse_next2:
 2250 ebbd: eb 02 02        str r3,bas_txtptr
 2251 ebc0: 04 ea fe        jsr parse_get_next_tok
 2252 ebc3: e5 02 0a        sta bas_currenttoken
 2253 ebc6:             
 2254 ebc6: 0d 11           ldti TOKENIZER_REM
 2255 ebc8: a8 eb ce        breq parse_next3
 2256 ebcb: 08 30           popr r3
 2257 ebcd: 05              ret
 2258 ebce:             
 2259 ebce:             ;
 2260 ebce:             ; this needs to be fixed
 2261 ebce:             ; if rem return to parsel line then copy into token buffer
 2262 ebce:             ;
 2263 ebce:             parse_next3:
 2264 ebce: 04 ec 5e        JSR parse_finished
 2265 ebd1: a2 eb de        BRNZ parse_nextdone
 2266 ebd4: 43              ldavr r3
 2267 ebd5: 0d 0a           ldti  0ah
 2268 ebd7: a8 eb de        breq parse_nextdone
 2269 ebda: 53              incr r3
 2270 ebdb: a0 eb ce        br parse_next3
 2271 ebde:             
 2272 ebde:             parse_nextdone:
 2273 ebde: 43              ldavr r3
 2274 ebdf: 0d 0a           ldti  0ah
 2275 ebe1: aa eb e5        brneq parse_nextdone2
 2276 ebe4: 53              incr r3
 2277 ebe5:             
 2278 ebe5:             parse_nextdone2:
 2279 ebe5: eb 02 04        str r3,bas_nxtptr
 2280 ebe8: 04 eb a4        jsr parse_next
 2281 ebeb: 08 30           popr r3
 2282 ebed: 05              ret
 2283 ebee:             
 2284 ebee:             ;
 2285 ebee:             ; VARIABLE_TYPE tokenizer_num(void)
 2286 ebee:             ;
 2287 ebee:             ; Hack for now input characters are ascii hex format HHHH
 2288 ebee:             ;
 2289 ebee:             ; value returned in R7
 2290 ebee:             ;
 2291 ebee:             ; Should this advance the line ptr?
 2292 ebee:             ;
 2293 ebee:             
 2294 ebee:             parse_num:
 2295 ebee: 07 03           pushr r3
 2296 ebf0: 07 04           pushr r4
 2297 ebf2: 07 05           pushr r5
 2298 ebf4: 07 06           pushr r6
 2299 ebf6: 1e 00 00        mviw r6,0           ;accumlate val in r6
 2300 ebf9: f3 02 02        LDR r3,bas_txtptr
 2301 ebfc: 1c 00 00        MVIW R4,0000h
 2302 ebff:             ;    STR R4,bas_negflag
 2303 ebff: 43              LDAVR R3
 2304 ec00:             ;  ldti '-'
 2305 ec00:             ;    brneq parse_num_pos
 2306 ec00:             ;    MVIW R4,0ffffh
 2307 ec00:             ;    STR R4,bas_negflag
 2308 ec00:             ;    incr r3
 2309 ec00:             
 2310 ec00:             parse_num_pos:
 2311 ec00: 04 ec 2e        jsr parse_num_char
 2312 ec03:             ;   jsr SHOWBYTEA
 2313 ec03: 36              mvarl r6
 2314 ec04:             parse_num_loop:
 2315 ec04: 04 ec 2e        jsr parse_num_char
 2316 ec07:             ;   jsr showbytea
 2317 ec07: 09              push
 2318 ec08: 0d ff           ldti 0FFH
 2319 ec0a: a8 ec 22        breq parse_num_done
 2320 ec0d:             
 2321 ec0d: 0f 56           movrr r6,r5
 2322 ec0f: 1c 00 0a        mviw r4,0ah
 2323 ec12: 04 ee a1        jsr parse_mul16
 2324 ec15:             ;    jsr showr7
 2325 ec15: 0a              pop
 2326 ec16: 1e 00 00        mviw r6,0
 2327 ec19: 36              mvarl r6
 2328 ec1a: 04 ee dc        jsr parse_add16
 2329 ec1d: 0f 67           movrr r7,r6
 2330 ec1f:             ;    jsr showr7
 2331 ec1f: a0 ec 04        br parse_num_loop
 2332 ec22:             
 2333 ec22:             parse_num_done:
 2334 ec22: 0a              pop
 2335 ec23: 0f 76           movrr r6,r7
 2336 ec25:             ;    ldr r4,bas_negflag
 2337 ec25:             ;    mvrla r4
 2338 ec25:             ;    brz parse_num_done1
 2339 ec25:             ;    jsr parse_neg
 2340 ec25:             parse_num_done1:
 2341 ec25: 08 60           popr r6
 2342 ec27: 08 50           popr r5
 2343 ec29: 08 40           popr r4
 2344 ec2b: 08 30           popr r3
 2345 ec2d:             
 2346 ec2d:             ;    jsr showr7
 2347 ec2d: 05              ret
 2348 ec2e:             
 2349 ec2e:             parse_num_char:
 2350 ec2e: 43              LDAVR R3
 2351 ec2f: 04 ef 2f        JSR parse_isdigit
 2352 ec32: a2 ec 38        BRNZ parse_num_char1
 2353 ec35: 0e ff           ldai 0ffh
 2354 ec37: 05              ret
 2355 ec38:             parse_num_char1:
 2356 ec38: 43              ldavr r3
 2357 ec39: b1 30           SUBI '0'
 2358 ec3b: 53              incr r3
 2359 ec3c: 05              RET
 2360 ec3d:             
 2361 ec3d:             ;
 2362 ec3d:             ; add error checking
 2363 ec3d:             ;
 2364 ec3d:             ; return hex nibble in accumulator
 2365 ec3d:             ;
 2366 ec3d:             parse_getnibble:
 2367 ec3d: 43                LDAVR R3
 2368 ec3e: 53                incr r3
 2369 ec3f: 0d 39             LDTI '9'
 2370 ec41: a9 ec 47          BRGT parse_af
 2371 ec44: b1 30             SUBI '0'
 2372 ec46: 05                RET
 2373 ec47:             parse_af:
 2374 ec47: 04 ff d0          JSR toupper
 2375 ec4a: b1 41             SUBI 'A'
 2376 ec4c: b0 0a             ADDI 10
 2377 ec4e: 05                RET
 2378 ec4f:             ;
 2379 ec4f:             ; void tokenizer_string(char *dest, int len)
 2380 ec4f:             ;
 2381 ec4f:             ; not used, in line parse_line
 2382 ec4f:             ;
 2383 ec4f:             parse_string:
 2384 ec4f: 04 eb a0        JSR parse_token
 2385 ec52: 0d 03           LDTI TOKENIZER_STRING
 2386 ec54: a8 ec 58        BREQ parse_string1
 2387 ec57: 05              ret
 2388 ec58:             
 2389 ec58:             parse_string1:
 2390 ec58: 07 03           pushr r3
 2391 ec5a: f3 02 02        LDR r3,bas_txtptr
 2392 ec5d: 43              LDAVR R3
 2393 ec5e:             
 2394 ec5e:             
 2395 ec5e:             ;
 2396 ec5e:             ; void tokenizer_error_print(void)
 2397 ec5e:             ;
 2398 ec5e:             ; fix
 2399 ec5e:             ;
 2400 ec5e:             ;parse_error_print:
 2401 ec5e:             ;    halt
 2402 ec5e:             
 2403 ec5e:             ;
 2404 ec5e:             ; int tokenizer_finished(void)
 2405 ec5e:             ;
 2406 ec5e:             parse_finished:
 2407 ec5e: 07 03           pushr r3
 2408 ec60: f3 02 02        LDR r3,bas_txtptr
 2409 ec63: 43              ldavr r3
 2410 ec64: a1 ec 79        brz parse_finished_yes
 2411 ec67:             ;    ldti 0ah
 2412 ec67:             ;    breq parse_finished_yes
 2413 ec67:             ;    ldti 0dh
 2414 ec67:             ;    breq parse_finished_yes
 2415 ec67: 0d 01           ldti TOKENIZER_EOF
 2416 ec69: a8 ec 79        breq parse_finished_yes
 2417 ec6c: e4 02 0a        lda bas_currenttoken
 2418 ec6f: 0d 01           ldti TOKENIZER_EOF
 2419 ec71: a8 ec 79        breq parse_finished_yes
 2420 ec74: 08 30           popr r3
 2421 ec76: 0e 00           ldai 0
 2422 ec78: 05              ret
 2423 ec79:             parse_finished_yes:
 2424 ec79: 0e 01           ldai 1
 2425 ec7b: 08 30           popr r3
 2426 ec7d: 05              ret
 2427 ec7e:             
 2428 ec7e:             ;
 2429 ec7e:             ; int tokenizer_variable_num(void)
 2430 ec7e:             ;
 2431 ec7e:             parse_variable_num:
 2432 ec7e: 07 03             pushr r3
 2433 ec80: f3 02 02          LDR r3,bas_txtptr
 2434 ec83: 43                ldavr r3
 2435 ec84: b1 41             subi 'A'
 2436 ec86: 37                mvarl r7
 2437 ec87: 0e 00             ldai 0
 2438 ec89: 3f                mvarh r7
 2439 ec8a: 08 30             popr r3
 2440 ec8c: 05                ret
 2441 ec8d:             
 2442 ec8d:             ;
 2443 ec8d:             ; char *const tokenizer_pos(void)
 2444 ec8d:             ;
 2445 ec8d:             ; probably not used
 2446 ec8d:             parse_pos:
 2447 ec8d:             
 2448 ec8d:             ;not used old
 2449 ec8d:             ; char *tokenize(char *program)
 2450 ec8d:             ;
 2451 ec8d:             ; parse:
 2452 ec8d:             
 2453 ec8d:             ;
 2454 ec8d:             ; char *tokenizeLine(char *line)
 2455 ec8d:             ;
 2456 ec8d:             ; assume input text string in parse_input_line
 2457 ec8d:             ;
 2458 ec8d:             
 2459 ec8d:             parse_line:
 2460 ec8d: 04 eb 86        JSR PARSE_INIT
 2461 ec90:             
 2462 ec90: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2463 ec93: eb 02 08        str r3,bas_tokcounter
 2464 ec96: 1b 04 00        MVIW R3,parse_token_buffer
 2465 ec99:             
 2466 ec99: 07 03           pushr r3
 2467 ec9b: f3 02 02        LDR r3,bas_txtptr
 2468 ec9e: 43              ldavr r3
 2469 ec9f: 04 ef 2f        jsr parse_isdigit
 2470 eca2: 08 30           popr r3
 2471 eca4: 0d 01           ldti 1
 2472 eca6: a8 ec ed        breq parse_code
 2473 eca9: 04 ea fe        jsr parse_get_next_tok
 2474 ecac:             
 2475 ecac:             parse_line_list:
 2476 ecac: 0d 26           ldti tokenizer_list
 2477 ecae: aa ec ba        brneq parse_line_exit
 2478 ecb1: f7 02 0c        ldr r7,bas_tokenbuffer
 2479 ecb4: 04 e6 e6        JSR  basic_list
 2480 ecb7: 0e 00           ldai 0
 2481 ecb9: 05              RET
 2482 ecba:             
 2483 ecba:             parse_line_exit:
 2484 ecba: 0d 29           ldti TOKENIZER_EXIT
 2485 ecbc: aa ec c5        brneq parse_line_run
 2486 ecbf: 04 e5 78        jsr basic_run
 2487 ecc2: 0e 01           ldai 1
 2488 ecc4: 05              RET
 2489 ecc5:             
 2490 ecc5:             parse_line_run:
 2491 ecc5: 0d 27           ldti TOKENIZER_RUN
 2492 ecc7: aa ec d0        brneq parse_line_new
 2493 ecca: 04 e5 78        jsr basic_run
 2494 eccd: 0e 00           ldai 0
 2495 eccf: 05              RET
 2496 ecd0:             
 2497 ecd0:             parse_line_new:
 2498 ecd0: 0d 28           ldti TOKENIZER_NEW
 2499 ecd2: aa ec de        brneq parse_line_error
 2500 ecd5: 1f 10 00        MVIW R7,bas_tok_buf_start
 2501 ecd8: 0e 01           ldai TOKENIZER_EOF          ;write EOF to start of buffer
 2502 ecda: 4f              stavr r7
 2503 ecdb: 0e 00           ldai 0
 2504 ecdd: 05              RET
 2505 ecde:             
 2506 ecde:             parse_line_error:
 2507 ecde: 1f e0 de        mviw r7,parse_cmd_error
 2508 ece1: 04 ff c0        jsr stringout
 2509 ece4: 1f ef 9f        mviw r7,CRLF
 2510 ece7: 04 ff c0        jsr stringout
 2511 ecea: 0e 00           ldai 0
 2512 ecec: 05              ret
 2513 eced:             
 2514 eced:             parse_code:
 2515 eced: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2516 ecef: 4b              STAVR R3
 2517 ecf0: 53              INCR R3
 2518 ecf1:             
 2519 ecf1: 04 eb ee        JSR parse_num           ;store line number
 2520 ecf4: ef 02 10        str r7,bas_newlinenum
 2521 ecf7: 27              mvrla r7
 2522 ecf8: 4b              stavr r3
 2523 ecf9: 53              incr r3
 2524 ecfa: 2f              mvrha r7
 2525 ecfb: 4b              stavr r3
 2526 ecfc: 53              incr r3
 2527 ecfd:             
 2528 ecfd: 53              incr r3                ; skip over line length - fill in later
 2529 ecfe: 53              incr r3
 2530 ecff:             
 2531 ecff:             parse_line_loop:
 2532 ecff: 04 eb a4        JSR parse_next
 2533 ed02: 04 eb a0        JSR parse_token
 2534 ed05: 0d 24           ldti TOKENIZER_CR
 2535 ed07: a8 ed 76        BREQ parse_line_done
 2536 ed0a:             
 2537 ed0a: 4b              STAVR R3
 2538 ed0b: 53              INCR R3
 2539 ed0c: f5 02 08        ldr r5,bas_tokcounter
 2540 ed0f: 55              incr r5
 2541 ed10: ed 02 08        str r5,bas_tokcounter
 2542 ed13:             
 2543 ed13: 0d 02           ldti TOKENIZER_NUMBER
 2544 ed15: aa ed 2c        BRNEQ parse_line1
 2545 ed18: 04 eb ee        JSR parse_num
 2546 ed1b: 27              mvrla r7
 2547 ed1c: 4b              stavr r3
 2548 ed1d: 53              incr r3
 2549 ed1e: 2f              mvrha r7
 2550 ed1f: 4b              stavr r3
 2551 ed20: 53              incr r3
 2552 ed21: f5 02 08        ldr r5,bas_tokcounter
 2553 ed24: 55              incr r5
 2554 ed25: 55              incr r5
 2555 ed26: ed 02 08        str r5,bas_tokcounter
 2556 ed29: a0 ec ff        BR parse_line_loop
 2557 ed2c:             
 2558 ed2c:             parse_line1:
 2559 ed2c: 0d 03           ldti TOKENIZER_STRING
 2560 ed2e: aa ed 5d        BRNEQ parse_line2
 2561 ed31: f4 02 02        ldr r4,bas_txtptr
 2562 ed34: 54              incr r4                   ;skip over opening "
 2563 ed35:             
 2564 ed35:             parse_line1loop:
 2565 ed35: 44              ldavr r4
 2566 ed36: 0d 22           ldti '"'
 2567 ed38: a8 ed 48        breq parse_line1done
 2568 ed3b: 4b              stavr r3
 2569 ed3c: 53              incr r3
 2570 ed3d: 54              incr r4
 2571 ed3e: f5 02 08        ldr r5,bas_tokcounter
 2572 ed41: 55              incr r5
 2573 ed42: ed 02 08        str r5,bas_tokcounter
 2574 ed45: a0 ed 35        BR parse_line1loop
 2575 ed48:             parse_line1done:
 2576 ed48: 54              incr r4                   ;skip over closing "
 2577 ed49: 0e 00           ldai 0                    ;add null into token buffer
 2578 ed4b: 4b              stavr R3
 2579 ed4c: 53              incr r3
 2580 ed4d: f5 02 08        ldr r5,bas_tokcounter
 2581 ed50: 55              incr r5
 2582 ed51: ed 02 08        str r5,bas_tokcounter
 2583 ed54: eb 02 06        str r3,BAS_TOKPTR
 2584 ed57: ec 02 02        str r4,bas_txtptr
 2585 ed5a: a0 ec ff        BR parse_line_loop
 2586 ed5d:             
 2587 ed5d:             parse_line2:
 2588 ed5d: 0d 04           ldti TOKENIZER_VARIABLE
 2589 ed5f: aa ec ff        BRNEQ parse_line_loop
 2590 ed62: 04 ec 7e        JSR parse_variable_num
 2591 ed65: 27              mvrla r7
 2592 ed66: 4b              stavr r3
 2593 ed67: 53              incr r3
 2594 ed68: 2f              mvrha r7
 2595 ed69: 4b              stavr r3
 2596 ed6a: 53              incr r3
 2597 ed6b: f5 02 08        ldr r5,bas_tokcounter
 2598 ed6e: 55              incr r5
 2599 ed6f: 55              incr r5
 2600 ed70: ed 02 08        str r5,bas_tokcounter
 2601 ed73: a0 ec ff        BR parse_line_loop
 2602 ed76:             
 2603 ed76:             parse_line_done:
 2604 ed76: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2605 ed78: 4b              STAVR R3
 2606 ed79: 53              INCR R3
 2607 ed7a:             ;    ldr r5,bas_tokcounter
 2608 ed7a:             ;    incr r5
 2609 ed7a:             ;    str r5,bas_tokcounter
 2610 ed7a:             
 2611 ed7a: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2612 ed7d: 53              incr r3
 2613 ed7e: 53              incr r3
 2614 ed7f: 53              incr r3
 2615 ed80: f7 02 08        ldr r7,bas_tokcounter
 2616 ed83: ef 02 12        str r7,bas_newlinelen
 2617 ed86: 27              mvrla r7
 2618 ed87: 4b              stavr r3
 2619 ed88: 53              incr r3
 2620 ed89: 2f              mvrha r7
 2621 ed8a: 4b              stavr r3
 2622 ed8b:             
 2623 ed8b:             ;
 2624 ed8b:             ; void addLine(char *buff)
 2625 ed8b:             ; since addline is only called from parse_tokenizeline where are these
 2626 ed8b:             ; values are know, pass them in or
 2627 ed8b:             ; maybe merge addLine to bottom of parse_tokenizeline
 2628 ed8b:             ;
 2629 ed8b:             ; r7 points to line to insert
 2630 ed8b:             ; r6 linenumber
 2631 ed8b:             ; r5 linelength
 2632 ed8b:             ;
 2633 ed8b:             parse_addline:
 2634 ed8b: f7 02 10          ldr r7,BAS_NEWLINENUM
 2635 ed8e: 04 ed fd          JSR parse_removeline      ; if line number already exists delete it
 2636 ed91: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2637 ed94: 27                mvrla r7
 2638 ed95: 0d 06             ldti 6
 2639 ed97: aa ed 9d          brneq parse_addline1
 2640 ed9a: 0e 00             ldai 0
 2641 ed9c: 05                ret
 2642 ed9d:             
 2643 ed9d:             parse_addline1:                 ;find insert location
 2644 ed9d: f7 02 10          ldr r7,BAS_NEWLINENUM
 2645 eda0: f3 02 0c          ldr r3,bas_tokenBuffer
 2646 eda3:             
 2647 eda3:             parse_addlineloop:
 2648 eda3: eb 02 14          str r3,bas_insertptr
 2649 eda6: 43                ldavr r3
 2650 eda7: 0d 01             ldti TOKENIZER_EOF
 2651 eda9: a8 ed cc          BREQ parse_addroom
 2652 edac: 53                incr r3                   ;get line number of line in token buffer into r6
 2653 edad: 43                ldavr r3
 2654 edae: 36                mvarl r6
 2655 edaf: 53                incr r3
 2656 edb0: 43                ldavr r3
 2657 edb1: 3e                mvarh r6
 2658 edb2: 04 ef 3f          jsr parse_compare
 2659 edb5: 0d ff             ldti 0ffh
 2660 edb7: a8 ed cc          breq parse_addroom
 2661 edba:             
 2662 edba: 53                incr r3                   ;get line length
 2663 edbb: 43                ldavr r3
 2664 edbc: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2665 edbf: 36                mvarl r6
 2666 edc0: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2667 edc1: 5e                decr r6
 2668 edc2: 5e                decr r6
 2669 edc3:             
 2670 edc3:             addline_moveptr:              ; advance pointer to next line
 2671 edc3: 53                incr r3
 2672 edc4: 5e                decr r6
 2673 edc5: 26                mvrla r6
 2674 edc6: a2 ed c3          brnz addline_moveptr
 2675 edc9: a0 ed a3          br parse_addlineloop
 2676 edcc:             
 2677 edcc:             
 2678 edcc:             parse_addroom:               ; make room
 2679 edcc: 1f 20 00          mviw r7,BAS_TOK_BUF_END
 2680 edcf:             ;      decr r7
 2681 edcf: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2682 edd2: 04 ee ea          jsr parse_sub16
 2683 edd5: 1d 20 00          mviw r5,BAS_TOK_BUF_END
 2684 edd8:             ;      decr r5
 2685 edd8:             
 2686 edd8: f6 02 14          ldr r6,bas_insertptr
 2687 eddb:             parse_roomloop:
 2688 eddb: 5f                decr r7
 2689 eddc: 5d                decr r5
 2690 eddd: 47                ldavr r7
 2691 edde: 4d                stavr r5
 2692 eddf:             
 2693 eddf: 26                mvrla r6
 2694 ede0: 0b                mvat
 2695 ede1: 27                mvrla r7
 2696 ede2: aa ed db          brneq parse_roomloop
 2697 ede5:             
 2698 ede5: 2e                mvrha r6
 2699 ede6: 0b                mvat
 2700 ede7: 2f                mvrha r7
 2701 ede8: aa ed db          brneq parse_roomloop
 2702 edeb:             
 2703 edeb: f7 02 14          ldr r7,bas_insertptr
 2704 edee: 1e 04 00          MVIW R6,parse_token_buffer
 2705 edf1:             
 2706 edf1:             parse_insertloop:
 2707 edf1: 46                ldavr r6
 2708 edf2: 4f                stavr r7
 2709 edf3: 56                incr r6
 2710 edf4: 57                incr r7
 2711 edf5: 0d 24             ldti 024h ; sub in actual eol token here
 2712 edf7: aa ed f1          brneq parse_insertloop
 2713 edfa: 0e 00             ldai 0
 2714 edfc: 05                ret
 2715 edfd:             
 2716 edfd:             ;
 2717 edfd:             ; void removeLine(int lineNum)
 2718 edfd:             ;
 2719 edfd:             parse_removeline:
 2720 edfd: 04 ee 25        JSR basu_find
 2721 ee00: 2f              mvrha R7
 2722 ee01: a2 ee 09        brnz parse_removeline1
 2723 ee04: 27              mvrla R7
 2724 ee05: a2 ee 09        brnz parse_removeline1
 2725 ee08: 05              ret
 2726 ee09:             parse_removeline1:
 2727 ee09: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2728 ee0b: 57              incr r7
 2729 ee0c: 57              incr r7
 2730 ee0d: 57              incr r7
 2731 ee0e: 47              ldavr r7
 2732 ee0f: 36              mvarl r6        ; R6 = remove length
 2733 ee10: 57              incr r7
 2734 ee11: 47              ldavr r7
 2735 ee12: 3e              mvarh r6
 2736 ee13:             
 2737 ee13: 5f              decr r7         ;backup to start of line
 2738 ee14: 5f              decr r7
 2739 ee15: 5f              decr r7
 2740 ee16: 5f              decr r7
 2741 ee17: 04 ee dc        JSR parse_add16
 2742 ee1a:             parse_removeloop:
 2743 ee1a: 47              ldavr r7
 2744 ee1b: 4d              stavr r5
 2745 ee1c: 55              incr r5
 2746 ee1d: 57              incr r7
 2747 ee1e: 2f              MVRHA r7
 2748 ee1f:             
 2749 ee1f: e6 02 0e        ldt  bas_bufferendhi
 2750 ee22:             
 2751 ee22: aa ee 1a        brneq parse_removeloop
 2752 ee25:             ;
 2753 ee25:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2754 ee25:             ; since we are moving complete contents of buffer
 2755 ee25:             ; Make sure it is set during addline
 2756 ee25:             ;
 2757 ee25:             
 2758 ee25:             
 2759 ee25:             ; run & parse utilites
 2760 ee25:             ;
 2761 ee25:             
 2762 ee25:             ;
 2763 ee25:             ; find in the token buffer linenum in r7
 2764 ee25:             ;
 2765 ee25:             basu_find:
 2766 ee25: 07 05           pushr r5                  ; save r5
 2767 ee27: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2768 ee2a:             
 2769 ee2a:             basu_find_loop:
 2770 ee2a: 45              ldavr r5                  ;get token
 2771 ee2b: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2772 ee2d: aa ee 37        brneq basu_find_loop1     ;no continue
 2773 ee30: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2774 ee33: 27              mvrla r7
 2775 ee34: 08 50           popr r5
 2776 ee36: 05              ret
 2777 ee37:             
 2778 ee37:             basu_find_loop1:
 2779 ee37: 55              incr r5                   ;skip past linenum token
 2780 ee38: 27              mvrla r7                  ;test low byte of linenum
 2781 ee39: 0b              MVAT
 2782 ee3a: 45              ldavr r5
 2783 ee3b: aa ee 4e        brneq basu_find1          ;not eqaul
 2784 ee3e: 55              incr r5
 2785 ee3f: 2f              mvrha r7                  ;test high byte of linenum
 2786 ee40: 0b              MVAT
 2787 ee41: 45              ldavr r5
 2788 ee42: aa ee 4f        brneq basu_find2          ;not equal
 2789 ee45: 5d              decr r5                   ;if equal backup to linenum token
 2790 ee46: 5d              decr r5
 2791 ee47: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2792 ee49: 0e 01           ldai 1                    ;return 1 in accumulator
 2793 ee4b: 08 50           popr r5
 2794 ee4d: 05              ret
 2795 ee4e:             
 2796 ee4e:             basu_find1:
 2797 ee4e: 55              incr r5                   ;skip over linenum high byte
 2798 ee4f:             basu_find2:
 2799 ee4f: 55              incr r5                   ;get line length
 2800 ee50: 45              ldavr r5
 2801 ee51: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2802 ee54: 36              mvarl r6
 2803 ee55: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2804 ee56: 5e              decr r6
 2805 ee57: 5e              decr r6
 2806 ee58:             basu_find_moveptr:            ; advance pointer to next line
 2807 ee58: 55              incr r5
 2808 ee59: 5e              decr r6
 2809 ee5a: 26              mvrla r6
 2810 ee5b: a2 ee 58        brnz basu_find_moveptr
 2811 ee5e: a0 ee 2a        br basu_find_loop
 2812 ee61:             
 2813 ee61:             ;
 2814 ee61:             ; Divide r5 by r4 return answer in r7
 2815 ee61:             ;
 2816 ee61:             ; return result in r7
 2817 ee61:             ;
 2818 ee61:             parse_div16:
 2819 ee61: 07 06             pushr r6
 2820 ee63: 0f 75             movrr r5,r7
 2821 ee65: 0f 64             movrr r4,r6
 2822 ee67: 1c 00 00          mviw r4,0
 2823 ee6a:             ;
 2824 ee6a:             ; 16 bit SUB of r6 from r7, return result in r7
 2825 ee6a:             ;
 2826 ee6a:             ; r7=r6 00
 2827 ee6a:             ; r7>r6 01
 2828 ee6a:             ; r7<r6 ff
 2829 ee6a:             ;
 2830 ee6a:             divloop:
 2831 ee6a: 04 ef 3f        jsr parse_compare
 2832 ee6d: 0d ff           ldti 0FFH
 2833 ee6f: a8 ee 7d        breq div_done
 2834 ee72: 07 06           pushr r6
 2835 ee74: 04 ee ea        jsr parse_sub16
 2836 ee77: 08 60           popr r6
 2837 ee79: 54              incr r4
 2838 ee7a: a0 ee 6a        br divloop
 2839 ee7d:             div_done:
 2840 ee7d: 08 60           popr r6
 2841 ee7f: 0f 74           MOVRR r4,r7
 2842 ee81: 05              ret
 2843 ee82:             
 2844 ee82:             ;
 2845 ee82:             ; mod r5 by r4 return answer in r7
 2846 ee82:             ;
 2847 ee82:             ; return result in r7
 2848 ee82:             ;
 2849 ee82:             parse_mod16:
 2850 ee82: 07 06             pushr r6
 2851 ee84: 0f 75             movrr r5,r7
 2852 ee86: 0f 64             movrr r4,r6
 2853 ee88: 1c 00 00          mviw r4,0
 2854 ee8b:             ;
 2855 ee8b:             ; 16 bit SUB of r6 from r7, return result in r7
 2856 ee8b:             ;
 2857 ee8b:             modloop:
 2858 ee8b: 04 ef 3f        jsr parse_compare
 2859 ee8e: 0d ff           ldti 0FFH
 2860 ee90: a8 ee 9e        breq mod_done
 2861 ee93: 07 06           pushr r6
 2862 ee95: 04 ee ea        jsr parse_sub16
 2863 ee98: 08 60           popr r6
 2864 ee9a: 54              incr r4
 2865 ee9b: a0 ee 8b        br modloop
 2866 ee9e:             mod_done:
 2867 ee9e: 08 60           popr r6
 2868 eea0: 05              ret
 2869 eea1:             
 2870 eea1:             ;
 2871 eea1:             ; Multiple numbers in R4 and R5
 2872 eea1:             ;
 2873 eea1:             ; Return in R7
 2874 eea1:             ;
 2875 eea1:             ; R6 = Bit counter
 2876 eea1:             ;
 2877 eea1:             parse_mul16:
 2878 eea1: 07 06               pushr r6
 2879 eea3:             
 2880 eea3: 1f 00 00            MVIW R7,0
 2881 eea6: 1e 00 10            MVIW R6,10h
 2882 eea9:             ;        jsr showregs
 2883 eea9:             
 2884 eea9:             parse_mulloop:
 2885 eea9:             ;        jsr showregs
 2886 eea9:             
 2887 eea9: 25                  mvrla r5
 2888 eeaa: b3 01               andi  01h
 2889 eeac: a1 ee b2            brz parse_mulskip
 2890 eeaf: 04 ee ce            jsr parse_muladd16
 2891 eeb2:             
 2892 eeb2:             parse_mulskip:
 2893 eeb2:             ;
 2894 eeb2:             ; clear carry flag HACK
 2895 eeb2:             ;
 2896 eeb2: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2897 eeb4: e0                  cshl
 2898 eeb5: b0 00               addi 0      ; may not be needed
 2899 eeb7:             ;
 2900 eeb7: 24                  mvrla r4
 2901 eeb8:             ;        jsr showcarry
 2902 eeb8: e0                  cshl
 2903 eeb9:             ;        jsr showcarry
 2904 eeb9: 34                  mvarl r4
 2905 eeba: 2c                  mvrha r4
 2906 eebb:             ;        jsr showcarry
 2907 eebb: e0                  cshl
 2908 eebc:             ;        jsr showcarry
 2909 eebc: 3c                  mvarh r4
 2910 eebd:             
 2911 eebd: 0e 00               ldai 0      ;clear carry
 2912 eebf: e0                  cshl
 2913 eec0:             ;        addi 0
 2914 eec0:             
 2915 eec0: 2d                  mvrha r5
 2916 eec1: e1                  cshr
 2917 eec2: 3d                  mvarh r5
 2918 eec3: 25                  mvrla r5
 2919 eec4: e1                  cshr
 2920 eec5: 35                  mvarl r5
 2921 eec6:             
 2922 eec6: 5e                  decr r6
 2923 eec7: 26                  mvrla r6
 2924 eec8: a2 ee a9            brnz parse_mulloop
 2925 eecb: 08 60               popr r6
 2926 eecd: 05                  ret
 2927 eece:             
 2928 eece:             parse_muladd16:
 2929 eece: 0e 00               ldai 0      ;clear carry
 2930 eed0: e0                  cshl
 2931 eed1:             
 2932 eed1: 27                  MVRLA R7
 2933 eed2: 0b                  MVAT
 2934 eed3: 24                  mvrla r4
 2935 eed4: b8                  ADDT
 2936 eed5: 37                  mvarl r7
 2937 eed6:             
 2938 eed6: 2f                  mvrha r7
 2939 eed7: 0b                  MVAT
 2940 eed8: 2c                  mvrha r4
 2941 eed9: e3                  addtc
 2942 eeda: 3f                  mvarh r7
 2943 eedb: 05                  ret
 2944 eedc:             
 2945 eedc:             ;
 2946 eedc:             ; 16 bit ADD r6 and r7, return result in r7
 2947 eedc:             ;
 2948 eedc:             parse_add16:
 2949 eedc:             
 2950 eedc: 0e 00             ldai 0      ;clear carry
 2951 eede: e0                cshl
 2952 eedf: 26                MVRLA R6
 2953 eee0: 0b                MVAT
 2954 eee1: 27                mvrla r7
 2955 eee2: b8                ADDT
 2956 eee3: 37                mvarl r7
 2957 eee4: 2e                mvrha r6
 2958 eee5: 0b                MVAT
 2959 eee6: 2f                mvrha r7
 2960 eee7: e3                addtc
 2961 eee8: 3f                mvarh r7
 2962 eee9: 05                ret
 2963 eeea:             
 2964 eeea:             ;
 2965 eeea:             ; 16 bit SUB of r6 from r7, return result in r7
 2966 eeea:             ;
 2967 eeea:             parse_sub16:
 2968 eeea: 2e                mvrha r6
 2969 eeeb: b5                inva
 2970 eeec: 3e                mvarh r6
 2971 eeed: 26                mvrla r6
 2972 eeee: b5                inva
 2973 eeef: 36                mvarl r6
 2974 eef0: 56                incr r6
 2975 eef1: a0 ee dc          br parse_add16
 2976 eef4:             
 2977 eef4:             ;
 2978 eef4:             ; convert positive in r7 to negative
 2979 eef4:             ;
 2980 eef4:             parse_neg:
 2981 eef4: 2f                mvrha r7
 2982 eef5: b5                inva
 2983 eef6: 3f                mvarh r7
 2984 eef7: 27                mvrla r7
 2985 eef8: b5                inva
 2986 eef9: 37                mvarl r7
 2987 eefa: 57                incr r7
 2988 eefb: 05                ret
 2989 eefc:             
 2990 eefc:             ;
 2991 eefc:             ; 16 bit AND r6 and r7, return result in r7
 2992 eefc:             ;
 2993 eefc:             parse_and16:
 2994 eefc: 26                MVRLA R6
 2995 eefd: 0b                MVAT
 2996 eefe: 27                mvrla r7
 2997 eeff: bb                ANDT
 2998 ef00: 37                mvarl r7
 2999 ef01: 2e                mvrha r6
 3000 ef02: 0b                MVAT
 3001 ef03: 2f                mvrha r7
 3002 ef04: bb                ANDT
 3003 ef05: 3f                mvarh r7
 3004 ef06: 05                ret
 3005 ef07:             
 3006 ef07:             ;
 3007 ef07:             ; 16 bit OR r6 and r7, return result in r7
 3008 ef07:             ;
 3009 ef07:             parse_or16:
 3010 ef07: 26                MVRLA R6
 3011 ef08: 0b                MVAT
 3012 ef09: 27                mvrla r7
 3013 ef0a: ba                ORT
 3014 ef0b: 37                mvarl r7
 3015 ef0c: 2e                mvrha r6
 3016 ef0d: 0b                MVAT
 3017 ef0e: 2f                mvrha r7
 3018 ef0f: ba                ORT
 3019 ef10: 3f                mvarh r7
 3020 ef11: 05                ret
 3021 ef12:             
 3022 ef12:             
 3023 ef12:             ;
 3024 ef12:             ; is digit in accumulator hex
 3025 ef12:             ; returns 1 if yes and 0 if no
 3026 ef12:             ;
 3027 ef12:             ; what about upper/lower case
 3028 ef12:             ;
 3029 ef12:             ; destroys tmp register
 3030 ef12:             parse_ishex:
 3031 ef12: 0d 30          ldti '0'
 3032 ef14: a7 ef 2c       brlt parse_ishex_no
 3033 ef17: 0d 39          ldti '9'
 3034 ef19: a9 ef 1f       brgt parse_ishex_af
 3035 ef1c: a0 ef 29       br parse_ishex_yes
 3036 ef1f:             
 3037 ef1f:             parse_ishex_af:
 3038 ef1f: 0d 41           ldti 'A'
 3039 ef21: a7 ef 2c        brlt parse_ishex_no
 3040 ef24: 0d 46           ldti 'F'
 3041 ef26: a9 ef 2c        brgt parse_ishex_no
 3042 ef29:             
 3043 ef29:             parse_ishex_yes:
 3044 ef29: 0e 01           ldai 1
 3045 ef2b: 05              ret
 3046 ef2c:             
 3047 ef2c:             parse_ishex_no:
 3048 ef2c: 0e 00           ldai 0
 3049 ef2e: 05              ret
 3050 ef2f:             
 3051 ef2f:             ;
 3052 ef2f:             ; is digit in accumulator decimal
 3053 ef2f:             ; returns 1 if yes and 0 if no
 3054 ef2f:             ;
 3055 ef2f:             ; destroys tmp register
 3056 ef2f:             ;
 3057 ef2f:             parse_isdigit:
 3058 ef2f: 0d 30          ldti '0'
 3059 ef31: a7 ef 3c       brlt parse_isdigit_no
 3060 ef34: 0d 39          ldti '9'
 3061 ef36: a9 ef 3c       brgt parse_isdigit_no
 3062 ef39:             
 3063 ef39: 0e 01           ldai 1
 3064 ef3b: 05              ret
 3065 ef3c:             
 3066 ef3c:             parse_isdigit_no:
 3067 ef3c: 0e 00           ldai 0
 3068 ef3e: 05              ret
 3069 ef3f:             
 3070 ef3f:             ;
 3071 ef3f:             ; 16 bit compare r6 and r7
 3072 ef3f:             ;
 3073 ef3f:             ; returns in accumulator
 3074 ef3f:             ; r7=r6 00
 3075 ef3f:             ; r7>r6 01
 3076 ef3f:             ; r7<r6 ff
 3077 ef3f:             ;
 3078 ef3f:             ; destory Tmp
 3079 ef3f:             ;
 3080 ef3f:             parse_compare:
 3081 ef3f: 2e            mvrha r6
 3082 ef40: 0b            mvat
 3083 ef41: 2f            mvrha r7
 3084 ef42: aa ef 4e      brneq parse_compareh
 3085 ef45: 26            mvrla r6
 3086 ef46: 0b            mvat
 3087 ef47: 27            mvrla r7
 3088 ef48: aa ef 57      brneq parse_comparel
 3089 ef4b: 0e 00         ldai 0
 3090 ef4d: 05            ret
 3091 ef4e:             
 3092 ef4e:             parse_compareh:
 3093 ef4e: a7 ef 54      brlt parse_compareh1
 3094 ef51: 0e 01         ldai 1
 3095 ef53: 05            ret
 3096 ef54:             parse_compareh1:
 3097 ef54: 0e ff         ldai 0ffh
 3098 ef56: 05            ret
 3099 ef57:             
 3100 ef57:             parse_comparel:
 3101 ef57: a7 ef 5d      brlt parse_comparel1
 3102 ef5a: 0e 01         ldai 1
 3103 ef5c: 05            ret
 3104 ef5d:             parse_comparel1:
 3105 ef5d: 0e ff         ldai 0ffh
 3106 ef5f: 05            ret
 3107 ef60:             
 3108 ef60: 3e 3e 00    basic_prompt: db ">>",0
 3109 ef63:             basic_interprter:
 3110 ef63:                     ;build input string
 3111 ef63:                     ;point register to BUFFER
 3112 ef63:                     ;loop fetch chars
 3113 ef63:                     ;until CR
 3114 ef63:                     ;be sure line ends with a NULL or CR
 3115 ef63:                     ;what does parse require???
 3116 ef63: 1f ef 60            MVIW R7,basic_prompt
 3117 ef66: 04 ff c0            JSR stringout
 3118 ef69:             
 3119 ef69: 1f 03 00            mviw r7,parse_input_line
 3120 ef6c:             
 3121 ef6c:             parse_inputloop:
 3122 ef6c: 04 ef 7c            jsr get_inputline
 3123 ef6f:             
 3124 ef6f: 1f 03 00            mviw r7,parse_input_line
 3125 ef72: 04 ec 8d            JSR parse_line
 3126 ef75:             
 3127 ef75: a1 ef 63            BRZ basic_interprter
 3128 ef78: 05                  RET
 3129 ef79:             
 3130 ef79: 1b 03 00            mviw r3,parse_input_line
 3131 ef7c:             
 3132 ef7c:             get_inputline:
 3133 ef7c: 04 ff e8            jsr uartin
 3134 ef7f: 4f                  stavr r7
 3135 ef80: 57                  incr r7
 3136 ef81: 0d 0a               ldti 0ah  ;1 changed from 0a to 0D for new emulator code, changed back
 3137 ef83: aa ef 7c            brneq get_inputline
 3138 ef86: 1f ef 9f            MVIW R7,CRLF
 3139 ef89: 04 ff c0            JSR STRINGOUT
 3140 ef8c: 05                  RET
 3141 ef8d:             
 3142 ef8d:             test_input:
 3143 ef8d: 04 ff ec            jsr charavail
 3144 ef90: a2 ef 94            brnz setbreak
 3145 ef93: 05                  ret
 3146 ef94:             setbreak:
 3147 ef94: 07 06               pushr r6
 3148 ef96: 1e 02 00            mviw r6,bas_run_ended
 3149 ef99: 0e 01               LDAI 1
 3150 ef9b: 4e                  STAVR r6
 3151 ef9c: 08 60               popr r6
 3152 ef9e: 05                  ret
 3153 ef9f:             
 3154 ef9f:             ;
 3155 ef9f:             ; STRINGS
 3156 ef9f:             ;
 3157 ef9f: 0a 0d 00    CRLF: DB 0ah,0dh,0
 3158 efa2:             ;
 3159 efa2:             
 3160 efa2:               ORG 0EF00h
 3161 ef00:             ;
 3162 ef00:             ; The End
 3163 ef00:             ;
 3164 ef00:               ORG 0EFFFh
 3165 efff:             ZZZZ:
 3166 efff: 00            DB   0

edc3h: ADDLINE_MOVEPTR  - <  2670>   2674 
ef63h: BASIC_INTERPRTER - <  3109>    192   3127 
e6e6h: BASIC_LIST       - <  1492>    154   2479 
ef60h: BASIC_PROMPT     - <  3108>   3116 
e578h: BASIC_RUN        - <  1218>    162   2486   2493 
0100h: BASIC_VARS       - <    74>   1262   1285 
e6ffh: BASLIST1         - <  1508>   1501 
e79fh: BASLIST10        - <  1618>   1612 
e7aeh: BASLIST11        - <  1626>   1620 
e7bdh: BASLIST12        - <  1634>   1628 
e7cch: BASLIST13        - <  1642>   1636 
e7dbh: BASLIST14        - <  1650>   1644 
e7eah: BASLIST15        - <  1658>   1652 
e7f9h: BASLIST16        - <  1666>   1660 
e808h: BASLIST17        - <  1674>   1668 
e817h: BASLIST18        - <  1682>   1676 
e826h: BASLIST19        - <  1690>   1684 
e70ah: BASLIST2         - <  1514>   1510 
e835h: BASLIST20        - <  1698>   1692 
e844h: BASLIST20A       - <  1706>   1700 
e853h: BASLIST20B       - <  1714>   1708 
e862h: BASLIST21        - <  1722>   1716 
e875h: BASLIST22        - <  1732>   1724 
e888h: BASLIST23        - <  1742>   1734 
e89bh: BASLIST24        - <  1752>   1744 
e8aeh: BASLIST25        - <  1762>   1754 
e8c1h: BASLIST26        - <  1772>   1764 
e8d4h: BASLIST27        - <  1782>   1774 
e8e7h: BASLIST28        - <  1792>   1784 
e8fah: BASLIST29        - <  1802>   1794 
e721h: BASLIST3         - <  1530>   1516 
e90dh: BASLIST30        - <  1812>   1804 
e920h: BASLIST31        - <  1822>   1814 
e933h: BASLIST32        - <  1832>   1824 
e946h: BASLIST33        - <  1842>   1834 
e959h: BASLIST34        - <  1852>   1844 
e96ch: BASLIST35        - <  1862>   1854 
e97fh: BASLIST36        - <  1872>   1864 
e98eh: BASLIST37        - <  1880>   1874 
e9a7h: BASLIST38        - <  1898>   1882 
e9b6h: BASLIST39        - <  1906>   1900 
e73dh: BASLIST4         - <  1555>   1535 
e9c5h: BASLIST40        - <  1914>   1908 
e9d4h: BASLIST41        - <  1922>   1916 
e754h: BASLIST5         - <  1578>   1557 
e763h: BASLIST6         - <  1586>   1580 
e772h: BASLIST7         - <  1594>   1588 
e781h: BASLIST8         - <  1602>   1596 
e790h: BASLIST9         - <  1610>   1604 
e9e0h: BASLIST_DONE     - <  1930>   1505   1511   1926 
e6eah: BASLIST_LOOP     - <  1497>   1506   1512   1528   1553   1576   1584 
         1592   1600   1608   1616   1624   1632   1640   1648   1656   1664 
         1672   1680   1688   1696   1704   1712   1720   1730   1740   1750 
         1760   1770   1780   1790   1800   1810   1820   1830   1840   1850 
         1860   1870   1878   1896   1904   1912   1920 
e731h: BASLIST_STRING   - <  1545>   1549 
e739h: BASLIST_STRINGEND - <  1551>   1547 
ee25h: BASU_FIND        - <  2765>    624   2720 
ee4eh: BASU_FIND1       - <  2796>   2783 
ee4fh: BASU_FIND2       - <  2798>   2788 
ee2ah: BASU_FIND_LOOP   - <  2769>   2811 
ee37h: BASU_FIND_LOOP1  - <  2778>   2772 
ee58h: BASU_FIND_MOVEPTR - <  2806>   2810 
020eh: BAS_BUFFERENDHI  - <    86>    177   2749 
020ah: BAS_CURRENTTOKEN - <    84>   2217   2225   2252   2417 
e5b7h: BAS_ERROR        - <  1299>    308   1202 
0282h: BAS_FORSTACK     - <   107>    276 
0280h: BAS_FORSTACKPTR  - <   106> 
02c0h: BAS_GOSUBPTR     - <   116> 
02c2h: BAS_GOSUBSTACK   - <   117>    275 
0214h: BAS_INSERTPTR    - <    93>   2648   2686   2703 
e091h: BAS_MSG1         - <   249>    307 
e0adh: BAS_MSG2         - <   250> 
e0beh: BAS_MSG3         - <   251>   1199 
0216h: BAS_NEGFLAG      - <    94> 
0212h: BAS_NEWLINELEN   - <    92>   2616   2636   2681 
0210h: BAS_NEWLINENUM   - <    91>   2520   2634   2644 
0204h: BAS_NXTPTR       - <    81>   2094   2110   2126   2161   2179   2238 
         2279 
0200h: BAS_RUN_ENDED    - <    79>    277    643   1073   1238   3148   3148 
0208h: BAS_TOKCOUNTER   - <    83>   2215   2463   2539   2541   2552   2555 
         2571   2573   2580   2582   2597   2600   2615 
020ch: BAS_TOKENBUFFER  - <    85>    153    175    280   2478   2645   2767 
0206h: BAS_TOKPTR       - <    82>   2213   2583 
2000h: BAS_TOK_BUF_END  - <   134>    176   2679   2683 
1000h: BAS_TOK_BUF_START - <   130>    172   2500 
0202h: BAS_TXTPTR       - <    80>    994   1975   2069   2139   2211   2239 
         2250   2300   2391   2408   2433   2467   2561   2584 
e060h: BIGTEST          - <   223>    185 
ffech: CHARAVAIL        - <    15>   3143 
ffc4h: CHAROUT          - <     5>    687   1400   1432   1452 
ef9fh: CRLF             - <  3157>    228    235    240    721   1875   2509 
         3138 
e5f6h: DIVIDERS         - <  1384>   1409 
ee6ah: DIVLOOP          - <  2830>   2838 
ee7dh: DIV_DONE         - <  2839>   2833 
e102h: EXE_ACCEPT       - <   290>    331    345    354    366    372    375 
          642    657    667    731    737    766    768    773    781    784 
          786    807    837    847    892    903    921    923    934    949 
          969    977    985   1002   1004   1013   1022   1028   1030   1050 
         1056   1066   1123   1125   1133   1135   1179   1211 
e117h: EXE_ACCEPT_DONE  - <   310>    300 
e4a5h: EXE_END_STMT     - <  1072>   1172 
e1ceh: EXE_EXPR         - <   460>    373    546    562    579    596    658 
          708    769    924    935   1014   1052   1058 
e213h: EXE_EXPR_AND     - <   504>    474 
e23ah: EXE_EXPR_DONE    - <   529>    478 
e1d7h: EXE_EXPR_LOOP    - <   467>    490    502    514    526    527 
e201h: EXE_EXPR_MINUS   - <   492>    472 
e225h: EXE_EXPR_OR      - <   516>    476 
e1efh: EXE_EXPR_PLUS    - <   480>    470 
e127h: EXE_FACTOR       - <   340>    346    355    392    407    421    435 
e154h: EXE_FACTOR1      - <   369>    363 
e135h: EXE_FACTOR1A     - <   350>    344 
e146h: EXE_FACTOR1B     - <   360>    353 
e165h: EXE_FACTOR2      - <   378>    371 
e58ah: EXE_FINISHED     - <  1234>   1222 
e59eh: EXE_FINISHED_YES - <  1248>   1240   1244 
e3f5h: EXE_FOR_STMT     - <   898>   1110 
e5ach: EXE_GET_VARIABLE - <  1284>    329    852 
e391h: EXE_GOSUB_STMT   - <   779>   1148 
e2dah: EXE_GOTO_STMT    - <   655>   1116 
e348h: EXE_IF_STMT      - <   729>   1092 
e361h: EXE_IF_STMT1     - <   745>    741    751 
e370h: EXE_IF_STMT2     - <   754>    749 
e2bch: EXE_INDEX_FIND   - <   623>    633 
e0f0h: EXE_INIT         - <   273>   1219 
e43bh: EXE_INPUT_STMT   - <   983>   1142 
e42fh: EXE_INP_STMT     - <   967>   1186 
e600h: EXE_ITOA         - <  1386>    239    710   1525   1892 
e622h: EXE_ITOA_LOOP    - <  1411>   1425   1442   1446 
e63ah: EXE_ITOA_NEXT    - <  1427>   1420 
e65ch: EXE_ITOA_NOONES  - <  1453> 
e647h: EXE_ITOA_NOTYET  - <  1436>   1429 
e613h: EXE_ITOA_POS     - <  1402>   1390 
e2c0h: EXE_JUMP_LINE    - <   632>    659    799 
e2d7h: EXE_JUMP_LINE1   - <   647>    635    637 
e374h: EXE_LET_STMT     - <   761>   1086   1180 
e56fh: EXE_LINE_STMT    - <  1209>   1228 
e3ebh: EXE_NEXT_DONE    - <   886>    872 
e3bbh: EXE_NEXT_STMT    - <   826>   1098 
e5e5h: EXE_NEXT_TOK3_DONE - <  1346>   1342 
e5ddh: EXE_NEXT_TOK3_LOOP - <  1340>   1344 
e5b9h: EXE_NEXT_TOKEN   - <  1308>    311    406    420    434    481    493 
          505    517    561    578    595    680    688    694    723    746 
          755 
e5c3h: EXE_NEXT_TOKEN1  - <  1317>   1311 
e5cch: EXE_NEXT_TOKEN2  - <  1325>   1319 
e5d7h: EXE_NEXT_TOKEN3  - <  1335>   1327 
e5e7h: EXE_NEXT_TOKEN4  - <  1350>   1337 
e5e9h: EXE_NUM          - <  1357>    364    782 
e435h: EXE_OUTP_STMT    - <   975>   1192 
e462h: EXE_PEEK_STMT    - <  1011>   1160 
e489h: EXE_POKE_STMT    - <  1048>   1166 
e2e6h: EXE_PRINT_STMT   - <   665>   1104 
e2fdh: EXE_PRINT_STMT1  - <   683>    672 
e30dh: EXE_PRINT_STMT2  - <   691>    685 
e318h: EXE_PRINT_STMT3  - <   697>    693 
e32ah: EXE_PRINT_STMT4  - <   707>    699    701    703 
e33eh: EXE_PRINT_STMT_DONE - <   720>    705    715    717 
e2ebh: EXE_PRINT_STMT_LOOP - <   669>    718 
e330h: EXE_PRINT_STMT_TEST - <   712>    681    689    695 
e241h: EXE_RELATION     - <   542>    733 
e2b5h: EXE_RELATION_DONE - <   610>    558 
e299h: EXE_RELATION_EQ  - <   594>    556 
e27bh: EXE_RELATION_GT  - <   577>    554 
e24ah: EXE_RELATION_LOOP - <   549>    572    575    589    592    605    608 
e25dh: EXE_RELATION_LT  - <   560>    552 
e2afh: EXE_REL_NE       - <   606>    603 
e293h: EXE_REL_NGT      - <   590>    587 
e275h: EXE_REL_NLT      - <   573>    570 
e3adh: EXE_RETURN_STMT  - <   805>   1154 
e57bh: EXE_RUN          - <  1221>   1229 
e584h: EXE_RUN_CONT     - <  1227>   1224 
e5a1h: EXE_SET_VARIABLE - <  1261>    771    855    929    999   1026 
e4ach: EXE_STMT         - <  1081>    742   1212 
e4b6h: EXE_STMT1        - <  1089>   1085 
e529h: EXE_STMT10       - <  1163>   1159 
e532h: EXE_STMT11       - <  1169>   1165 
e53bh: EXE_STMT12       - <  1175>   1171 
e549h: EXE_STMT13       - <  1183>   1177 
e552h: EXE_STMT14       - <  1189>   1185 
e55bh: EXE_STMT15       - <  1195>   1191 
e4bfh: EXE_STMT2        - <  1095>   1091 
e4c8h: EXE_STMT3        - <  1101>   1097 
e4d1h: EXE_STMT4        - <  1107>   1103 
e4dah: EXE_STMT5        - <  1113>   1109 
e4e3h: EXE_STMT5A       - <  1119>   1115 
e4f4h: EXE_STMT5B       - <  1129>   1121 
e505h: EXE_STMT6        - <  1139>   1131 
e50eh: EXE_STMT7        - <  1145>   1141 
e517h: EXE_STMT8        - <  1151>   1147 
e520h: EXE_STMT9        - <  1157>   1153 
e0d4h: EXE_STMT_MSG     - <   252> 
e169h: EXE_TERM         - <   388>    464    482    494    506    518 
e185h: EXE_TERM_ASTR    - <   405>    398 
e1c7h: EXE_TERM_DONE    - <   447>    403 
e172h: EXE_TERM_LOOP    - <   395>    417    431    445 
e1b1h: EXE_TERM_MOD     - <   433>    402 
e19bh: EXE_TERM_SLASH   - <   419>    400 
e11bh: EXE_VARFACTOR    - <   323>    379 
e5f2h: EXE_VARIABLE_NUM - <  1372>    324    762    841    907    986   1023 
eb61h: FOUND            - <  2160>   2143 
ef7ch: GET_INPUTLINE    - <  3132>    991   3122   3137 
ee8bh: MODLOOP          - <  2857>   2865 
ee9eh: MOD_DONE         - <  2866>   2860 
eb6bh: NOKEYOWRDSFOUND  - <  2168>   2140 
ea83h: PARSECHAR1       - <  1983>   1980 
ead3h: PARSECHAR10      - <  2033>   2030 
eadbh: PARSECHAR11      - <  2038>   2035 
eae3h: PARSECHAR12      - <  2043>   2040 
eaebh: PARSECHAR13      - <  2048>   2045 
eaf3h: PARSECHAR14      - <  2053>   2050 
eafbh: PARSECHAR15      - <  2058>   2055 
ea8bh: PARSECHAR2       - <  1988>   1985 
ea93h: PARSECHAR3       - <  1993>   1990 
ea9bh: PARSECHAR4       - <  1998>   1995 
eaa3h: PARSECHAR5       - <  2003>   2000 
eaabh: PARSECHAR6       - <  2008>   2005 
eab3h: PARSECHAR7       - <  2013>   2010 
eabbh: PARSECHAR7A      - <  2018>   2015 
eac3h: PARSECHAR8       - <  2023>   2020 
eacbh: PARSECHAR9       - <  2028>   2025 
eedch: PARSE_ADD16      - <  2948>    488   2328   2741   2975 
ed8bh: PARSE_ADDLINE    - <  2633> 
ed9dh: PARSE_ADDLINE1   - <  2643>   2639 
eda3h: PARSE_ADDLINELOOP - <  2647>   2675 
edcch: PARSE_ADDROOM    - <  2678>   2651   2660 
ec47h: PARSE_AF         - <  2373>   2370 
eefch: PARSE_AND16      - <  2993>    512 
e0deh: PARSE_CMD_ERROR  - <   253>   2507 
ecedh: PARSE_CODE       - <  2514>   2472 
ef3fh: PARSE_COMPARE    - <  3080>    568    585    602    870   1418   2658 
         2831   2858 
ef4eh: PARSE_COMPAREH   - <  3092>   3084 
ef54h: PARSE_COMPAREH1  - <  3096>   3093 
ef57h: PARSE_COMPAREL   - <  3100>   3088 
ef5dh: PARSE_COMPAREL1  - <  3104>   3101 
ee61h: PARSE_DIV16      - <  2818>    226    428 
ec5eh: PARSE_FINISHED   - <  2406>   2232   2264 
ec79h: PARSE_FINISHED_YES - <  2423>   2410   2416   2419 
ec3dh: PARSE_GETNIBBLE  - <  2366> 
eafeh: PARSE_GET_NEXT_TOK - <  2067>   2216   2251   2473 
eb03h: PARSE_GNT1       - <  2075> 
eb0ah: PARSE_GNT1LOOP   - <  2089>   2093 
eb04h: PARSE_GNT1_CHKPOS - <  2085> 
eb1ah: PARSE_GNT2       - <  2105>   2087 
eb28h: PARSE_GNT3       - <  2116>   2108 
eb2eh: PARSE_GNT3LOOP   - <  2120>   2124 
eb3eh: PARSE_GNT4       - <  2131>   2119 
eb81h: PARSE_GNT_ERROR  - <  2184>   2175   2177 
eb86h: PARSE_INIT       - <  2208>   2460 
ef6ch: PARSE_INPUTLOOP  - <  3121> 
0300h: PARSE_INPUT_LINE - <   122>    989    993   3119   3124   3130 
edf1h: PARSE_INSERTLOOP - <  2706>   2712 
ef2fh: PARSE_ISDIGIT    - <  3057>   2086   2092   2351   2469 
ef3ch: PARSE_ISDIGIT_NO - <  3066>   3059   3061 
ef12h: PARSE_ISHEX      - <  3030> 
ef1fh: PARSE_ISHEX_AF   - <  3037>   3034 
ef2ch: PARSE_ISHEX_NO   - <  3047>   3032   3039   3041 
ef29h: PARSE_ISHEX_YES  - <  3043>   3035 
e9e3h: PARSE_KEYWORDS   - <  1937>   2136 
ec8dh: PARSE_LINE       - <  2459>    199   3125 
ed2ch: PARSE_LINE1      - <  2558>   2544 
ed48h: PARSE_LINE1DONE  - <  2575>   2567 
ed35h: PARSE_LINE1LOOP  - <  2564>   2574 
ed5dh: PARSE_LINE2      - <  2587>   2560 
ed76h: PARSE_LINE_DONE  - <  2603>   2535 
ecdeh: PARSE_LINE_ERROR - <  2506>   2499 
ecbah: PARSE_LINE_EXIT  - <  2483>   2477 
ecach: PARSE_LINE_LIST  - <  2475> 
ecffh: PARSE_LINE_LOOP  - <  2531>   2556   2585   2589   2601 
ecd0h: PARSE_LINE_NEW   - <  2497>   2492 
ecc5h: PARSE_LINE_RUN   - <  2490>   2485 
ee82h: PARSE_MOD16      - <  2849>    233    442 
eea1h: PARSE_MUL16      - <  2877>    414   2323 
eeceh: PARSE_MULADD16   - <  2928>   2890 
eea9h: PARSE_MULLOOP    - <  2884>   2924 
eeb2h: PARSE_MULSKIP    - <  2892>   2889 
eef4h: PARSE_NEG        - <  2980>    356 
eba4h: PARSE_NEXT       - <  2231>   2280   2532 
ebabh: PARSE_NEXT1      - <  2236>   2233 
ebb3h: PARSE_NEXT1LOOP  - <  2241>   2246 
ebbdh: PARSE_NEXT2      - <  2249>   2244 
ebceh: PARSE_NEXT3      - <  2263>   2255   2270 
ebdeh: PARSE_NEXTDONE   - <  2272>   2265   2268 
ebe5h: PARSE_NEXTDONE2  - <  2278>   2275 
ebeeh: PARSE_NUM        - <  2294>    997   2519   2545 
ec2eh: PARSE_NUM_CHAR   - <  2349>   2311   2315 
ec38h: PARSE_NUM_CHAR1  - <  2355>   2352 
ec22h: PARSE_NUM_DONE   - <  2333>   2319 
ec25h: PARSE_NUM_DONE1  - <  2340> 
ec04h: PARSE_NUM_LOOP   - <  2314>   2331 
ec00h: PARSE_NUM_POS    - <  2310> 
ef07h: PARSE_OR16       - <  3009>    524 
ec8dh: PARSE_POS        - <  2446> 
edfdh: PARSE_REMOVELINE - <  2719>   2635 
ee09h: PARSE_REMOVELINE1 - <  2726>   2722   2724 
ee1ah: PARSE_REMOVELOOP - <  2742>   2751 
eddbh: PARSE_ROOMLOOP   - <  2687>   2696   2701 
ea73h: PARSE_SINGLECHAR - <  1972>   2107 
ec4fh: PARSE_STRING     - <  2383> 
ec58h: PARSE_STRING1    - <  2389>   2386 
eeeah: PARSE_SUB16      - <  2967>    500   1423   2682   2835   2862 
eba0h: PARSE_TOKEN      - <  2224>   2384   2533 
0400h: PARSE_TOKEN_BUFFER - <   126>   2212   2464   2611   2704 
ec7eh: PARSE_VARIABLE_NUM - <  2431>   2590 
eb4ah: PCMPLOOP         - <  2141>   2149 
ef94h: SETBREAK         - <  3146>   3144 
ffcch: SHOWADDR         - <     7>   1504   1925 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    304   1196 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9> 
ffdch: SHOWREGS         - <    11>    227    234   1201 
eb58h: SKIPLOOP         - <  2153>   2156 
eb58h: SKIPTOEND        - <  2151>   2146 
ffc0h: STRINGOUT        - <     4>    229    236    241    679    722   1200 
         1503   1538   1582   1590   1598   1606   1614   1622   1630   1638 
         1646   1654   1662   1670   1678   1686   1694   1702   1710   1718 
         1876   1902   1910   1918   1924   2508   2510   3117   3139 
ef8dh: TEST_INPUT       - <  3142>   1237 
0019h: TOKENIZER_AND    - <    45>    473   1763   2006 
001bh: TOKENIZER_ASTR   - <    47>    397   1783   2016 
0010h: TOKENIZER_CALL   - <    36>   1667   1949 
0015h: TOKENIZER_COMMA  - <    41>    684   1021   1055   1723   1986 
0024h: TOKENIZER_CR     - <    56>    641    714    748    772    785    891 
          948   1003   1029   1065   1124   1134   1873   1981   2534   2604 
0009h: TOKENIZER_ELSE   - <    29>   1611   1942 
0014h: TOKENIZER_END    - <    40>   1170   1699   1953 
0001h: TOKENIZER_EOF    - <    21>    173    716    750   1243   1509   2415 
         2418   2501   2650   2771 
0023h: TOKENIZER_EQ     - <    55>    555    767    922   1863   2056 
0000h: TOKENIZER_ERROR  - <    20>   1500   1963   2186 
0029h: TOKENIZER_EXIT   - <    61>   1957   2484 
000ah: TOKENIZER_FOR    - <    30>    902   1108   1619   1943 
000eh: TOKENIZER_GOSUB  - <    34>    780   1146   1651   1947 
000dh: TOKENIZER_GOTO   - <    33>    656   1114   1643   1946 
0022h: TOKENIZER_GT     - <    54>    553   1853   2051 
001eh: TOKENIZER_HASH   - <    50>   1813   2036 
0007h: TOKENIZER_IF     - <    27>    730   1090   1595   1940 
002bh: TOKENIZER_INP    - <    63>    968   1184   1907   1959 
002ah: TOKENIZER_INPUT  - <    62>    984   1140   1899   1958 
001fh: TOKENIZER_LEFTP  - <    51>    370    702   1823   2031 
0005h: TOKENIZER_LET    - <    25>   1176   1178   1579   1938 
0025h: TOKENIZER_LINENUM - <    57>   1210   1326   1881   2515 
0026h: TOKENIZER_LIST   - <    58>   1954   2476 
0021h: TOKENIZER_LT     - <    53>    551   1843   2046 
0018h: TOKENIZER_MINUS  - <    44>    352    471   1753   2001 
001dh: TOKENIZER_MOD    - <    49>    401   1803   2026 
0028h: TOKENIZER_NEW    - <    60>   1956   2498 
000ch: TOKENIZER_NEXT   - <    32>    836   1096   1635   1945 
0002h: TOKENIZER_NUMBER - <    22>    362    700    783   1310   1515   2095 
         2543 
002eh: TOKENIZER_OFF    - <    66>   1130   1132   1715   1962 
002dh: TOKENIZER_ON     - <    65>   1120   1122   1707   1961 
001ah: TOKENIZER_OR     - <    46>    475   1773   2011 
002ch: TOKENIZER_OUTP   - <    64>    976   1190   1915   1960 
0012h: TOKENIZER_PEEK   - <    38>   1012   1158   1683   1951 
0017h: TOKENIZER_PLUS   - <    43>    343    469   1743   1996 
0013h: TOKENIZER_POKE   - <    39>   1049   1164   1691   1952 
0006h: TOKENIZER_PRINT  - <    26>    666   1102   1587   1939 
0011h: TOKENIZER_REM    - <    37>   1675   1950   2254 
000fh: TOKENIZER_RETURN - <    35>    806   1152   1659   1948 
0020h: TOKENIZER_RIGHTP - <    52>    374   1833   2041 
0027h: TOKENIZER_RUN    - <    59>   1955   2491 
0016h: TOKENIZER_SEMICOLON - <    42>    692   1733   1991 
001ch: TOKENIZER_SLASH  - <    48>    399   1793   2021 
0003h: TOKENIZER_STRING - <    23>    671   1336   1534   2127   2385   2559 
0008h: TOKENIZER_THEN   - <    28>    736   1603   1941 
000bh: TOKENIZER_TO     - <    31>    933   1627   1944 
0004h: TOKENIZER_VARIABLE - <    24>    330    698    765    846    920   1001 
         1027   1084   1318   1556   2180   2588 
e6bah: TOKL_CALL        - <  1483>   1669 
e67ah: TOKL_ELSE        - <  1472>   1613 
e6b5h: TOKL_END         - <  1482>   1701 
e6dbh: TOKL_ERROR       - <  1489>   1502   1923 
e680h: TOKL_FOR         - <  1473>   1621 
e695h: TOKL_GOSUB       - <  1477>   1653 
e68fh: TOKL_GOTO        - <  1476>   1645 
e670h: TOKL_IF          - <  1470>   1597 
e6c7h: TOKL_INP         - <  1485>   1909 
e6c0h: TOKL_INPUT       - <  1484>   1901 
e664h: TOKL_LET         - <  1468>   1581 
e689h: TOKL_NEXT        - <  1475>   1637 
e6d6h: TOKL_OFF         - <  1488>   1717 
e6d2h: TOKL_ON          - <  1487>   1709 
e6cch: TOKL_OUTP        - <  1486>   1917 
e6a9h: TOKL_PEEK        - <  1480>   1685 
e6afh: TOKL_POKE        - <  1481>   1693 
e669h: TOKL_PRINT       - <  1469>   1589 
e6a4h: TOKL_REM         - <  1479>   1677 
e69ch: TOKL_RETURN      - <  1478>   1661 
e674h: TOKL_THEN        - <  1471>   1605 
e685h: TOKL_TO          - <  1474>   1629 
eb43h: TOP              - <  2137>   2158 
ffd0h: TOUPPER          - <     8>   2374 
ffe8h: UARTIN           - <    14>   3133 
ffc8h: UARTOUT          - <     6>    306   1198   1527   1540   1564   1575 
         1726   1728   1736   1738   1746   1748   1756   1758   1766   1768 
         1776   1778   1786   1788   1796   1798   1806   1808   1816   1818 
         1826   1828   1836   1838   1846   1848   1856   1858   1866   1868 
         1895 
efffh: ZZZZ             - <  3165> 

3166 Lines assembled
0 Errors
377 Labels
Object Code:3946 bytes

