RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             
   12 0000:             ;
   13 0000:             ; Basic interpreter tokens
   14 0000:             ;
   15 0000:             TOKENIZER_ERROR: EQU 00
   16 0000:             TOKENIZER_EOF: EQU 01
   17 0000:             TOKENIZER_NUMBER: EQU 02
   18 0000:             TOKENIZER_STRING: EQU 03
   19 0000:             TOKENIZER_VARIABLE: EQU 04
   20 0000:             TOKENIZER_LET: EQU 05
   21 0000:             TOKENIZER_PRINT: EQU 06
   22 0000:             TOKENIZER_IF: EQU 07
   23 0000:             TOKENIZER_THEN: EQU 08
   24 0000:             TOKENIZER_ELSE: EQU 09
   25 0000:             TOKENIZER_FOR: EQU 10
   26 0000:             TOKENIZER_TO: EQU 11
   27 0000:             TOKENIZER_NEXT: EQU 12
   28 0000:             TOKENIZER_GOTO: EQU 13
   29 0000:             TOKENIZER_GOSUB: EQU 14
   30 0000:             TOKENIZER_RETURN: EQU 15
   31 0000:             TOKENIZER_CALL: EQU 16
   32 0000:             TOKENIZER_REM: EQU 17
   33 0000:             TOKENIZER_PEEK: EQU 18
   34 0000:             TOKENIZER_POKE: EQU 19
   35 0000:             TOKENIZER_END: EQU 20
   36 0000:             TOKENIZER_COMMA: EQU 21
   37 0000:             TOKENIZER_SEMICOLON: EQU 22
   38 0000:             TOKENIZER_PLUS: EQU 23
   39 0000:             TOKENIZER_MINUS: EQU 24
   40 0000:             TOKENIZER_AND: EQU 25
   41 0000:             TOKENIZER_OR: EQU 26
   42 0000:             TOKENIZER_ASTR: EQU 27
   43 0000:             TOKENIZER_SLASH: EQU 28
   44 0000:             TOKENIZER_MOD: EQU 29
   45 0000:             TOKENIZER_HASH: EQU 30
   46 0000:             TOKENIZER_LEFTP: EQU 31
   47 0000:             TOKENIZER_RIGHTP: EQU 32
   48 0000:             TOKENIZER_LT: EQU 33
   49 0000:             TOKENIZER_GT: EQU 34
   50 0000:             TOKENIZER_EQ: EQU 35
   51 0000:             TOKENIZER_CR: EQU 36
   52 0000:             TOKENIZER_LINENUM: EQU 37
   53 0000:             
   54 0000:             ;
   55 0000:             ; BASIC interpreter user variables area
   56 0000:             ; currently 26 1-byte variables
   57 0000:             ; for now must be 0xAA00 (256 byte) aligned
   58 0000:             ;
   59 0000:             BASIC_VARS: EQU 0100h
   60 0000:             
   61 0000:             ;
   62 0000:             ; Basic interpreter internal variables
   63 0000:             ;
   64 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   65 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   66 0000:             bas_nxtptr:       EQU 0204h ;
   67 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   68 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   69 0000:             bas_currenttoken:  EQU 020Ah ; used in parsing
   70 0000:             bas_tokenbuffer:  EQU 020Ch ;Pointer to start of token buffer
   71 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   72 0000:                                         ; this value should be + 1 end of buffer
   73 0000:                                         ; if buffer is 0x1000-0x1fff this is
   74 0000:                                         ; set to 0x2000. Used in moving buffer around
   75 0000:                                         ; in add and remove line
   76 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   77 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   78 0000:             bas_insertptr:    EQU 0214H
   79 0000:             
   80 0000:             ;
   81 0000:             ; for next statement stack ptr and stack data
   82 0000:             ;
   83 0000:             ; for next stack data
   84 0000:             ; format
   85 0000:             ;   2 bytes for variable id (only first byte used for now)
   86 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
   87 0000:             ;   2 bytes ptr to line after for instruction (format HL)
   88 0000:             ; later add step amount
   89 0000:             ;
   90 0000:             bas_forstackptr: EQU 0280h
   91 0000:             bas_forstack: EQU 0282h
   92 0000:             
   93 0000:             ;
   94 0000:             ; gosub stack ptr and data
   95 0000:             ;
   96 0000:             ; gosub STACK
   97 0000:             ; format
   98 0000:             ;   2 bytes return location ptr
   99 0000:             ;
  100 0000:             bas_gosubptr: EQU 02c0h
  101 0000:             bas_gosubstack: EQU 02c2h
  102 0000:             
  103 0000:             ;
  104 0000:             ; Basic interpreter text input line buffer
  105 0000:             ;
  106 0000:             parse_input_line: EQU 300h
  107 0000:             ;
  108 0000:             ; Basic interpreter tmp buffer to build up current token line
  109 0000:             ;
  110 0000:             parse_token_buffer: EQU 400h
  111 0000:             ;
  112 0000:             ; Basic interpreter token buffer
  113 0000:             ;
  114 0000:             bas_tok_buf_start: EQU 1000h
  115 0000:             ;
  116 0000:             ; Basic interpreter token buffer end + 1
  117 0000:             ;
  118 0000:             ;bas_tok_buf_end: EQU 2000h debug
  119 0000:             bas_tok_buf_end: EQU 1100h
  120 0000:             
  121 0000:             ;
  122 0000:             ; basic interpreter, add IO and peek/poke
  123 0000:             ;
  124 0000:             
  125 0000:             ;
  126 0000:             ; Basic Interpreter
  127 0000:             ;
  128 0000:             
  129 0000:             ;
  130 0000:             ; Entry Points
  131 0000:             ;
  132 0000:               ORG 0e000h
  133 e000:             ;
  134 e000:             ; list
  135 e000:             ;
  136 e000:             ;      mviw r7,basic_test ; hack this address should probably be passed in
  137 e000:                                      ; or a global variable
  138 e000:             
  139 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  140 e003: 04 e4 bb          JSR  basic_list
  141 e006: 05                Ret
  142 e007:             ;
  143 e007:                   ORG 0e010h
  144 e010:             ;
  145 e010:             ; run
  146 e010:             ;
  147 e010: 04 e3 da          jsr basic_run
  148 e013: 05                Ret
  149 e014:             
  150 e014:             ;
  151 e014:                   ORG 0e020h
  152 e020:             ;
  153 e020:             ; cold start
  154 e020:             ;
  155 e020:             ; Hack later pass in R7
  156 e020:             ;
  157 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  158 e023: ff 02 0c          STR R7,bas_tokenbuffer
  159 e026: 1f 11 00          mviw r7,bas_tok_buf_end
  160 e029: ff 02 0e          str r7,bas_bufferendhi
  161 e02c: 05                Ret
  162 e02d:             ;
  163 e02d:                   ORG 0e030h
  164 e030:             ;
  165 e030:             ; tests - called from monitor
  166 e030:             ;
  167 e030: 04 ff d4          jsr showr7
  168 e033: 1f 00 0a          mviw r7,0010
  169 e036: 04 eb 38          jsr basu_find
  170 e039: 04 ff d4          jsr showr7
  171 e03c: 1f 00 0a          mviw r7,0010
  172 e03f: 04 eb 10          jsr parse_removeline
  173 e042: 05                ret
  174 e043:             ;
  175 e043:                   org 0e050h
  176 e050:             ;
  177 e050:             ; parse line
  178 e050:             ;
  179 e050: 04 ea 04          jsr parse_line
  180 e053: 05                ret
  181 e054:             ;
  182 e054:                   ORG 0e060h
  183 e060:             ;
  184 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  185 e063: 1e ee 00          mviw R6,BASIC_TEST
  186 e066: 1d 04 00          mviw R5,0400h
  187 e069:             bas_copyloop:
  188 e069: 46                ldavr R6
  189 e06a: 4f                stavr r7
  190 e06b: 56                incr r6
  191 e06c: 57                incr r7
  192 e06d: 5d                decr r5
  193 e06e: 2d                mvrha r5
  194 e06f: a2 e0 69          brnz bas_copyloop
  195 e072: 25                mvrla r5
  196 e073: a2 e0 69          brnz bas_copyloop
  197 e076: 05                ret
  198 e077:             
  199 e077:             ;
  200 e077:             ; copy test code into main buffer
  201 e077:             ;
  202 e077:             ; Hack later pass in R7
  203 e077:             ;
  204 e077:             ;      MVIW R7,basic_test
  205 e077:             ;      STR R7,bas_tokenbuffer
  206 e077:             ;      Ret
  207 e077:             
  208 e077:             ;
  209 e077:             ; basic interpreter messages
  210 e077:             ;
  211 e077: 55 4e 45 58 
            50 45 43 54 
            45 44 20 54 
            4f 4b 45 4e 
            00 0a 0d    bas_msg1: db "unexpected token",0,0ah,0dh
  212 e08a: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  213 e09b: 42 41 53 49 
            43 20 49 4e 
            53 20 4e 4f 
            54 20 46 4f 
            55 4e 44 20 
            0a 0d       bas_msg3: db "Basic ins not found ",0ah,0dh
  214 e0b1: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  215 e0bb:             ;
  216 e0bb:             ; Basic interpreter - execution engine
  217 e0bb:             ; Register Usage
  218 e0bb:             ; R0 - Program Counter
  219 e0bb:             ; R1 - Stack Pointer
  220 e0bb:             ; R2 - Direct addressing mode
  221 e0bb:             ; R3 - Basic Interpreter Token Buffer ptr
  222 e0bb:             ; R4 - working register
  223 e0bb:             ; R5 - working register
  224 e0bb:             ; R6 - Working register
  225 e0bb:             ; R7 - parameter passing & return value
  226 e0bb:             ;
  227 e0bb:             exe:
  228 e0bb:             
  229 e0bb:             ;
  230 e0bb:             ; void ubasic_init()
  231 e0bb:             ;
  232 e0bb:             ; Setup basic interpreter execution engine
  233 e0bb:             ;
  234 e0bb:             ; destorys R4 and accumulator
  235 e0bb:             ; ?? Should these pointers be zero based or actual address in memory
  236 e0bb:             ;
  237 e0bb:             exe_init:
  238 e0bb: 1d 02 c2        MVIW R5,bas_gosubstack
  239 e0be:             ;    movrr r6,r9
  240 e0be: 1c 02 82        MVIW R4,bas_forstack
  241 e0c1:             ;    movrr r6,r8
  242 e0c1: 1e 02 00        MVIW R6,bas_run_ended
  243 e0c4: 0e 00           LDAI 0
  244 e0c6: 4e              STAVR R6
  245 e0c7:             ;
  246 e0c7:             ; initialize tokenbufferptr to start of tokenBuffer (actual memory address)
  247 e0c7:             ;
  248 e0c7:             ;   tok_init:
  249 e0c7: f3 02 0c        LDR R3,bas_tokenbuffer
  250 e0ca: 05              RET
  251 e0cb:             
  252 e0cb:             ;
  253 e0cb:             ; void accept(int)
  254 e0cb:             ;
  255 e0cb:             ; compare accumulator with current token then advance to next token in buffer
  256 e0cb:             ; assume accumulator destroyed
  257 e0cb:             ;
  258 e0cb:             exe_accept:
  259 e0cb: 09              push
  260 e0cc:             ;
  261 e0cc:             ; get current token into accumulator
  262 e0cc:             ;
  263 e0cc: 43              LDAVR R3
  264 e0cd: 0b              MVAT
  265 e0ce: 0a              POP
  266 e0cf: a8 e0 d8        BREQ exe_accept_done
  267 e0d2: 1f e0 77        mviw R7,bas_msg1
  268 e0d5: 04 e4 12        JSR bas_error
  269 e0d8:             exe_accept_done:
  270 e0d8: 04 e4 13        jsr exe_next_token
  271 e0db: 05              RET
  272 e0dc:             
  273 e0dc:             ;
  274 e0dc:             ; int varfactor()
  275 e0dc:             ;
  276 e0dc:             ; get variable id pointed to by exe_variable_num in token stream
  277 e0dc:             ; (this is not a value but a variable id)
  278 e0dc:             ; value returned by exe_get_variable in r7
  279 e0dc:             ;
  280 e0dc:             ; return value in R7
  281 e0dc:             ;
  282 e0dc:             exe_varfactor:
  283 e0dc:             ; get variable number id (one byte for now a-z) into accumulator
  284 e0dc:             ;
  285 e0dc: 04 e4 4c        jsr exe_variable_num
  286 e0df:             ;
  287 e0df:             ; variable id in accumulator, return in r7
  288 e0df:             ;
  289 e0df: 04 e4 08        jsr exe_get_variable
  290 e0e2: 0e 04           LDAI TOKENIZER_VARIABLE
  291 e0e4: 04 e0 cb        JSR exe_accept
  292 e0e7: 05              RET
  293 e0e8:             
  294 e0e8:             ;
  295 e0e8:             ; int factor()
  296 e0e8:             ; return value in R7
  297 e0e8:             ;
  298 e0e8:             exe_factor:
  299 e0e8:             ;
  300 e0e8:             ; get current token into accumulator
  301 e0e8:             ;
  302 e0e8: 43              LDAVR R3
  303 e0e9:             ;
  304 e0e9: 0d 02           LDTI TOKENIZER_NUMBER
  305 e0eb: aa e0 f6        BRNEQ exe_factor1
  306 e0ee: 04 e4 43        JSR exe_num
  307 e0f1: 0c              MVTA
  308 e0f2: 04 e0 cb        JSR exe_accept
  309 e0f5: 05              RET
  310 e0f6:             
  311 e0f6:             exe_factor1:
  312 e0f6: 0d 1f           LDTI TOKENIZER_LEFTP
  313 e0f8: aa e1 07        BRNEQ exe_factor2
  314 e0fb: 04 e0 cb        JSR exe_accept
  315 e0fe: 04 e1 4f        JSR exe_expr
  316 e101: 0e 20           LDAI TOKENIZER_RIGHTP
  317 e103: 04 e0 cb        JSR exe_accept
  318 e106: 05              RET
  319 e107:             
  320 e107:             exe_factor2:
  321 e107: 04 e0 dc        jsr exe_varfactor
  322 e10a: 05              ret
  323 e10b:             
  324 e10b:             ;
  325 e10b:             ; int term()
  326 e10b:             ; R5 = F1
  327 e10b:             ; R6 = F2
  328 e10b:             ; R7 = return value
  329 e10b:             ;
  330 e10b:             exe_term:
  331 e10b: 07 05           pushr r5
  332 e10d: 07 06           pushr r6
  333 e10f:             
  334 e10f: 04 e0 e8        jsr exe_factor
  335 e112: 0f 57           MOVRR r7,r5
  336 e114:             
  337 e114:             exe_term_loop:
  338 e114: 43              LDAVR R3
  339 e115: 0d 1b           ldti TOKENIZER_ASTR
  340 e117: a8 e1 27        BREQ exe_term_astr
  341 e11a: 0d 1c           LDTI TOKENIZER_SLASH
  342 e11c: a8 e1 32        breq exe_term_slash
  343 e11f: 0d 1d           ldti TOKENIZER_MOD
  344 e121: a8 e1 3d        breq exe_term_mod
  345 e124: a0 e1 48        br exe_term_done
  346 e127:             
  347 e127:             exe_term_astr:
  348 e127: 04 e4 13        jsr exe_next_token
  349 e12a: 04 e0 e8        jsr exe_factor
  350 e12d: 0f 67           movrr r7,r6
  351 e12f:             ;
  352 e12f:             ; do mulitply f1 = f1 * f2
  353 e12f:             ;
  354 e12f: a0 e1 14        BR exe_term_loop
  355 e132:             
  356 e132:             exe_term_slash:
  357 e132: 04 e4 13        jsr exe_next_token
  358 e135: 04 e0 e8        jsr exe_factor
  359 e138: 0f 67           movrr r7,r6
  360 e13a:             ;
  361 e13a:             ; do divide f1 = f1 / f2
  362 e13a:             ;
  363 e13a: a0 e1 14        BR exe_term_loop
  364 e13d:             
  365 e13d:             exe_term_mod:
  366 e13d: 04 e4 13        jsr exe_next_token
  367 e140: 04 e0 e8        jsr exe_factor
  368 e143: 0f 67           movrr r7,r6
  369 e145:             ;
  370 e145:             ; f1 = f1 % f2
  371 e145:             ;
  372 e145: a0 e1 14        BR exe_term_loop
  373 e148:             
  374 e148:             exe_term_done:
  375 e148: 0f 75           MOVRR r5,r7
  376 e14a: 08 60           popr r6
  377 e14c: 08 50           popr r5
  378 e14e: 05              ret
  379 e14f:             ;
  380 e14f:             ; static VARIABLE_TYPE expr()
  381 e14f:             ;
  382 e14f:             ; R5 = t1
  383 e14f:             ; R6 = t2
  384 e14f:             ; R7 = return value
  385 e14f:             ;
  386 e14f:             exe_expr:
  387 e14f: 07 05           pushr r5
  388 e151: 07 06           pushr r6
  389 e153:             
  390 e153: 04 e1 0b        jsr exe_term
  391 e156: 0f 57           MOVRR r7,r5
  392 e158:             
  393 e158:             exe_expr_loop:
  394 e158: 43              LDAVR R3
  395 e159: 0d 17           ldtI TOKENIZER_PLUS
  396 e15b: a8 e1 70        BREQ exe_expr_plus
  397 e15e: 0d 18           ldtI TOKENIZER_MINUS
  398 e160: a8 e1 7b        breq exe_expr_minus
  399 e163: 0d 19           ldtI TOKENIZER_AND
  400 e165: a8 e1 86        breq exe_expr_and
  401 e168: 0d 1a           ldti TOKENIZER_OR
  402 e16a: a8 e1 91        breq exe_expr_or
  403 e16d:             
  404 e16d: a0 e1 9c        br exe_expr_done
  405 e170:             
  406 e170:             exe_expr_plus:
  407 e170: 04 e4 13        jsr exe_next_token
  408 e173: 04 e1 0b        jsr exe_term
  409 e176: 0f 67           movrr r7,r6
  410 e178:             ;
  411 e178:             ; t1 = t1 + t2
  412 e178:             ;
  413 e178: a0 e1 58        BR exe_expr_loop
  414 e17b:             
  415 e17b:             exe_expr_minus:
  416 e17b: 04 e4 13        jsr exe_next_token
  417 e17e: 04 e1 0b        jsr exe_term
  418 e181: 0f 67           movrr r7,r6
  419 e183:             ;
  420 e183:             ; t1 = t1 - t2
  421 e183:             ;
  422 e183: a0 e1 58        BR exe_expr_loop
  423 e186:             
  424 e186:             exe_expr_and:
  425 e186: 04 e4 13        jsr exe_next_token
  426 e189: 04 e1 0b        jsr exe_term
  427 e18c: 0f 67           movrr r7,r6
  428 e18e:             ;
  429 e18e:             ; t1 = t1 & t2
  430 e18e:             ;
  431 e18e: a0 e1 58        BR exe_expr_loop
  432 e191:             
  433 e191:             exe_expr_or:
  434 e191: 04 e4 13        jsr exe_next_token
  435 e194: 04 e1 0b        jsr exe_term
  436 e197: 0f 67           movrr r7,r6
  437 e199:             ;
  438 e199:             ; t1 = t1 | t2
  439 e199:             ;
  440 e199: a0 e1 58        BR exe_expr_loop
  441 e19c:             
  442 e19c:             exe_expr_done:
  443 e19c: 0f 75           MOVRR r5,r7
  444 e19e: 08 60           popr r6
  445 e1a0: 08 50           popr r5
  446 e1a2: 05              ret
  447 e1a3:             ;
  448 e1a3:             ; int relation ()
  449 e1a3:             ;
  450 e1a3:             ; R5 = r1
  451 e1a3:             ; R6 = r2
  452 e1a3:             ; R7 = return value
  453 e1a3:             ;
  454 e1a3:             
  455 e1a3:             exe_relation:
  456 e1a3: 07 05           pushr r5
  457 e1a5: 07 06           pushr r6
  458 e1a7:             
  459 e1a7: 04 e1 4f        jsr exe_expr
  460 e1aa: 0f 57           MOVRR r7,r5
  461 e1ac:             
  462 e1ac:             exe_relation_loop:
  463 e1ac: 43              LDAVR R3
  464 e1ad: 0d 21           LDTI TOKENIZER_LT
  465 e1af: a8 e1 bf        BREQ exe_relation_lt
  466 e1b2: 0d 22           ldti TOKENIZER_GT
  467 e1b4: a8 e1 ca        breq exe_relation_gt
  468 e1b7: 0d 23           ldti TOKENIZER_EQ
  469 e1b9: a8 e1 d5        breq exe_relation_eq
  470 e1bc:             
  471 e1bc: a0 e1 e0        br exe_relation_done
  472 e1bf:             
  473 e1bf:             exe_relation_lt:
  474 e1bf: 04 e4 13        jsr exe_next_token
  475 e1c2: 04 e1 4f        jsr exe_expr
  476 e1c5: 0f 67           movrr r7,r6
  477 e1c7:             ;
  478 e1c7:             ; r1 = r1 < r2
  479 e1c7:             ;
  480 e1c7: a0 e1 ac        BR exe_relation_loop
  481 e1ca:             
  482 e1ca:             exe_relation_gt:
  483 e1ca: 04 e4 13        jsr exe_next_token
  484 e1cd: 04 e1 4f        jsr exe_expr
  485 e1d0: 0f 67           movrr r7,r6
  486 e1d2:             ;
  487 e1d2:             ; r1 = r1 > r2
  488 e1d2:             ;
  489 e1d2:             
  490 e1d2: a0 e1 ac        BR exe_relation_loop
  491 e1d5:             
  492 e1d5:             exe_relation_eq:
  493 e1d5: 04 e4 13        jsr exe_next_token
  494 e1d8: 04 e1 4f        jsr exe_expr
  495 e1db: 0f 67           movrr r7,r6
  496 e1dd:             ;
  497 e1dd:             ; r1 = r1 == r2
  498 e1dd:             ;
  499 e1dd: a0 e1 ac        BR exe_relation_loop
  500 e1e0:             
  501 e1e0:             exe_relation_done:
  502 e1e0: 0f 75           MOVRR r5,r7
  503 e1e2: 08 60           popr r6
  504 e1e4: 08 50           popr r5
  505 e1e6: 05              ret
  506 e1e7:             
  507 e1e7:             ;
  508 e1e7:             ; char * index_find (int linenum)
  509 e1e7:             ;
  510 e1e7:             ; call with line in R7
  511 e1e7:             ; return with val in R7 - tokenbuffer ptr
  512 e1e7:             ;
  513 e1e7:             exe_index_find:
  514 e1e7: 04 eb 38        JSR basu_find
  515 e1ea: 05              RET
  516 e1eb:             ;
  517 e1eb:             ; void jump_linenum(linenum)
  518 e1eb:             ;
  519 e1eb:             ; Linenum in R7
  520 e1eb:             ;
  521 e1eb:             exe_jump_line:
  522 e1eb: 04 e1 e7        JSR exe_index_find
  523 e1ee: 2f              MVRHA R7
  524 e1ef: a2 e2 02        BRNZ exe_jump_line1
  525 e1f2: 27              MVRLA R7
  526 e1f3: a2 e2 02        BRNZ exe_jump_line1
  527 e1f6:             ;
  528 e1f6:             ; returned 0 line not found
  529 e1f6:             ;
  530 e1f6: 0e 24           LDAI TOKENIZER_CR
  531 e1f8: 04 e0 cb        JSR exe_accept
  532 e1fb: 1e 02 00        MVIW r6,bas_run_ended
  533 e1fe: 0e 01           LDAI 1
  534 e200: 4e              STAVR R6
  535 e201: 05              ret
  536 e202:             exe_jump_line1:
  537 e202:             ;   jsr tok_goto
  538 e202: 0f 37           movrr r7,r3
  539 e204: 05              ret
  540 e205:             ;
  541 e205:             ; void goto_statement()
  542 e205:             ;
  543 e205:             exe_goto_stmt:
  544 e205: 0e 0d           LDAI TOKENIZER_GOTO
  545 e207: 04 e0 cb        JSR exe_accept
  546 e20a: 04 e1 4f        JSR exe_expr
  547 e20d: 04 e1 eb        JSR exe_jump_line
  548 e210: 05              RET
  549 e211:             ;
  550 e211:             ; void print_statment()
  551 e211:             ;
  552 e211:             exe_print_stmt:
  553 e211: 0e 06           LDAI TOKENIZER_PRINT
  554 e213: 04 e0 cb        jsr exe_accept
  555 e216:             
  556 e216:             exe_print_stmt_loop:
  557 e216: 43              LDAVR R3
  558 e217: 0d 03           LDTI TOKENIZER_STRING
  559 e219: aa e2 28        BRNEQ exe_print_stmt1
  560 e21c:             ;
  561 e21c:             ; this should return string to print in r2
  562 e21c:             ; exe_string may not be needed tokenbufferptr is at string ?
  563 e21c:             ;
  564 e21c: 04 e4 50        jsr exe_string
  565 e21f:             ;    movrr r7,r2
  566 e21f: 04 ff c0        jsr stringout
  567 e222: 04 e4 13        jsr exe_next_token
  568 e225: a0 e2 5b        br exe_print_stmt_test
  569 e228:             
  570 e228:             exe_print_stmt1:
  571 e228:             
  572 e228: 0d 15           ldti TOKENIZER_COMMA
  573 e22a: aa e2 38        BRNEQ exe_print_stmt2
  574 e22d: 0e 20           LDAI ' '
  575 e22f: 04 ff c4        JSR charout
  576 e232: 04 e4 13        jsr exe_next_token
  577 e235: a0 e2 5b        br exe_print_stmt_test
  578 e238:             
  579 e238:             exe_print_stmt2:
  580 e238: 0d 16           ldti TOKENIZER_SEMICOLON
  581 e23a: aa e2 43        BRNEQ exe_print_stmt3
  582 e23d: 04 e4 13        jsr exe_next_token
  583 e240: a0 e2 5b        br exe_print_stmt_test
  584 e243:             
  585 e243:             exe_print_stmt3:
  586 e243: 0d 04           ldti TOKENIZER_VARIABLE
  587 e245: a8 e2 55        BREQ exe_print_stmt4
  588 e248: 0d 02           ldti TOKENIZER_NUMBER
  589 e24a: a8 e2 55        breq exe_print_stmt4
  590 e24d: 0d 1f           ldti  TOKENIZER_LEFTP
  591 e24f: a8 e2 55        breq exe_print_stmt4
  592 e252:             
  593 e252: a0 e2 69        br exe_print_stmt_done
  594 e255:             
  595 e255:             exe_print_stmt4:
  596 e255: 04 e1 4f        jsr exe_expr
  597 e258: 04 ff d4        JSR showr7
  598 e25b:             ;   br exe_print_stmt_test // falls through
  599 e25b:             
  600 e25b:             exe_print_stmt_test:
  601 e25b: 43              LDAVR R3
  602 e25c: 0d 24           LDTI TOKENIZER_CR
  603 e25e: a8 e2 69        breq exe_print_stmt_done
  604 e261: 0d 01           LDTI TOKENIZER_EOF
  605 e263: a8 e2 69        breq exe_print_stmt_done
  606 e266: a0 e2 16        br exe_print_stmt_loop
  607 e269:             
  608 e269:             exe_print_stmt_done:
  609 e269: 1f ec 0b        mviw R7,CRLF
  610 e26c: 04 ff c0        jsr stringout
  611 e26f: 04 e4 13        jsr exe_next_token
  612 e272: 05              ret
  613 e273:             
  614 e273:             ;
  615 e273:             ; void if_statement()
  616 e273:             ;
  617 e273:             exe_if_stmt:
  618 e273: 03              halt
  619 e274: 0e 07           LDAI TOKENIZER_IF
  620 e276: 04 e0 cb        JSR exe_accept
  621 e279:             
  622 e279: 04 e1 a3        JSR exe_relation
  623 e27c: 0e 08           LDAI TOKENIZER_THEN
  624 e27e: 04 e0 cb        JSR exe_accept
  625 e281: 0d 01           LDTI 1
  626 e283: aa e2 89        BRNEQ exe_if_stmt1
  627 e286: 04 e3 50        JSR exe_stmt
  628 e289:             exe_if_stmt1:
  629 e289: 04 00 0c        jsr TOKENIZER_NEXT
  630 e28c:             ;    ////////
  631 e28c:             
  632 e28c:             ;
  633 e28c:             ; void let_statement()
  634 e28c:             ;
  635 e28c:             exe_let_stmt:
  636 e28c: 04 e4 4c      jsr exe_variable_num
  637 e28f: 37            mvarl r7
  638 e290: 0f 67         movrr r7,r6
  639 e292: 0e 04         ldai TOKENIZER_VARIABLE
  640 e294: 04 e0 cb      jsr exe_accept
  641 e297: 0e 23         ldai TOKENIZER_EQ
  642 e299: 04 e0 cb      jsr exe_accept
  643 e29c: 04 e1 4f      jsr exe_expr
  644 e29f: 26            mvrla r6
  645 e2a0: 04 e4 01      JSR exe_set_variable
  646 e2a3: 0e 24         ldai TOKENIZER_CR
  647 e2a5: 04 e0 cb      jsr exe_accept
  648 e2a8: 05            ret
  649 e2a9:             
  650 e2a9:             ;
  651 e2a9:             ; void gosub_statement()
  652 e2a9:             ;
  653 e2a9:             exe_gosub_stmt:
  654 e2a9: 0e 0e           ldai TOKENIZER_GOSUB
  655 e2ab: 04 e0 cb        jsr exe_accept
  656 e2ae: 04 e4 43        jsr exe_num
  657 e2b1: 0e 02           ldai TOKENIZER_NUMBER
  658 e2b3: 04 e0 cb        jsr exe_accept
  659 e2b6: 0e 24           ldai TOKENIZER_CR
  660 e2b8: 04 e0 cb        jsr exe_accept
  661 e2bb:             ;
  662 e2bb:             ; setup to use for storage area via R4
  663 e2bb:             ;
  664 e2bb:             ;   movrr R9,R4
  665 e2bb:             ;
  666 e2bb:             ; save current token buffer ptr to gosub stack
  667 e2bb:             ;
  668 e2bb: 23             mvrla r3
  669 e2bc: 4d             stavr r5
  670 e2bd: 55             incr r5
  671 e2be: 2b             mvrha r3
  672 e2bf: 4d             stavr r5
  673 e2c0: 55             incr  r5
  674 e2c1:             ;
  675 e2c1:             ; write new gosub stack ptr location back
  676 e2c1:             ;
  677 e2c1:             ;   MOVRR R4,R9
  678 e2c1:             
  679 e2c1: 04 e1 eb       JSR exe_jump_line
  680 e2c4: 05             RET
  681 e2c5:             
  682 e2c5:             ;
  683 e2c5:             ; void return_statment()
  684 e2c5:             ;
  685 e2c5:             exe_return_stmt:
  686 e2c5: 0e 0f           ldai TOKENIZER_RETURN
  687 e2c7: 04 e0 cb        jsr exe_accept
  688 e2ca:             ;
  689 e2ca:             ; setup to use for storage area via R4
  690 e2ca:             ;
  691 e2ca:             ;   movrr R9,R4
  692 e2ca:             
  693 e2ca: 5d             decr r5
  694 e2cb: 5d             decr r5
  695 e2cc:             
  696 e2cc: 45             ldavr r5
  697 e2cd: 33             mvarl r3
  698 e2ce: 55             incr r5
  699 e2cf: 45             ldavr r5
  700 e2d0: 3b             mvarh r3
  701 e2d1:             
  702 e2d1: 5d             decr r5
  703 e2d2:             ;   movrr r4,r9
  704 e2d2:             
  705 e2d2: 05             ret
  706 e2d3:             
  707 e2d3:             ;
  708 e2d3:             ; void next_statement()
  709 e2d3:             ;
  710 e2d3:             exe_next_stmt:
  711 e2d3:             ;
  712 e2d3:             ; setup to use for storage area via R4
  713 e2d3:             ;
  714 e2d3:             ;    movrr r8,r4
  715 e2d3:             ; backup to the TO Value
  716 e2d3: 5c              decr r4
  717 e2d4: 5c              decr r4
  718 e2d5: 5c              decr r4
  719 e2d6: 5c              decr r4
  720 e2d7:             ;
  721 e2d7:             ; eat next
  722 e2d7:             ;
  723 e2d7: 0e 0c           ldai TOKENIZER_NEXT
  724 e2d9: 04 e0 cb        jsr exe_accept
  725 e2dc:             ;
  726 e2dc:             ; get variable id (in accumulator) and hold in r6 lo
  727 e2dc:             ;
  728 e2dc: 04 e4 4c        jsr exe_variable_num
  729 e2df: 36              mvarl r6
  730 e2e0:             ;
  731 e2e0:             ; eat TOKENIZER_VARIABLE id
  732 e2e0:             ;
  733 e2e0: 0e 04           ldai TOKENIZER_VARIABLE
  734 e2e2: 04 e0 cb        jsr exe_accept
  735 e2e5:             ;
  736 e2e5:             ; get variable value, inc by 1 and store
  737 e2e5:             ;
  738 e2e5: 26              mvrla r6
  739 e2e6: 04 e4 08        jsr exe_get_variable
  740 e2e9: 57              incr r7
  741 e2ea: 26              mvrla r6
  742 e2eb: 04 e4 01        jsr exe_set_variable
  743 e2ee:             ;
  744 e2ee:             ; get TO value into R6
  745 e2ee: 44              ldavr r4
  746 e2ef: 36              mvarl r6
  747 e2f0: 54              incr r4
  748 e2f1: 44              ldavr r4
  749 e2f2: 3e              mvarh r6
  750 e2f3: 54              incr r4
  751 e2f4:             ;
  752 e2f4:             ; for now only compare low byte hack
  753 e2f4:             ;
  754 e2f4: 26              mvrla r6
  755 e2f5: 0b              mvat
  756 e2f6: 27              mvrla r7
  757 e2f7: a9 e3 01        brgt exe_next_done
  758 e2fa:             ;
  759 e2fa: 44              ldavr r4
  760 e2fb: 33              mvarl r3
  761 e2fc: 54              incr r4
  762 e2fd: 44              ldavr r4
  763 e2fe: 3b              mvarh r3
  764 e2ff: 54              incr r4
  765 e300: 05              ret
  766 e301:             
  767 e301:             exe_next_done:
  768 e301: 5c            decr r4
  769 e302: 5c            decr r4
  770 e303: 5c            decr r4
  771 e304: 5c            decr r4
  772 e305: 5c            decr r4
  773 e306: 5c            decr r4
  774 e307:             ;  movrr r4,r8
  775 e307: 0e 24         ldai TOKENIZER_CR
  776 e309: 04 e0 cb      jsr exe_accept
  777 e30c: 05            ret
  778 e30d:             
  779 e30d:             ;
  780 e30d:             ; void for_statement()
  781 e30d:             ;
  782 e30d:             exe_for_stmt:
  783 e30d:             ;
  784 e30d:             ; setup to use for storage area via R4
  785 e30d:             ;
  786 e30d:             ;    movrr r8,r4
  787 e30d:             ;
  788 e30d:             ; eat FOR
  789 e30d:             ;
  790 e30d: 0e 0a         ldai TOKENIZER_FOR
  791 e30f: 04 e0 cb      jsr exe_accept
  792 e312:             ;
  793 e312:             ; get variable id (in accumulator) and hold in r6 lo
  794 e312:             ;
  795 e312: 04 e4 4c      jsr exe_variable_num
  796 e315: 36            mvarl r6
  797 e316:             ;
  798 e316:             ; store variable id in for storage hack only lo byte, hi byte 0
  799 e316:             ;
  800 e316: 4c            stavr r4
  801 e317: 54            incr r4
  802 e318: 0e 00         ldai 0
  803 e31a: 4c            stavr r4
  804 e31b: 54            incr r4
  805 e31c:             ;
  806 e31c:             ; eat variable id and = then get starting value
  807 e31c:             ;
  808 e31c: 0e 04         ldai TOKENIZER_VARIABLE
  809 e31e: 04 e0 cb      jsr exe_accept
  810 e321: 0e 23         ldai TOKENIZER_EQ
  811 e323: 04 e0 cb      jsr exe_accept
  812 e326: 04 e1 4f      jsr exe_expr
  813 e329:             ;
  814 e329:             ; set variable to starting value
  815 e329:             ;
  816 e329: 26            mvrla r6
  817 e32a: 04 e4 01      JSR exe_set_variable
  818 e32d:             ;
  819 e32d:             ; eat TO and get to value
  820 e32d:             ;
  821 e32d: 0e 0b         ldai TOKENIZER_TO
  822 e32f: 04 e0 cb      jsr exe_accept
  823 e332: 04 e1 4f      jsr exe_expr
  824 e335:             ;
  825 e335:             ; store to value in for storage area
  826 e335:             ;
  827 e335: 27            mvrla r7
  828 e336: 4c            stavr r4
  829 e337: 54            incr r4
  830 e338: 2f            mvrha r7
  831 e339: 4c            stavr r4
  832 e33a: 54            incr r4
  833 e33b:             ;
  834 e33b:             ; EAT EOL
  835 e33b:             ;
  836 e33b: 0e 24         ldai TOKENIZER_CR
  837 e33d: 04 e0 cb      jsr exe_accept
  838 e340:             ;
  839 e340:             ; store instruction after for in for storage area
  840 e340:             ;
  841 e340: 23              mvrla r3
  842 e341: 4c              stavr r4
  843 e342: 54              incr r4
  844 e343: 2b              mvrha r3
  845 e344: 4c              stavr r4
  846 e345: 54              incr r4
  847 e346:             ;
  848 e346:             ;   save for stackptr
  849 e346:             ;
  850 e346:             ;    movrr r4,r8
  851 e346:             ;
  852 e346: 05              ret
  853 e347:             ;
  854 e347:             ; void peek_statment()
  855 e347:             ;
  856 e347:             exe_peek_stmt:
  857 e347: 03            halt
  858 e348:             
  859 e348:             ;
  860 e348:             ; void poke_statement()
  861 e348:             ;
  862 e348:             exe_poke_stmt:
  863 e348: 03            halt
  864 e349:             
  865 e349:             ;
  866 e349:             ; void end_statement()
  867 e349:             ;
  868 e349:             exe_end_stmt:
  869 e349: 1e 02 00      mviw r6,bas_run_ended
  870 e34c: 0e 01         LDAI 1
  871 e34e: 4e            STAVR r6
  872 e34f: 05            ret
  873 e350:             ;
  874 e350:             ; void statment()
  875 e350:             ;
  876 e350:             exe_stmt:
  877 e350:             ;    MVIW R7,exe_stmt_msg
  878 e350:             ;    JSR stringout
  879 e350:             ;    JSR showaddr
  880 e350: 43              LDAVR R3
  881 e351:             ;    PUSH
  882 e351:             ;    JSR showbytea
  883 e351:             ;    MVIW R7,CRLF
  884 e351:             ;    JSR STRINGOUT
  885 e351:             ;    POP
  886 e351:             
  887 e351:             
  888 e351: 0d 06           LDTI TOKENIZER_PRINT
  889 e353: aa e3 5a        BRNEQ exe_stmt1
  890 e356: 04 e2 11        JSR exe_print_stmt
  891 e359: 05              ret
  892 e35a:             
  893 e35a:             exe_stmt1:
  894 e35a: 0d 07           LDTI TOKENIZER_IF
  895 e35c: aa e3 63        BRNEQ exe_stmt2
  896 e35f: 04 e2 73        JSR exe_if_stmt
  897 e362: 05              ret
  898 e363:             
  899 e363:             exe_stmt2:
  900 e363: 0d 04           LDTI TOKENIZER_VARIABLE
  901 e365: aa e3 6c        BRNEQ exe_stmt3
  902 e368: 04 e2 8c        JSR exe_let_stmt
  903 e36b: 05              ret
  904 e36c:             
  905 e36c:             exe_stmt3:
  906 e36c: 0d 0e           LDTI TOKENIZER_GOSUB
  907 e36e: aa e3 75        BRNEQ exe_stmt4
  908 e371: 04 e2 a9        JSR exe_gosub_stmt
  909 e374: 05              ret
  910 e375:             
  911 e375:             exe_stmt4:
  912 e375: 0d 0f           LDTI TOKENIZER_RETURN
  913 e377: aa e3 7e        BRNEQ exe_stmt5
  914 e37a: 04 e2 c5        JSR exe_return_stmt
  915 e37d: 05              ret
  916 e37e:             
  917 e37e:             exe_stmt5:
  918 e37e: 0d 0a           LDTI TOKENIZER_FOR
  919 e380: aa e3 87        BRNEQ exe_stmt6
  920 e383: 04 e3 0d        JSR exe_for_stmt
  921 e386: 05              ret
  922 e387:             
  923 e387:             exe_stmt6:
  924 e387: 0d 12           LDTI TOKENIZER_PEEK
  925 e389: aa e3 90        BRNEQ exe_stmt7
  926 e38c: 04 e3 47        JSR exe_peek_stmt
  927 e38f: 05              ret
  928 e390:             
  929 e390:             exe_stmt7:
  930 e390: 0d 13           LDTI TOKENIZER_POKE
  931 e392: aa e3 99        BRNEQ exe_stmt8
  932 e395: 04 e3 48        JSR exe_poke_stmt
  933 e398: 05              ret
  934 e399:             
  935 e399:             exe_stmt8:
  936 e399: 0d 0c           LDTI TOKENIZER_NEXT
  937 e39b: aa e3 a2        BRNEQ exe_stmt9
  938 e39e: 04 e2 d3        JSR exe_next_stmt
  939 e3a1: 05              ret
  940 e3a2:             
  941 e3a2:             exe_stmt9:
  942 e3a2: 0d 14           LDTI TOKENIZER_END
  943 e3a4: aa e3 ab        BRNEQ exe_stmt10
  944 e3a7: 04 e3 49        JSR exe_end_stmt
  945 e3aa: 05              ret
  946 e3ab:             
  947 e3ab:             exe_stmt10:
  948 e3ab: 0d 05           LDTI TOKENIZER_LET
  949 e3ad: aa e3 b9        BRNEQ exe_stmt11
  950 e3b0: 0e 05           LDAI TOKENIZER_LET
  951 e3b2: 04 e0 cb        JSR exe_accept
  952 e3b5: 04 e2 8c        JSR exe_let_stmt
  953 e3b8: 05              ret
  954 e3b9:             
  955 e3b9:             exe_stmt11:
  956 e3b9: 0d 0d           LDTI TOKENIZER_GOTO
  957 e3bb: aa e3 c2        BRNEQ exe_stmt12
  958 e3be: 04 e2 05        JSR exe_goto_stmt
  959 e3c1: 05              ret
  960 e3c2:             
  961 e3c2:             exe_stmt12:
  962 e3c2: 1f e0 9b        MVIW R7,bas_msg3
  963 e3c5: 04 ff c0        jsr stringout
  964 e3c8: 04 ff cc        jsr showaddr
  965 e3cb: 04 ff d8        jsr showbyte
  966 e3ce: 04 e4 12        jsr bas_error
  967 e3d1:             
  968 e3d1:             ;
  969 e3d1:             ; void line_statement (void)
  970 e3d1:             ;
  971 e3d1:             exe_line_stmt:
  972 e3d1:             ;line_statement(void) {
  973 e3d1:             ;    DEBUG_PRINTF("----------- Line number %d ---------\n", tokenizer_num());
  974 e3d1:             ;#ifdef unused
  975 e3d1:             ;    index_add(tokenizer_num(), tokenizer_pos());
  976 e3d1:             ;#endif
  977 e3d1:             ;    accept(TOKENIZER_LINENUM);
  978 e3d1:             ;    statement();
  979 e3d1:             ;    return;
  980 e3d1: 0e 25           LDAI TOKENIZER_LINENUM
  981 e3d3: 04 e0 cb        jsr exe_accept
  982 e3d6: 04 e3 50        jsr exe_stmt
  983 e3d9: 05              ret
  984 e3da:             
  985 e3da:             ;
  986 e3da:             ; void ubasic_run()
  987 e3da:             ;
  988 e3da:             basic_run:
  989 e3da:             ;    mviw r7,000ah
  990 e3da:             ;    jsr basu_find
  991 e3da:             ;    jsr showr7
  992 e3da:             ;    mviw R7,CRLF
  993 e3da:             ;    jsr stringout
  994 e3da:             
  995 e3da:             ;    mviw r7,0014h
  996 e3da:             ;    jsr basu_find
  997 e3da:             ;    jsr showr7
  998 e3da:             ;    mviw R7,CRLF
  999 e3da:             ;    jsr stringout
 1000 e3da:             
 1001 e3da: 04 e0 bb        JSR exe_init
 1002 e3dd:             
 1003 e3dd:             ;    mviw r7,0080h
 1004 e3dd:             ;    jsr basu_find
 1005 e3dd:             ;    jsr showr7
 1006 e3dd:             ;    mviw R7,CRLF
 1007 e3dd:             ;    jsr stringout
 1008 e3dd:             exe_run:
 1009 e3dd: 04 e3 ec        jsr exe_finished
 1010 e3e0: 0d 01           LDTI 1
 1011 e3e2: aa e3 e6        BRNEQ exe_run_cont
 1012 e3e5: 05              ret
 1013 e3e6:             
 1014 e3e6:             exe_run_cont:
 1015 e3e6: 04 e3 d1        jsr exe_line_stmt
 1016 e3e9: a0 e3 dd        BR exe_run
 1017 e3ec:             
 1018 e3ec:             ;
 1019 e3ec:             ; int ubasic_finished()
 1020 e3ec:             ;
 1021 e3ec:             exe_finished:
 1022 e3ec: 1a 02 00        MVIW R2,bas_run_ended
 1023 e3ef: 42              LDAVR R2
 1024 e3f0: 0d 01           LDTI 1
 1025 e3f2: a8 e3 fe        BREQ exe_finished_yes
 1026 e3f5:             
 1027 e3f5: 43              ldavr r3
 1028 e3f6: 0d 01           ldti TOKENIZER_EOF
 1029 e3f8: a8 e3 fe        breq exe_finished_yes
 1030 e3fb: 0e 00           ldai 0
 1031 e3fd: 05              ret
 1032 e3fe:             
 1033 e3fe:             exe_finished_yes:
 1034 e3fe: 0e 01           LDAI 1
 1035 e400: 05              ret
 1036 e401:             
 1037 e401:             ;
 1038 e401:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1039 e401:             ;
 1040 e401:             ; R7 value (only using low byte)
 1041 e401:             ; ACCUMULATOR Variable ref number
 1042 e401:             ;
 1043 e401:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1044 e401:             ;
 1045 e401:             exe_set_variable:
 1046 e401: 1a 01 00        MVIW R2,BASIC_VARS
 1047 e404: 32              MVARL R2
 1048 e405:             ;
 1049 e405: 27              MVRLA R7
 1050 e406: 4a              STAVR R2
 1051 e407: 05              RET
 1052 e408:             ;
 1053 e408:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1054 e408:             ;
 1055 e408:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1056 e408:             ;
 1057 e408:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1058 e408:             ; and only 0-25 (var names a-z) supported
 1059 e408:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1060 e408:             ;
 1061 e408:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1062 e408:             ;
 1063 e408:             exe_get_variable:
 1064 e408: 1a 01 00        MVIW R2,BASIC_VARS
 1065 e40b: 32              MVARL R2
 1066 e40c:             ;
 1067 e40c: 42              LDAVR R2
 1068 e40d: 37              MVARL R7
 1069 e40e: 0e 00           LDAI 0
 1070 e410: 3f              MVARH R7
 1071 e411: 05              RET
 1072 e412:             
 1073 e412:             ;
 1074 e412:             ; hack this needs work
 1075 e412:             ;
 1076 e412:             bas_error:
 1077 e412: 05            RET
 1078 e413:             
 1079 e413:             ;
 1080 e413:             ; Tokenizer execute support code
 1081 e413:             ;
 1082 e413:             
 1083 e413:             exe_next_token:
 1084 e413: 43            ldavr r3
 1085 e414: 0d 02         ldti TOKENIZER_NUMBER
 1086 e416: aa e4 1d      BRNEQ exe_next_token1
 1087 e419: 53            incr r3
 1088 e41a: 53            incr r3
 1089 e41b: 53            incr r3
 1090 e41c: 05            RET
 1091 e41d:             
 1092 e41d:             exe_next_token1:
 1093 e41d: 0d 04         ldti TOKENIZER_VARIABLE
 1094 e41f: aa e4 26      BRNEQ exe_next_token2
 1095 e422: 53            incr r3
 1096 e423: 53            incr r3
 1097 e424: 53            incr r3
 1098 e425: 05            RET
 1099 e426:             
 1100 e426:             exe_next_token2:
 1101 e426: 0d 25         ldti TOKENIZER_LINENUM
 1102 e428: aa e4 31      BRNEQ exe_next_token3
 1103 e42b: 53            incr r3
 1104 e42c: 53            incr r3
 1105 e42d: 53            incr r3
 1106 e42e: 53            incr r3
 1107 e42f: 53            incr r3
 1108 e430: 05            RET
 1109 e431:             
 1110 e431:             exe_next_token3:
 1111 e431: 0d 03         ldti TOKENIZER_STRING
 1112 e433: aa e4 41      BRNEQ exe_next_token4
 1113 e436: 53            incr r3
 1114 e437:             
 1115 e437:             exe_next_tok3_loop:
 1116 e437: 43            LDAVR R3
 1117 e438: a1 e4 3f      BRZ exe_next_tok3_done
 1118 e43b: 53            incr r3
 1119 e43c: a0 e4 37      BR exe_next_tok3_loop
 1120 e43f:             
 1121 e43f:             exe_next_tok3_done:
 1122 e43f: 53            incr r3
 1123 e440: 05            RET
 1124 e441:             
 1125 e441:             exe_next_token4:
 1126 e441: 53            incr r3
 1127 e442: 05            ret
 1128 e443:             
 1129 e443:             ;
 1130 e443:             ; numbers stored low byte followed by high byte in memory
 1131 e443:             
 1132 e443:             exe_num:
 1133 e443: 53              incr r3
 1134 e444: 43              ldavr r3
 1135 e445: 37              mvarl r7
 1136 e446: 53              incr r3
 1137 e447: 43              ldavr r3
 1138 e448: 3f              mvarh r7
 1139 e449: 5b              decr r3
 1140 e44a: 5b              decr r3
 1141 e44b: 05              ret
 1142 e44c:             
 1143 e44c:             ;
 1144 e44c:             ; hack only using low byte of id for now
 1145 e44c:             ; return in accumulator
 1146 e44c:             ;
 1147 e44c:             exe_variable_num:
 1148 e44c: 53              incr r3
 1149 e44d: 43              ldavr r3
 1150 e44e: 5b              decr r3
 1151 e44f: 05              ret
 1152 e450:             
 1153 e450:             exe_string:
 1154 e450: 0f 73           movrr r3,r7
 1155 e452: 57              incr r7
 1156 e453: 05              ret
 1157 e454:             
 1158 e454:             
 1159 e454:             
 1160 e454:             
 1161 e454:             ;
 1162 e454:             ; List out token buffer in human readable form
 1163 e454:             ;
 1164 e454:             ; list out token buffer
 1165 e454:             ; buffer address in r7
 1166 e454:             ;
 1167 e454: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1168 e459: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1169 e460: 49 46 20 00 tokl_if: DB "IF ",0
 1170 e464: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1171 e46a: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1172 e470: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1173 e475: 54 4f 20 00 tokl_to: DB "TO ",0
 1174 e479: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1175 e47f: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1176 e485: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1177 e48c: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1178 e494: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1179 e499: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1180 e49f: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1181 e4a5: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1182 e4aa: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1183 e4b0: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1184 e4bb:             
 1185 e4bb:             
 1186 e4bb:             basic_list:
 1187 e4bb: 07 03           pushr r3
 1188 e4bd: 0f 37           movrr r7,r3
 1189 e4bf:             
 1190 e4bf:             
 1191 e4bf:             baslist_loop:
 1192 e4bf: 43              ldavr r3
 1193 e4c0:             
 1194 e4c0: 0d 00           LDTI TOKENIZER_ERROR
 1195 e4c2: aa e4 d4        BRNEQ baslist1
 1196 e4c5: 1f e4 b0        MVIW R7,tokl_error
 1197 e4c8: 04 ff c0        JSR stringout
 1198 e4cb: 04 ff cc        JSR showaddr
 1199 e4ce: a0 e7 6a        BR baslist_done
 1200 e4d1: a0 e4 bf        BR baslist_loop
 1201 e4d4:             
 1202 e4d4:             baslist1:
 1203 e4d4: 0d 01           LDTI TOKENIZER_EOF
 1204 e4d6: aa e4 df        BRNEQ baslist2
 1205 e4d9: a0 e7 6a        BR baslist_done
 1206 e4dc: a0 e4 bf        BR baslist_loop
 1207 e4df:             
 1208 e4df:             baslist2:
 1209 e4df: 0d 02           LDTI TOKENIZER_NUMBER
 1210 e4e1: aa e4 f6        BRNEQ baslist3
 1211 e4e4: 53              incr r3
 1212 e4e5: 43              ldavr r3
 1213 e4e6: 37              mvarl r7
 1214 e4e7: 53              incr r3
 1215 e4e8: 43              ldavr r3
 1216 e4e9: 3f              mvarh r7
 1217 e4ea: 53              INCR R3
 1218 e4eb: 04 ff d4        jsr showr7
 1219 e4ee: 0e 20           ldai ' '
 1220 e4f0: 04 ff c8        jsr uartout
 1221 e4f3: a0 e4 bf        BR baslist_loop
 1222 e4f6:             
 1223 e4f6:             baslist3:
 1224 e4f6: 0d 03           LDTI TOKENIZER_STRING
 1225 e4f8: aa e5 12        BRNEQ baslist4
 1226 e4fb: 53              incr r3
 1227 e4fc: 0f 73           movrr r3,r7
 1228 e4fe: 04 ff c0        jsr stringout
 1229 e501: 0e 20           ldai ' '
 1230 e503: 04 ff c8        jsr uartout
 1231 e506:             baslist_string:
 1232 e506: 43              ldavr r3
 1233 e507: a1 e5 0e        brz baslist_stringend
 1234 e50a: 53              incr r3
 1235 e50b: a0 e5 06        br baslist_string
 1236 e50e:             baslist_stringend:
 1237 e50e: 53              incr r3
 1238 e50f: a0 e4 bf        BR baslist_loop
 1239 e512:             
 1240 e512:             baslist4:
 1241 e512: 0d 04           LDTI TOKENIZER_VARIABLE
 1242 e514: aa e5 29        BRNEQ baslist5
 1243 e517: 53              incr r3
 1244 e518: 43              ldavr r3
 1245 e519: 0d 41           ldti 'A'
 1246 e51b: b8              ADDT
 1247 e51c: 53              incr r3
 1248 e51d: 53              incr r3
 1249 e51e: 04 ff c8        jsr uartout
 1250 e521:             
 1251 e521:             ;    ldavr r3
 1252 e521:             ;    mvarl r7
 1253 e521:             ;    incr r3
 1254 e521:             ;    ldavr r3
 1255 e521:             ;    mvarh r7
 1256 e521:             ;    INCR R3
 1257 e521:             ;    jsr showr7
 1258 e521:             
 1259 e521: 0e 20           ldai ' '
 1260 e523: 04 ff c8        jsr uartout
 1261 e526: a0 e4 bf        BR baslist_loop
 1262 e529:             
 1263 e529:             baslist5:
 1264 e529: 0d 05           LDTI TOKENIZER_LET
 1265 e52b: aa e5 38        BRNEQ baslist6
 1266 e52e: 1f e4 54        MVIW R7,tokl_let
 1267 e531: 04 ff c0        JSR stringout
 1268 e534: 53              INCR R3
 1269 e535: a0 e4 bf        BR baslist_loop
 1270 e538:             
 1271 e538:             baslist6:
 1272 e538: 0d 06           LDTI TOKENIZER_PRINT
 1273 e53a: aa e5 47        BRNEQ baslist7
 1274 e53d: 1f e4 59        MVIW R7,tokl_print
 1275 e540: 04 ff c0        jsr STRINGOUT
 1276 e543: 53              INCR R3
 1277 e544: a0 e4 bf        BR baslist_loop
 1278 e547:             
 1279 e547:             baslist7:
 1280 e547: 0d 07           LDTI TOKENIZER_IF
 1281 e549: aa e5 56        BRNEQ baslist8
 1282 e54c: 1f e4 60        MVIW R7,tokl_if
 1283 e54f: 04 ff c0        JSR stringout
 1284 e552: 53              INCR R3
 1285 e553: a0 e4 bf        BR baslist_loop
 1286 e556:             
 1287 e556:             baslist8:
 1288 e556: 0d 08           LDTI TOKENIZER_THEN
 1289 e558: aa e5 65        BRNEQ baslist9
 1290 e55b: 1f e4 64        MVIW R7,tokl_then
 1291 e55e: 04 ff c0        JSR stringout
 1292 e561: 53              INCR R3
 1293 e562: a0 e4 bf        BR baslist_loop
 1294 e565:             
 1295 e565:             baslist9:
 1296 e565: 0d 09           LDTI TOKENIZER_ELSE
 1297 e567: aa e5 74        BRNEQ baslist10
 1298 e56a: 1f e4 6a        MVIW R7,tokl_else
 1299 e56d: 04 ff c0        JSR stringout
 1300 e570: 53              INCR R3
 1301 e571: a0 e4 bf        BR baslist_loop
 1302 e574:             
 1303 e574:             baslist10:
 1304 e574: 0d 0a           LDTI TOKENIZER_FOR
 1305 e576: aa e5 83        BRNEQ baslist11
 1306 e579: 1f e4 70        MVIW R7,tokl_for
 1307 e57c: 04 ff c0        JSR stringout
 1308 e57f: 53              INCR R3
 1309 e580: a0 e4 bf        BR baslist_loop
 1310 e583:             
 1311 e583:             baslist11:
 1312 e583: 0d 0b           LDTI TOKENIZER_TO
 1313 e585: aa e5 92        BRNEQ baslist12
 1314 e588: 1f e4 75        MVIW R7,tokl_to
 1315 e58b: 04 ff c0        JSR stringout
 1316 e58e: 53              INCR R3
 1317 e58f: a0 e4 bf        BR baslist_loop
 1318 e592:             
 1319 e592:             baslist12:
 1320 e592: 0d 0c           LDTI TOKENIZER_NEXT
 1321 e594: aa e5 a1        BRNEQ baslist13
 1322 e597: 1f e4 79        MVIW R7,tokl_next
 1323 e59a: 04 ff c0        JSR stringout
 1324 e59d: 53              INCR R3
 1325 e59e: a0 e4 bf        BR baslist_loop
 1326 e5a1:             
 1327 e5a1:             baslist13:
 1328 e5a1: 0d 0d           LDTI TOKENIZER_GOTO
 1329 e5a3: aa e5 b0        BRNEQ baslist14
 1330 e5a6: 1f e4 7f        MVIW R7,tokl_goto
 1331 e5a9: 04 ff c0        JSR stringout
 1332 e5ac: 53              INCR R3
 1333 e5ad: a0 e4 bf        BR baslist_loop
 1334 e5b0:             
 1335 e5b0:             baslist14:
 1336 e5b0: 0d 0e           LDTI TOKENIZER_GOSUB
 1337 e5b2: aa e5 bf        BRNEQ baslist15
 1338 e5b5: 1f e4 85        MVIW R7,tokl_gosub
 1339 e5b8: 04 ff c0        JSR stringout
 1340 e5bb: 53              INCR R3
 1341 e5bc: a0 e4 bf        BR baslist_loop
 1342 e5bf:             
 1343 e5bf:             baslist15:
 1344 e5bf: 0d 0f           LDTI TOKENIZER_RETURN
 1345 e5c1: aa e5 ce        BRNEQ baslist16
 1346 e5c4: 1f e4 8c        MVIW R7,tokl_return
 1347 e5c7: 04 ff c0        JSR stringout
 1348 e5ca: 53              INCR R3
 1349 e5cb: a0 e4 bf        BR baslist_loop
 1350 e5ce:             
 1351 e5ce:             baslist16:
 1352 e5ce: 0d 10           LDTI TOKENIZER_CALL
 1353 e5d0: aa e5 dd        BRNEQ baslist17
 1354 e5d3: 1f e4 aa        MVIW R7,tokl_call
 1355 e5d6: 04 ff c0        JSR stringout
 1356 e5d9: 53              INCR R3
 1357 e5da: a0 e4 bf        BR baslist_loop
 1358 e5dd:             
 1359 e5dd:             baslist17:
 1360 e5dd: 0d 11           LDTI TOKENIZER_REM
 1361 e5df: aa e5 ec        BRNEQ baslist18
 1362 e5e2: 1f e4 94        MVIW R7,tokl_rem
 1363 e5e5: 04 ff c0        JSR stringout
 1364 e5e8: 53              INCR R3
 1365 e5e9: a0 e4 bf        BR baslist_loop
 1366 e5ec:             
 1367 e5ec:             baslist18:
 1368 e5ec: 0d 12           LDTI TOKENIZER_PEEK
 1369 e5ee: aa e5 fb        BRNEQ baslist19
 1370 e5f1: 1f e4 99        MVIW R7,tokl_peek
 1371 e5f4: 04 ff c0        JSR stringout
 1372 e5f7: 53              INCR R3
 1373 e5f8: a0 e4 bf        BR baslist_loop
 1374 e5fb:             
 1375 e5fb:             baslist19:
 1376 e5fb: 0d 13           LDTI TOKENIZER_POKE
 1377 e5fd: aa e6 0a        BRNEQ baslist20
 1378 e600: 1f e4 9f        MVIW R7,tokl_poke
 1379 e603: 04 ff c0        JSR stringout
 1380 e606: 53              INCR R3
 1381 e607: a0 e4 bf        BR baslist_loop
 1382 e60a:             
 1383 e60a:             baslist20:
 1384 e60a: 0d 14           LDTI TOKENIZER_END
 1385 e60c: aa e6 19        BRNEQ baslist21
 1386 e60f: 1f e4 a5        MVIW R7,tokl_end
 1387 e612: 04 ff c0        JSR stringout
 1388 e615: 53              INCR R3
 1389 e616: a0 e4 bf        BR baslist_loop
 1390 e619:             
 1391 e619:             baslist21:
 1392 e619: 0d 15           LDTI TOKENIZER_COMMA
 1393 e61b: aa e6 2c        BRNEQ baslist22
 1394 e61e: 0e 2c           ldai ','
 1395 e620: 04 ff c8        jsr uartout
 1396 e623: 0e 20           ldai ' '
 1397 e625: 04 ff c8        jsr uartout
 1398 e628: 53              INCR R3
 1399 e629: a0 e4 bf        BR baslist_loop
 1400 e62c:             
 1401 e62c:             baslist22:
 1402 e62c: 0d 16           LDTI TOKENIZER_SEMICOLON
 1403 e62e: aa e6 3f        BRNEQ baslist23
 1404 e631: 0e 3b           ldai ';'
 1405 e633: 04 ff c8        jsr uartout
 1406 e636: 0e 20           ldai ' '
 1407 e638: 04 ff c8        jsr uartout
 1408 e63b: 53              INCR R3
 1409 e63c: a0 e4 bf        BR baslist_loop
 1410 e63f:             
 1411 e63f:             baslist23:
 1412 e63f: 0d 17           LDTI TOKENIZER_PLUS
 1413 e641: aa e6 52        BRNEQ baslist24
 1414 e644: 0e 2b           ldai '+'
 1415 e646: 04 ff c8        jsr uartout
 1416 e649: 0e 20           ldai ' '
 1417 e64b: 04 ff c8        jsr uartout
 1418 e64e: 53              INCR R3
 1419 e64f: a0 e4 bf        BR baslist_loop
 1420 e652:             
 1421 e652:             baslist24:
 1422 e652: 0d 18           LDTI TOKENIZER_MINUS
 1423 e654: aa e6 65        BRNEQ baslist25
 1424 e657: 0e 2d           ldai '-'
 1425 e659: 04 ff c8        jsr uartout
 1426 e65c: 0e 20           ldai ' '
 1427 e65e: 04 ff c8        jsr uartout
 1428 e661: 53              INCR R3
 1429 e662: a0 e4 bf        BR baslist_loop
 1430 e665:             
 1431 e665:             baslist25:
 1432 e665: 0d 19           LDTI TOKENIZER_AND
 1433 e667: aa e6 78        BRNEQ baslist26
 1434 e66a: 0e 26           ldai '&'
 1435 e66c: 04 ff c8        jsr uartout
 1436 e66f: 0e 20           ldai ' '
 1437 e671: 04 ff c8        jsr uartout
 1438 e674: 53              INCR R3
 1439 e675: a0 e4 bf        BR baslist_loop
 1440 e678:             
 1441 e678:             baslist26:
 1442 e678: 0d 1a           LDTI TOKENIZER_OR
 1443 e67a: aa e6 8b        BRNEQ baslist27
 1444 e67d: 0e 7c           ldai '|'
 1445 e67f: 04 ff c8        jsr uartout
 1446 e682: 0e 20           ldai ' '
 1447 e684: 04 ff c8        jsr uartout
 1448 e687: 53              INCR R3
 1449 e688: a0 e4 bf        BR baslist_loop
 1450 e68b:             
 1451 e68b:             baslist27:
 1452 e68b: 0d 1b           LDTI TOKENIZER_ASTR
 1453 e68d: aa e6 9e        BRNEQ baslist28
 1454 e690: 0e 2a           ldai '*'
 1455 e692: 04 ff c8        jsr uartout
 1456 e695: 0e 20           ldai ' '
 1457 e697: 04 ff c8        jsr uartout
 1458 e69a: 53              INCR R3
 1459 e69b: a0 e4 bf        BR baslist_loop
 1460 e69e:             
 1461 e69e:             baslist28:
 1462 e69e: 0d 1c           LDTI TOKENIZER_SLASH
 1463 e6a0: aa e6 b1        BRNEQ baslist29
 1464 e6a3: 0e 2f           ldai '/'
 1465 e6a5: 04 ff c8        jsr uartout
 1466 e6a8: 0e 20           ldai ' '
 1467 e6aa: 04 ff c8        jsr uartout
 1468 e6ad: 53              INCR R3
 1469 e6ae: a0 e4 bf        BR baslist_loop
 1470 e6b1:             
 1471 e6b1:             baslist29:
 1472 e6b1: 0d 1d           LDTI TOKENIZER_MOD
 1473 e6b3: aa e6 c4        BRNEQ baslist30
 1474 e6b6: 0e 25           ldai '%'
 1475 e6b8: 04 ff c8        jsr uartout
 1476 e6bb: 0e 20           ldai ' '
 1477 e6bd: 04 ff c8        jsr uartout
 1478 e6c0: 53              INCR R3
 1479 e6c1: a0 e4 bf        BR baslist_loop
 1480 e6c4:             
 1481 e6c4:             baslist30:
 1482 e6c4: 0d 1e           LDTI TOKENIZER_HASH
 1483 e6c6: aa e6 d7        BRNEQ baslist31
 1484 e6c9: 0e 23           ldai '#'
 1485 e6cb: 04 ff c8        jsr uartout
 1486 e6ce: 0e 20           ldai ' '
 1487 e6d0: 04 ff c8        jsr uartout
 1488 e6d3: 53              INCR R3
 1489 e6d4: a0 e4 bf        BR baslist_loop
 1490 e6d7:             
 1491 e6d7:             baslist31:
 1492 e6d7: 0d 1f           LDTI TOKENIZER_LEFTP
 1493 e6d9: aa e6 ea        BRNEQ baslist32
 1494 e6dc: 0e 28           ldai '()'
 1495 e6de: 04 ff c8        jsr uartout
 1496 e6e1: 0e 20           ldai ' '
 1497 e6e3: 04 ff c8        jsr uartout
 1498 e6e6: 53              INCR R3
 1499 e6e7: a0 e4 bf        BR baslist_loop
 1500 e6ea:             
 1501 e6ea:             baslist32:
 1502 e6ea: 0d 20           LDTI TOKENIZER_RIGHTP
 1503 e6ec: aa e6 fd        BRNEQ baslist33
 1504 e6ef: 0e 29           ldai ')'
 1505 e6f1: 04 ff c8        jsr uartout
 1506 e6f4: 0e 20           ldai ' '
 1507 e6f6: 04 ff c8        jsr uartout
 1508 e6f9: 53              INCR R3
 1509 e6fa: a0 e4 bf        BR baslist_loop
 1510 e6fd:             
 1511 e6fd:             baslist33:
 1512 e6fd: 0d 21           LDTI TOKENIZER_LT
 1513 e6ff: aa e7 10        BRNEQ baslist34
 1514 e702: 0e 3c           ldai '<'
 1515 e704: 04 ff c8        jsr uartout
 1516 e707: 0e 20           ldai ' '
 1517 e709: 04 ff c8        jsr uartout
 1518 e70c: 53              INCR R3
 1519 e70d: a0 e4 bf        BR baslist_loop
 1520 e710:             
 1521 e710:             baslist34:
 1522 e710: 0d 22           LDTI TOKENIZER_GT
 1523 e712: aa e7 23        BRNEQ baslist35
 1524 e715: 0e 3e           ldai '>'
 1525 e717: 04 ff c8        jsr uartout
 1526 e71a: 0e 20           ldai ' '
 1527 e71c: 04 ff c8        jsr uartout
 1528 e71f: 53              INCR R3
 1529 e720: a0 e4 bf        BR baslist_loop
 1530 e723:             
 1531 e723:             baslist35:
 1532 e723: 0d 23           LDTI TOKENIZER_EQ
 1533 e725: aa e7 36        BRNEQ baslist36
 1534 e728: 0e 3d           ldai '='
 1535 e72a: 04 ff c8        jsr uartout
 1536 e72d: 0e 20           ldai ' '
 1537 e72f: 04 ff c8        jsr uartout
 1538 e732: 53              INCR R3
 1539 e733: a0 e4 bf        BR baslist_loop
 1540 e736:             
 1541 e736:             baslist36:
 1542 e736: 0d 24           LDTI TOKENIZER_CR
 1543 e738: aa e7 45        BRNEQ baslist37
 1544 e73b: 1f ec 0b        mviw R7,CRLF
 1545 e73e: 04 ff c0        jsr stringout
 1546 e741: 53              INCR R3
 1547 e742: a0 e4 bf        BR baslist_loop
 1548 e745:             
 1549 e745:             baslist37:
 1550 e745: 0d 25           LDTI TOKENIZER_LINENUM
 1551 e747: aa e7 5e        BRNEQ baslist38
 1552 e74a: 53              incr r3
 1553 e74b: 43              ldavr r3
 1554 e74c: 37              mvarl r7
 1555 e74d: 53              incr r3
 1556 e74e: 43              ldavr r3
 1557 e74f: 3f              mvarh r7
 1558 e750: 53              INCR R3
 1559 e751: 53              incr r3
 1560 e752: 53              incr r3
 1561 e753: 04 ff d4        jsr showr7
 1562 e756: 0e 20           ldai ' '
 1563 e758: 04 ff c8        jsr uartout
 1564 e75b: a0 e4 bf        BR baslist_loop
 1565 e75e:             
 1566 e75e:             baslist38:
 1567 e75e: 1f e4 b0        MVIW R7,tokl_error
 1568 e761: 04 ff c0        JSR stringout
 1569 e764: 04 ff cc        JSR showaddr
 1570 e767: a0 e7 6a        BR baslist_done
 1571 e76a:             ;
 1572 e76a:             ; any cleanup
 1573 e76a:             ;
 1574 e76a:             baslist_done:
 1575 e76a: 08 30           popr r3
 1576 e76c: 05              ret
 1577 e76d:             
 1578 e76d:             ;
 1579 e76d:             ; Basic Interpreter Parser
 1580 e76d:             ;
 1581 e76d:             parse_keywords:
 1582 e76d: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1583 e772: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1584 e779: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1585 e77d: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1586 e783: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1587 e789: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1588 e78e: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1589 e792: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1590 e798: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1591 e79e: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1592 e7a5: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1593 e7ad: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1594 e7b3: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1595 e7b8: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1596 e7be: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1597 e7c4: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1598 e7c9: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1599 e7cc:             
 1600 e7cc:             ;
 1601 e7cc:             ; int singlechar (void)
 1602 e7cc:             ;
 1603 e7cc:             ; return TOKEN result in accumulator
 1604 e7cc:             ;
 1605 e7cc:             ; ready for testing
 1606 e7cc:             ;
 1607 e7cc:             parse_singlechar:
 1608 e7cc:             ;
 1609 e7cc: 07 03           pushr r3
 1610 e7ce: f3 02 02        LDR r3,bas_txtptr
 1611 e7d1: 43              ldavr r3
 1612 e7d2: 08 30           popr r3
 1613 e7d4:             ;
 1614 e7d4: 0d 0a           ldti 0ah
 1615 e7d6: aa e7 dc        brneq parsechar1
 1616 e7d9: 0e 24           ldai TOKENIZER_CR
 1617 e7db: 05              ret
 1618 e7dc:             parsechar1:
 1619 e7dc: 0d 2c           ldti ','
 1620 e7de: aa e7 e4        brneq parsechar2
 1621 e7e1: 0e 15           ldai TOKENIZER_COMMA
 1622 e7e3: 05              ret
 1623 e7e4:             parsechar2:
 1624 e7e4: 0d 3b           ldti ';'
 1625 e7e6: aa e7 ec        brneq parsechar3
 1626 e7e9: 0e 16           ldai TOKENIZER_SEMICOLON
 1627 e7eb: 05              ret
 1628 e7ec:             parsechar3:
 1629 e7ec: 0d 2b           ldti '+'
 1630 e7ee: aa e7 f4        brneq parsechar4
 1631 e7f1: 0e 17           ldai TOKENIZER_PLUS
 1632 e7f3: 05              ret
 1633 e7f4:             parsechar4:
 1634 e7f4: 0d 2d           ldti '-'
 1635 e7f6: aa e7 fc        brneq parsechar5
 1636 e7f9: 0e 18           ldai TOKENIZER_MINUS
 1637 e7fb: 05              ret
 1638 e7fc:             parsechar5:
 1639 e7fc: 0d 26           ldti '&'
 1640 e7fe: aa e8 04        brneq parsechar6
 1641 e801: 0e 19           ldai TOKENIZER_AND
 1642 e803: 05              ret
 1643 e804:             parsechar6:
 1644 e804: 0d 7c           ldti '|'
 1645 e806: aa e8 0c        brneq parsechar7
 1646 e809: 0e 1a           ldai TOKENIZER_OR
 1647 e80b: 05              ret
 1648 e80c:             parsechar7:
 1649 e80c: 0d 2a           ldti '*'
 1650 e80e: aa e8 14        brneq parsechar8
 1651 e811: 0e 1b           ldai TOKENIZER_ASTR
 1652 e813: 05              ret
 1653 e814:             parsechar8:
 1654 e814: 0d 25           ldti '%'
 1655 e816: aa e8 1c        brneq parsechar9
 1656 e819: 0e 1d           ldai TOKENIZER_MOD
 1657 e81b: 05              ret
 1658 e81c:             parsechar9:
 1659 e81c: 0d 28           ldti '()'
 1660 e81e: aa e8 24        brneq parsechar10
 1661 e821: 0e 1f           ldai TOKENIZER_LEFTP
 1662 e823: 05              ret
 1663 e824:             parsechar10:
 1664 e824: 0d 23           ldti '#'
 1665 e826: aa e8 2c        brneq parsechar11
 1666 e829: 0e 1e           ldai TOKENIZER_HASH
 1667 e82b: 05              ret
 1668 e82c:             parsechar11:
 1669 e82c: 0d 29           ldti ')'
 1670 e82e: aa e8 34        brneq parsechar12
 1671 e831: 0e 20           ldai TOKENIZER_RIGHTP
 1672 e833: 05              ret
 1673 e834:             parsechar12:
 1674 e834: 0d 3c           ldti '<'
 1675 e836: aa e8 3c        brneq parsechar13
 1676 e839: 0e 21           ldai TOKENIZER_LT
 1677 e83b: 05              ret
 1678 e83c:             parsechar13:
 1679 e83c: 0d 3e           ldti '>'
 1680 e83e: aa e8 44        brneq parsechar14
 1681 e841: 0e 22           ldai TOKENIZER_GT
 1682 e843: 05              ret
 1683 e844:             parsechar14:
 1684 e844: 0d 3d           ldti '='
 1685 e846: aa e8 4c        brneq parsechar15
 1686 e849: 0e 23           ldai TOKENIZER_EQ
 1687 e84b: 05              ret
 1688 e84c:             parsechar15:
 1689 e84c: 0e 00           ldai 0
 1690 e84e: 05              ret
 1691 e84f:             
 1692 e84f:             ;
 1693 e84f:             ; int get_next_token(void)
 1694 e84f:             ;
 1695 e84f:             ; under development fix ptr nextptr
 1696 e84f:             
 1697 e84f:             parse_get_next_tok:
 1698 e84f: 07 03           pushr r3
 1699 e851: f3 02 02        LDR R3,bas_txtptr
 1700 e854:             ;
 1701 e854:             ; is digit
 1702 e854:             ;
 1703 e854:             ; chcek for number
 1704 e854:             ;
 1705 e854:             parse_gnt1:
 1706 e854: 43              ldavr r3
 1707 e855: 04 eb da        jsr parse_isdigit
 1708 e858: a1 e8 6b        brz parse_gnt2
 1709 e85b:             parse_gnt1loop:
 1710 e85b: 53              incr R3
 1711 e85c: 43              ldavr r3
 1712 e85d: 04 eb da        jsr parse_isdigit
 1713 e860: a2 e8 5b        brnz parse_gnt1loop
 1714 e863: fb 02 04        STR r3,bas_nxtptr
 1715 e866: 0e 02           ldai TOKENIZER_NUMBER
 1716 e868: 08 30           popr r3
 1717 e86a: 05              ret
 1718 e86b:             ;
 1719 e86b:             ; singlechar
 1720 e86b:             ;
 1721 e86b:             parse_gnt2:
 1722 e86b: 43             ldavr r3
 1723 e86c: 04 e7 cc       jsr parse_singlechar
 1724 e86f: a1 e8 79       BRZ parse_gnt3
 1725 e872: 53             incr r3
 1726 e873: fb 02 04       STR r3,bas_nxtptr
 1727 e876: 08 30          popr r3
 1728 e878: 05             ret
 1729 e879:             ;
 1730 e879:             ; quote
 1731 e879:             ;
 1732 e879:             parse_gnt3:
 1733 e879: 43              ldavr R3
 1734 e87a: 0d 22           ldti '"'
 1735 e87c: aa e8 8f        brneq parse_gnt4
 1736 e87f:             parse_gnt3loop:
 1737 e87f: 53              incr r3
 1738 e880: 43              ldavr R3
 1739 e881: 0d 22           ldti '"'
 1740 e883: aa e8 7f        brneq parse_gnt3loop
 1741 e886: 53              incr r3
 1742 e887: fb 02 04        STR r3,bas_nxtptr
 1743 e88a: 0e 03           ldai TOKENIZER_STRING
 1744 e88c: 08 30           popr r3
 1745 e88e: 05              ret
 1746 e88f:             ;
 1747 e88f:             parse_gnt4:
 1748 e88f:             ;
 1749 e88f:             ; keyword search
 1750 e88f:             ;
 1751 e88f: 07 04           pushr r4
 1752 e891: 1c e7 6d        mviw r4,parse_keywords
 1753 e894:             top:
 1754 e894: 44              ldavr r4
 1755 e895: a1 e8 bc        brz nokeyowrdsfound
 1756 e898: f3 02 02        LDR r3,bas_txtptr
 1757 e89b:             pcmploop:
 1758 e89b: 44              ldavr r4
 1759 e89c: a1 e8 b2        brz found
 1760 e89f: 0b              MVAT
 1761 e8a0: 43              ldavr r3
 1762 e8a1: aa e8 a9        brneq skiptoend
 1763 e8a4: 54              incr r4
 1764 e8a5: 53              incr r3
 1765 e8a6: a0 e8 9b        br pcmploop
 1766 e8a9:             
 1767 e8a9:             skiptoend:
 1768 e8a9:             ;  skip to end of string and skip over token
 1769 e8a9:             skiploop:
 1770 e8a9: 44              ldavr r4
 1771 e8aa: 54              incr r4
 1772 e8ab: a2 e8 a9        brnz skiploop
 1773 e8ae: 54              incr r4
 1774 e8af: a0 e8 94        br top
 1775 e8b2:             
 1776 e8b2:             found:
 1777 e8b2: fb 02 04        str r3,bas_nxtptr
 1778 e8b5: 54              incr r4
 1779 e8b6: 44              ldavr r4
 1780 e8b7: 08 40           popr r4
 1781 e8b9: 08 30           popr r3
 1782 e8bb: 05              ret
 1783 e8bc:             
 1784 e8bc:             nokeyowrdsfound:
 1785 e8bc: 08 40           popr r4
 1786 e8be:             ;
 1787 e8be:             ;  check for variables
 1788 e8be:             ;
 1789 e8be: 43              ldavr r3
 1790 e8bf: 0d 41           ldti 'A'
 1791 e8c1: a7 e8 d2        BRLT parse_gnt_error
 1792 e8c4: 0d 5a           ldti 'Z'
 1793 e8c6: a9 e8 d2        BRGT parse_gnt_error
 1794 e8c9: 53              INCR r3
 1795 e8ca: fb 02 04        str r3,bas_nxtptr
 1796 e8cd: 0e 04           LDAI tokenizer_variable
 1797 e8cf: 08 30           popr r3
 1798 e8d1: 05              RET
 1799 e8d2:             
 1800 e8d2:             parse_gnt_error:
 1801 e8d2: 0e 00           ldai tokenizer_error
 1802 e8d4: 08 30           popr r3
 1803 e8d6: 05              ret
 1804 e8d7:             
 1805 e8d7:             ;
 1806 e8d7:             ; void TOKENIZER_GOTO (char * program)
 1807 e8d7:             ;
 1808 e8d7:             ; under development, may not be needed
 1809 e8d7:             ;
 1810 e8d7:             ;parse_goto:
 1811 e8d7:             ;    str r3,bas_txtptr
 1812 e8d7:             ;    jsr parse_get_next_tok
 1813 e8d7:             ;    sta bas_currenttoken
 1814 e8d7:             ;    ret
 1815 e8d7:             
 1816 e8d7:             ;
 1817 e8d7:             ; void tokenizer_init(int ptr)
 1818 e8d7:             ;
 1819 e8d7:             ; under development
 1820 e8d7:             ;
 1821 e8d7:             parse_init:
 1822 e8d7:             
 1823 e8d7: 07 03           pushr r3
 1824 e8d9: ff 02 02        STR R7,bas_txtptr
 1825 e8dc: 1b 04 00        MVIW r3,parse_token_buffer
 1826 e8df: fb 02 06        STR  R3,bas_tokptr
 1827 e8e2: 1b 00 00        mviw r3,0
 1828 e8e5: fb 02 08        str r3,bas_tokcounter
 1829 e8e8: 04 e8 4f        jsr parse_get_next_tok
 1830 e8eb: ed 02 0a        sta bas_currenttoken
 1831 e8ee: 08 30           popr r3
 1832 e8f0: 05              ret
 1833 e8f1:             
 1834 e8f1:             ;
 1835 e8f1:             ; int tokenizer_token(void)
 1836 e8f1:             :
 1837 e8f1:             parse_token:
 1838 e8f1: ec 02 0a        lda bas_currenttoken
 1839 e8f4: 05              ret
 1840 e8f5:             
 1841 e8f5:             ;
 1842 e8f5:             ; void tokenizer_next(void)
 1843 e8f5:             ;
 1844 e8f5:             parse_next:
 1845 e8f5: 04 e9 da        jsr parse_finished
 1846 e8f8: a1 e8 fc        brz parse_next1
 1847 e8fb: 05              ret
 1848 e8fc:             
 1849 e8fc:             parse_next1:
 1850 e8fc: 07 03           pushr r3
 1851 e8fe: f3 02 04        ldr r3,bas_nxtptr
 1852 e901: fb 02 02        str r3,bas_txtptr
 1853 e904:             
 1854 e904:             parse_next1loop:
 1855 e904: 43              ldavr r3
 1856 e905: 0d 20           ldti ' '
 1857 e907: aa e9 0e        brneq parse_next2
 1858 e90a: 53              incr r3
 1859 e90b: a0 e9 04        br parse_next1loop
 1860 e90e:             
 1861 e90e:             
 1862 e90e:             parse_next2:
 1863 e90e: fb 02 02        str r3,bas_txtptr
 1864 e911: 04 e8 4f        jsr parse_get_next_tok
 1865 e914: ed 02 0a        sta bas_currenttoken
 1866 e917:             
 1867 e917: 0d 11           ldti TOKENIZER_REM
 1868 e919: a8 e9 1f        breq parse_next3
 1869 e91c: 08 30           popr r3
 1870 e91e: 05              ret
 1871 e91f:             
 1872 e91f:             ;
 1873 e91f:             ; this needs to be fixed
 1874 e91f:             ; if rem return to parsel line then copy into token buffer
 1875 e91f:             ;
 1876 e91f:             parse_next3:
 1877 e91f: 04 e9 da        JSR parse_finished
 1878 e922: a2 e9 2f        BRNZ parse_nextdone
 1879 e925: 43              ldavr r3
 1880 e926: 0d 0a           ldti  0ah
 1881 e928: a8 e9 2f        breq parse_nextdone
 1882 e92b: 53              incr r3
 1883 e92c: a0 e9 1f        br parse_next3
 1884 e92f:             
 1885 e92f:             parse_nextdone:
 1886 e92f: 43              ldavr r3
 1887 e930: 0d 0a           ldti  0ah
 1888 e932: aa e9 36        brneq parse_nextdone2
 1889 e935: 53              incr r3
 1890 e936:             
 1891 e936:             parse_nextdone2:
 1892 e936: fb 02 04        str r3,bas_nxtptr
 1893 e939: 04 e8 f5        jsr parse_next
 1894 e93c: 08 30           popr r3
 1895 e93e: 05              ret
 1896 e93f:             
 1897 e93f:             ;
 1898 e93f:             ; VARIABLE_TYPE tokenizer_num(void)
 1899 e93f:             ;
 1900 e93f:             ; Hack for now input characters are ascii hex format HHHH
 1901 e93f:             ;
 1902 e93f:             ; value returned in R7
 1903 e93f:             ;
 1904 e93f:             ; Should this advance the line ptr?
 1905 e93f:             ;
 1906 e93f:             
 1907 e93f:             parse_num:
 1908 e93f: 07 03           pushr r3
 1909 e941: 07 04           pushr r4
 1910 e943: 07 05           pushr r5
 1911 e945: 07 06           pushr r6
 1912 e947: 1e 00 00        mviw r6,0           ;accumlate val in r6
 1913 e94a: f3 02 02        LDR r3,bas_txtptr
 1914 e94d: 04 e9 7b        jsr parse_num_char
 1915 e950: 36              mvarl r6
 1916 e951:             parse_num_loop:
 1917 e951: 04 e9 7b        jsr parse_num_char
 1918 e954: 09              push
 1919 e955: 0d ff           ldti 0FFH
 1920 e957: a8 e9 6f        breq parse_num_done
 1921 e95a:             
 1922 e95a: 0f 56           movrr r6,r5
 1923 e95c: 1c 00 0a        mviw r4,0ah
 1924 e95f: 04 eb 74        jsr parse_mul16
 1925 e962: 0a              pop
 1926 e963: 1e 00 00        mviw r6,0
 1927 e966: 36              mvarl r6
 1928 e967: 04 eb a8        jsr parse_add16
 1929 e96a: 0f 67           movrr r7,r6
 1930 e96c: a0 e9 51        br parse_num_loop
 1931 e96f:             parse_num_done:
 1932 e96f: 0a              pop
 1933 e970: 0f 76           movrr r6,r7
 1934 e972: 08 60           popr r6
 1935 e974: 08 50           popr r5
 1936 e976: 08 40           popr r4
 1937 e978: 08 30           popr r3
 1938 e97a: 05              ret
 1939 e97b:             
 1940 e97b:             parse_num_char:
 1941 e97b: 43              LDAVR R3
 1942 e97c: 04 eb da        JSR parse_isdigit
 1943 e97f: a2 e9 85        BRNZ parse_num_char1
 1944 e982: 0e ff           ldai 0ffh
 1945 e984: 05              ret
 1946 e985:             parse_num_char1:
 1947 e985: 43              ldavr r3
 1948 e986: b1 30           SUBI '0'
 1949 e988: 53              incr r3
 1950 e989: 05              RET
 1951 e98a:             
 1952 e98a:             parse_num_old:
 1953 e98a: 07 03           pushr r3
 1954 e98c: f3 02 02        LDR r3,bas_txtptr
 1955 e98f: 04 e9 b8        JSR parse_getnibble
 1956 e992: b6              SHL
 1957 e993: b6              SHL
 1958 e994: b6              SHL
 1959 e995: b6              SHL
 1960 e996: b3 f0           ANDI 0f0h
 1961 e998: 09              Push
 1962 e999: 04 e9 b8        JSR parse_getnibble
 1963 e99c: b3 0f           ANDI 0FH
 1964 e99e: 0b              MVAT
 1965 e99f: 0a              Pop
 1966 e9a0: ba              ORT
 1967 e9a1: 3f              MVARH R7
 1968 e9a2:             
 1969 e9a2: 04 e9 b8        JSR parse_getnibble
 1970 e9a5: b6              SHL
 1971 e9a6: b6              shl
 1972 e9a7: b6              shl
 1973 e9a8: b6              shl
 1974 e9a9: b3 f0           ANDI 0f0h
 1975 e9ab: 09              push
 1976 e9ac: 04 e9 b8        JSR parse_getnibble
 1977 e9af: b3 0f           ANDI 0FH
 1978 e9b1: 0b              MVAT
 1979 e9b2: 0a              pop
 1980 e9b3: ba              ORT
 1981 e9b4: 37              MVARL R7
 1982 e9b5: 08 30           popr r3
 1983 e9b7: 05              RET
 1984 e9b8:             
 1985 e9b8:             ;
 1986 e9b8:             ; add error checking
 1987 e9b8:             ;
 1988 e9b8:             ; return hex nibble in accumulator
 1989 e9b8:             ;
 1990 e9b8:             parse_getnibble:
 1991 e9b8: 43                LDAVR R3
 1992 e9b9: 53                incr r3
 1993 e9ba: 0d 39             LDTI '9'
 1994 e9bc: a9 e9 c2          BRGT parse_af
 1995 e9bf: b1 30             SUBI '0'
 1996 e9c1: 05                RET
 1997 e9c2:             parse_af:
 1998 e9c2: 04 ff d0          JSR toupper
 1999 e9c5: b1 41             SUBI 'A'
 2000 e9c7: b0 0a             ADDI 10
 2001 e9c9: 05                RET
 2002 e9ca:             ;
 2003 e9ca:             ; void tokenizer_string(char *dest, int len)
 2004 e9ca:             ;
 2005 e9ca:             ; not used, in line parse_line
 2006 e9ca:             ;
 2007 e9ca:             parse_string:
 2008 e9ca: 04 e8 f1        JSR parse_token
 2009 e9cd: 0d 03           LDTI TOKENIZER_STRING
 2010 e9cf: a8 e9 d3        BREQ parse_string1
 2011 e9d2: 05              ret
 2012 e9d3:             
 2013 e9d3:             parse_string1:
 2014 e9d3: 07 03           pushr r3
 2015 e9d5: f3 02 02        LDR r3,bas_txtptr
 2016 e9d8: 43              LDAVR R3
 2017 e9d9:             
 2018 e9d9:             
 2019 e9d9:             ;
 2020 e9d9:             ; void tokenizer_error_print(void)
 2021 e9d9:             ;
 2022 e9d9:             ; fix
 2023 e9d9:             ;
 2024 e9d9:             parse_error_print:
 2025 e9d9: 03              halt
 2026 e9da:             
 2027 e9da:             ;
 2028 e9da:             ; int tokenizer_finished(void)
 2029 e9da:             ;
 2030 e9da:             parse_finished:
 2031 e9da: 07 03           pushr r3
 2032 e9dc: f3 02 02        LDR r3,bas_txtptr
 2033 e9df: 43              ldavr r3
 2034 e9e0: a1 e9 f0        brz parse_finished_yes
 2035 e9e3: ec 02 0a        lda bas_currenttoken
 2036 e9e6: 0d 01           ldti TOKENIZER_EOF
 2037 e9e8: a8 e9 f0        breq parse_finished_yes
 2038 e9eb: 08 30           popr r3
 2039 e9ed: 0e 00           ldai 0
 2040 e9ef: 05              ret
 2041 e9f0:             parse_finished_yes:
 2042 e9f0: 0e 01           ldai 1
 2043 e9f2: 08 30           popr r3
 2044 e9f4: 05              ret
 2045 e9f5:             
 2046 e9f5:             ;
 2047 e9f5:             ; int tokenizer_variable_num(void)
 2048 e9f5:             ;
 2049 e9f5:             parse_variable_num:
 2050 e9f5: 07 03             pushr r3
 2051 e9f7: f3 02 02          LDR r3,bas_txtptr
 2052 e9fa: 43                ldavr r3
 2053 e9fb: b1 41             subi 'A'
 2054 e9fd: 37                mvarl r7
 2055 e9fe: 0e 00             ldai 0
 2056 ea00: 3f                mvarh r7
 2057 ea01: 08 30             popr r3
 2058 ea03: 05                ret
 2059 ea04:             
 2060 ea04:             ;
 2061 ea04:             ; char *const tokenizer_pos(void)
 2062 ea04:             ;
 2063 ea04:             ; probably not used
 2064 ea04:             parse_pos:
 2065 ea04:             
 2066 ea04:             ;not used old
 2067 ea04:             ; char *tokenize(char *program)
 2068 ea04:             ;
 2069 ea04:             ; parse:
 2070 ea04:             
 2071 ea04:             ;
 2072 ea04:             ; char *tokenizeLine(char *line)
 2073 ea04:             ;
 2074 ea04:             ; assume input text string in parse_input_line
 2075 ea04:             ;
 2076 ea04:             
 2077 ea04:             parse_line:
 2078 ea04: 04 e8 d7        JSR PARSE_INIT
 2079 ea07: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2080 ea0a: fb 02 08        str r3,bas_tokcounter
 2081 ea0d: 1b 04 00        MVIW R3,parse_token_buffer
 2082 ea10:             
 2083 ea10: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2084 ea12: 4b              STAVR R3
 2085 ea13: 53              INCR R3
 2086 ea14:             
 2087 ea14: 04 e9 3f        JSR parse_num           ;store line number
 2088 ea17: ff 02 10        str r7,bas_newlinenum
 2089 ea1a: 27              mvrla r7
 2090 ea1b: 4b              stavr r3
 2091 ea1c: 53              incr r3
 2092 ea1d: 2f              mvrha r7
 2093 ea1e: 4b              stavr r3
 2094 ea1f: 53              incr r3
 2095 ea20:             
 2096 ea20: 53              incr r3                ; skip over line length - fill in later
 2097 ea21: 53              incr r3
 2098 ea22:             
 2099 ea22:             parse_line_loop:
 2100 ea22: 04 e8 f5        JSR parse_next
 2101 ea25: 04 e8 f1        JSR parse_token
 2102 ea28: 0d 24           ldti TOKENIZER_CR
 2103 ea2a: a8 ea 99        BREQ parse_line_done
 2104 ea2d:             
 2105 ea2d: 4b              STAVR R3
 2106 ea2e: 53              INCR R3
 2107 ea2f: f5 02 08        ldr r5,bas_tokcounter
 2108 ea32: 55              incr r5
 2109 ea33: fd 02 08        str r5,bas_tokcounter
 2110 ea36:             
 2111 ea36: 0d 02           ldti TOKENIZER_NUMBER
 2112 ea38: aa ea 4f        BRNEQ parse_line1
 2113 ea3b: 04 e9 3f        JSR parse_num
 2114 ea3e: 27              mvrla r7
 2115 ea3f: 4b              stavr r3
 2116 ea40: 53              incr r3
 2117 ea41: 2f              mvrha r7
 2118 ea42: 4b              stavr r3
 2119 ea43: 53              incr r3
 2120 ea44: f5 02 08        ldr r5,bas_tokcounter
 2121 ea47: 55              incr r5
 2122 ea48: 55              incr r5
 2123 ea49: fd 02 08        str r5,bas_tokcounter
 2124 ea4c: a0 ea 22        BR parse_line_loop
 2125 ea4f:             
 2126 ea4f:             parse_line1:
 2127 ea4f: 0d 03           ldti TOKENIZER_STRING
 2128 ea51: aa ea 80        BRNEQ parse_line2
 2129 ea54: f4 02 02        ldr r4,bas_txtptr
 2130 ea57: 54              incr r4                   ;skip over opening "
 2131 ea58:             
 2132 ea58:             parse_line1loop:
 2133 ea58: 44              ldavr r4
 2134 ea59: 0d 22           ldti '"'
 2135 ea5b: a8 ea 6b        breq parse_line1done
 2136 ea5e: 4b              stavr r3
 2137 ea5f: 53              incr r3
 2138 ea60: 54              incr r4
 2139 ea61: f5 02 08        ldr r5,bas_tokcounter
 2140 ea64: 55              incr r5
 2141 ea65: fd 02 08        str r5,bas_tokcounter
 2142 ea68: a0 ea 58        BR parse_line1loop
 2143 ea6b:             parse_line1done:
 2144 ea6b: 54              incr r4                   ;skip over closing "
 2145 ea6c: 0e 00           ldai 0                    ;add null into token buffer
 2146 ea6e: 4b              stavr R3
 2147 ea6f: 53              incr r3
 2148 ea70: f5 02 08        ldr r5,bas_tokcounter
 2149 ea73: 55              incr r5
 2150 ea74: fd 02 08        str r5,bas_tokcounter
 2151 ea77: fb 02 06        str r3,BAS_TOKPTR
 2152 ea7a: fc 02 02        str r4,bas_txtptr
 2153 ea7d: a0 ea 22        BR parse_line_loop
 2154 ea80:             
 2155 ea80:             parse_line2:
 2156 ea80: 0d 04           ldti TOKENIZER_VARIABLE
 2157 ea82: aa ea 22        BRNEQ parse_line_loop
 2158 ea85: 04 e9 f5        JSR parse_variable_num
 2159 ea88: 27              mvrla r7
 2160 ea89: 4b              stavr r3
 2161 ea8a: 53              incr r3
 2162 ea8b: 2f              mvrha r7
 2163 ea8c: 4b              stavr r3
 2164 ea8d: 53              incr r3
 2165 ea8e: f5 02 08        ldr r5,bas_tokcounter
 2166 ea91: 55              incr r5
 2167 ea92: 55              incr r5
 2168 ea93: fd 02 08        str r5,bas_tokcounter
 2169 ea96: a0 ea 22        BR parse_line_loop
 2170 ea99:             
 2171 ea99:             parse_line_done:
 2172 ea99: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2173 ea9b: 4b              STAVR R3
 2174 ea9c: 53              INCR R3
 2175 ea9d:             ;    ldr r5,bas_tokcounter
 2176 ea9d:             ;    incr r5
 2177 ea9d:             ;    str r5,bas_tokcounter
 2178 ea9d:             
 2179 ea9d: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2180 eaa0: 53              incr r3
 2181 eaa1: 53              incr r3
 2182 eaa2: 53              incr r3
 2183 eaa3: f7 02 08        ldr r7,bas_tokcounter
 2184 eaa6: ff 02 12        str r7,bas_newlinelen
 2185 eaa9: 27              mvrla r7
 2186 eaaa: 4b              stavr r3
 2187 eaab: 53              incr r3
 2188 eaac: 2f              mvrha r7
 2189 eaad: 4b              stavr r3
 2190 eaae:             
 2191 eaae:             ;
 2192 eaae:             ; void addLine(char *buff)
 2193 eaae:             ; since addline is only called from parse_tokenizeline where are these
 2194 eaae:             ; values are know, pass them in or
 2195 eaae:             ; maybe merge addLine to bottom of parse_tokenizeline
 2196 eaae:             ;
 2197 eaae:             ; r7 points to line to insert
 2198 eaae:             ; r6 linenumber
 2199 eaae:             ; r5 linelength
 2200 eaae:             ;
 2201 eaae:             parse_addline:
 2202 eaae: f7 02 10          ldr r7,BAS_NEWLINENUM
 2203 eab1: 04 eb 10          JSR parse_removeline      ; if line number already exists delete it
 2204 eab4: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2205 eab7: 27                mvrla r7
 2206 eab8: 0d 06             ldti 6
 2207 eaba: aa ea be          brneq parse_addline1
 2208 eabd: 05                ret
 2209 eabe:             
 2210 eabe:             parse_addline1:                 ;find insert location
 2211 eabe:             ;      halt
 2212 eabe: f7 02 10          ldr r7,BAS_NEWLINENUM
 2213 eac1: f3 02 0c          ldr r3,bas_tokenBuffer
 2214 eac4:             
 2215 eac4:             parse_addlineloop:
 2216 eac4: fb 02 14          str r3,bas_insertptr
 2217 eac7: 53                incr r3                   ;get line number of line in token buffer into r6
 2218 eac8: 43                ldavr r3
 2219 eac9: 36                mvarl r6
 2220 eaca: 53                incr r3
 2221 eacb: 43                ldavr r3
 2222 eacc: 3e                mvarh r6
 2223 eacd: 04 eb ea          jsr parse_compare
 2224 ead0: 0d ff             ldti 0ffh
 2225 ead2: a8 ea e7          breq parse_addroom
 2226 ead5:             
 2227 ead5: 53                incr r3                   ;get line length
 2228 ead6: 43                ldavr r3
 2229 ead7: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2230 eada: 36                mvarl r6
 2231 eadb: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2232 eadc: 5e                decr r6
 2233 eadd: 5e                decr r6
 2234 eade:             addline_moveptr:              ; advance pointer to next line
 2235 eade: 53                incr r3
 2236 eadf: 5e                decr r6
 2237 eae0: 26                mvrla r6
 2238 eae1: a2 ea de          brnz addline_moveptr
 2239 eae4: a0 ea c4          br parse_addlineloop
 2240 eae7:             
 2241 eae7:             
 2242 eae7:             parse_addroom:               ; make room
 2243 eae7: 1f 11 00          mviw r7,BAS_TOK_BUF_END
 2244 eaea:             ;      decr r7
 2245 eaea: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2246 eaed: 04 eb b3          jsr parse_sub16
 2247 eaf0: 1d 11 00          mviw r5,BAS_TOK_BUF_END
 2248 eaf3:             ;      decr r5
 2249 eaf3:             
 2250 eaf3:             parse_roomloop:
 2251 eaf3: 5f                decr r7
 2252 eaf4: 5d                decr r5
 2253 eaf5: 47                ldavr r7
 2254 eaf6: 4d                stavr r5
 2255 eaf7:             
 2256 eaf7: f6 02 14          ldr r6,bas_insertptr
 2257 eafa: 04 eb ea          jsr PARSE_COMPARE
 2258 eafd: a2 ea f3          brnz parse_roomloop
 2259 eb00:             
 2260 eb00: f7 02 14          ldr r7,bas_insertptr
 2261 eb03: 1e 04 00          MVIW R6,parse_token_buffer
 2262 eb06:             
 2263 eb06:             
 2264 eb06:             parse_insertloop:
 2265 eb06: 46                ldavr r6
 2266 eb07: 4f                stavr r7
 2267 eb08: 56                incr r6
 2268 eb09: 57                incr r7
 2269 eb0a: 0d 24             ldti 024h ; sub in actual eol token here
 2270 eb0c: aa eb 06          brneq parse_insertloop
 2271 eb0f:             
 2272 eb0f: 05                ret
 2273 eb10:             
 2274 eb10:             ;
 2275 eb10:             ; void removeLine(int lineNum)
 2276 eb10:             ;
 2277 eb10:             parse_removeline:
 2278 eb10: 04 eb 38        JSR basu_find
 2279 eb13: 2f              mvrha R7
 2280 eb14: a2 eb 1c        brnz parse_removeline1
 2281 eb17: 27              mvrla R7
 2282 eb18: a2 eb 1c        brnz parse_removeline1
 2283 eb1b: 05              ret
 2284 eb1c:             parse_removeline1:
 2285 eb1c: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2286 eb1e: 57              incr r7
 2287 eb1f: 57              incr r7
 2288 eb20: 57              incr r7
 2289 eb21: 47              ldavr r7
 2290 eb22: 36              mvarl r6        ; R6 = remove length
 2291 eb23: 57              incr r7
 2292 eb24: 47              ldavr r7
 2293 eb25: 3e              mvarh r6
 2294 eb26:             
 2295 eb26: 5f              decr r7         ;backup to start of line
 2296 eb27: 5f              decr r7
 2297 eb28: 5f              decr r7
 2298 eb29: 5f              decr r7
 2299 eb2a: 04 eb a8        JSR parse_add16
 2300 eb2d:             parse_removeloop:
 2301 eb2d: 47              ldavr r7
 2302 eb2e: 4d              stavr r5
 2303 eb2f: 55              incr r5
 2304 eb30: 57              incr r7
 2305 eb31: 2f              MVRHA r7
 2306 eb32:             
 2307 eb32: ee 02 0e        ldt  bas_bufferendhi
 2308 eb35:             
 2309 eb35: aa eb 2d        brneq parse_removeloop
 2310 eb38:             ;
 2311 eb38:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2312 eb38:             ; since we are moving complete contents of buffer
 2313 eb38:             ; Make sure it is set during addline
 2314 eb38:             ;
 2315 eb38:             
 2316 eb38:             
 2317 eb38:             ; run & parse utilites
 2318 eb38:             ;
 2319 eb38:             
 2320 eb38:             ;
 2321 eb38:             ; find in the token buffer linenum in r7
 2322 eb38:             ;
 2323 eb38:             basu_find:
 2324 eb38: 07 05           pushr r5                  ; save r5
 2325 eb3a: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2326 eb3d:             
 2327 eb3d:             basu_find_loop:
 2328 eb3d: 45              ldavr r5                  ;get token
 2329 eb3e: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2330 eb40: aa eb 4a        brneq basu_find_loop1     ;no continue
 2331 eb43: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2332 eb46: 27              mvrla r7
 2333 eb47: 08 50           popr r5
 2334 eb49: 05              ret
 2335 eb4a:             
 2336 eb4a:             basu_find_loop1:
 2337 eb4a: 55              incr r5                   ;skip past linenum token
 2338 eb4b: 27              mvrla r7                  ;test low byte of linenum
 2339 eb4c: 0b              MVAT
 2340 eb4d: 45              ldavr r5
 2341 eb4e: aa eb 61        brneq basu_find1          ;not eqaul
 2342 eb51: 55              incr r5
 2343 eb52: 2f              mvrha r7                  ;test high byte of linenum
 2344 eb53: 0b              MVAT
 2345 eb54: 45              ldavr r5
 2346 eb55: aa eb 62        brneq basu_find2          ;not equal
 2347 eb58: 5d              decr r5                   ;if equal backup to linenum token
 2348 eb59: 5d              decr r5
 2349 eb5a: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2350 eb5c: 0e 01           ldai 1                    ;return 1 in accumulator
 2351 eb5e: 08 50           popr r5
 2352 eb60: 05              ret
 2353 eb61:             
 2354 eb61:             basu_find1:
 2355 eb61: 55              incr r5                   ;skip over linenum high byte
 2356 eb62:             basu_find2:
 2357 eb62: 55              incr r5                   ;get line length
 2358 eb63: 45              ldavr r5
 2359 eb64: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2360 eb67: 36              mvarl r6
 2361 eb68: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2362 eb69: 5e              decr r6
 2363 eb6a: 5e              decr r6
 2364 eb6b:             basu_find_moveptr:            ; advance pointer to next line
 2365 eb6b: 55              incr r5
 2366 eb6c: 5e              decr r6
 2367 eb6d: 26              mvrla r6
 2368 eb6e: a2 eb 6b        brnz basu_find_moveptr
 2369 eb71: a0 eb 3d        br basu_find_loop
 2370 eb74:             
 2371 eb74:             
 2372 eb74:             ;
 2373 eb74:             ; Multiple numbers in R4 and R5
 2374 eb74:             ;
 2375 eb74:             ; Return in R7
 2376 eb74:             ;
 2377 eb74:             ; R6 = Bit counter
 2378 eb74:             ;
 2379 eb74:             parse_mul16:
 2380 eb74: 07 06               pushr r6
 2381 eb76:             
 2382 eb76: 1f 00 00            MVIW R7,0
 2383 eb79: 1e 00 10            MVIW R6,10h
 2384 eb7c:             ;       jsr showregs
 2385 eb7c:             
 2386 eb7c:             parse_mulloop:
 2387 eb7c:             ;       jsr showregs
 2388 eb7c:             
 2389 eb7c: 25                  mvrla r5
 2390 eb7d: b3 01               andi  01h
 2391 eb7f: a1 eb 85            brz parse_mulskip
 2392 eb82: 04 eb 9d            jsr parse_muladd16
 2393 eb85:             
 2394 eb85:             parse_mulskip:
 2395 eb85:             ;
 2396 eb85:             ; clear carry flag HACK
 2397 eb85:             ;
 2398 eb85: b0 00               addi 0
 2399 eb87:             ;
 2400 eb87: 24                  mvrla r4
 2401 eb88: e0                  cshl
 2402 eb89: 34                  mvarl r4
 2403 eb8a: 2c                  mvrha r4
 2404 eb8b: e0                  cshl
 2405 eb8c: 3c                  mvarh r4
 2406 eb8d:             
 2407 eb8d: b0 00               addi 0
 2408 eb8f:             
 2409 eb8f: 2d                  mvrha r5
 2410 eb90: e1                  cshr
 2411 eb91: 3d                  mvarh r5
 2412 eb92: 25                  mvrla r5
 2413 eb93: e1                  cshr
 2414 eb94: 35                  mvarl r5
 2415 eb95:             
 2416 eb95: 5e                  decr r6
 2417 eb96: 26                  mvrla r6
 2418 eb97: a2 eb 7c            brnz parse_mulloop
 2419 eb9a: 08 60               popr r6
 2420 eb9c: 05                  ret
 2421 eb9d:             
 2422 eb9d:             parse_muladd16:
 2423 eb9d:             
 2424 eb9d: 27                  MVRLA R7
 2425 eb9e: 0b                  MVAT
 2426 eb9f: 24                  mvrla r4
 2427 eba0: b8                  ADDT
 2428 eba1: 37                  mvarl r7
 2429 eba2:             
 2430 eba2: 2f                  mvrha r7
 2431 eba3: 0b                  MVAT
 2432 eba4: 2c                  mvrha r4
 2433 eba5: e3                  addtc
 2434 eba6: 3f                  mvarh r7
 2435 eba7: 05                  ret
 2436 eba8:             
 2437 eba8:             ;
 2438 eba8:             ; 16 bit add r6 and r7, return result in r7
 2439 eba8:             ;
 2440 eba8:             parse_add16:
 2441 eba8: 26                MVRLA R6
 2442 eba9: 0b                MVAT
 2443 ebaa: 27                mvrla r7
 2444 ebab: b8                ADDT
 2445 ebac: 37                mvarl r7
 2446 ebad: 2e                mvrha r6
 2447 ebae: 0b                MVAT
 2448 ebaf: 2f                mvrha r7
 2449 ebb0: e3                addtc
 2450 ebb1: 3f                mvarh r7
 2451 ebb2: 05                ret
 2452 ebb3:             
 2453 ebb3:             ;
 2454 ebb3:             ; 16 bit subtract of r6 from r7, return result in r7
 2455 ebb3:             ;
 2456 ebb3:             parse_sub16:
 2457 ebb3: 2e                mvrha r6
 2458 ebb4: b5                inva
 2459 ebb5: 3e                mvarh r6
 2460 ebb6: 26                mvrla r6
 2461 ebb7: b5                inva
 2462 ebb8: 36                mvarl r6
 2463 ebb9: 56                incr r6
 2464 ebba: a0 eb a8          br parse_add16
 2465 ebbd:             
 2466 ebbd:             ;
 2467 ebbd:             ; is digit in accumulator hex
 2468 ebbd:             ; returns 1 if yes and 0 if no
 2469 ebbd:             ;
 2470 ebbd:             ; what about upper/lower case
 2471 ebbd:             ;
 2472 ebbd:             ; destroys tmp register
 2473 ebbd:             parse_ishex:
 2474 ebbd: 0d 30          ldti '0'
 2475 ebbf: a7 eb d7       brlt parse_ishex_no
 2476 ebc2: 0d 39          ldti '9'
 2477 ebc4: a9 eb ca       brgt parse_ishex_af
 2478 ebc7: a0 eb d4       br parse_ishex_yes
 2479 ebca:             
 2480 ebca:             parse_ishex_af:
 2481 ebca: 0d 41           ldti 'A'
 2482 ebcc: a7 eb d7        brlt parse_ishex_no
 2483 ebcf: 0d 46           ldti 'F'
 2484 ebd1: a9 eb d7        brgt parse_ishex_no
 2485 ebd4:             
 2486 ebd4:             parse_ishex_yes:
 2487 ebd4: 0e 01           ldai 1
 2488 ebd6: 05              ret
 2489 ebd7:             
 2490 ebd7:             parse_ishex_no:
 2491 ebd7: 0e 00           ldai 0
 2492 ebd9: 05              ret
 2493 ebda:             
 2494 ebda:             ;
 2495 ebda:             ; is digit in accumulator decimal
 2496 ebda:             ; returns 1 if yes and 0 if no
 2497 ebda:             ;
 2498 ebda:             ; destroys tmp register
 2499 ebda:             ;
 2500 ebda:             parse_isdigit:
 2501 ebda: 0d 30          ldti '0'
 2502 ebdc: a7 eb e7       brlt parse_isdigit_no
 2503 ebdf: 0d 39          ldti '9'
 2504 ebe1: a9 eb e7       brgt parse_isdigit_no
 2505 ebe4:             
 2506 ebe4: 0e 01           ldai 1
 2507 ebe6: 05              ret
 2508 ebe7:             
 2509 ebe7:             parse_isdigit_no:
 2510 ebe7: 0e 00           ldai 0
 2511 ebe9: 05              ret
 2512 ebea:             
 2513 ebea:             ;
 2514 ebea:             ; 16 bit compare r6 and r7
 2515 ebea:             ;
 2516 ebea:             ; returns in accumulator
 2517 ebea:             ; r7=r6 00
 2518 ebea:             ; r7>r6 01
 2519 ebea:             ; r7<r6 ff
 2520 ebea:             ;
 2521 ebea:             ; destory Tmp
 2522 ebea:             ;
 2523 ebea:             parse_compare:
 2524 ebea: 2e            mvrha r6
 2525 ebeb: 0b            mvat
 2526 ebec: 2f            mvrha r7
 2527 ebed: aa eb f9      brneq parse_compareh
 2528 ebf0: 26            mvrla r6
 2529 ebf1: 0b            mvat
 2530 ebf2: 27            mvrla r7
 2531 ebf3: aa ec 02      brneq parse_comparel
 2532 ebf6: 0e 00         ldai 0
 2533 ebf8: 05            ret
 2534 ebf9:             
 2535 ebf9:             parse_compareh:
 2536 ebf9: a7 eb ff      brlt parse_compareh1
 2537 ebfc: 0e 01         ldai 1
 2538 ebfe: 05            ret
 2539 ebff:             parse_compareh1:
 2540 ebff: 0e ff         ldai 0ffh
 2541 ec01: 05            ret
 2542 ec02:             
 2543 ec02:             parse_comparel:
 2544 ec02: a7 ec 08      brlt parse_comparel1
 2545 ec05: 0e 01         ldai 1
 2546 ec07: 05            ret
 2547 ec08:             parse_comparel1:
 2548 ec08: 0e ff         ldai 0ffh
 2549 ec0a: 05            ret
 2550 ec0b:             
 2551 ec0b:             ;
 2552 ec0b:             ; STRINGS
 2553 ec0b:             ;
 2554 ec0b: 0a 0d 00    CRLF: DB 0ah,0dh,0
 2555 ec0e:             ;
 2556 ec0e:             
 2557 ec0e:                   ORG 0EE00h
 2558 ee00:             
 2559 ee00:             basic_test:
 2560 ee00: 25 0a 00 0e 
            00 06 03 68 
            65 6c 6c 6f 
            00 24 25 14     DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 2561 ee10: 00 0d 00 04 
            02 00 23 02 
            09 00 24 25 
            1e 00 0a 00     DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 2562 ee20: 06 04 02 00 
            24 25 28 00 
            0d 00 04 04 
            00 23 02 32     DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 2563 ee30: 00 24 25 32 
            00 17 00 06 
            03 68 32 00 
            15 04 02 00     DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 2564 ee40: 15 04 04 00 
            15 02 16 00 
            24 25 3c 00 
            12 00 0a 04     DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 2565 ee50: 03 00 23 02 
            01 00 0b 02 
            05 00 24 25 
            46 00 0a 00     DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 2566 ee60: 06 04 03 00 
            24 25 50 00 
            0a 00 0c 04 
            03 00 24 25     DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 2567 ee70: 51 00 12 00 
            06 03 6e 65 
            78 74 20 64 
            6f 6e 65 00     DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 2568 ee80: 24 25 52 00 
            0a 00 0e 02 
            6e 00 24 25 
            55 00 0a 00     DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 2569 ee90: 0d 02 7d 00 
            24 25 5a 00 
            12 00 06 03 
            6e 65 78 74     DB  0dh,02h,7dh,00h,24h,25h,5ah,00h,12h,00h,06h,03h,6eh,65h,78h,74h
 2570 eea0: 20 64 6f 6e 
            65 00 24 25 
            6e 00 11 00 
            06 03 69 6e     DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 2571 eeb0: 20 67 6f 73 
            75 62 00 24 
            25 70 00 11 
            00 06 03 69     DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 2572 eec0: 6e 20 73 75 
            62 20 32 00 
            24 25 72 00 
            07 00 0f 24     DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 2573 eed0: 25 7d 00 0c 
            00 06 03 65 
            6e 64 00 24 
            25 7e 00 07     DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 2574 eee0: 00 14 24 01 
            00 00 00 00 
            00 00 00 00 
            00 00 00 00     DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 2575 eef0:             
 2576 eef0:             ;
 2577 eef0:             ; The End
 2578 eef0:             ;
 2579 eef0:             ZZZZ:
 2580 eef0: 00            DB   0

eadeh: ADDLINE_MOVEPTR  - <  2234>   2238 
e4bbh: BASIC_LIST       - <  1186>    140 
e3dah: BASIC_RUN        - <   988>    147 
ee00h: BASIC_TEST       - <  2559>    185 
0100h: BASIC_VARS       - <    59>   1046   1064 
e4d4h: BASLIST1         - <  1202>   1195 
e574h: BASLIST10        - <  1303>   1297 
e583h: BASLIST11        - <  1311>   1305 
e592h: BASLIST12        - <  1319>   1313 
e5a1h: BASLIST13        - <  1327>   1321 
e5b0h: BASLIST14        - <  1335>   1329 
e5bfh: BASLIST15        - <  1343>   1337 
e5ceh: BASLIST16        - <  1351>   1345 
e5ddh: BASLIST17        - <  1359>   1353 
e5ech: BASLIST18        - <  1367>   1361 
e5fbh: BASLIST19        - <  1375>   1369 
e4dfh: BASLIST2         - <  1208>   1204 
e60ah: BASLIST20        - <  1383>   1377 
e619h: BASLIST21        - <  1391>   1385 
e62ch: BASLIST22        - <  1401>   1393 
e63fh: BASLIST23        - <  1411>   1403 
e652h: BASLIST24        - <  1421>   1413 
e665h: BASLIST25        - <  1431>   1423 
e678h: BASLIST26        - <  1441>   1433 
e68bh: BASLIST27        - <  1451>   1443 
e69eh: BASLIST28        - <  1461>   1453 
e6b1h: BASLIST29        - <  1471>   1463 
e4f6h: BASLIST3         - <  1223>   1210 
e6c4h: BASLIST30        - <  1481>   1473 
e6d7h: BASLIST31        - <  1491>   1483 
e6eah: BASLIST32        - <  1501>   1493 
e6fdh: BASLIST33        - <  1511>   1503 
e710h: BASLIST34        - <  1521>   1513 
e723h: BASLIST35        - <  1531>   1523 
e736h: BASLIST36        - <  1541>   1533 
e745h: BASLIST37        - <  1549>   1543 
e75eh: BASLIST38        - <  1566>   1551 
e512h: BASLIST4         - <  1240>   1225 
e529h: BASLIST5         - <  1263>   1242 
e538h: BASLIST6         - <  1271>   1265 
e547h: BASLIST7         - <  1279>   1273 
e556h: BASLIST8         - <  1287>   1281 
e565h: BASLIST9         - <  1295>   1289 
e76ah: BASLIST_DONE     - <  1574>   1199   1205   1570 
e4bfh: BASLIST_LOOP     - <  1191>   1200   1206   1221   1238   1261   1269 
         1277   1285   1293   1301   1309   1317   1325   1333   1341   1349 
         1357   1365   1373   1381   1389   1399   1409   1419   1429   1439 
         1449   1459   1469   1479   1489   1499   1509   1519   1529   1539 
         1547   1564 
e506h: BASLIST_STRING   - <  1231>   1235 
e50eh: BASLIST_STRINGEND - <  1236>   1233 
eb38h: BASU_FIND        - <  2323>    169    514   2278 
eb61h: BASU_FIND1       - <  2354>   2341 
eb62h: BASU_FIND2       - <  2356>   2346 
eb3dh: BASU_FIND_LOOP   - <  2327>   2369 
eb4ah: BASU_FIND_LOOP1  - <  2336>   2330 
eb6bh: BASU_FIND_MOVEPTR - <  2364>   2368 
020eh: BAS_BUFFERENDHI  - <    71>    160   2307 
e069h: BAS_COPYLOOP     - <   187>    194    196 
020ah: BAS_CURRENTTOKEN - <    69>   1830   1838   1865   2035 
e412h: BAS_ERROR        - <  1076>    268    966 
0282h: BAS_FORSTACK     - <    91>    240 
0280h: BAS_FORSTACKPTR  - <    90> 
02c0h: BAS_GOSUBPTR     - <   100> 
02c2h: BAS_GOSUBSTACK   - <   101>    238 
0214h: BAS_INSERTPTR    - <    78>   2216   2256   2260 
e077h: BAS_MSG1         - <   211>    267 
e08ah: BAS_MSG2         - <   212> 
e09bh: BAS_MSG3         - <   213>    962 
0212h: BAS_NEWLINELEN   - <    77>   2184   2204   2245 
0210h: BAS_NEWLINENUM   - <    76>   2088   2202   2212 
0204h: BAS_NXTPTR       - <    66>   1714   1726   1742   1777   1795   1851 
         1892 
0200h: BAS_RUN_ENDED    - <    64>    242    532    869   1022 
0208h: BAS_TOKCOUNTER   - <    68>   1828   2080   2107   2109   2120   2123 
         2139   2141   2148   2150   2165   2168   2183 
020ch: BAS_TOKENBUFFER  - <    70>    139    158    249   2213   2325 
0206h: BAS_TOKPTR       - <    67>   1826   2151 
1100h: BAS_TOK_BUF_END  - <   119>    159   2243   2247 
1000h: BAS_TOK_BUF_START - <   114>    157    184 
0202h: BAS_TXTPTR       - <    65>   1610   1699   1756   1824   1852   1863 
         1913   1954   2015   2032   2051   2129   2152 
ffc4h: CHAROUT          - <     5>    575 
ec0bh: CRLF             - <  2554>    609   1544 
e0bbh: EXE              - <   227> 
e0cbh: EXE_ACCEPT       - <   258>    291    308    314    317    531    545 
          554    620    624    640    642    647    655    658    660    687 
          724    734    776    791    809    811    822    837    951    981 
e0d8h: EXE_ACCEPT_DONE  - <   269>    266 
e349h: EXE_END_STMT     - <   868>    944 
e14fh: EXE_EXPR         - <   386>    315    459    475    484    494    546 
          596    643    812    823 
e186h: EXE_EXPR_AND     - <   424>    400 
e19ch: EXE_EXPR_DONE    - <   442>    404 
e158h: EXE_EXPR_LOOP    - <   393>    413    422    431    440 
e17bh: EXE_EXPR_MINUS   - <   415>    398 
e191h: EXE_EXPR_OR      - <   433>    402 
e170h: EXE_EXPR_PLUS    - <   406>    396 
e0e8h: EXE_FACTOR       - <   298>    334    349    358    367 
e0f6h: EXE_FACTOR1      - <   311>    305 
e107h: EXE_FACTOR2      - <   320>    313 
e3ech: EXE_FINISHED     - <  1021>   1009 
e3feh: EXE_FINISHED_YES - <  1033>   1025   1029 
e30dh: EXE_FOR_STMT     - <   782>    920 
e408h: EXE_GET_VARIABLE - <  1063>    289    739 
e2a9h: EXE_GOSUB_STMT   - <   653>    908 
e205h: EXE_GOTO_STMT    - <   543>    958 
e273h: EXE_IF_STMT      - <   617>    896 
e289h: EXE_IF_STMT1     - <   628>    626 
e1e7h: EXE_INDEX_FIND   - <   513>    522 
e0bbh: EXE_INIT         - <   237>   1001 
e1ebh: EXE_JUMP_LINE    - <   521>    547    679 
e202h: EXE_JUMP_LINE1   - <   536>    524    526 
e28ch: EXE_LET_STMT     - <   635>    902    952 
e3d1h: EXE_LINE_STMT    - <   971>   1015 
e301h: EXE_NEXT_DONE    - <   767>    757 
e2d3h: EXE_NEXT_STMT    - <   710>    938 
e43fh: EXE_NEXT_TOK3_DONE - <  1121>   1117 
e437h: EXE_NEXT_TOK3_LOOP - <  1115>   1119 
e413h: EXE_NEXT_TOKEN   - <  1083>    270    348    357    366    407    416 
          425    434    474    483    493    567    576    582    611 
e41dh: EXE_NEXT_TOKEN1  - <  1092>   1086 
e426h: EXE_NEXT_TOKEN2  - <  1100>   1094 
e431h: EXE_NEXT_TOKEN3  - <  1110>   1102 
e441h: EXE_NEXT_TOKEN4  - <  1125>   1112 
e443h: EXE_NUM          - <  1132>    306    656 
e347h: EXE_PEEK_STMT    - <   856>    926 
e348h: EXE_POKE_STMT    - <   862>    932 
e211h: EXE_PRINT_STMT   - <   552>    890 
e228h: EXE_PRINT_STMT1  - <   570>    559 
e238h: EXE_PRINT_STMT2  - <   579>    573 
e243h: EXE_PRINT_STMT3  - <   585>    581 
e255h: EXE_PRINT_STMT4  - <   595>    587    589    591 
e269h: EXE_PRINT_STMT_DONE - <   608>    593    603    605 
e216h: EXE_PRINT_STMT_LOOP - <   556>    606 
e25bh: EXE_PRINT_STMT_TEST - <   600>    568    577    583 
e1a3h: EXE_RELATION     - <   455>    622 
e1e0h: EXE_RELATION_DONE - <   501>    471 
e1d5h: EXE_RELATION_EQ  - <   492>    469 
e1cah: EXE_RELATION_GT  - <   482>    467 
e1ach: EXE_RELATION_LOOP - <   462>    480    490    499 
e1bfh: EXE_RELATION_LT  - <   473>    465 
e2c5h: EXE_RETURN_STMT  - <   685>    914 
e3ddh: EXE_RUN          - <  1008>   1016 
e3e6h: EXE_RUN_CONT     - <  1014>   1011 
e401h: EXE_SET_VARIABLE - <  1045>    645    742    817 
e350h: EXE_STMT         - <   876>    627    982 
e35ah: EXE_STMT1        - <   893>    889 
e3abh: EXE_STMT10       - <   947>    943 
e3b9h: EXE_STMT11       - <   955>    949 
e3c2h: EXE_STMT12       - <   961>    957 
e363h: EXE_STMT2        - <   899>    895 
e36ch: EXE_STMT3        - <   905>    901 
e375h: EXE_STMT4        - <   911>    907 
e37eh: EXE_STMT5        - <   917>    913 
e387h: EXE_STMT6        - <   923>    919 
e390h: EXE_STMT7        - <   929>    925 
e399h: EXE_STMT8        - <   935>    931 
e3a2h: EXE_STMT9        - <   941>    937 
e0b1h: EXE_STMT_MSG     - <   214> 
e450h: EXE_STRING       - <  1153>    564 
e10bh: EXE_TERM         - <   330>    390    408    417    426    435 
e127h: EXE_TERM_ASTR    - <   347>    340 
e148h: EXE_TERM_DONE    - <   374>    345 
e114h: EXE_TERM_LOOP    - <   337>    354    363    372 
e13dh: EXE_TERM_MOD     - <   365>    344 
e132h: EXE_TERM_SLASH   - <   356>    342 
e0dch: EXE_VARFACTOR    - <   282>    321 
e44ch: EXE_VARIABLE_NUM - <  1147>    285    636    728    795 
e8b2h: FOUND            - <  1776>   1759 
e8bch: NOKEYOWRDSFOUND  - <  1784>   1755 
e7dch: PARSECHAR1       - <  1618>   1615 
e824h: PARSECHAR10      - <  1663>   1660 
e82ch: PARSECHAR11      - <  1668>   1665 
e834h: PARSECHAR12      - <  1673>   1670 
e83ch: PARSECHAR13      - <  1678>   1675 
e844h: PARSECHAR14      - <  1683>   1680 
e84ch: PARSECHAR15      - <  1688>   1685 
e7e4h: PARSECHAR2       - <  1623>   1620 
e7ech: PARSECHAR3       - <  1628>   1625 
e7f4h: PARSECHAR4       - <  1633>   1630 
e7fch: PARSECHAR5       - <  1638>   1635 
e804h: PARSECHAR6       - <  1643>   1640 
e80ch: PARSECHAR7       - <  1648>   1645 
e814h: PARSECHAR8       - <  1653>   1650 
e81ch: PARSECHAR9       - <  1658>   1655 
eba8h: PARSE_ADD16      - <  2440>   1928   2299   2464 
eaaeh: PARSE_ADDLINE    - <  2201> 
eabeh: PARSE_ADDLINE1   - <  2210>   2207 
eac4h: PARSE_ADDLINELOOP - <  2215>   2239 
eae7h: PARSE_ADDROOM    - <  2242>   2225 
e9c2h: PARSE_AF         - <  1997>   1994 
ebeah: PARSE_COMPARE    - <  2523>   2223   2257 
ebf9h: PARSE_COMPAREH   - <  2535>   2527 
ebffh: PARSE_COMPAREH1  - <  2539>   2536 
ec02h: PARSE_COMPAREL   - <  2543>   2531 
ec08h: PARSE_COMPAREL1  - <  2547>   2544   2544 
e9d9h: PARSE_ERROR_PRINT - <  2024> 
e9dah: PARSE_FINISHED   - <  2030>   1845   1877 
e9f0h: PARSE_FINISHED_YES - <  2041>   2034   2037 
e9b8h: PARSE_GETNIBBLE  - <  1990>   1955   1962   1969   1976 
e84fh: PARSE_GET_NEXT_TOK - <  1697>   1829   1864 
e854h: PARSE_GNT1       - <  1705> 
e85bh: PARSE_GNT1LOOP   - <  1709>   1713 
e86bh: PARSE_GNT2       - <  1721>   1708 
e879h: PARSE_GNT3       - <  1732>   1724 
e87fh: PARSE_GNT3LOOP   - <  1736>   1740 
e88fh: PARSE_GNT4       - <  1747>   1735 
e8d2h: PARSE_GNT_ERROR  - <  1800>   1791   1793 
e8d7h: PARSE_INIT       - <  1821>   2078 
0300h: PARSE_INPUT_LINE - <   106> 
eb06h: PARSE_INSERTLOOP - <  2264>   2270 
ebdah: PARSE_ISDIGIT    - <  2500>   1707   1712   1942 
ebe7h: PARSE_ISDIGIT_NO - <  2509>   2502   2504 
ebbdh: PARSE_ISHEX      - <  2473> 
ebcah: PARSE_ISHEX_AF   - <  2480>   2477 
ebd7h: PARSE_ISHEX_NO   - <  2490>   2475   2482   2484 
ebd4h: PARSE_ISHEX_YES  - <  2486>   2478 
e76dh: PARSE_KEYWORDS   - <  1581>   1752 
ea04h: PARSE_LINE       - <  2077>    179 
ea4fh: PARSE_LINE1      - <  2126>   2112 
ea6bh: PARSE_LINE1DONE  - <  2143>   2135 
ea58h: PARSE_LINE1LOOP  - <  2132>   2142 
ea80h: PARSE_LINE2      - <  2155>   2128 
ea99h: PARSE_LINE_DONE  - <  2171>   2103 
ea22h: PARSE_LINE_LOOP  - <  2099>   2124   2153   2157   2169 
eb74h: PARSE_MUL16      - <  2379>   1924 
eb9dh: PARSE_MULADD16   - <  2422>   2392 
eb7ch: PARSE_MULLOOP    - <  2386>   2418 
eb85h: PARSE_MULSKIP    - <  2394>   2391 
e8f5h: PARSE_NEXT       - <  1844>   1893   2100 
e8fch: PARSE_NEXT1      - <  1849>   1846 
e904h: PARSE_NEXT1LOOP  - <  1854>   1859 
e90eh: PARSE_NEXT2      - <  1862>   1857 
e91fh: PARSE_NEXT3      - <  1876>   1868   1883 
e92fh: PARSE_NEXTDONE   - <  1885>   1878   1881 
e936h: PARSE_NEXTDONE2  - <  1891>   1888 
e93fh: PARSE_NUM        - <  1907>   2087   2113 
e97bh: PARSE_NUM_CHAR   - <  1940>   1914   1917 
e985h: PARSE_NUM_CHAR1  - <  1946>   1943 
e96fh: PARSE_NUM_DONE   - <  1931>   1920 
e951h: PARSE_NUM_LOOP   - <  1916>   1930 
e98ah: PARSE_NUM_OLD    - <  1952> 
ea04h: PARSE_POS        - <  2064> 
eb10h: PARSE_REMOVELINE - <  2277>    172   2203 
eb1ch: PARSE_REMOVELINE1 - <  2284>   2280   2282 
eb2dh: PARSE_REMOVELOOP - <  2300>   2309 
eaf3h: PARSE_ROOMLOOP   - <  2250>   2258 
e7cch: PARSE_SINGLECHAR - <  1607>   1723 
e9cah: PARSE_STRING     - <  2007> 
e9d3h: PARSE_STRING1    - <  2013>   2010 
ebb3h: PARSE_SUB16      - <  2456>   2246 
e8f1h: PARSE_TOKEN      - <  1837>   2008   2101 
0400h: PARSE_TOKEN_BUFFER - <   110>   1825   2081   2179   2261 
e9f5h: PARSE_VARIABLE_NUM - <  2049>   2158 
e89bh: PCMPLOOP         - <  1757>   1765 
ffcch: SHOWADDR         - <     7>    964   1198   1569 
ffd8h: SHOWBYTE         - <    10>    965 
ffd4h: SHOWR7           - <     9>    167    170    597   1218   1561 
e8a9h: SKIPLOOP         - <  1769>   1772 
e8a9h: SKIPTOEND        - <  1767>   1762 
ffc0h: STRINGOUT        - <     4>    566    610    963   1197   1228   1267 
         1275   1283   1291   1299   1307   1315   1323   1331   1339   1347 
         1355   1363   1371   1379   1387   1545   1568 
0019h: TOKENIZER_AND    - <    40>    399   1432   1641 
001bh: TOKENIZER_ASTR   - <    42>    339   1452   1651 
0010h: TOKENIZER_CALL   - <    31>   1352   1593 
0015h: TOKENIZER_COMMA  - <    36>    572   1392   1621 
0024h: TOKENIZER_CR     - <    51>    530    602    646    659    775    836 
         1542   1616   2102   2172 
0009h: TOKENIZER_ELSE   - <    24>   1296   1586 
0014h: TOKENIZER_END    - <    35>    942   1384   1597 
0001h: TOKENIZER_EOF    - <    16>    604   1028   1203   2036   2329 
0023h: TOKENIZER_EQ     - <    50>    468    641    810   1532   1686 
0000h: TOKENIZER_ERROR  - <    15>   1194   1598   1801 
000ah: TOKENIZER_FOR    - <    25>    790    918   1304   1587 
000eh: TOKENIZER_GOSUB  - <    29>    654    906   1336   1591 
000dh: TOKENIZER_GOTO   - <    28>    544    956   1328   1590 
0022h: TOKENIZER_GT     - <    49>    466   1522   1681 
001eh: TOKENIZER_HASH   - <    45>   1482   1666 
0007h: TOKENIZER_IF     - <    22>    619    894   1280   1584 
001fh: TOKENIZER_LEFTP  - <    46>    312    590   1492   1661 
0005h: TOKENIZER_LET    - <    20>    948    950   1264   1582 
0025h: TOKENIZER_LINENUM - <    52>    980   1101   1550   2083 
0021h: TOKENIZER_LT     - <    48>    464   1512   1676 
0018h: TOKENIZER_MINUS  - <    39>    397   1422   1636 
001dh: TOKENIZER_MOD    - <    44>    343   1472   1656 
000ch: TOKENIZER_NEXT   - <    27>    629    723    936   1320   1589 
0002h: TOKENIZER_NUMBER - <    17>    304    588    657   1085   1209   1715 
         2111 
001ah: TOKENIZER_OR     - <    41>    401   1442   1646 
0012h: TOKENIZER_PEEK   - <    33>    924   1368   1595 
0017h: TOKENIZER_PLUS   - <    38>    395   1412   1631 
0013h: TOKENIZER_POKE   - <    34>    930   1376   1596 
0006h: TOKENIZER_PRINT  - <    21>    553    888   1272   1583 
0011h: TOKENIZER_REM    - <    32>   1360   1594   1867 
000fh: TOKENIZER_RETURN - <    30>    686    912   1344   1592 
0020h: TOKENIZER_RIGHTP - <    47>    316   1502   1671 
0016h: TOKENIZER_SEMICOLON - <    37>    580   1402   1626 
001ch: TOKENIZER_SLASH  - <    43>    341   1462 
0003h: TOKENIZER_STRING - <    18>    558   1111   1224   1743   2009   2127 
0008h: TOKENIZER_THEN   - <    23>    623   1288   1585 
000bh: TOKENIZER_TO     - <    26>    821   1312   1588 
0004h: TOKENIZER_VARIABLE - <    19>    290    586    639    733    808    900 
         1093   1241   1796   2156 
e4aah: TOKL_CALL        - <  1182>   1354 
e46ah: TOKL_ELSE        - <  1171>   1298 
e4a5h: TOKL_END         - <  1181>   1386 
e4b0h: TOKL_ERROR       - <  1183>   1196   1567 
e470h: TOKL_FOR         - <  1172>   1306 
e485h: TOKL_GOSUB       - <  1176>   1338 
e47fh: TOKL_GOTO        - <  1175>   1330 
e460h: TOKL_IF          - <  1169>   1282 
e454h: TOKL_LET         - <  1167>   1266 
e479h: TOKL_NEXT        - <  1174>   1322 
e499h: TOKL_PEEK        - <  1179>   1370 
e49fh: TOKL_POKE        - <  1180>   1378 
e459h: TOKL_PRINT       - <  1168>   1274 
e494h: TOKL_REM         - <  1178>   1362 
e48ch: TOKL_RETURN      - <  1177>   1346 
e464h: TOKL_THEN        - <  1170>   1290 
e475h: TOKL_TO          - <  1173>   1314 
e894h: TOP              - <  1753>   1774 
ffd0h: TOUPPER          - <     8>   1998 
ffc8h: UARTOUT          - <     6>   1220   1230   1249   1260   1395   1397 
         1405   1407   1415   1417   1425   1427   1435   1437   1445   1447 
         1455   1457   1465   1467   1475   1477   1485   1487   1495   1497 
         1505   1507   1515   1517   1525   1527   1535   1537   1563 
eef0h: ZZZZ             - <  2579> 

2580 Lines assembled
0 Errors
310 Labels
Object Code:3278 bytes

