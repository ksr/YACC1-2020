RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             
   15 0000:             ;
   16 0000:             ; Basic interpreter tokens
   17 0000:             ;
   18 0000:             TOKENIZER_ERROR: EQU 00
   19 0000:             TOKENIZER_EOF: EQU 01
   20 0000:             TOKENIZER_NUMBER: EQU 02
   21 0000:             TOKENIZER_STRING: EQU 03
   22 0000:             TOKENIZER_VARIABLE: EQU 04
   23 0000:             TOKENIZER_LET: EQU 05
   24 0000:             TOKENIZER_PRINT: EQU 06
   25 0000:             TOKENIZER_IF: EQU 07
   26 0000:             TOKENIZER_THEN: EQU 08
   27 0000:             TOKENIZER_ELSE: EQU 09
   28 0000:             TOKENIZER_FOR: EQU 10
   29 0000:             TOKENIZER_TO: EQU 11
   30 0000:             TOKENIZER_NEXT: EQU 12
   31 0000:             TOKENIZER_GOTO: EQU 13
   32 0000:             TOKENIZER_GOSUB: EQU 14
   33 0000:             TOKENIZER_RETURN: EQU 15
   34 0000:             TOKENIZER_CALL: EQU 16
   35 0000:             TOKENIZER_REM: EQU 17
   36 0000:             TOKENIZER_PEEK: EQU 18
   37 0000:             TOKENIZER_POKE: EQU 19
   38 0000:             TOKENIZER_END: EQU 20
   39 0000:             TOKENIZER_COMMA: EQU 21
   40 0000:             TOKENIZER_SEMICOLON: EQU 22
   41 0000:             TOKENIZER_PLUS: EQU 23
   42 0000:             TOKENIZER_MINUS: EQU 24
   43 0000:             TOKENIZER_AND: EQU 25
   44 0000:             TOKENIZER_OR: EQU 26
   45 0000:             TOKENIZER_ASTR: EQU 27
   46 0000:             TOKENIZER_SLASH: EQU 28
   47 0000:             TOKENIZER_MOD: EQU 29
   48 0000:             TOKENIZER_HASH: EQU 30
   49 0000:             TOKENIZER_LEFTP: EQU 31
   50 0000:             TOKENIZER_RIGHTP: EQU 32
   51 0000:             TOKENIZER_LT: EQU 33
   52 0000:             TOKENIZER_GT: EQU 34
   53 0000:             TOKENIZER_EQ: EQU 35
   54 0000:             TOKENIZER_CR: EQU 36
   55 0000:             TOKENIZER_LINENUM: EQU 37
   56 0000:             
   57 0000:             ;
   58 0000:             ; BASIC interpreter user variables area
   59 0000:             ; currently 26 1-byte variables
   60 0000:             ; for now must be 0xAA00 (256 byte) aligned
   61 0000:             ;
   62 0000:             BASIC_VARS: EQU 0100h
   63 0000:             
   64 0000:             ;
   65 0000:             ; Basic interpreter internal variables
   66 0000:             ;
   67 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   68 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   69 0000:             bas_nxtptr:       EQU 0204h ;
   70 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   71 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   72 0000:             bas_currenttoken:  EQU 020Ah ; used in parsing
   73 0000:             bas_tokenbuffer:  EQU 020Ch ;Pointer to start of token buffer
   74 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   75 0000:                                         ; this value should be + 1 end of buffer
   76 0000:                                         ; if buffer is 0x1000-0x1fff this is
   77 0000:                                         ; set to 0x2000. Used in moving buffer around
   78 0000:                                         ; in add and remove line
   79 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   80 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   81 0000:             bas_insertptr:    EQU 0214H
   82 0000:             
   83 0000:             ;
   84 0000:             ; for next statement stack ptr and stack data
   85 0000:             ;
   86 0000:             ; for next stack data
   87 0000:             ; format
   88 0000:             ;   2 bytes for variable id (only first byte used for now)
   89 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
   90 0000:             ;   2 bytes ptr to line after for instruction (format HL)
   91 0000:             ; later add step amount
   92 0000:             ;
   93 0000:             bas_forstackptr: EQU 0280h
   94 0000:             bas_forstack: EQU 0282h
   95 0000:             
   96 0000:             ;
   97 0000:             ; gosub stack ptr and data
   98 0000:             ;
   99 0000:             ; gosub STACK
  100 0000:             ; format
  101 0000:             ;   2 bytes return location ptr
  102 0000:             ;
  103 0000:             bas_gosubptr: EQU 02c0h
  104 0000:             bas_gosubstack: EQU 02c2h
  105 0000:             
  106 0000:             ;
  107 0000:             ; Basic interpreter text input line buffer
  108 0000:             ;
  109 0000:             parse_input_line: EQU 300h
  110 0000:             ;
  111 0000:             ; Basic interpreter tmp buffer to build up current token line
  112 0000:             ;
  113 0000:             parse_token_buffer: EQU 400h
  114 0000:             ;
  115 0000:             ; Basic interpreter token buffer
  116 0000:             ;
  117 0000:             bas_tok_buf_start: EQU 1000h
  118 0000:             ;
  119 0000:             ; Basic interpreter token buffer end + 1
  120 0000:             ;
  121 0000:             ;bas_tok_buf_end: EQU 2000h debug
  122 0000:             bas_tok_buf_end: EQU 1100h
  123 0000:             
  124 0000:             ;
  125 0000:             ; basic interpreter, add IO and peek/poke
  126 0000:             ;
  127 0000:             
  128 0000:             ;
  129 0000:             ; Basic Interpreter
  130 0000:             ;
  131 0000:             
  132 0000:             ;
  133 0000:             ; Entry Points
  134 0000:             ;
  135 0000:               ORG 0e000h
  136 e000:             ;
  137 e000:             ; list
  138 e000:             ;
  139 e000:             ;      mviw r7,basic_test ; hack this address should probably be passed in
  140 e000:                                      ; or a global variable
  141 e000:             
  142 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  143 e003: 04 e5 47          JSR  basic_list
  144 e006: 05                Ret
  145 e007:             ;
  146 e007:                   ORG 0e010h
  147 e010:             ;
  148 e010:             ; run
  149 e010:             ;
  150 e010: 04 e4 60          jsr basic_run
  151 e013: 05                Ret
  152 e014:             
  153 e014:             ;
  154 e014:                   ORG 0e020h
  155 e020:             ;
  156 e020:             ; cold start
  157 e020:             ;
  158 e020:             ; Hack later pass in R7
  159 e020:             ;
  160 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  161 e023: ff 02 0c          STR R7,bas_tokenbuffer
  162 e026: 1f 11 00          mviw r7,bas_tok_buf_end
  163 e029: ff 02 0e          str r7,bas_bufferendhi
  164 e02c: 05                Ret
  165 e02d:             ;
  166 e02d:                   ORG 0e030h
  167 e030:             ;
  168 e030:             ; tests - called from monitor
  169 e030:             ;
  170 e030: 04 ff d4          jsr showr7
  171 e033: 1f 00 0a          mviw r7,0010
  172 e036: 04 eb d1          jsr basu_find
  173 e039: 04 ff d4          jsr showr7
  174 e03c: 1f 00 0a          mviw r7,0010
  175 e03f: 04 eb a9          jsr parse_removeline
  176 e042: 05                ret
  177 e043:             ;
  178 e043:                   org 0e050h
  179 e050:             ;
  180 e050:             ; parse line
  181 e050:             ;
  182 e050: 04 ea 97          jsr parse_line
  183 e053: 05                ret
  184 e054:             ;
  185 e054:                   ORG 0e060h
  186 e060:             ;
  187 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  188 e063: 1e ee 00          mviw R6,BASIC_TEST
  189 e066: 1d 04 00          mviw R5,0400h
  190 e069:             bas_copyloop:
  191 e069: 46                ldavr R6
  192 e06a: 4f                stavr r7
  193 e06b: 56                incr r6
  194 e06c: 57                incr r7
  195 e06d: 5d                decr r5
  196 e06e: 2d                mvrha r5
  197 e06f: a2 e0 69          brnz bas_copyloop
  198 e072: 25                mvrla r5
  199 e073: a2 e0 69          brnz bas_copyloop
  200 e076: 05                ret
  201 e077:             
  202 e077:             ;
  203 e077:             ; copy test code into main buffer
  204 e077:             ;
  205 e077:             ; Hack later pass in R7
  206 e077:             ;
  207 e077:             ;      MVIW R7,basic_test
  208 e077:             ;      STR R7,bas_tokenbuffer
  209 e077:             ;      Ret
  210 e077:             
  211 e077:             ;
  212 e077:             ; basic interpreter messages
  213 e077:             ;
  214 e077: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "Accept - unexpected token",0,0ah,0dh
  215 e093: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  216 e0a4: 42 41 53 49 
            43 20 54 4f 
            4b 45 4e 20 
            4e 4f 54 20 
            53 55 50 50 
            4f 52 54 45 
            44 20 0a 0d bas_msg3: db "Basic token not supported ",0ah,0dh
  217 e0c0: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  218 e0ca:             ;
  219 e0ca:             ; Basic interpreter - execution engine
  220 e0ca:             ; Register Usage
  221 e0ca:             ; R0 - Program Counter
  222 e0ca:             ; R1 - Stack Pointer
  223 e0ca:             ; R2 - Direct addressing mode
  224 e0ca:             ; R3 - Basic Interpreter Token Buffer ptr
  225 e0ca:             ; R4 - working register
  226 e0ca:             ; R5 - working register
  227 e0ca:             ; R6 - Working register
  228 e0ca:             ; R7 - parameter passing & return value
  229 e0ca:             ;
  230 e0ca:             exe:
  231 e0ca:             
  232 e0ca:             ;
  233 e0ca:             ; void ubasic_init()
  234 e0ca:             ;
  235 e0ca:             ; Setup basic interpreter execution engine
  236 e0ca:             ;
  237 e0ca:             ; destorys R4 and accumulator
  238 e0ca:             ; ?? Should these pointers be zero based or actual address in memory
  239 e0ca:             ;
  240 e0ca:             exe_init:
  241 e0ca: 1d 02 c2        MVIW R5,bas_gosubstack
  242 e0cd:             ;    movrr r6,r9
  243 e0cd: 1c 02 82        MVIW R4,bas_forstack
  244 e0d0:             ;    movrr r6,r8
  245 e0d0: 1e 02 00        MVIW R6,bas_run_ended
  246 e0d3: 0e 00           LDAI 0
  247 e0d5: 4e              STAVR R6
  248 e0d6:             ;
  249 e0d6:             ; initialize tokenbufferptr to start of tokenBuffer (actual memory address)
  250 e0d6:             ;
  251 e0d6:             ;   tok_init:
  252 e0d6: f3 02 0c        LDR R3,bas_tokenbuffer
  253 e0d9: 05              RET
  254 e0da:             
  255 e0da:             ;
  256 e0da:             ; void accept(int)
  257 e0da:             ;
  258 e0da:             ; compare accumulator with current token then advance to next token in buffer
  259 e0da:             ; assume accumulator destroyed
  260 e0da:             ;
  261 e0da:             exe_accept:
  262 e0da: 09              push
  263 e0db:             ;
  264 e0db:             ; get current token into accumulator
  265 e0db:             ;
  266 e0db: 43              LDAVR R3
  267 e0dc: 0b              MVAT
  268 e0dd: 0a              POP
  269 e0de: a8 e0 ef        BREQ exe_accept_done
  270 e0e1: 04 ff e0        JSR showbytea
  271 e0e4: 0e 2d           ldai '-'
  272 e0e6: 04 ff c8        JSR uartout
  273 e0e9: 1f e0 77        mviw R7,bas_msg1
  274 e0ec: 04 e4 9d        JSR bas_error
  275 e0ef:             
  276 e0ef:             exe_accept_done:
  277 e0ef: 04 e4 9f        jsr exe_next_token
  278 e0f2: 05              RET
  279 e0f3:             
  280 e0f3:             ;
  281 e0f3:             ; int varfactor()
  282 e0f3:             ;
  283 e0f3:             ; get variable id pointed to by exe_variable_num in token stream
  284 e0f3:             ; (this is not a value but a variable id)
  285 e0f3:             ; value returned by exe_get_variable in r7
  286 e0f3:             ;
  287 e0f3:             ; return value in R7
  288 e0f3:             ;
  289 e0f3:             exe_varfactor:
  290 e0f3:             ; get variable number id (one byte for now a-z) into accumulator
  291 e0f3:             ;
  292 e0f3: 04 e4 d8        jsr exe_variable_num
  293 e0f6:             ;
  294 e0f6:             ; variable id in accumulator, return in r7
  295 e0f6:             ;
  296 e0f6: 04 e4 92        jsr exe_get_variable
  297 e0f9: 0e 04           LDAI TOKENIZER_VARIABLE
  298 e0fb: 04 e0 da        JSR exe_accept
  299 e0fe: 05              RET
  300 e0ff:             
  301 e0ff:             ;
  302 e0ff:             ; int factor()
  303 e0ff:             ; return value in R7
  304 e0ff:             ;
  305 e0ff:             exe_factor:
  306 e0ff:             ;
  307 e0ff:             ; get current token into accumulator
  308 e0ff:             ;
  309 e0ff: 43              LDAVR R3
  310 e100:             ;
  311 e100: 0d 02           LDTI TOKENIZER_NUMBER
  312 e102: aa e1 0d        BRNEQ exe_factor1
  313 e105: 04 e4 cf        JSR exe_num
  314 e108: 0c              MVTA
  315 e109: 04 e0 da        JSR exe_accept
  316 e10c: 05              RET
  317 e10d:             
  318 e10d:             exe_factor1:
  319 e10d: 0d 1f           LDTI TOKENIZER_LEFTP
  320 e10f: aa e1 1e        BRNEQ exe_factor2
  321 e112: 04 e0 da        JSR exe_accept
  322 e115: 04 e1 71        JSR exe_expr
  323 e118: 0e 20           LDAI TOKENIZER_RIGHTP
  324 e11a: 04 e0 da        JSR exe_accept
  325 e11d: 05              RET
  326 e11e:             
  327 e11e:             exe_factor2:
  328 e11e: 04 e0 f3        jsr exe_varfactor
  329 e121: 05              ret
  330 e122:             
  331 e122:             ;
  332 e122:             ; int term()
  333 e122:             ; R5 = F1
  334 e122:             ; R6 = F2
  335 e122:             ; R7 = return value
  336 e122:             ;
  337 e122:             exe_term:
  338 e122: 07 05           pushr r5
  339 e124: 07 06           pushr r6
  340 e126:             
  341 e126: 04 e0 ff        jsr exe_factor
  342 e129: 0f 57           MOVRR r7,r5
  343 e12b:             
  344 e12b:             exe_term_loop:
  345 e12b: 43              LDAVR R3
  346 e12c: 0d 1b           ldti TOKENIZER_ASTR
  347 e12e: a8 e1 3e        BREQ exe_term_astr
  348 e131: 0d 1c           LDTI TOKENIZER_SLASH
  349 e133: a8 e1 54        breq exe_term_slash
  350 e136: 0d 1d           ldti TOKENIZER_MOD
  351 e138: a8 e1 5f        breq exe_term_mod
  352 e13b: a0 e1 6a        br exe_term_done
  353 e13e:             
  354 e13e:             exe_term_astr:
  355 e13e: 04 e4 9f        jsr exe_next_token
  356 e141: 04 e0 ff        jsr exe_factor
  357 e144: 0f 67           movrr r7,r6
  358 e146:             ;
  359 e146:             ; do mulitply f1 = f1 * f2
  360 e146:             ;
  361 e146: 07 04           pushr r4
  362 e148: 0f 46           movrr r6,r4
  363 e14a: 04 ec 0d        jsr PARSE_MUL16
  364 e14d: 0f 57           movrr r7,r5
  365 e14f: 08 40           popr r4
  366 e151: a0 e1 2b        BR exe_term_loop
  367 e154:             
  368 e154:             exe_term_slash:
  369 e154: 04 e4 9f        jsr exe_next_token
  370 e157: 04 e0 ff        jsr exe_factor
  371 e15a: 0f 67           movrr r7,r6
  372 e15c:             ;
  373 e15c:             ; do divide f1 = f1 / f2
  374 e15c:             ;
  375 e15c: a0 e1 2b        BR exe_term_loop
  376 e15f:             
  377 e15f:             exe_term_mod:
  378 e15f: 04 e4 9f        jsr exe_next_token
  379 e162: 04 e0 ff        jsr exe_factor
  380 e165: 0f 67           movrr r7,r6
  381 e167:             ;
  382 e167:             ; f1 = f1 % f2
  383 e167:             ;
  384 e167: a0 e1 2b        BR exe_term_loop
  385 e16a:             
  386 e16a:             exe_term_done:
  387 e16a: 0f 75           MOVRR r5,r7
  388 e16c: 08 60           popr r6
  389 e16e: 08 50           popr r5
  390 e170: 05              ret
  391 e171:             ;
  392 e171:             ; static VARIABLE_TYPE expr()
  393 e171:             ;
  394 e171:             ; R5 = t1
  395 e171:             ; R6 = t2
  396 e171:             ; R7 = return value
  397 e171:             ;
  398 e171:             exe_expr:
  399 e171: 07 05           pushr r5
  400 e173: 07 06           pushr r6
  401 e175:             
  402 e175: 04 e1 22        jsr exe_term
  403 e178: 0f 57           MOVRR r7,r5
  404 e17a:             
  405 e17a:             exe_expr_loop:
  406 e17a: 43              LDAVR R3
  407 e17b: 0d 17           ldtI TOKENIZER_PLUS
  408 e17d: a8 e1 92        BREQ exe_expr_plus
  409 e180: 0d 18           ldtI TOKENIZER_MINUS
  410 e182: a8 e1 a4        breq exe_expr_minus
  411 e185: 0d 19           ldtI TOKENIZER_AND
  412 e187: a8 e1 b6        breq exe_expr_and
  413 e18a: 0d 1a           ldti TOKENIZER_OR
  414 e18c: a8 e1 c8        breq exe_expr_or
  415 e18f:             
  416 e18f: a0 e1 d3        br exe_expr_done
  417 e192:             
  418 e192:             exe_expr_plus:
  419 e192: 04 e4 9f        jsr exe_next_token
  420 e195: 04 e1 22        jsr exe_term
  421 e198: 0f 67           movrr r7,r6
  422 e19a:             ;
  423 e19a:             ; t1 = t1 + t2
  424 e19a:             ;
  425 e19a: 0f 75           movrr r5,r7
  426 e19c: 04 ec 48        jsr parse_add16
  427 e19f: 0f 57           movrr r7,r5
  428 e1a1: a0 e1 7a        BR exe_expr_loop
  429 e1a4:             
  430 e1a4:             exe_expr_minus:
  431 e1a4: 04 e4 9f        jsr exe_next_token
  432 e1a7: 04 e1 22        jsr exe_term
  433 e1aa: 0f 67           movrr r7,r6
  434 e1ac:             ;
  435 e1ac:             ; t1 = t1 - t2
  436 e1ac:             ;
  437 e1ac: 0f 75           movrr r5,r7
  438 e1ae: 04 ec 56        jsr parse_sub16
  439 e1b1: 0f 57           movrr r7,r5
  440 e1b3: a0 e1 7a        BR exe_expr_loop
  441 e1b6:             
  442 e1b6:             exe_expr_and:
  443 e1b6: 04 e4 9f        jsr exe_next_token
  444 e1b9: 04 e1 22        jsr exe_term
  445 e1bc: 0f 67           movrr r7,r6
  446 e1be:             ;
  447 e1be:             ; t1 = t1 & t2
  448 e1be:             ;
  449 e1be: 0f 75       movrr r5,r7
  450 e1c0: 04 ec 56    jsr parse_sub16
  451 e1c3: 0f 57       movrr r7,r5
  452 e1c5: a0 e1 7a        BR exe_expr_loop
  453 e1c8:             
  454 e1c8:             exe_expr_or:
  455 e1c8: 04 e4 9f        jsr exe_next_token
  456 e1cb: 04 e1 22        jsr exe_term
  457 e1ce: 0f 67           movrr r7,r6
  458 e1d0:             ;
  459 e1d0:             ; t1 = t1 | t2
  460 e1d0:             ;
  461 e1d0: a0 e1 7a        BR exe_expr_loop
  462 e1d3:             
  463 e1d3:             exe_expr_done:
  464 e1d3: 0f 75           MOVRR r5,r7
  465 e1d5: 08 60           popr r6
  466 e1d7: 08 50           popr r5
  467 e1d9: 05              ret
  468 e1da:             ;
  469 e1da:             ; int relation ()
  470 e1da:             ;
  471 e1da:             ; R5 = r1
  472 e1da:             ; R6 = r2
  473 e1da:             ; R7 = return value
  474 e1da:             ;
  475 e1da:             
  476 e1da:             exe_relation:
  477 e1da: 07 05           pushr r5
  478 e1dc: 07 06           pushr r6
  479 e1de:             
  480 e1de: 04 e1 71        jsr exe_expr
  481 e1e1: 0f 57           MOVRR r7,r5
  482 e1e3:             
  483 e1e3:             exe_relation_loop:
  484 e1e3: 43              LDAVR R3
  485 e1e4: 0d 21           LDTI TOKENIZER_LT
  486 e1e6: a8 e1 f6        BREQ exe_relation_lt
  487 e1e9: 0d 22           ldti TOKENIZER_GT
  488 e1eb: a8 e2 14        breq exe_relation_gt
  489 e1ee: 0d 23           ldti TOKENIZER_EQ
  490 e1f0: a8 e2 32        breq exe_relation_eq
  491 e1f3:             
  492 e1f3: a0 e2 4e        br exe_relation_done
  493 e1f6:             
  494 e1f6:             exe_relation_lt:
  495 e1f6: 04 e4 9f        jsr exe_next_token
  496 e1f9: 04 e1 71        jsr exe_expr
  497 e1fc: 0f 67           movrr r7,r6
  498 e1fe:             ;
  499 e1fe:             ; r1 = r1 < r2
  500 e1fe:             ;
  501 e1fe: 0f 75           movrr  r5,r7
  502 e200: 04 ec 8d        jsr parse_compare
  503 e203: 0d ff           ldti 0ffh
  504 e205: aa e2 0e        BRNEQ exe_rel_nlt
  505 e208: 1d 00 01        mviw r5,01h
  506 e20b: a0 e1 e3        BR exe_relation_loop
  507 e20e:             exe_rel_nlt:
  508 e20e: 1d 00 00        mviw r5,00h
  509 e211: a0 e1 e3        BR exe_relation_loop
  510 e214:             
  511 e214:             exe_relation_gt:
  512 e214: 04 e4 9f        jsr exe_next_token
  513 e217: 04 e1 71        jsr exe_expr
  514 e21a: 0f 67           movrr r7,r6
  515 e21c:             ;
  516 e21c:             ; r1 = r1 > r2
  517 e21c:             ;
  518 e21c: 0f 75           movrr  r5,r7
  519 e21e: 04 ec 8d        jsr parse_compare
  520 e221: 0d 01           ldti 01h
  521 e223: aa e2 2c        BRNEQ exe_rel_ngt
  522 e226: 1d 00 01        mviw r5,01h
  523 e229: a0 e1 e3        BR exe_relation_loop
  524 e22c:             exe_rel_ngt:
  525 e22c: 1d 00 00        mviw r5,00h
  526 e22f: a0 e1 e3        BR exe_relation_loop
  527 e232:             
  528 e232:             exe_relation_eq:
  529 e232: 04 e4 9f        jsr exe_next_token
  530 e235: 04 e1 71        jsr exe_expr
  531 e238: 0f 67           movrr r7,r6
  532 e23a:             ;
  533 e23a:             ; r1 = r1 == r2
  534 e23a:             ;
  535 e23a: 0f 75           movrr  r5,r7
  536 e23c: 04 ec 8d        jsr parse_compare
  537 e23f: a2 e2 48        brnz exe_rel_ne
  538 e242: 1d 00 01        mviw r5,01h
  539 e245: a0 e1 e3        BR exe_relation_loop
  540 e248:             exe_rel_ne:
  541 e248: 1d 00 00        mviw r5,00h
  542 e24b: a0 e1 e3        BR exe_relation_loop
  543 e24e:             
  544 e24e:             exe_relation_done:
  545 e24e: 0f 75           MOVRR r5,r7
  546 e250: 08 60           popr r6
  547 e252: 08 50           popr r5
  548 e254: 05              ret
  549 e255:             
  550 e255:             ;
  551 e255:             ; char * index_find (int linenum)
  552 e255:             ;
  553 e255:             ; call with line in R7
  554 e255:             ; return with val in R7 - tokenbuffer ptr
  555 e255:             ;
  556 e255:             exe_index_find:
  557 e255: 04 eb d1        JSR basu_find
  558 e258: 05              RET
  559 e259:             ;
  560 e259:             ; void jump_linenum(linenum)
  561 e259:             ;
  562 e259:             ; Linenum in R7
  563 e259:             ;
  564 e259:             exe_jump_line:
  565 e259: 04 e2 55        JSR exe_index_find
  566 e25c: 2f              MVRHA R7
  567 e25d: a2 e2 70        BRNZ exe_jump_line1
  568 e260: 27              MVRLA R7
  569 e261: a2 e2 70        BRNZ exe_jump_line1
  570 e264:             ;
  571 e264:             ; returned 0 line not found
  572 e264:             ;
  573 e264: 0e 24           LDAI TOKENIZER_CR
  574 e266: 04 e0 da        JSR exe_accept
  575 e269: 1e 02 00        MVIW r6,bas_run_ended
  576 e26c: 0e 01           LDAI 1
  577 e26e: 4e              STAVR R6
  578 e26f: 05              ret
  579 e270:             exe_jump_line1:
  580 e270:             ;   jsr tok_goto
  581 e270: 0f 37           movrr r7,r3
  582 e272: 05              ret
  583 e273:             ;
  584 e273:             ; void goto_statement()
  585 e273:             ;
  586 e273:             exe_goto_stmt:
  587 e273: 0e 0d           LDAI TOKENIZER_GOTO
  588 e275: 04 e0 da        JSR exe_accept
  589 e278: 04 e1 71        JSR exe_expr
  590 e27b: 04 e2 59        JSR exe_jump_line
  591 e27e: 05              RET
  592 e27f:             ;
  593 e27f:             ; void print_statment()
  594 e27f:             ;
  595 e27f:             exe_print_stmt:
  596 e27f: 0e 06           LDAI TOKENIZER_PRINT
  597 e281: 04 e0 da        jsr exe_accept
  598 e284:             
  599 e284:             exe_print_stmt_loop:
  600 e284: 43              LDAVR R3
  601 e285: 0d 03           LDTI TOKENIZER_STRING
  602 e287: aa e2 96        BRNEQ exe_print_stmt1
  603 e28a:             ;
  604 e28a:             ; this should return string to print in r2
  605 e28a:             ; exe_string may not be needed tokenbufferptr is at string ?
  606 e28a:             ;
  607 e28a: 04 e4 dc        jsr exe_string
  608 e28d:             ;    movrr r7,r2
  609 e28d: 04 ff c0        jsr stringout
  610 e290: 04 e4 9f        jsr exe_next_token
  611 e293: a0 e2 c9        br exe_print_stmt_test
  612 e296:             
  613 e296:             exe_print_stmt1:
  614 e296:             
  615 e296: 0d 15           ldti TOKENIZER_COMMA
  616 e298: aa e2 a6        BRNEQ exe_print_stmt2
  617 e29b: 0e 20           LDAI ' '
  618 e29d: 04 ff c4        JSR charout
  619 e2a0: 04 e4 9f        jsr exe_next_token
  620 e2a3: a0 e2 c9        br exe_print_stmt_test
  621 e2a6:             
  622 e2a6:             exe_print_stmt2:
  623 e2a6: 0d 16           ldti TOKENIZER_SEMICOLON
  624 e2a8: aa e2 b1        BRNEQ exe_print_stmt3
  625 e2ab: 04 e4 9f        jsr exe_next_token
  626 e2ae: a0 e2 c9        br exe_print_stmt_test
  627 e2b1:             
  628 e2b1:             exe_print_stmt3:
  629 e2b1: 0d 04           ldti TOKENIZER_VARIABLE
  630 e2b3: a8 e2 c3        BREQ exe_print_stmt4
  631 e2b6: 0d 02           ldti TOKENIZER_NUMBER
  632 e2b8: a8 e2 c3        breq exe_print_stmt4
  633 e2bb: 0d 1f           ldti  TOKENIZER_LEFTP
  634 e2bd: a8 e2 c3        breq exe_print_stmt4
  635 e2c0:             
  636 e2c0: a0 e2 d7        br exe_print_stmt_done
  637 e2c3:             
  638 e2c3:             exe_print_stmt4:
  639 e2c3: 04 e1 71        jsr exe_expr
  640 e2c6: 04 ff d4        JSR showr7
  641 e2c9:             ;   br exe_print_stmt_test // falls through
  642 e2c9:             
  643 e2c9:             exe_print_stmt_test:
  644 e2c9: 43              LDAVR R3
  645 e2ca: 0d 24           LDTI TOKENIZER_CR
  646 e2cc: a8 e2 d7        breq exe_print_stmt_done
  647 e2cf: 0d 01           LDTI TOKENIZER_EOF
  648 e2d1: a8 e2 d7        breq exe_print_stmt_done
  649 e2d4: a0 e2 84        br exe_print_stmt_loop
  650 e2d7:             
  651 e2d7:             exe_print_stmt_done:
  652 e2d7: 1f ec ae        mviw R7,CRLF
  653 e2da: 04 ff c0        jsr stringout
  654 e2dd: 04 e4 9f        jsr exe_next_token
  655 e2e0: 05              ret
  656 e2e1:             
  657 e2e1:             ;
  658 e2e1:             ; void if_statement()
  659 e2e1:             ;
  660 e2e1:             exe_if_stmt:
  661 e2e1: 0e 07           LDAI TOKENIZER_IF
  662 e2e3: 04 e0 da        JSR exe_accept
  663 e2e6:             
  664 e2e6: 04 e1 da        JSR exe_relation
  665 e2e9: 27              MVRLA R7
  666 e2ea: 09              push
  667 e2eb: 0e 08           LDAI TOKENIZER_THEN
  668 e2ed: 04 e0 da        JSR exe_accept
  669 e2f0: 0a              pop
  670 e2f1:             
  671 e2f1: 0d 01           LDTI 1
  672 e2f3: aa e2 fa        BRNEQ exe_if_stmt1
  673 e2f6: 04 e3 d1        JSR exe_stmt
  674 e2f9: 05              ret
  675 e2fa:             
  676 e2fa:             exe_if_stmt1:
  677 e2fa: 04 e4 9f        jsr exe_next_token
  678 e2fd: 43              LDAVR R3
  679 e2fe: 0d 24           LDTI TOKENIZER_CR
  680 e300: a8 e3 09        BREQ EXE_IF_STMT2
  681 e303: 0d 01           LDTI TOKENIZER_EOF
  682 e305: aa e2 fa        BRNEQ EXE_IF_STMT1
  683 e308: 05              RET
  684 e309:             
  685 e309:             exe_if_stmt2:
  686 e309: 04 e4 9f        JSR EXE_NEXT_TOKEN
  687 e30c: 05              RET
  688 e30d:             ;
  689 e30d:             ; void let_statement()
  690 e30d:             ;
  691 e30d:             exe_let_stmt:
  692 e30d: 04 e4 d8      jsr exe_variable_num
  693 e310: 37            mvarl r7
  694 e311: 0f 67         movrr r7,r6
  695 e313: 0e 04         ldai TOKENIZER_VARIABLE
  696 e315: 04 e0 da      jsr exe_accept
  697 e318: 0e 23         ldai TOKENIZER_EQ
  698 e31a: 04 e0 da      jsr exe_accept
  699 e31d: 04 e1 71      jsr exe_expr
  700 e320: 26            mvrla r6
  701 e321: 04 e4 87      JSR exe_set_variable
  702 e324: 0e 24         ldai TOKENIZER_CR
  703 e326: 04 e0 da      jsr exe_accept
  704 e329: 05            ret
  705 e32a:             
  706 e32a:             ;
  707 e32a:             ; void gosub_statement()
  708 e32a:             ;
  709 e32a:             exe_gosub_stmt:
  710 e32a: 0e 0e           ldai TOKENIZER_GOSUB
  711 e32c: 04 e0 da        jsr exe_accept
  712 e32f: 04 e4 cf        jsr exe_num
  713 e332: 0e 02           ldai TOKENIZER_NUMBER
  714 e334: 04 e0 da        jsr exe_accept
  715 e337: 0e 24           ldai TOKENIZER_CR
  716 e339: 04 e0 da        jsr exe_accept
  717 e33c:             ;
  718 e33c:             ; setup to use for storage area via R4
  719 e33c:             ;
  720 e33c:             ;   movrr R9,R4
  721 e33c:             ;
  722 e33c:             ; save current token buffer ptr to gosub stack
  723 e33c:             ;
  724 e33c: 23             mvrla r3
  725 e33d: 4d             stavr r5
  726 e33e: 55             incr r5
  727 e33f: 2b             mvrha r3
  728 e340: 4d             stavr r5
  729 e341: 55             incr  r5
  730 e342:             ;
  731 e342:             ; write new gosub stack ptr location back
  732 e342:             ;
  733 e342:             ;   MOVRR R4,R9
  734 e342:             
  735 e342: 04 e2 59       JSR exe_jump_line
  736 e345: 05             RET
  737 e346:             
  738 e346:             ;
  739 e346:             ; void return_statment()
  740 e346:             ;
  741 e346:             exe_return_stmt:
  742 e346: 0e 0f           ldai TOKENIZER_RETURN
  743 e348: 04 e0 da        jsr exe_accept
  744 e34b:             ;
  745 e34b:             ; setup to use for storage area via R4
  746 e34b:             ;
  747 e34b:             ;   movrr R9,R4
  748 e34b:             
  749 e34b: 5d             decr r5
  750 e34c: 5d             decr r5
  751 e34d:             
  752 e34d: 45             ldavr r5
  753 e34e: 33             mvarl r3
  754 e34f: 55             incr r5
  755 e350: 45             ldavr r5
  756 e351: 3b             mvarh r3
  757 e352:             
  758 e352: 5d             decr r5
  759 e353:             ;   movrr r4,r9
  760 e353:             
  761 e353: 05             ret
  762 e354:             
  763 e354:             ;
  764 e354:             ; void next_statement()
  765 e354:             ;
  766 e354:             exe_next_stmt:
  767 e354:             ;
  768 e354:             ; setup to use for storage area via R4
  769 e354:             ;
  770 e354:             ;    movrr r8,r4
  771 e354:             ; backup to the TO Value
  772 e354: 5c              decr r4
  773 e355: 5c              decr r4
  774 e356: 5c              decr r4
  775 e357: 5c              decr r4
  776 e358:             ;
  777 e358:             ; eat next
  778 e358:             ;
  779 e358: 0e 0c           ldai TOKENIZER_NEXT
  780 e35a: 04 e0 da        jsr exe_accept
  781 e35d:             ;
  782 e35d:             ; get variable id (in accumulator) and hold in r6 lo
  783 e35d:             ;
  784 e35d: 04 e4 d8        jsr exe_variable_num
  785 e360: 36              mvarl r6
  786 e361:             ;
  787 e361:             ; eat TOKENIZER_VARIABLE id
  788 e361:             ;
  789 e361: 0e 04           ldai TOKENIZER_VARIABLE
  790 e363: 04 e0 da        jsr exe_accept
  791 e366:             ;
  792 e366:             ; get variable value, inc by 1 and store
  793 e366:             ;
  794 e366: 26              mvrla r6
  795 e367: 04 e4 92        jsr exe_get_variable
  796 e36a: 57              incr r7
  797 e36b: 26              mvrla r6
  798 e36c: 04 e4 87        jsr exe_set_variable
  799 e36f:             ;
  800 e36f:             ; get TO value into R6
  801 e36f: 44              ldavr r4
  802 e370: 36              mvarl r6
  803 e371: 54              incr r4
  804 e372: 44              ldavr r4
  805 e373: 3e              mvarh r6
  806 e374: 54              incr r4
  807 e375:             ;
  808 e375:             ; for now only compare low byte hack
  809 e375:             ;
  810 e375: 26              mvrla r6
  811 e376: 0b              mvat
  812 e377: 27              mvrla r7
  813 e378: a9 e3 82        brgt exe_next_done
  814 e37b:             ;
  815 e37b: 44              ldavr r4
  816 e37c: 33              mvarl r3
  817 e37d: 54              incr r4
  818 e37e: 44              ldavr r4
  819 e37f: 3b              mvarh r3
  820 e380: 54              incr r4
  821 e381: 05              ret
  822 e382:             
  823 e382:             exe_next_done:
  824 e382: 5c            decr r4
  825 e383: 5c            decr r4
  826 e384: 5c            decr r4
  827 e385: 5c            decr r4
  828 e386: 5c            decr r4
  829 e387: 5c            decr r4
  830 e388:             ;  movrr r4,r8
  831 e388: 0e 24         ldai TOKENIZER_CR
  832 e38a: 04 e0 da      jsr exe_accept
  833 e38d: 05            ret
  834 e38e:             
  835 e38e:             ;
  836 e38e:             ; void for_statement()
  837 e38e:             ;
  838 e38e:             exe_for_stmt:
  839 e38e:             ;
  840 e38e:             ; setup to use for storage area via R4
  841 e38e:             ;
  842 e38e:             ;    movrr r8,r4
  843 e38e:             ;
  844 e38e:             ; eat FOR
  845 e38e:             ;
  846 e38e: 0e 0a         ldai TOKENIZER_FOR
  847 e390: 04 e0 da      jsr exe_accept
  848 e393:             ;
  849 e393:             ; get variable id (in accumulator) and hold in r6 lo
  850 e393:             ;
  851 e393: 04 e4 d8      jsr exe_variable_num
  852 e396: 36            mvarl r6
  853 e397:             ;
  854 e397:             ; store variable id in for storage hack only lo byte, hi byte 0
  855 e397:             ;
  856 e397: 4c            stavr r4
  857 e398: 54            incr r4
  858 e399: 0e 00         ldai 0
  859 e39b: 4c            stavr r4
  860 e39c: 54            incr r4
  861 e39d:             ;
  862 e39d:             ; eat variable id and = then get starting value
  863 e39d:             ;
  864 e39d: 0e 04         ldai TOKENIZER_VARIABLE
  865 e39f: 04 e0 da      jsr exe_accept
  866 e3a2: 0e 23         ldai TOKENIZER_EQ
  867 e3a4: 04 e0 da      jsr exe_accept
  868 e3a7: 04 e1 71      jsr exe_expr
  869 e3aa:             ;
  870 e3aa:             ; set variable to starting value
  871 e3aa:             ;
  872 e3aa: 26            mvrla r6
  873 e3ab: 04 e4 87      JSR exe_set_variable
  874 e3ae:             ;
  875 e3ae:             ; eat TO and get to value
  876 e3ae:             ;
  877 e3ae: 0e 0b         ldai TOKENIZER_TO
  878 e3b0: 04 e0 da      jsr exe_accept
  879 e3b3: 04 e1 71      jsr exe_expr
  880 e3b6:             ;
  881 e3b6:             ; store to value in for storage area
  882 e3b6:             ;
  883 e3b6: 27            mvrla r7
  884 e3b7: 4c            stavr r4
  885 e3b8: 54            incr r4
  886 e3b9: 2f            mvrha r7
  887 e3ba: 4c            stavr r4
  888 e3bb: 54            incr r4
  889 e3bc:             ;
  890 e3bc:             ; EAT EOL
  891 e3bc:             ;
  892 e3bc: 0e 24         ldai TOKENIZER_CR
  893 e3be: 04 e0 da      jsr exe_accept
  894 e3c1:             ;
  895 e3c1:             ; store instruction after for in for storage area
  896 e3c1:             ;
  897 e3c1: 23              mvrla r3
  898 e3c2: 4c              stavr r4
  899 e3c3: 54              incr r4
  900 e3c4: 2b              mvrha r3
  901 e3c5: 4c              stavr r4
  902 e3c6: 54              incr r4
  903 e3c7:             ;
  904 e3c7:             ;   save for stackptr
  905 e3c7:             ;
  906 e3c7:             ;    movrr r4,r8
  907 e3c7:             ;
  908 e3c7: 05              ret
  909 e3c8:             ;
  910 e3c8:             ; void peek_statment()
  911 e3c8:             ;
  912 e3c8:             exe_peek_stmt:
  913 e3c8: 03            halt
  914 e3c9:             
  915 e3c9:             ;
  916 e3c9:             ; void poke_statement()
  917 e3c9:             ;
  918 e3c9:             exe_poke_stmt:
  919 e3c9: 03            halt
  920 e3ca:             
  921 e3ca:             ;
  922 e3ca:             ; void end_statement()
  923 e3ca:             ;
  924 e3ca:             exe_end_stmt:
  925 e3ca: 1e 02 00      mviw r6,bas_run_ended
  926 e3cd: 0e 01         LDAI 1
  927 e3cf: 4e            STAVR r6
  928 e3d0: 05            ret
  929 e3d1:             ;
  930 e3d1:             ; void statment()
  931 e3d1:             ;
  932 e3d1:             exe_stmt:
  933 e3d1:             ;    MVIW R7,exe_stmt_msg
  934 e3d1:             ;    JSR stringout
  935 e3d1:             ;    JSR showaddr
  936 e3d1: 43              LDAVR R3
  937 e3d2:             ;    PUSH
  938 e3d2:             ;    JSR showbytea
  939 e3d2:             ;    MVIW R7,CRLF
  940 e3d2:             ;    JSR STRINGOUT
  941 e3d2:             ;    POP
  942 e3d2:             
  943 e3d2:             
  944 e3d2: 0d 06           LDTI TOKENIZER_PRINT
  945 e3d4: aa e3 db        BRNEQ exe_stmt1
  946 e3d7: 04 e2 7f        JSR exe_print_stmt
  947 e3da: 05              ret
  948 e3db:             
  949 e3db:             exe_stmt1:
  950 e3db: 0d 07           LDTI TOKENIZER_IF
  951 e3dd: aa e3 e4        BRNEQ exe_stmt2
  952 e3e0: 04 e2 e1        JSR exe_if_stmt
  953 e3e3: 05              ret
  954 e3e4:             
  955 e3e4:             exe_stmt2:
  956 e3e4: 0d 04           LDTI TOKENIZER_VARIABLE
  957 e3e6: aa e3 ed        BRNEQ exe_stmt3
  958 e3e9: 04 e3 0d        JSR exe_let_stmt
  959 e3ec: 05              ret
  960 e3ed:             
  961 e3ed:             exe_stmt3:
  962 e3ed: 0d 0e           LDTI TOKENIZER_GOSUB
  963 e3ef: aa e3 f6        BRNEQ exe_stmt4
  964 e3f2: 04 e3 2a        JSR exe_gosub_stmt
  965 e3f5: 05              ret
  966 e3f6:             
  967 e3f6:             exe_stmt4:
  968 e3f6: 0d 0f           LDTI TOKENIZER_RETURN
  969 e3f8: aa e3 ff        BRNEQ exe_stmt5
  970 e3fb: 04 e3 46        JSR exe_return_stmt
  971 e3fe: 05              ret
  972 e3ff:             
  973 e3ff:             exe_stmt5:
  974 e3ff: 0d 0a           LDTI TOKENIZER_FOR
  975 e401: aa e4 08        BRNEQ exe_stmt6
  976 e404: 04 e3 8e        JSR exe_for_stmt
  977 e407: 05              ret
  978 e408:             
  979 e408:             exe_stmt6:
  980 e408: 0d 12           LDTI TOKENIZER_PEEK
  981 e40a: aa e4 11        BRNEQ exe_stmt7
  982 e40d: 04 e3 c8        JSR exe_peek_stmt
  983 e410: 05              ret
  984 e411:             
  985 e411:             exe_stmt7:
  986 e411: 0d 13           LDTI TOKENIZER_POKE
  987 e413: aa e4 1a        BRNEQ exe_stmt8
  988 e416: 04 e3 c9        JSR exe_poke_stmt
  989 e419: 05              ret
  990 e41a:             
  991 e41a:             exe_stmt8:
  992 e41a: 0d 0c           LDTI TOKENIZER_NEXT
  993 e41c: aa e4 23        BRNEQ exe_stmt9
  994 e41f: 04 e3 54        JSR exe_next_stmt
  995 e422: 05              ret
  996 e423:             
  997 e423:             exe_stmt9:
  998 e423: 0d 14           LDTI TOKENIZER_END
  999 e425: aa e4 2c        BRNEQ exe_stmt10
 1000 e428: 04 e3 ca        JSR exe_end_stmt
 1001 e42b: 05              ret
 1002 e42c:             
 1003 e42c:             exe_stmt10:
 1004 e42c: 0d 05           LDTI TOKENIZER_LET
 1005 e42e: aa e4 3a        BRNEQ exe_stmt11
 1006 e431: 0e 05           LDAI TOKENIZER_LET
 1007 e433: 04 e0 da        JSR exe_accept
 1008 e436: 04 e3 0d        JSR exe_let_stmt
 1009 e439: 05              ret
 1010 e43a:             
 1011 e43a:             exe_stmt11:
 1012 e43a: 0d 0d           LDTI TOKENIZER_GOTO
 1013 e43c: aa e4 43        BRNEQ exe_stmt12
 1014 e43f: 04 e2 73        JSR exe_goto_stmt
 1015 e442: 05              ret
 1016 e443:             
 1017 e443:             exe_stmt12:
 1018 e443: 04 ff e0        jsr showbytea
 1019 e446: 0e 3d           ldai '='
 1020 e448: 04 ff c8        jsr uartout
 1021 e44b: 1f e0 a4        MVIW R7,bas_msg3
 1022 e44e: 04 ff c0        jsr stringout
 1023 e451: 04 ff dc        JSR SHOWREGS
 1024 e454: 04 e4 9d        jsr bas_error
 1025 e457:             
 1026 e457:             ;
 1027 e457:             ; void line_statement (void)
 1028 e457:             ;
 1029 e457:             exe_line_stmt:
 1030 e457:             ;line_statement(void) {
 1031 e457:             ;    DEBUG_PRINTF("----------- Line number %d ---------\n", tokenizer_num());
 1032 e457:             ;#ifdef unused
 1033 e457:             ;    index_add(tokenizer_num(), tokenizer_pos());
 1034 e457:             ;#endif
 1035 e457:             ;    accept(TOKENIZER_LINENUM);
 1036 e457:             ;    statement();
 1037 e457:             ;    return;
 1038 e457: 0e 25           LDAI TOKENIZER_LINENUM
 1039 e459: 04 e0 da        jsr exe_accept
 1040 e45c: 04 e3 d1        jsr exe_stmt
 1041 e45f: 05              ret
 1042 e460:             
 1043 e460:             ;
 1044 e460:             ; void ubasic_run()
 1045 e460:             ;
 1046 e460:             basic_run:
 1047 e460:             ;    mviw r7,000ah
 1048 e460:             ;    jsr basu_find
 1049 e460:             ;    jsr showr7
 1050 e460:             ;    mviw R7,CRLF
 1051 e460:             ;    jsr stringout
 1052 e460:             
 1053 e460:             ;    mviw r7,0014h
 1054 e460:             ;    jsr basu_find
 1055 e460:             ;    jsr showr7
 1056 e460:             ;    mviw R7,CRLF
 1057 e460:             ;    jsr stringout
 1058 e460:             
 1059 e460: 04 e0 ca        JSR exe_init
 1060 e463:             
 1061 e463:             ;    mviw r7,0080h
 1062 e463:             ;    jsr basu_find
 1063 e463:             ;    jsr showr7
 1064 e463:             ;    mviw R7,CRLF
 1065 e463:             ;    jsr stringout
 1066 e463:             exe_run:
 1067 e463: 04 e4 72        jsr exe_finished
 1068 e466: 0d 01           LDTI 1
 1069 e468: aa e4 6c        BRNEQ exe_run_cont
 1070 e46b: 05              ret
 1071 e46c:             
 1072 e46c:             exe_run_cont:
 1073 e46c: 04 e4 57        jsr exe_line_stmt
 1074 e46f: a0 e4 63        BR exe_run
 1075 e472:             
 1076 e472:             ;
 1077 e472:             ; int ubasic_finished()
 1078 e472:             ;
 1079 e472:             exe_finished:
 1080 e472: 1a 02 00        MVIW R2,bas_run_ended
 1081 e475: 42              LDAVR R2
 1082 e476: 0d 01           LDTI 1
 1083 e478: a8 e4 84        BREQ exe_finished_yes
 1084 e47b:             
 1085 e47b: 43              ldavr r3
 1086 e47c: 0d 01           ldti TOKENIZER_EOF
 1087 e47e: a8 e4 84        breq exe_finished_yes
 1088 e481: 0e 00           ldai 0
 1089 e483: 05              ret
 1090 e484:             
 1091 e484:             exe_finished_yes:
 1092 e484: 0e 01           LDAI 1
 1093 e486: 05              ret
 1094 e487:             
 1095 e487:             ;
 1096 e487:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1097 e487:             ;
 1098 e487:             ; R7 value (only using low byte)
 1099 e487:             ; ACCUMULATOR Variable ref number
 1100 e487:             ;
 1101 e487:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1102 e487:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1103 e487:             ;
 1104 e487:             exe_set_variable:
 1105 e487: 1a 01 00        MVIW R2,BASIC_VARS ; SEE COMMENT below about memory alignment
 1106 e48a: b6              SHL ; memory location x 2 (2 byte vars)
 1107 e48b: 32              MVARL R2
 1108 e48c:             ;
 1109 e48c: 27              MVRLA R7
 1110 e48d: 4a              STAVR R2
 1111 e48e: 52              INCR r2
 1112 e48f: 2f              mvrha r7
 1113 e490: 4a              stavr r2
 1114 e491:             
 1115 e491: 05              RET
 1116 e492:             ;
 1117 e492:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1118 e492:             ;
 1119 e492:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1120 e492:             ;
 1121 e492:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1122 e492:             ; and only 0-25 (var names a-z) supported
 1123 e492:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1124 e492:             ;
 1125 e492:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1126 e492:             ;
 1127 e492:             exe_get_variable:
 1128 e492: 1a 01 00        MVIW R2,BASIC_VARS
 1129 e495: b6              shl
 1130 e496: 32              MVARL R2
 1131 e497:             ;
 1132 e497: 42              LDAVR R2
 1133 e498: 37              MVARL R7
 1134 e499: 52              INCR R2
 1135 e49a: 42              LDAVR R2
 1136 e49b: 3f              MVARH R7
 1137 e49c: 05              RET
 1138 e49d:             
 1139 e49d:             ;
 1140 e49d:             ; hack this needs work
 1141 e49d:             ;
 1142 e49d:             bas_error:
 1143 e49d: 03            HALT
 1144 e49e: 05            RET
 1145 e49f:             
 1146 e49f:             ;
 1147 e49f:             ; Tokenizer execute support code
 1148 e49f:             ;
 1149 e49f:             ; tokenizer_next - exe version
 1150 e49f:             ;
 1151 e49f:             exe_next_token:
 1152 e49f: 43            ldavr r3
 1153 e4a0: 0d 02         ldti TOKENIZER_NUMBER
 1154 e4a2: aa e4 a9      BRNEQ exe_next_token1
 1155 e4a5: 53            incr r3
 1156 e4a6: 53            incr r3
 1157 e4a7: 53            incr r3
 1158 e4a8: 05            RET
 1159 e4a9:             
 1160 e4a9:             exe_next_token1:
 1161 e4a9: 0d 04         ldti TOKENIZER_VARIABLE
 1162 e4ab: aa e4 b2      BRNEQ exe_next_token2
 1163 e4ae: 53            incr r3
 1164 e4af: 53            incr r3
 1165 e4b0: 53            incr r3
 1166 e4b1: 05            RET
 1167 e4b2:             
 1168 e4b2:             exe_next_token2:
 1169 e4b2: 0d 25         ldti TOKENIZER_LINENUM
 1170 e4b4: aa e4 bd      BRNEQ exe_next_token3
 1171 e4b7: 53            incr r3
 1172 e4b8: 53            incr r3
 1173 e4b9: 53            incr r3
 1174 e4ba: 53            incr r3
 1175 e4bb: 53            incr r3
 1176 e4bc: 05            RET
 1177 e4bd:             
 1178 e4bd:             exe_next_token3:
 1179 e4bd: 0d 03         ldti TOKENIZER_STRING
 1180 e4bf: aa e4 cd      BRNEQ exe_next_token4
 1181 e4c2: 53            incr r3
 1182 e4c3:             
 1183 e4c3:             exe_next_tok3_loop:
 1184 e4c3: 43            LDAVR R3
 1185 e4c4: a1 e4 cb      BRZ exe_next_tok3_done
 1186 e4c7: 53            incr r3
 1187 e4c8: a0 e4 c3      BR exe_next_tok3_loop
 1188 e4cb:             
 1189 e4cb:             exe_next_tok3_done:
 1190 e4cb: 53            incr r3
 1191 e4cc: 05            RET
 1192 e4cd:             
 1193 e4cd:             exe_next_token4:
 1194 e4cd: 53            incr r3
 1195 e4ce: 05            ret
 1196 e4cf:             
 1197 e4cf:             ;
 1198 e4cf:             ; numbers stored low byte followed by high byte in memory
 1199 e4cf:             
 1200 e4cf:             exe_num:
 1201 e4cf: 53              incr r3
 1202 e4d0: 43              ldavr r3
 1203 e4d1: 37              mvarl r7
 1204 e4d2: 53              incr r3
 1205 e4d3: 43              ldavr r3
 1206 e4d4: 3f              mvarh r7
 1207 e4d5: 5b              decr r3
 1208 e4d6: 5b              decr r3
 1209 e4d7: 05              ret
 1210 e4d8:             
 1211 e4d8:             ;
 1212 e4d8:             ; hack only using low byte of id for now
 1213 e4d8:             ; return in accumulator
 1214 e4d8:             ;
 1215 e4d8:             exe_variable_num:
 1216 e4d8: 53              incr r3
 1217 e4d9: 43              ldavr r3
 1218 e4da: 5b              decr r3
 1219 e4db: 05              ret
 1220 e4dc:             
 1221 e4dc:             exe_string:
 1222 e4dc: 0f 73           movrr r3,r7
 1223 e4de: 57              incr r7
 1224 e4df: 05              ret
 1225 e4e0:             
 1226 e4e0:             
 1227 e4e0:             
 1228 e4e0:             
 1229 e4e0:             ;
 1230 e4e0:             ; List out token buffer in human readable form
 1231 e4e0:             ;
 1232 e4e0:             ; list out token buffer
 1233 e4e0:             ; buffer address in r7
 1234 e4e0:             ;
 1235 e4e0: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1236 e4e5: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1237 e4ec: 49 46 20 00 tokl_if: DB "IF ",0
 1238 e4f0: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1239 e4f6: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1240 e4fc: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1241 e501: 54 4f 20 00 tokl_to: DB "TO ",0
 1242 e505: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1243 e50b: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1244 e511: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1245 e518: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1246 e520: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1247 e525: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1248 e52b: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1249 e531: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1250 e536: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1251 e53c: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1252 e547:             
 1253 e547:             
 1254 e547:             basic_list:
 1255 e547: 07 03           pushr r3
 1256 e549: 0f 37           movrr r7,r3
 1257 e54b:             
 1258 e54b:             
 1259 e54b:             baslist_loop:
 1260 e54b: 43              ldavr r3
 1261 e54c:             
 1262 e54c: 0d 00           LDTI TOKENIZER_ERROR
 1263 e54e: aa e5 60        BRNEQ baslist1
 1264 e551: 1f e5 3c        MVIW R7,tokl_error
 1265 e554: 04 ff c0        JSR stringout
 1266 e557: 04 ff cc        JSR showaddr
 1267 e55a: a0 e7 f6        BR baslist_done
 1268 e55d: a0 e5 4b        BR baslist_loop
 1269 e560:             
 1270 e560:             baslist1:
 1271 e560: 0d 01           LDTI TOKENIZER_EOF
 1272 e562: aa e5 6b        BRNEQ baslist2
 1273 e565: a0 e7 f6        BR baslist_done
 1274 e568: a0 e5 4b        BR baslist_loop
 1275 e56b:             
 1276 e56b:             baslist2:
 1277 e56b: 0d 02           LDTI TOKENIZER_NUMBER
 1278 e56d: aa e5 82        BRNEQ baslist3
 1279 e570: 53              incr r3
 1280 e571: 43              ldavr r3
 1281 e572: 37              mvarl r7
 1282 e573: 53              incr r3
 1283 e574: 43              ldavr r3
 1284 e575: 3f              mvarh r7
 1285 e576: 53              INCR R3
 1286 e577: 04 ff d4        jsr showr7
 1287 e57a: 0e 20           ldai ' '
 1288 e57c: 04 ff c8        jsr uartout
 1289 e57f: a0 e5 4b        BR baslist_loop
 1290 e582:             
 1291 e582:             baslist3:
 1292 e582: 0d 03           LDTI TOKENIZER_STRING
 1293 e584: aa e5 9e        BRNEQ baslist4
 1294 e587: 53              incr r3
 1295 e588: 0f 73           movrr r3,r7
 1296 e58a: 04 ff c0        jsr stringout
 1297 e58d: 0e 20           ldai ' '
 1298 e58f: 04 ff c8        jsr uartout
 1299 e592:             baslist_string:
 1300 e592: 43              ldavr r3
 1301 e593: a1 e5 9a        brz baslist_stringend
 1302 e596: 53              incr r3
 1303 e597: a0 e5 92        br baslist_string
 1304 e59a:             baslist_stringend:
 1305 e59a: 53              incr r3
 1306 e59b: a0 e5 4b        BR baslist_loop
 1307 e59e:             
 1308 e59e:             baslist4:
 1309 e59e: 0d 04           LDTI TOKENIZER_VARIABLE
 1310 e5a0: aa e5 b5        BRNEQ baslist5
 1311 e5a3: 53              incr r3
 1312 e5a4: 43              ldavr r3
 1313 e5a5: 0d 41           ldti 'A'
 1314 e5a7: b8              ADDT
 1315 e5a8: 53              incr r3
 1316 e5a9: 53              incr r3
 1317 e5aa: 04 ff c8        jsr uartout
 1318 e5ad:             
 1319 e5ad:             ;    ldavr r3
 1320 e5ad:             ;    mvarl r7
 1321 e5ad:             ;    incr r3
 1322 e5ad:             ;    ldavr r3
 1323 e5ad:             ;    mvarh r7
 1324 e5ad:             ;    INCR R3
 1325 e5ad:             ;    jsr showr7
 1326 e5ad:             
 1327 e5ad: 0e 20           ldai ' '
 1328 e5af: 04 ff c8        jsr uartout
 1329 e5b2: a0 e5 4b        BR baslist_loop
 1330 e5b5:             
 1331 e5b5:             baslist5:
 1332 e5b5: 0d 05           LDTI TOKENIZER_LET
 1333 e5b7: aa e5 c4        BRNEQ baslist6
 1334 e5ba: 1f e4 e0        MVIW R7,tokl_let
 1335 e5bd: 04 ff c0        JSR stringout
 1336 e5c0: 53              INCR R3
 1337 e5c1: a0 e5 4b        BR baslist_loop
 1338 e5c4:             
 1339 e5c4:             baslist6:
 1340 e5c4: 0d 06           LDTI TOKENIZER_PRINT
 1341 e5c6: aa e5 d3        BRNEQ baslist7
 1342 e5c9: 1f e4 e5        MVIW R7,tokl_print
 1343 e5cc: 04 ff c0        jsr STRINGOUT
 1344 e5cf: 53              INCR R3
 1345 e5d0: a0 e5 4b        BR baslist_loop
 1346 e5d3:             
 1347 e5d3:             baslist7:
 1348 e5d3: 0d 07           LDTI TOKENIZER_IF
 1349 e5d5: aa e5 e2        BRNEQ baslist8
 1350 e5d8: 1f e4 ec        MVIW R7,tokl_if
 1351 e5db: 04 ff c0        JSR stringout
 1352 e5de: 53              INCR R3
 1353 e5df: a0 e5 4b        BR baslist_loop
 1354 e5e2:             
 1355 e5e2:             baslist8:
 1356 e5e2: 0d 08           LDTI TOKENIZER_THEN
 1357 e5e4: aa e5 f1        BRNEQ baslist9
 1358 e5e7: 1f e4 f0        MVIW R7,tokl_then
 1359 e5ea: 04 ff c0        JSR stringout
 1360 e5ed: 53              INCR R3
 1361 e5ee: a0 e5 4b        BR baslist_loop
 1362 e5f1:             
 1363 e5f1:             baslist9:
 1364 e5f1: 0d 09           LDTI TOKENIZER_ELSE
 1365 e5f3: aa e6 00        BRNEQ baslist10
 1366 e5f6: 1f e4 f6        MVIW R7,tokl_else
 1367 e5f9: 04 ff c0        JSR stringout
 1368 e5fc: 53              INCR R3
 1369 e5fd: a0 e5 4b        BR baslist_loop
 1370 e600:             
 1371 e600:             baslist10:
 1372 e600: 0d 0a           LDTI TOKENIZER_FOR
 1373 e602: aa e6 0f        BRNEQ baslist11
 1374 e605: 1f e4 fc        MVIW R7,tokl_for
 1375 e608: 04 ff c0        JSR stringout
 1376 e60b: 53              INCR R3
 1377 e60c: a0 e5 4b        BR baslist_loop
 1378 e60f:             
 1379 e60f:             baslist11:
 1380 e60f: 0d 0b           LDTI TOKENIZER_TO
 1381 e611: aa e6 1e        BRNEQ baslist12
 1382 e614: 1f e5 01        MVIW R7,tokl_to
 1383 e617: 04 ff c0        JSR stringout
 1384 e61a: 53              INCR R3
 1385 e61b: a0 e5 4b        BR baslist_loop
 1386 e61e:             
 1387 e61e:             baslist12:
 1388 e61e: 0d 0c           LDTI TOKENIZER_NEXT
 1389 e620: aa e6 2d        BRNEQ baslist13
 1390 e623: 1f e5 05        MVIW R7,tokl_next
 1391 e626: 04 ff c0        JSR stringout
 1392 e629: 53              INCR R3
 1393 e62a: a0 e5 4b        BR baslist_loop
 1394 e62d:             
 1395 e62d:             baslist13:
 1396 e62d: 0d 0d           LDTI TOKENIZER_GOTO
 1397 e62f: aa e6 3c        BRNEQ baslist14
 1398 e632: 1f e5 0b        MVIW R7,tokl_goto
 1399 e635: 04 ff c0        JSR stringout
 1400 e638: 53              INCR R3
 1401 e639: a0 e5 4b        BR baslist_loop
 1402 e63c:             
 1403 e63c:             baslist14:
 1404 e63c: 0d 0e           LDTI TOKENIZER_GOSUB
 1405 e63e: aa e6 4b        BRNEQ baslist15
 1406 e641: 1f e5 11        MVIW R7,tokl_gosub
 1407 e644: 04 ff c0        JSR stringout
 1408 e647: 53              INCR R3
 1409 e648: a0 e5 4b        BR baslist_loop
 1410 e64b:             
 1411 e64b:             baslist15:
 1412 e64b: 0d 0f           LDTI TOKENIZER_RETURN
 1413 e64d: aa e6 5a        BRNEQ baslist16
 1414 e650: 1f e5 18        MVIW R7,tokl_return
 1415 e653: 04 ff c0        JSR stringout
 1416 e656: 53              INCR R3
 1417 e657: a0 e5 4b        BR baslist_loop
 1418 e65a:             
 1419 e65a:             baslist16:
 1420 e65a: 0d 10           LDTI TOKENIZER_CALL
 1421 e65c: aa e6 69        BRNEQ baslist17
 1422 e65f: 1f e5 36        MVIW R7,tokl_call
 1423 e662: 04 ff c0        JSR stringout
 1424 e665: 53              INCR R3
 1425 e666: a0 e5 4b        BR baslist_loop
 1426 e669:             
 1427 e669:             baslist17:
 1428 e669: 0d 11           LDTI TOKENIZER_REM
 1429 e66b: aa e6 78        BRNEQ baslist18
 1430 e66e: 1f e5 20        MVIW R7,tokl_rem
 1431 e671: 04 ff c0        JSR stringout
 1432 e674: 53              INCR R3
 1433 e675: a0 e5 4b        BR baslist_loop
 1434 e678:             
 1435 e678:             baslist18:
 1436 e678: 0d 12           LDTI TOKENIZER_PEEK
 1437 e67a: aa e6 87        BRNEQ baslist19
 1438 e67d: 1f e5 25        MVIW R7,tokl_peek
 1439 e680: 04 ff c0        JSR stringout
 1440 e683: 53              INCR R3
 1441 e684: a0 e5 4b        BR baslist_loop
 1442 e687:             
 1443 e687:             baslist19:
 1444 e687: 0d 13           LDTI TOKENIZER_POKE
 1445 e689: aa e6 96        BRNEQ baslist20
 1446 e68c: 1f e5 2b        MVIW R7,tokl_poke
 1447 e68f: 04 ff c0        JSR stringout
 1448 e692: 53              INCR R3
 1449 e693: a0 e5 4b        BR baslist_loop
 1450 e696:             
 1451 e696:             baslist20:
 1452 e696: 0d 14           LDTI TOKENIZER_END
 1453 e698: aa e6 a5        BRNEQ baslist21
 1454 e69b: 1f e5 31        MVIW R7,tokl_end
 1455 e69e: 04 ff c0        JSR stringout
 1456 e6a1: 53              INCR R3
 1457 e6a2: a0 e5 4b        BR baslist_loop
 1458 e6a5:             
 1459 e6a5:             baslist21:
 1460 e6a5: 0d 15           LDTI TOKENIZER_COMMA
 1461 e6a7: aa e6 b8        BRNEQ baslist22
 1462 e6aa: 0e 2c           ldai ','
 1463 e6ac: 04 ff c8        jsr uartout
 1464 e6af: 0e 20           ldai ' '
 1465 e6b1: 04 ff c8        jsr uartout
 1466 e6b4: 53              INCR R3
 1467 e6b5: a0 e5 4b        BR baslist_loop
 1468 e6b8:             
 1469 e6b8:             baslist22:
 1470 e6b8: 0d 16           LDTI TOKENIZER_SEMICOLON
 1471 e6ba: aa e6 cb        BRNEQ baslist23
 1472 e6bd: 0e 3b           ldai ';'
 1473 e6bf: 04 ff c8        jsr uartout
 1474 e6c2: 0e 20           ldai ' '
 1475 e6c4: 04 ff c8        jsr uartout
 1476 e6c7: 53              INCR R3
 1477 e6c8: a0 e5 4b        BR baslist_loop
 1478 e6cb:             
 1479 e6cb:             baslist23:
 1480 e6cb: 0d 17           LDTI TOKENIZER_PLUS
 1481 e6cd: aa e6 de        BRNEQ baslist24
 1482 e6d0: 0e 2b           ldai '+'
 1483 e6d2: 04 ff c8        jsr uartout
 1484 e6d5: 0e 20           ldai ' '
 1485 e6d7: 04 ff c8        jsr uartout
 1486 e6da: 53              INCR R3
 1487 e6db: a0 e5 4b        BR baslist_loop
 1488 e6de:             
 1489 e6de:             baslist24:
 1490 e6de: 0d 18           LDTI TOKENIZER_MINUS
 1491 e6e0: aa e6 f1        BRNEQ baslist25
 1492 e6e3: 0e 2d           ldai '-'
 1493 e6e5: 04 ff c8        jsr uartout
 1494 e6e8: 0e 20           ldai ' '
 1495 e6ea: 04 ff c8        jsr uartout
 1496 e6ed: 53              INCR R3
 1497 e6ee: a0 e5 4b        BR baslist_loop
 1498 e6f1:             
 1499 e6f1:             baslist25:
 1500 e6f1: 0d 19           LDTI TOKENIZER_AND
 1501 e6f3: aa e7 04        BRNEQ baslist26
 1502 e6f6: 0e 26           ldai '&'
 1503 e6f8: 04 ff c8        jsr uartout
 1504 e6fb: 0e 20           ldai ' '
 1505 e6fd: 04 ff c8        jsr uartout
 1506 e700: 53              INCR R3
 1507 e701: a0 e5 4b        BR baslist_loop
 1508 e704:             
 1509 e704:             baslist26:
 1510 e704: 0d 1a           LDTI TOKENIZER_OR
 1511 e706: aa e7 17        BRNEQ baslist27
 1512 e709: 0e 7c           ldai '|'
 1513 e70b: 04 ff c8        jsr uartout
 1514 e70e: 0e 20           ldai ' '
 1515 e710: 04 ff c8        jsr uartout
 1516 e713: 53              INCR R3
 1517 e714: a0 e5 4b        BR baslist_loop
 1518 e717:             
 1519 e717:             baslist27:
 1520 e717: 0d 1b           LDTI TOKENIZER_ASTR
 1521 e719: aa e7 2a        BRNEQ baslist28
 1522 e71c: 0e 2a           ldai '*'
 1523 e71e: 04 ff c8        jsr uartout
 1524 e721: 0e 20           ldai ' '
 1525 e723: 04 ff c8        jsr uartout
 1526 e726: 53              INCR R3
 1527 e727: a0 e5 4b        BR baslist_loop
 1528 e72a:             
 1529 e72a:             baslist28:
 1530 e72a: 0d 1c           LDTI TOKENIZER_SLASH
 1531 e72c: aa e7 3d        BRNEQ baslist29
 1532 e72f: 0e 2f           ldai '/'
 1533 e731: 04 ff c8        jsr uartout
 1534 e734: 0e 20           ldai ' '
 1535 e736: 04 ff c8        jsr uartout
 1536 e739: 53              INCR R3
 1537 e73a: a0 e5 4b        BR baslist_loop
 1538 e73d:             
 1539 e73d:             baslist29:
 1540 e73d: 0d 1d           LDTI TOKENIZER_MOD
 1541 e73f: aa e7 50        BRNEQ baslist30
 1542 e742: 0e 25           ldai '%'
 1543 e744: 04 ff c8        jsr uartout
 1544 e747: 0e 20           ldai ' '
 1545 e749: 04 ff c8        jsr uartout
 1546 e74c: 53              INCR R3
 1547 e74d: a0 e5 4b        BR baslist_loop
 1548 e750:             
 1549 e750:             baslist30:
 1550 e750: 0d 1e           LDTI TOKENIZER_HASH
 1551 e752: aa e7 63        BRNEQ baslist31
 1552 e755: 0e 23           ldai '#'
 1553 e757: 04 ff c8        jsr uartout
 1554 e75a: 0e 20           ldai ' '
 1555 e75c: 04 ff c8        jsr uartout
 1556 e75f: 53              INCR R3
 1557 e760: a0 e5 4b        BR baslist_loop
 1558 e763:             
 1559 e763:             baslist31:
 1560 e763: 0d 1f           LDTI TOKENIZER_LEFTP
 1561 e765: aa e7 76        BRNEQ baslist32
 1562 e768: 0e 28           ldai '()'
 1563 e76a: 04 ff c8        jsr uartout
 1564 e76d: 0e 20           ldai ' '
 1565 e76f: 04 ff c8        jsr uartout
 1566 e772: 53              INCR R3
 1567 e773: a0 e5 4b        BR baslist_loop
 1568 e776:             
 1569 e776:             baslist32:
 1570 e776: 0d 20           LDTI TOKENIZER_RIGHTP
 1571 e778: aa e7 89        BRNEQ baslist33
 1572 e77b: 0e 29           ldai ')'
 1573 e77d: 04 ff c8        jsr uartout
 1574 e780: 0e 20           ldai ' '
 1575 e782: 04 ff c8        jsr uartout
 1576 e785: 53              INCR R3
 1577 e786: a0 e5 4b        BR baslist_loop
 1578 e789:             
 1579 e789:             baslist33:
 1580 e789: 0d 21           LDTI TOKENIZER_LT
 1581 e78b: aa e7 9c        BRNEQ baslist34
 1582 e78e: 0e 3c           ldai '<'
 1583 e790: 04 ff c8        jsr uartout
 1584 e793: 0e 20           ldai ' '
 1585 e795: 04 ff c8        jsr uartout
 1586 e798: 53              INCR R3
 1587 e799: a0 e5 4b        BR baslist_loop
 1588 e79c:             
 1589 e79c:             baslist34:
 1590 e79c: 0d 22           LDTI TOKENIZER_GT
 1591 e79e: aa e7 af        BRNEQ baslist35
 1592 e7a1: 0e 3e           ldai '>'
 1593 e7a3: 04 ff c8        jsr uartout
 1594 e7a6: 0e 20           ldai ' '
 1595 e7a8: 04 ff c8        jsr uartout
 1596 e7ab: 53              INCR R3
 1597 e7ac: a0 e5 4b        BR baslist_loop
 1598 e7af:             
 1599 e7af:             baslist35:
 1600 e7af: 0d 23           LDTI TOKENIZER_EQ
 1601 e7b1: aa e7 c2        BRNEQ baslist36
 1602 e7b4: 0e 3d           ldai '='
 1603 e7b6: 04 ff c8        jsr uartout
 1604 e7b9: 0e 20           ldai ' '
 1605 e7bb: 04 ff c8        jsr uartout
 1606 e7be: 53              INCR R3
 1607 e7bf: a0 e5 4b        BR baslist_loop
 1608 e7c2:             
 1609 e7c2:             baslist36:
 1610 e7c2: 0d 24           LDTI TOKENIZER_CR
 1611 e7c4: aa e7 d1        BRNEQ baslist37
 1612 e7c7: 1f ec ae        mviw R7,CRLF
 1613 e7ca: 04 ff c0        jsr stringout
 1614 e7cd: 53              INCR R3
 1615 e7ce: a0 e5 4b        BR baslist_loop
 1616 e7d1:             
 1617 e7d1:             baslist37:
 1618 e7d1: 0d 25           LDTI TOKENIZER_LINENUM
 1619 e7d3: aa e7 ea        BRNEQ baslist38
 1620 e7d6: 53              incr r3
 1621 e7d7: 43              ldavr r3
 1622 e7d8: 37              mvarl r7
 1623 e7d9: 53              incr r3
 1624 e7da: 43              ldavr r3
 1625 e7db: 3f              mvarh r7
 1626 e7dc: 53              INCR R3
 1627 e7dd: 53              incr r3
 1628 e7de: 53              incr r3
 1629 e7df: 04 ff d4        jsr showr7
 1630 e7e2: 0e 20           ldai ' '
 1631 e7e4: 04 ff c8        jsr uartout
 1632 e7e7: a0 e5 4b        BR baslist_loop
 1633 e7ea:             
 1634 e7ea:             baslist38:
 1635 e7ea: 1f e5 3c        MVIW R7,tokl_error
 1636 e7ed: 04 ff c0        JSR stringout
 1637 e7f0: 04 ff cc        JSR showaddr
 1638 e7f3: a0 e7 f6        BR baslist_done
 1639 e7f6:             ;
 1640 e7f6:             ; any cleanup
 1641 e7f6:             ;
 1642 e7f6:             baslist_done:
 1643 e7f6: 08 30           popr r3
 1644 e7f8: 05              ret
 1645 e7f9:             
 1646 e7f9:             ;
 1647 e7f9:             ; Basic Interpreter Parser
 1648 e7f9:             ;
 1649 e7f9:             parse_keywords:
 1650 e7f9: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1651 e7fe: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1652 e805: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1653 e809: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1654 e80f: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1655 e815: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1656 e81a: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1657 e81e: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1658 e824: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1659 e82a: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1660 e831: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1661 e839: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1662 e83f: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1663 e844: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1664 e84a: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1665 e850: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1666 e855: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1667 e858:             
 1668 e858:             ;
 1669 e858:             ; int singlechar (void)
 1670 e858:             ;
 1671 e858:             ; return TOKEN result in accumulator
 1672 e858:             ;
 1673 e858:             ; ready for testing
 1674 e858:             ;
 1675 e858:             parse_singlechar:
 1676 e858:             ;
 1677 e858: 07 03           pushr r3
 1678 e85a: f3 02 02        LDR r3,bas_txtptr
 1679 e85d: 43              ldavr r3
 1680 e85e: 08 30           popr r3
 1681 e860:             ;
 1682 e860: 0d 0a           ldti 0ah
 1683 e862: aa e8 68        brneq parsechar1
 1684 e865: 0e 24           ldai TOKENIZER_CR
 1685 e867: 05              ret
 1686 e868:             parsechar1:
 1687 e868: 0d 2c           ldti ','
 1688 e86a: aa e8 70        brneq parsechar2
 1689 e86d: 0e 15           ldai TOKENIZER_COMMA
 1690 e86f: 05              ret
 1691 e870:             parsechar2:
 1692 e870: 0d 3b           ldti ';'
 1693 e872: aa e8 78        brneq parsechar3
 1694 e875: 0e 16           ldai TOKENIZER_SEMICOLON
 1695 e877: 05              ret
 1696 e878:             parsechar3:
 1697 e878: 0d 2b           ldti '+'
 1698 e87a: aa e8 80        brneq parsechar4
 1699 e87d: 0e 17           ldai TOKENIZER_PLUS
 1700 e87f: 05              ret
 1701 e880:             parsechar4:
 1702 e880: 0d 2d           ldti '-'
 1703 e882: aa e8 88        brneq parsechar5
 1704 e885: 0e 18           ldai TOKENIZER_MINUS
 1705 e887: 05              ret
 1706 e888:             parsechar5:
 1707 e888: 0d 26           ldti '&'
 1708 e88a: aa e8 90        brneq parsechar6
 1709 e88d: 0e 19           ldai TOKENIZER_AND
 1710 e88f: 05              ret
 1711 e890:             parsechar6:
 1712 e890: 0d 7c           ldti '|'
 1713 e892: aa e8 98        brneq parsechar7
 1714 e895: 0e 1a           ldai TOKENIZER_OR
 1715 e897: 05              ret
 1716 e898:             parsechar7:
 1717 e898: 0d 2a           ldti '*'
 1718 e89a: aa e8 a0        brneq parsechar8
 1719 e89d: 0e 1b           ldai TOKENIZER_ASTR
 1720 e89f: 05              ret
 1721 e8a0:             parsechar8:
 1722 e8a0: 0d 25           ldti '%'
 1723 e8a2: aa e8 a8        brneq parsechar9
 1724 e8a5: 0e 1d           ldai TOKENIZER_MOD
 1725 e8a7: 05              ret
 1726 e8a8:             parsechar9:
 1727 e8a8: 0d 28           ldti '('
 1728 e8aa: aa e8 b0        brneq parsechar10
 1729 e8ad: 0e 1f           ldai TOKENIZER_LEFTP
 1730 e8af: 05              ret
 1731 e8b0:             parsechar10:
 1732 e8b0: 0d 23           ldti '#'
 1733 e8b2: aa e8 b8        brneq parsechar11
 1734 e8b5: 0e 1e           ldai TOKENIZER_HASH
 1735 e8b7: 05              ret
 1736 e8b8:             parsechar11:
 1737 e8b8: 0d 29           ldti ')'
 1738 e8ba: aa e8 c0        brneq parsechar12
 1739 e8bd: 0e 20           ldai TOKENIZER_RIGHTP
 1740 e8bf: 05              ret
 1741 e8c0:             parsechar12:
 1742 e8c0: 0d 3c           ldti '<'
 1743 e8c2: aa e8 c8        brneq parsechar13
 1744 e8c5: 0e 21           ldai TOKENIZER_LT
 1745 e8c7: 05              ret
 1746 e8c8:             parsechar13:
 1747 e8c8: 0d 3e           ldti '>'
 1748 e8ca: aa e8 d0        brneq parsechar14
 1749 e8cd: 0e 22           ldai TOKENIZER_GT
 1750 e8cf: 05              ret
 1751 e8d0:             parsechar14:
 1752 e8d0: 0d 3d           ldti '='
 1753 e8d2: aa e8 d8        brneq parsechar15
 1754 e8d5: 0e 23           ldai TOKENIZER_EQ
 1755 e8d7: 05              ret
 1756 e8d8:             parsechar15:
 1757 e8d8: 0e 00           ldai 0
 1758 e8da: 05              ret
 1759 e8db:             
 1760 e8db:             ;
 1761 e8db:             ; int get_next_token(void)
 1762 e8db:             ;
 1763 e8db:             ; under development fix ptr nextptr
 1764 e8db:             
 1765 e8db:             parse_get_next_tok:
 1766 e8db: 07 03           pushr r3
 1767 e8dd: f3 02 02        LDR R3,bas_txtptr
 1768 e8e0:             ;
 1769 e8e0:             ; is digit
 1770 e8e0:             ;
 1771 e8e0:             ; chcek for number
 1772 e8e0:             ;
 1773 e8e0:             parse_gnt1:
 1774 e8e0: 43              ldavr r3
 1775 e8e1: 04 ec 7d        jsr parse_isdigit
 1776 e8e4: a1 e8 f7        brz parse_gnt2
 1777 e8e7:             parse_gnt1loop:
 1778 e8e7: 53              incr R3
 1779 e8e8: 43              ldavr r3
 1780 e8e9: 04 ec 7d        jsr parse_isdigit
 1781 e8ec: a2 e8 e7        brnz parse_gnt1loop
 1782 e8ef: fb 02 04        STR r3,bas_nxtptr
 1783 e8f2: 0e 02           ldai TOKENIZER_NUMBER
 1784 e8f4: 08 30           popr r3
 1785 e8f6: 05              ret
 1786 e8f7:             ;
 1787 e8f7:             ; singlechar
 1788 e8f7:             ;
 1789 e8f7:             parse_gnt2:
 1790 e8f7: 43             ldavr r3
 1791 e8f8: 04 e8 58       jsr parse_singlechar
 1792 e8fb: a1 e9 05       BRZ parse_gnt3
 1793 e8fe: 53             incr r3
 1794 e8ff: fb 02 04       STR r3,bas_nxtptr
 1795 e902: 08 30          popr r3
 1796 e904: 05             ret
 1797 e905:             ;
 1798 e905:             ; quote
 1799 e905:             ;
 1800 e905:             parse_gnt3:
 1801 e905: 43              ldavr R3
 1802 e906: 0d 22           ldti '"'
 1803 e908: aa e9 1b        brneq parse_gnt4
 1804 e90b:             parse_gnt3loop:
 1805 e90b: 53              incr r3
 1806 e90c: 43              ldavr R3
 1807 e90d: 0d 22           ldti '"'
 1808 e90f: aa e9 0b        brneq parse_gnt3loop
 1809 e912: 53              incr r3
 1810 e913: fb 02 04        STR r3,bas_nxtptr
 1811 e916: 0e 03           ldai TOKENIZER_STRING
 1812 e918: 08 30           popr r3
 1813 e91a: 05              ret
 1814 e91b:             ;
 1815 e91b:             parse_gnt4:
 1816 e91b:             ;
 1817 e91b:             ; keyword search
 1818 e91b:             ;
 1819 e91b: 07 04           pushr r4
 1820 e91d: 1c e7 f9        mviw r4,parse_keywords
 1821 e920:             top:
 1822 e920: 44              ldavr r4
 1823 e921: a1 e9 48        brz nokeyowrdsfound
 1824 e924: f3 02 02        LDR r3,bas_txtptr
 1825 e927:             pcmploop:
 1826 e927: 44              ldavr r4
 1827 e928: a1 e9 3e        brz found
 1828 e92b: 0b              MVAT
 1829 e92c: 43              ldavr r3
 1830 e92d: aa e9 35        brneq skiptoend
 1831 e930: 54              incr r4
 1832 e931: 53              incr r3
 1833 e932: a0 e9 27        br pcmploop
 1834 e935:             
 1835 e935:             skiptoend:
 1836 e935:             ;  skip to end of string and skip over token
 1837 e935:             skiploop:
 1838 e935: 44              ldavr r4
 1839 e936: 54              incr r4
 1840 e937: a2 e9 35        brnz skiploop
 1841 e93a: 54              incr r4
 1842 e93b: a0 e9 20        br top
 1843 e93e:             
 1844 e93e:             found:
 1845 e93e: fb 02 04        str r3,bas_nxtptr
 1846 e941: 54              incr r4
 1847 e942: 44              ldavr r4
 1848 e943: 08 40           popr r4
 1849 e945: 08 30           popr r3
 1850 e947: 05              ret
 1851 e948:             
 1852 e948:             nokeyowrdsfound:
 1853 e948: 08 40           popr r4
 1854 e94a:             ;
 1855 e94a:             ;  check for variables
 1856 e94a:             ;
 1857 e94a: 43              ldavr r3
 1858 e94b: 0d 41           ldti 'A'
 1859 e94d: a7 e9 5e        BRLT parse_gnt_error
 1860 e950: 0d 5a           ldti 'Z'
 1861 e952: a9 e9 5e        BRGT parse_gnt_error
 1862 e955: 53              INCR r3
 1863 e956: fb 02 04        str r3,bas_nxtptr
 1864 e959: 0e 04           LDAI tokenizer_variable
 1865 e95b: 08 30           popr r3
 1866 e95d: 05              RET
 1867 e95e:             
 1868 e95e:             parse_gnt_error:
 1869 e95e: 03              halt
 1870 e95f: 0e 00           ldai tokenizer_error
 1871 e961: 08 30           popr r3
 1872 e963: 05              ret
 1873 e964:             
 1874 e964:             ;
 1875 e964:             ; void TOKENIZER_GOTO (char * program)
 1876 e964:             ;
 1877 e964:             ; under development, may not be needed
 1878 e964:             ;
 1879 e964:             ;parse_goto:
 1880 e964:             ;    str r3,bas_txtptr
 1881 e964:             ;    jsr parse_get_next_tok
 1882 e964:             ;    sta bas_currenttoken
 1883 e964:             ;    ret
 1884 e964:             
 1885 e964:             ;
 1886 e964:             ; void tokenizer_init(int ptr)
 1887 e964:             ;
 1888 e964:             ; under development
 1889 e964:             ;
 1890 e964:             parse_init:
 1891 e964:             
 1892 e964: 07 03           pushr r3
 1893 e966: ff 02 02        STR R7,bas_txtptr
 1894 e969: 1b 04 00        MVIW r3,parse_token_buffer
 1895 e96c: fb 02 06        STR  R3,bas_tokptr
 1896 e96f: 1b 00 00        mviw r3,0
 1897 e972: fb 02 08        str r3,bas_tokcounter
 1898 e975: 04 e8 db        jsr parse_get_next_tok
 1899 e978: ed 02 0a        sta bas_currenttoken
 1900 e97b: 08 30           popr r3
 1901 e97d: 03              halt
 1902 e97e: 05              ret
 1903 e97f:             
 1904 e97f:             ;
 1905 e97f:             ; int tokenizer_token(void)
 1906 e97f:             :
 1907 e97f:             parse_token:
 1908 e97f: ec 02 0a        lda bas_currenttoken
 1909 e982: 05              ret
 1910 e983:             
 1911 e983:             ;
 1912 e983:             ; void tokenizer_next(void) parser version
 1913 e983:             ;
 1914 e983:             parse_next:
 1915 e983:             ;    halt
 1916 e983: 04 ea 68        jsr parse_finished
 1917 e986: a1 e9 8a        brz parse_next1
 1918 e989: 05              ret
 1919 e98a:             
 1920 e98a:             parse_next1:
 1921 e98a: 07 03           pushr r3
 1922 e98c: f3 02 04        ldr r3,bas_nxtptr
 1923 e98f: fb 02 02        str r3,bas_txtptr
 1924 e992:             
 1925 e992:             parse_next1loop:
 1926 e992: 43              ldavr r3
 1927 e993: 0d 20           ldti ' '
 1928 e995: aa e9 9c        brneq parse_next2
 1929 e998: 53              incr r3
 1930 e999: a0 e9 92        br parse_next1loop
 1931 e99c:             
 1932 e99c:             
 1933 e99c:             parse_next2:
 1934 e99c: fb 02 02        str r3,bas_txtptr
 1935 e99f: 04 e8 db        jsr parse_get_next_tok
 1936 e9a2: ed 02 0a        sta bas_currenttoken
 1937 e9a5:             
 1938 e9a5: 0d 11           ldti TOKENIZER_REM
 1939 e9a7: a8 e9 ad        breq parse_next3
 1940 e9aa: 08 30           popr r3
 1941 e9ac: 05              ret
 1942 e9ad:             
 1943 e9ad:             ;
 1944 e9ad:             ; this needs to be fixed
 1945 e9ad:             ; if rem return to parsel line then copy into token buffer
 1946 e9ad:             ;
 1947 e9ad:             parse_next3:
 1948 e9ad: 04 ea 68        JSR parse_finished
 1949 e9b0: a2 e9 bd        BRNZ parse_nextdone
 1950 e9b3: 43              ldavr r3
 1951 e9b4: 0d 0a           ldti  0ah
 1952 e9b6: a8 e9 bd        breq parse_nextdone
 1953 e9b9: 53              incr r3
 1954 e9ba: a0 e9 ad        br parse_next3
 1955 e9bd:             
 1956 e9bd:             parse_nextdone:
 1957 e9bd: 43              ldavr r3
 1958 e9be: 0d 0a           ldti  0ah
 1959 e9c0: aa e9 c4        brneq parse_nextdone2
 1960 e9c3: 53              incr r3
 1961 e9c4:             
 1962 e9c4:             parse_nextdone2:
 1963 e9c4: fb 02 04        str r3,bas_nxtptr
 1964 e9c7: 04 e9 83        jsr parse_next
 1965 e9ca: 08 30           popr r3
 1966 e9cc: 05              ret
 1967 e9cd:             
 1968 e9cd:             ;
 1969 e9cd:             ; VARIABLE_TYPE tokenizer_num(void)
 1970 e9cd:             ;
 1971 e9cd:             ; Hack for now input characters are ascii hex format HHHH
 1972 e9cd:             ;
 1973 e9cd:             ; value returned in R7
 1974 e9cd:             ;
 1975 e9cd:             ; Should this advance the line ptr?
 1976 e9cd:             ;
 1977 e9cd:             
 1978 e9cd:             parse_num:
 1979 e9cd: 07 03           pushr r3
 1980 e9cf: 07 04           pushr r4
 1981 e9d1: 07 05           pushr r5
 1982 e9d3: 07 06           pushr r6
 1983 e9d5: 1e 00 00        mviw r6,0           ;accumlate val in r6
 1984 e9d8: f3 02 02        LDR r3,bas_txtptr
 1985 e9db: 04 ea 09        jsr parse_num_char
 1986 e9de:             ;   jsr SHOWBYTEA
 1987 e9de: 36              mvarl r6
 1988 e9df:             parse_num_loop:
 1989 e9df: 04 ea 09        jsr parse_num_char
 1990 e9e2:             ;   jsr showbytea
 1991 e9e2: 09              push
 1992 e9e3: 0d ff           ldti 0FFH
 1993 e9e5: a8 e9 fd        breq parse_num_done
 1994 e9e8:             
 1995 e9e8: 0f 56           movrr r6,r5
 1996 e9ea: 1c 00 0a        mviw r4,0ah
 1997 e9ed: 04 ec 0d        jsr parse_mul16
 1998 e9f0:             ;    jsr showr7
 1999 e9f0: 0a              pop
 2000 e9f1: 1e 00 00        mviw r6,0
 2001 e9f4: 36              mvarl r6
 2002 e9f5: 04 ec 48        jsr parse_add16
 2003 e9f8: 0f 67           movrr r7,r6
 2004 e9fa:             ;    jsr showr7
 2005 e9fa: a0 e9 df        br parse_num_loop
 2006 e9fd:             parse_num_done:
 2007 e9fd: 0a              pop
 2008 e9fe: 0f 76           movrr r6,r7
 2009 ea00: 08 60           popr r6
 2010 ea02: 08 50           popr r5
 2011 ea04: 08 40           popr r4
 2012 ea06: 08 30           popr r3
 2013 ea08:             ;    jsr showr7
 2014 ea08: 05              ret
 2015 ea09:             
 2016 ea09:             parse_num_char:
 2017 ea09: 43              LDAVR R3
 2018 ea0a: 04 ec 7d        JSR parse_isdigit
 2019 ea0d: a2 ea 13        BRNZ parse_num_char1
 2020 ea10: 0e ff           ldai 0ffh
 2021 ea12: 05              ret
 2022 ea13:             parse_num_char1:
 2023 ea13: 43              ldavr r3
 2024 ea14: b1 30           SUBI '0'
 2025 ea16: 53              incr r3
 2026 ea17: 05              RET
 2027 ea18:             
 2028 ea18:             parse_num_old:
 2029 ea18: 07 03           pushr r3
 2030 ea1a: f3 02 02        LDR r3,bas_txtptr
 2031 ea1d: 04 ea 46        JSR parse_getnibble
 2032 ea20: b6              SHL
 2033 ea21: b6              SHL
 2034 ea22: b6              SHL
 2035 ea23: b6              SHL
 2036 ea24: b3 f0           ANDI 0f0h
 2037 ea26: 09              Push
 2038 ea27: 04 ea 46        JSR parse_getnibble
 2039 ea2a: b3 0f           ANDI 0FH
 2040 ea2c: 0b              MVAT
 2041 ea2d: 0a              Pop
 2042 ea2e: ba              ORT
 2043 ea2f: 3f              MVARH R7
 2044 ea30:             
 2045 ea30: 04 ea 46        JSR parse_getnibble
 2046 ea33: b6              SHL
 2047 ea34: b6              shl
 2048 ea35: b6              shl
 2049 ea36: b6              shl
 2050 ea37: b3 f0           ANDI 0f0h
 2051 ea39: 09              push
 2052 ea3a: 04 ea 46        JSR parse_getnibble
 2053 ea3d: b3 0f           ANDI 0FH
 2054 ea3f: 0b              MVAT
 2055 ea40: 0a              pop
 2056 ea41: ba              ORT
 2057 ea42: 37              MVARL R7
 2058 ea43: 08 30           popr r3
 2059 ea45: 05              RET
 2060 ea46:             
 2061 ea46:             ;
 2062 ea46:             ; add error checking
 2063 ea46:             ;
 2064 ea46:             ; return hex nibble in accumulator
 2065 ea46:             ;
 2066 ea46:             parse_getnibble:
 2067 ea46: 43                LDAVR R3
 2068 ea47: 53                incr r3
 2069 ea48: 0d 39             LDTI '9'
 2070 ea4a: a9 ea 50          BRGT parse_af
 2071 ea4d: b1 30             SUBI '0'
 2072 ea4f: 05                RET
 2073 ea50:             parse_af:
 2074 ea50: 04 ff d0          JSR toupper
 2075 ea53: b1 41             SUBI 'A'
 2076 ea55: b0 0a             ADDI 10
 2077 ea57: 05                RET
 2078 ea58:             ;
 2079 ea58:             ; void tokenizer_string(char *dest, int len)
 2080 ea58:             ;
 2081 ea58:             ; not used, in line parse_line
 2082 ea58:             ;
 2083 ea58:             parse_string:
 2084 ea58: 04 e9 7f        JSR parse_token
 2085 ea5b: 0d 03           LDTI TOKENIZER_STRING
 2086 ea5d: a8 ea 61        BREQ parse_string1
 2087 ea60: 05              ret
 2088 ea61:             
 2089 ea61:             parse_string1:
 2090 ea61: 07 03           pushr r3
 2091 ea63: f3 02 02        LDR r3,bas_txtptr
 2092 ea66: 43              LDAVR R3
 2093 ea67:             
 2094 ea67:             
 2095 ea67:             ;
 2096 ea67:             ; void tokenizer_error_print(void)
 2097 ea67:             ;
 2098 ea67:             ; fix
 2099 ea67:             ;
 2100 ea67:             parse_error_print:
 2101 ea67: 03              halt
 2102 ea68:             
 2103 ea68:             ;
 2104 ea68:             ; int tokenizer_finished(void)
 2105 ea68:             ;
 2106 ea68:             parse_finished:
 2107 ea68: 07 03           pushr r3
 2108 ea6a: f3 02 02        LDR r3,bas_txtptr
 2109 ea6d: 43              ldavr r3
 2110 ea6e: a1 ea 83        brz parse_finished_yes
 2111 ea71:             ;    ldti 0ah
 2112 ea71:             ;    breq parse_finished_yes
 2113 ea71:             ;    ldti 0dh
 2114 ea71:             ;    breq parse_finished_yes
 2115 ea71: 0d 01           ldti TOKENIZER_EOF
 2116 ea73: a8 ea 83        breq parse_finished_yes
 2117 ea76: ec 02 0a        lda bas_currenttoken
 2118 ea79: 0d 01           ldti TOKENIZER_EOF
 2119 ea7b: a8 ea 83        breq parse_finished_yes
 2120 ea7e: 08 30           popr r3
 2121 ea80: 0e 00           ldai 0
 2122 ea82: 05              ret
 2123 ea83:             parse_finished_yes:
 2124 ea83: 0e 01           ldai 1
 2125 ea85: 08 30           popr r3
 2126 ea87: 05              ret
 2127 ea88:             
 2128 ea88:             ;
 2129 ea88:             ; int tokenizer_variable_num(void)
 2130 ea88:             ;
 2131 ea88:             parse_variable_num:
 2132 ea88: 07 03             pushr r3
 2133 ea8a: f3 02 02          LDR r3,bas_txtptr
 2134 ea8d: 43                ldavr r3
 2135 ea8e: b1 41             subi 'A'
 2136 ea90: 37                mvarl r7
 2137 ea91: 0e 00             ldai 0
 2138 ea93: 3f                mvarh r7
 2139 ea94: 08 30             popr r3
 2140 ea96: 05                ret
 2141 ea97:             
 2142 ea97:             ;
 2143 ea97:             ; char *const tokenizer_pos(void)
 2144 ea97:             ;
 2145 ea97:             ; probably not used
 2146 ea97:             parse_pos:
 2147 ea97:             
 2148 ea97:             ;not used old
 2149 ea97:             ; char *tokenize(char *program)
 2150 ea97:             ;
 2151 ea97:             ; parse:
 2152 ea97:             
 2153 ea97:             ;
 2154 ea97:             ; char *tokenizeLine(char *line)
 2155 ea97:             ;
 2156 ea97:             ; assume input text string in parse_input_line
 2157 ea97:             ;
 2158 ea97:             
 2159 ea97:             parse_line:
 2160 ea97:             ;    halt
 2161 ea97: 04 e9 64        JSR PARSE_INIT
 2162 ea9a:             ;    halt
 2163 ea9a: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2164 ea9d: fb 02 08        str r3,bas_tokcounter
 2165 eaa0: 1b 04 00        MVIW R3,parse_token_buffer
 2166 eaa3:             
 2167 eaa3: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2168 eaa5: 4b              STAVR R3
 2169 eaa6: 53              INCR R3
 2170 eaa7:             
 2171 eaa7: 04 e9 cd        JSR parse_num           ;store line number
 2172 eaaa:             ;    HALT
 2173 eaaa: ff 02 10        str r7,bas_newlinenum
 2174 eaad: 27              mvrla r7
 2175 eaae: 4b              stavr r3
 2176 eaaf: 53              incr r3
 2177 eab0: 2f              mvrha r7
 2178 eab1: 4b              stavr r3
 2179 eab2: 53              incr r3
 2180 eab3:             
 2181 eab3: 53              incr r3                ; skip over line length - fill in later
 2182 eab4: 53              incr r3
 2183 eab5:             ;   halt
 2184 eab5:             
 2185 eab5:             parse_line_loop:
 2186 eab5: 04 e9 83        JSR parse_next
 2187 eab8: 04 e9 7f        JSR parse_token
 2188 eabb: 0d 24           ldti TOKENIZER_CR
 2189 eabd: a8 eb 2c        BREQ parse_line_done
 2190 eac0:             ;    halt
 2191 eac0:             
 2192 eac0: 4b              STAVR R3
 2193 eac1: 53              INCR R3
 2194 eac2: f5 02 08        ldr r5,bas_tokcounter
 2195 eac5: 55              incr r5
 2196 eac6: fd 02 08        str r5,bas_tokcounter
 2197 eac9:             
 2198 eac9: 0d 02           ldti TOKENIZER_NUMBER
 2199 eacb: aa ea e2        BRNEQ parse_line1
 2200 eace: 04 e9 cd        JSR parse_num
 2201 ead1: 27              mvrla r7
 2202 ead2: 4b              stavr r3
 2203 ead3: 53              incr r3
 2204 ead4: 2f              mvrha r7
 2205 ead5: 4b              stavr r3
 2206 ead6: 53              incr r3
 2207 ead7: f5 02 08        ldr r5,bas_tokcounter
 2208 eada: 55              incr r5
 2209 eadb: 55              incr r5
 2210 eadc: fd 02 08        str r5,bas_tokcounter
 2211 eadf: a0 ea b5        BR parse_line_loop
 2212 eae2:             
 2213 eae2:             parse_line1:
 2214 eae2: 0d 03           ldti TOKENIZER_STRING
 2215 eae4: aa eb 13        BRNEQ parse_line2
 2216 eae7: f4 02 02        ldr r4,bas_txtptr
 2217 eaea: 54              incr r4                   ;skip over opening "
 2218 eaeb:             
 2219 eaeb:             parse_line1loop:
 2220 eaeb: 44              ldavr r4
 2221 eaec: 0d 22           ldti '"'
 2222 eaee: a8 ea fe        breq parse_line1done
 2223 eaf1: 4b              stavr r3
 2224 eaf2: 53              incr r3
 2225 eaf3: 54              incr r4
 2226 eaf4: f5 02 08        ldr r5,bas_tokcounter
 2227 eaf7: 55              incr r5
 2228 eaf8: fd 02 08        str r5,bas_tokcounter
 2229 eafb: a0 ea eb        BR parse_line1loop
 2230 eafe:             parse_line1done:
 2231 eafe: 54              incr r4                   ;skip over closing "
 2232 eaff: 0e 00           ldai 0                    ;add null into token buffer
 2233 eb01: 4b              stavr R3
 2234 eb02: 53              incr r3
 2235 eb03: f5 02 08        ldr r5,bas_tokcounter
 2236 eb06: 55              incr r5
 2237 eb07: fd 02 08        str r5,bas_tokcounter
 2238 eb0a: fb 02 06        str r3,BAS_TOKPTR
 2239 eb0d: fc 02 02        str r4,bas_txtptr
 2240 eb10: a0 ea b5        BR parse_line_loop
 2241 eb13:             
 2242 eb13:             parse_line2:
 2243 eb13: 0d 04           ldti TOKENIZER_VARIABLE
 2244 eb15: aa ea b5        BRNEQ parse_line_loop
 2245 eb18: 04 ea 88        JSR parse_variable_num
 2246 eb1b: 27              mvrla r7
 2247 eb1c: 4b              stavr r3
 2248 eb1d: 53              incr r3
 2249 eb1e: 2f              mvrha r7
 2250 eb1f: 4b              stavr r3
 2251 eb20: 53              incr r3
 2252 eb21: f5 02 08        ldr r5,bas_tokcounter
 2253 eb24: 55              incr r5
 2254 eb25: 55              incr r5
 2255 eb26: fd 02 08        str r5,bas_tokcounter
 2256 eb29: a0 ea b5        BR parse_line_loop
 2257 eb2c:             
 2258 eb2c:             parse_line_done:
 2259 eb2c: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2260 eb2e: 4b              STAVR R3
 2261 eb2f: 53              INCR R3
 2262 eb30:             ;    ldr r5,bas_tokcounter
 2263 eb30:             ;    incr r5
 2264 eb30:             ;    str r5,bas_tokcounter
 2265 eb30:             
 2266 eb30: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2267 eb33: 53              incr r3
 2268 eb34: 53              incr r3
 2269 eb35: 53              incr r3
 2270 eb36: f7 02 08        ldr r7,bas_tokcounter
 2271 eb39: ff 02 12        str r7,bas_newlinelen
 2272 eb3c: 27              mvrla r7
 2273 eb3d: 4b              stavr r3
 2274 eb3e: 53              incr r3
 2275 eb3f: 2f              mvrha r7
 2276 eb40: 4b              stavr r3
 2277 eb41:             ;    halt
 2278 eb41:             
 2279 eb41:             ;
 2280 eb41:             ; void addLine(char *buff)
 2281 eb41:             ; since addline is only called from parse_tokenizeline where are these
 2282 eb41:             ; values are know, pass them in or
 2283 eb41:             ; maybe merge addLine to bottom of parse_tokenizeline
 2284 eb41:             ;
 2285 eb41:             ; r7 points to line to insert
 2286 eb41:             ; r6 linenumber
 2287 eb41:             ; r5 linelength
 2288 eb41:             ;
 2289 eb41:             parse_addline:
 2290 eb41: f7 02 10          ldr r7,BAS_NEWLINENUM
 2291 eb44: 04 eb a9          JSR parse_removeline      ; if line number already exists delete it
 2292 eb47: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2293 eb4a: 27                mvrla r7
 2294 eb4b: 0d 06             ldti 6
 2295 eb4d: aa eb 51          brneq parse_addline1
 2296 eb50: 05                ret
 2297 eb51:             
 2298 eb51:             parse_addline1:                 ;find insert location
 2299 eb51:             ;      halt
 2300 eb51: f7 02 10          ldr r7,BAS_NEWLINENUM
 2301 eb54: f3 02 0c          ldr r3,bas_tokenBuffer
 2302 eb57:             
 2303 eb57:             parse_addlineloop:
 2304 eb57: fb 02 14          str r3,bas_insertptr
 2305 eb5a: 43                ldavr r3
 2306 eb5b: 0d 01             ldti TOKENIZER_EOF
 2307 eb5d: a8 eb 80          BREQ parse_addroom
 2308 eb60: 53                incr r3                   ;get line number of line in token buffer into r6
 2309 eb61: 43                ldavr r3
 2310 eb62: 36                mvarl r6
 2311 eb63: 53                incr r3
 2312 eb64: 43                ldavr r3
 2313 eb65: 3e                mvarh r6
 2314 eb66: 04 ec 8d          jsr parse_compare
 2315 eb69: 0d ff             ldti 0ffh
 2316 eb6b: a8 eb 80          breq parse_addroom
 2317 eb6e:             
 2318 eb6e: 53                incr r3                   ;get line length
 2319 eb6f: 43                ldavr r3
 2320 eb70: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2321 eb73: 36                mvarl r6
 2322 eb74: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2323 eb75: 5e                decr r6
 2324 eb76: 5e                decr r6
 2325 eb77:             
 2326 eb77:             addline_moveptr:              ; advance pointer to next line
 2327 eb77: 53                incr r3
 2328 eb78: 5e                decr r6
 2329 eb79: 26                mvrla r6
 2330 eb7a: a2 eb 77          brnz addline_moveptr
 2331 eb7d: a0 eb 57          br parse_addlineloop
 2332 eb80:             
 2333 eb80:             
 2334 eb80:             parse_addroom:               ; make room
 2335 eb80: 1f 11 00          mviw r7,BAS_TOK_BUF_END
 2336 eb83:             ;      decr r7
 2337 eb83: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2338 eb86: 04 ec 56          jsr parse_sub16
 2339 eb89: 1d 11 00          mviw r5,BAS_TOK_BUF_END
 2340 eb8c:             ;      decr r5
 2341 eb8c:             
 2342 eb8c:             parse_roomloop:
 2343 eb8c: 5f                decr r7
 2344 eb8d: 5d                decr r5
 2345 eb8e: 47                ldavr r7
 2346 eb8f: 4d                stavr r5
 2347 eb90:             
 2348 eb90: f6 02 14          ldr r6,bas_insertptr
 2349 eb93: 04 ec 8d          jsr PARSE_COMPARE
 2350 eb96: a2 eb 8c          brnz parse_roomloop
 2351 eb99:             
 2352 eb99: f7 02 14          ldr r7,bas_insertptr
 2353 eb9c: 1e 04 00          MVIW R6,parse_token_buffer
 2354 eb9f:             ;      halt
 2355 eb9f:             
 2356 eb9f:             parse_insertloop:
 2357 eb9f: 46                ldavr r6
 2358 eba0: 4f                stavr r7
 2359 eba1: 56                incr r6
 2360 eba2: 57                incr r7
 2361 eba3: 0d 24             ldti 024h ; sub in actual eol token here
 2362 eba5: aa eb 9f          brneq parse_insertloop
 2363 eba8:             
 2364 eba8: 05                ret
 2365 eba9:             
 2366 eba9:             ;
 2367 eba9:             ; void removeLine(int lineNum)
 2368 eba9:             ;
 2369 eba9:             parse_removeline:
 2370 eba9: 04 eb d1        JSR basu_find
 2371 ebac: 2f              mvrha R7
 2372 ebad: a2 eb b5        brnz parse_removeline1
 2373 ebb0: 27              mvrla R7
 2374 ebb1: a2 eb b5        brnz parse_removeline1
 2375 ebb4: 05              ret
 2376 ebb5:             parse_removeline1:
 2377 ebb5: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2378 ebb7: 57              incr r7
 2379 ebb8: 57              incr r7
 2380 ebb9: 57              incr r7
 2381 ebba: 47              ldavr r7
 2382 ebbb: 36              mvarl r6        ; R6 = remove length
 2383 ebbc: 57              incr r7
 2384 ebbd: 47              ldavr r7
 2385 ebbe: 3e              mvarh r6
 2386 ebbf:             
 2387 ebbf: 5f              decr r7         ;backup to start of line
 2388 ebc0: 5f              decr r7
 2389 ebc1: 5f              decr r7
 2390 ebc2: 5f              decr r7
 2391 ebc3: 04 ec 48        JSR parse_add16
 2392 ebc6:             parse_removeloop:
 2393 ebc6: 47              ldavr r7
 2394 ebc7: 4d              stavr r5
 2395 ebc8: 55              incr r5
 2396 ebc9: 57              incr r7
 2397 ebca: 2f              MVRHA r7
 2398 ebcb:             
 2399 ebcb: ee 02 0e        ldt  bas_bufferendhi
 2400 ebce:             
 2401 ebce: aa eb c6        brneq parse_removeloop
 2402 ebd1:             ;
 2403 ebd1:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2404 ebd1:             ; since we are moving complete contents of buffer
 2405 ebd1:             ; Make sure it is set during addline
 2406 ebd1:             ;
 2407 ebd1:             
 2408 ebd1:             
 2409 ebd1:             ; run & parse utilites
 2410 ebd1:             ;
 2411 ebd1:             
 2412 ebd1:             ;
 2413 ebd1:             ; find in the token buffer linenum in r7
 2414 ebd1:             ;
 2415 ebd1:             basu_find:
 2416 ebd1: 07 05           pushr r5                  ; save r5
 2417 ebd3: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2418 ebd6:             
 2419 ebd6:             basu_find_loop:
 2420 ebd6: 45              ldavr r5                  ;get token
 2421 ebd7: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2422 ebd9: aa eb e3        brneq basu_find_loop1     ;no continue
 2423 ebdc: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2424 ebdf: 27              mvrla r7
 2425 ebe0: 08 50           popr r5
 2426 ebe2: 05              ret
 2427 ebe3:             
 2428 ebe3:             basu_find_loop1:
 2429 ebe3: 55              incr r5                   ;skip past linenum token
 2430 ebe4: 27              mvrla r7                  ;test low byte of linenum
 2431 ebe5: 0b              MVAT
 2432 ebe6: 45              ldavr r5
 2433 ebe7: aa eb fa        brneq basu_find1          ;not eqaul
 2434 ebea: 55              incr r5
 2435 ebeb: 2f              mvrha r7                  ;test high byte of linenum
 2436 ebec: 0b              MVAT
 2437 ebed: 45              ldavr r5
 2438 ebee: aa eb fb        brneq basu_find2          ;not equal
 2439 ebf1: 5d              decr r5                   ;if equal backup to linenum token
 2440 ebf2: 5d              decr r5
 2441 ebf3: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2442 ebf5: 0e 01           ldai 1                    ;return 1 in accumulator
 2443 ebf7: 08 50           popr r5
 2444 ebf9: 05              ret
 2445 ebfa:             
 2446 ebfa:             basu_find1:
 2447 ebfa: 55              incr r5                   ;skip over linenum high byte
 2448 ebfb:             basu_find2:
 2449 ebfb: 55              incr r5                   ;get line length
 2450 ebfc: 45              ldavr r5
 2451 ebfd: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2452 ec00: 36              mvarl r6
 2453 ec01: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2454 ec02: 5e              decr r6
 2455 ec03: 5e              decr r6
 2456 ec04:             basu_find_moveptr:            ; advance pointer to next line
 2457 ec04: 55              incr r5
 2458 ec05: 5e              decr r6
 2459 ec06: 26              mvrla r6
 2460 ec07: a2 ec 04        brnz basu_find_moveptr
 2461 ec0a: a0 eb d6        br basu_find_loop
 2462 ec0d:             
 2463 ec0d:             
 2464 ec0d:             ;
 2465 ec0d:             ; Multiple numbers in R4 and R5
 2466 ec0d:             ;
 2467 ec0d:             ; Return in R7
 2468 ec0d:             ;
 2469 ec0d:             ; R6 = Bit counter
 2470 ec0d:             ;
 2471 ec0d:             parse_mul16:
 2472 ec0d: 07 06               pushr r6
 2473 ec0f:             
 2474 ec0f: 1f 00 00            MVIW R7,0
 2475 ec12: 1e 00 10            MVIW R6,10h
 2476 ec15:             ;        jsr showregs
 2477 ec15:             
 2478 ec15:             parse_mulloop:
 2479 ec15:             ;        jsr showregs
 2480 ec15:             
 2481 ec15: 25                  mvrla r5
 2482 ec16: b3 01               andi  01h
 2483 ec18: a1 ec 1e            brz parse_mulskip
 2484 ec1b: 04 ec 3a            jsr parse_muladd16
 2485 ec1e:             
 2486 ec1e:             parse_mulskip:
 2487 ec1e:             ;
 2488 ec1e:             ; clear carry flag HACK
 2489 ec1e:             ;
 2490 ec1e: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2491 ec20: e0                  cshl
 2492 ec21: b0 00               addi 0      ; may not be needed
 2493 ec23:             ;
 2494 ec23: 24                  mvrla r4
 2495 ec24:             ;        jsr showcarry
 2496 ec24: e0                  cshl
 2497 ec25:             ;        jsr showcarry
 2498 ec25: 34                  mvarl r4
 2499 ec26: 2c                  mvrha r4
 2500 ec27:             ;        jsr showcarry
 2501 ec27: e0                  cshl
 2502 ec28:             ;        jsr showcarry
 2503 ec28: 3c                  mvarh r4
 2504 ec29:             
 2505 ec29: 0e 00               ldai 0      ;clear carry
 2506 ec2b: e0                  cshl
 2507 ec2c:             ;        addi 0
 2508 ec2c:             
 2509 ec2c: 2d                  mvrha r5
 2510 ec2d: e1                  cshr
 2511 ec2e: 3d                  mvarh r5
 2512 ec2f: 25                  mvrla r5
 2513 ec30: e1                  cshr
 2514 ec31: 35                  mvarl r5
 2515 ec32:             
 2516 ec32: 5e                  decr r6
 2517 ec33: 26                  mvrla r6
 2518 ec34: a2 ec 15            brnz parse_mulloop
 2519 ec37: 08 60               popr r6
 2520 ec39: 05                  ret
 2521 ec3a:             
 2522 ec3a:             parse_muladd16:
 2523 ec3a: 0e 00               ldai 0      ;clear carry
 2524 ec3c: e0                  cshl
 2525 ec3d:             
 2526 ec3d: 27                  MVRLA R7
 2527 ec3e: 0b                  MVAT
 2528 ec3f: 24                  mvrla r4
 2529 ec40: b8                  ADDT
 2530 ec41: 37                  mvarl r7
 2531 ec42:             
 2532 ec42: 2f                  mvrha r7
 2533 ec43: 0b                  MVAT
 2534 ec44: 2c                  mvrha r4
 2535 ec45: e3                  addtc
 2536 ec46: 3f                  mvarh r7
 2537 ec47: 05                  ret
 2538 ec48:             
 2539 ec48:             ;
 2540 ec48:             ; 16 bit add r6 and r7, return result in r7
 2541 ec48:             ;
 2542 ec48:             parse_add16:
 2543 ec48:             
 2544 ec48: 0e 00             ldai 0      ;clear carry
 2545 ec4a: e0                cshl
 2546 ec4b: 26                MVRLA R6
 2547 ec4c: 0b                MVAT
 2548 ec4d: 27                mvrla r7
 2549 ec4e: b8                ADDT
 2550 ec4f: 37                mvarl r7
 2551 ec50: 2e                mvrha r6
 2552 ec51: 0b                MVAT
 2553 ec52: 2f                mvrha r7
 2554 ec53: e3                addtc
 2555 ec54: 3f                mvarh r7
 2556 ec55: 05                ret
 2557 ec56:             
 2558 ec56:             ;
 2559 ec56:             ; 16 bit subtract of r6 from r7, return result in r7
 2560 ec56:             ;
 2561 ec56:             parse_sub16:
 2562 ec56: 2e                mvrha r6
 2563 ec57: b5                inva
 2564 ec58: 3e                mvarh r6
 2565 ec59: 26                mvrla r6
 2566 ec5a: b5                inva
 2567 ec5b: 36                mvarl r6
 2568 ec5c: 56                incr r6
 2569 ec5d: a0 ec 48          br parse_add16
 2570 ec60:             
 2571 ec60:             ;
 2572 ec60:             ; is digit in accumulator hex
 2573 ec60:             ; returns 1 if yes and 0 if no
 2574 ec60:             ;
 2575 ec60:             ; what about upper/lower case
 2576 ec60:             ;
 2577 ec60:             ; destroys tmp register
 2578 ec60:             parse_ishex:
 2579 ec60: 0d 30          ldti '0'
 2580 ec62: a7 ec 7a       brlt parse_ishex_no
 2581 ec65: 0d 39          ldti '9'
 2582 ec67: a9 ec 6d       brgt parse_ishex_af
 2583 ec6a: a0 ec 77       br parse_ishex_yes
 2584 ec6d:             
 2585 ec6d:             parse_ishex_af:
 2586 ec6d: 0d 41           ldti 'A'
 2587 ec6f: a7 ec 7a        brlt parse_ishex_no
 2588 ec72: 0d 46           ldti 'F'
 2589 ec74: a9 ec 7a        brgt parse_ishex_no
 2590 ec77:             
 2591 ec77:             parse_ishex_yes:
 2592 ec77: 0e 01           ldai 1
 2593 ec79: 05              ret
 2594 ec7a:             
 2595 ec7a:             parse_ishex_no:
 2596 ec7a: 0e 00           ldai 0
 2597 ec7c: 05              ret
 2598 ec7d:             
 2599 ec7d:             ;
 2600 ec7d:             ; is digit in accumulator decimal
 2601 ec7d:             ; returns 1 if yes and 0 if no
 2602 ec7d:             ;
 2603 ec7d:             ; destroys tmp register
 2604 ec7d:             ;
 2605 ec7d:             parse_isdigit:
 2606 ec7d: 0d 30          ldti '0'
 2607 ec7f: a7 ec 8a       brlt parse_isdigit_no
 2608 ec82: 0d 39          ldti '9'
 2609 ec84: a9 ec 8a       brgt parse_isdigit_no
 2610 ec87:             
 2611 ec87: 0e 01           ldai 1
 2612 ec89: 05              ret
 2613 ec8a:             
 2614 ec8a:             parse_isdigit_no:
 2615 ec8a: 0e 00           ldai 0
 2616 ec8c: 05              ret
 2617 ec8d:             
 2618 ec8d:             ;
 2619 ec8d:             ; 16 bit compare r6 and r7
 2620 ec8d:             ;
 2621 ec8d:             ; returns in accumulator
 2622 ec8d:             ; r7=r6 00
 2623 ec8d:             ; r7>r6 01
 2624 ec8d:             ; r7<r6 ff
 2625 ec8d:             ;
 2626 ec8d:             ; destory Tmp
 2627 ec8d:             ;
 2628 ec8d:             parse_compare:
 2629 ec8d: 2e            mvrha r6
 2630 ec8e: 0b            mvat
 2631 ec8f: 2f            mvrha r7
 2632 ec90: aa ec 9c      brneq parse_compareh
 2633 ec93: 26            mvrla r6
 2634 ec94: 0b            mvat
 2635 ec95: 27            mvrla r7
 2636 ec96: aa ec a5      brneq parse_comparel
 2637 ec99: 0e 00         ldai 0
 2638 ec9b: 05            ret
 2639 ec9c:             
 2640 ec9c:             parse_compareh:
 2641 ec9c: a7 ec a2      brlt parse_compareh1
 2642 ec9f: 0e 01         ldai 1
 2643 eca1: 05            ret
 2644 eca2:             parse_compareh1:
 2645 eca2: 0e ff         ldai 0ffh
 2646 eca4: 05            ret
 2647 eca5:             
 2648 eca5:             parse_comparel:
 2649 eca5: a7 ec ab      brlt parse_comparel1
 2650 eca8: 0e 01         ldai 1
 2651 ecaa: 05            ret
 2652 ecab:             parse_comparel1:
 2653 ecab: 0e ff         ldai 0ffh
 2654 ecad: 05            ret
 2655 ecae:             
 2656 ecae:             ;
 2657 ecae:             ; STRINGS
 2658 ecae:             ;
 2659 ecae: 0a 0d 00    CRLF: DB 0ah,0dh,0
 2660 ecb1:             ;
 2661 ecb1:             
 2662 ecb1:                   ORG 0EE00h
 2663 ee00:             
 2664 ee00:             basic_test:
 2665 ee00:             
 2666 ee00:             ;    DB  25h,0ah,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h,24h,25h,14h,00h
 2667 ee00:             ;    DB  0ah,00h,06h,04h,00h,00h,24h,25h,1eh,00h,11h,00h,04h,00h,00h,23h
 2668 ee00:             ;    DB  04h,00h,00h,17h,02h,01h,00h,24h,25h,28h,00h,13h,00h,07h,04h,00h
 2669 ee00:             ;    DB  00h,21h,02h,0ah,00h,08h,0dh,02h,14h,00h,24h,01h,00h,00h,00h,00h
 2670 ee00:             
 2671 ee00:             ;    DB  25h,0ah,00h,14h,00h,06h,1fh,02h,01h,00h,17h,02h,02h,00h,20h,17h
 2672 ee00:             ;    DB  02h,03h,00h,24h,25h,14h,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h
 2673 ee00:             ;    DB  24h,25h,1eh,00h,0dh,00h,04h,01h,00h,23h,02h,02h,00h,24h,25h,28h
 2674 ee00:             ;    DB  00h,0eh,00h,06h,04h,00h,00h,17h,04h,01h,00h,24h,25h,32h,00h,15h
 2675 ee00:             ;    DB  00h,04h,02h,00h,23h,04h,00h,00h,17h,04h,01h,00h,17h,02h,05h,00h
 2676 ee00:             ;    DB  24h,25h,3ch,00h,0ah,00h,06h,04h,02h,00h,24h,01h,00h,00h,00h,00h
 2677 ee00:             
 2678 ee00: 25 0a 00 0e 
            00 06 03 68 
            65 6c 6c 6f 
            00 24 25 14     DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 2679 ee10: 00 0d 00 04 
            02 00 23 02 
            09 00 24 25 
            1e 00 0a 00     DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 2680 ee20: 06 04 02 00 
            24 25 28 00 
            0d 00 04 04 
            00 23 02 32     DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 2681 ee30: 00 24 25 32 
            00 17 00 06 
            03 68 32 00 
            15 04 02 00     DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 2682 ee40: 15 04 04 00 
            15 02 16 00 
            24 25 3c 00 
            12 00 0a 04     DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 2683 ee50: 03 00 23 02 
            01 00 0b 02 
            05 00 24 25 
            46 00 0a 00     DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 2684 ee60: 06 04 03 00 
            24 25 50 00 
            0a 00 0c 04 
            03 00 24 25     DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 2685 ee70: 51 00 12 00 
            06 03 6e 65 
            78 74 20 64 
            6f 6e 65 00     DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 2686 ee80: 24 25 52 00 
            0a 00 0e 02 
            6e 00 24 25 
            55 00 0a 00     DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 2687 ee90: 0d 02 7d 00 
            24 25 5a 00 
            12 00 06 03 
            6e 65 78 74     DB  0dh,02h,7dh,00h,24h,25h,5ah,0h,12h,00h,06h,03h,6eh,65h,78h,74h
 2688 eea0: 20 64 6f 6e 
            65 00 24 25 
            6e 00 11 00 
            06 03 69 6e     DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 2689 eeb0: 20 67 6f 73 
            75 62 00 24 
            25 70 00 11 
            00 06 03 69     DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 2690 eec0: 6e 20 73 75 
            62 20 32 00 
            24 25 72 00 
            07 00 0f 24     DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 2691 eed0: 25 7d 00 0c 
            00 06 03 65 
            6e 64 00 24 
            25 7e 00 07     DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 2692 eee0: 00 14 24 01 
            00 00 00 00 
            00 00 00 00 
            00 00 00 00     DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 2693 eef0:             
 2694 eef0:             ;
 2695 eef0:             ; The End
 2696 eef0:             ;
 2697 eef0:             ZZZZ:
 2698 eef0: 00            DB   0

eb77h: ADDLINE_MOVEPTR  - <  2326>   2330 
e547h: BASIC_LIST       - <  1254>    143 
e460h: BASIC_RUN        - <  1046>    150 
ee00h: BASIC_TEST       - <  2664>    188 
0100h: BASIC_VARS       - <    62>   1105   1128 
e560h: BASLIST1         - <  1270>   1263 
e600h: BASLIST10        - <  1371>   1365 
e60fh: BASLIST11        - <  1379>   1373 
e61eh: BASLIST12        - <  1387>   1381 
e62dh: BASLIST13        - <  1395>   1389 
e63ch: BASLIST14        - <  1403>   1397 
e64bh: BASLIST15        - <  1411>   1405 
e65ah: BASLIST16        - <  1419>   1413 
e669h: BASLIST17        - <  1427>   1421 
e678h: BASLIST18        - <  1435>   1429 
e687h: BASLIST19        - <  1443>   1437 
e56bh: BASLIST2         - <  1276>   1272 
e696h: BASLIST20        - <  1451>   1445 
e6a5h: BASLIST21        - <  1459>   1453 
e6b8h: BASLIST22        - <  1469>   1461 
e6cbh: BASLIST23        - <  1479>   1471 
e6deh: BASLIST24        - <  1489>   1481 
e6f1h: BASLIST25        - <  1499>   1491 
e704h: BASLIST26        - <  1509>   1501 
e717h: BASLIST27        - <  1519>   1511 
e72ah: BASLIST28        - <  1529>   1521 
e73dh: BASLIST29        - <  1539>   1531 
e582h: BASLIST3         - <  1291>   1278 
e750h: BASLIST30        - <  1549>   1541 
e763h: BASLIST31        - <  1559>   1551 
e776h: BASLIST32        - <  1569>   1561 
e789h: BASLIST33        - <  1579>   1571 
e79ch: BASLIST34        - <  1589>   1581 
e7afh: BASLIST35        - <  1599>   1591 
e7c2h: BASLIST36        - <  1609>   1601 
e7d1h: BASLIST37        - <  1617>   1611 
e7eah: BASLIST38        - <  1634>   1619 
e59eh: BASLIST4         - <  1308>   1293 
e5b5h: BASLIST5         - <  1331>   1310 
e5c4h: BASLIST6         - <  1339>   1333 
e5d3h: BASLIST7         - <  1347>   1341 
e5e2h: BASLIST8         - <  1355>   1349 
e5f1h: BASLIST9         - <  1363>   1357 
e7f6h: BASLIST_DONE     - <  1642>   1267   1273   1638 
e54bh: BASLIST_LOOP     - <  1259>   1268   1274   1289   1306   1329   1337 
         1345   1353   1361   1369   1377   1385   1393   1401   1409   1417 
         1425   1433   1441   1449   1457   1467   1477   1487   1497   1507 
         1517   1527   1537   1547   1557   1567   1577   1587   1597   1607 
         1615   1632 
e592h: BASLIST_STRING   - <  1299>   1303 
e59ah: BASLIST_STRINGEND - <  1304>   1301 
ebd1h: BASU_FIND        - <  2415>    172    557   2370 
ebfah: BASU_FIND1       - <  2446>   2433 
ebfbh: BASU_FIND2       - <  2448>   2438 
ebd6h: BASU_FIND_LOOP   - <  2419>   2461 
ebe3h: BASU_FIND_LOOP1  - <  2428>   2422 
ec04h: BASU_FIND_MOVEPTR - <  2456>   2460 
020eh: BAS_BUFFERENDHI  - <    74>    163   2399 
e069h: BAS_COPYLOOP     - <   190>    197    199 
020ah: BAS_CURRENTTOKEN - <    72>   1899   1908   1936   2117 
e49dh: BAS_ERROR        - <  1142>    274   1024 
0282h: BAS_FORSTACK     - <    94>    243 
0280h: BAS_FORSTACKPTR  - <    93> 
02c0h: BAS_GOSUBPTR     - <   103> 
02c2h: BAS_GOSUBSTACK   - <   104>    241 
0214h: BAS_INSERTPTR    - <    81>   2304   2348   2352 
e077h: BAS_MSG1         - <   214>    273 
e093h: BAS_MSG2         - <   215> 
e0a4h: BAS_MSG3         - <   216>   1021 
0212h: BAS_NEWLINELEN   - <    80>   2271   2292   2337 
0210h: BAS_NEWLINENUM   - <    79>   2173   2290   2300 
0204h: BAS_NXTPTR       - <    69>   1782   1794   1810   1845   1863   1922 
         1963 
0200h: BAS_RUN_ENDED    - <    67>    245    575    925   1080 
0208h: BAS_TOKCOUNTER   - <    71>   1897   2164   2194   2196   2207   2210 
         2226   2228   2235   2237   2252   2255   2270 
020ch: BAS_TOKENBUFFER  - <    73>    142    161    252   2301   2417 
0206h: BAS_TOKPTR       - <    70>   1895   2238 
1100h: BAS_TOK_BUF_END  - <   122>    162   2335   2339 
1000h: BAS_TOK_BUF_START - <   117>    160    187 
0202h: BAS_TXTPTR       - <    68>   1678   1767   1824   1893   1923   1934 
         1984   2030   2091   2108   2133   2216   2239 
ffc4h: CHAROUT          - <     5>    618 
ecaeh: CRLF             - <  2659>    652   1612 
e0cah: EXE              - <   230> 
e0dah: EXE_ACCEPT       - <   261>    298    315    321    324    574    588 
          597    662    668    696    698    703    711    714    716    743 
          780    790    832    847    865    867    878    893   1007   1039 
e0efh: EXE_ACCEPT_DONE  - <   276>    269 
e3cah: EXE_END_STMT     - <   924>   1000 
e171h: EXE_EXPR         - <   398>    322    480    496    513    530    589 
          639    699    868    879 
e1b6h: EXE_EXPR_AND     - <   442>    412 
e1d3h: EXE_EXPR_DONE    - <   463>    416 
e17ah: EXE_EXPR_LOOP    - <   405>    428    440    452    461 
e1a4h: EXE_EXPR_MINUS   - <   430>    410 
e1c8h: EXE_EXPR_OR      - <   454>    414 
e192h: EXE_EXPR_PLUS    - <   418>    408 
e0ffh: EXE_FACTOR       - <   305>    341    356    370    379 
e10dh: EXE_FACTOR1      - <   318>    312 
e11eh: EXE_FACTOR2      - <   327>    320 
e472h: EXE_FINISHED     - <  1079>   1067 
e484h: EXE_FINISHED_YES - <  1091>   1083   1087 
e38eh: EXE_FOR_STMT     - <   838>    976 
e492h: EXE_GET_VARIABLE - <  1127>    296    795 
e32ah: EXE_GOSUB_STMT   - <   709>    964 
e273h: EXE_GOTO_STMT    - <   586>   1014 
e2e1h: EXE_IF_STMT      - <   660>    952 
e2fah: EXE_IF_STMT1     - <   676>    672    682 
e309h: EXE_IF_STMT2     - <   685>    680 
e255h: EXE_INDEX_FIND   - <   556>    565 
e0cah: EXE_INIT         - <   240>   1059 
e259h: EXE_JUMP_LINE    - <   564>    590    735 
e270h: EXE_JUMP_LINE1   - <   579>    567    569 
e30dh: EXE_LET_STMT     - <   691>    958   1008 
e457h: EXE_LINE_STMT    - <  1029>   1073 
e382h: EXE_NEXT_DONE    - <   823>    813 
e354h: EXE_NEXT_STMT    - <   766>    994 
e4cbh: EXE_NEXT_TOK3_DONE - <  1189>   1185 
e4c3h: EXE_NEXT_TOK3_LOOP - <  1183>   1187 
e49fh: EXE_NEXT_TOKEN   - <  1151>    277    355    369    378    419    431 
          443    455    495    512    529    610    619    625    654    677 
          686 
e4a9h: EXE_NEXT_TOKEN1  - <  1160>   1154 
e4b2h: EXE_NEXT_TOKEN2  - <  1168>   1162 
e4bdh: EXE_NEXT_TOKEN3  - <  1178>   1170 
e4cdh: EXE_NEXT_TOKEN4  - <  1193>   1180 
e4cfh: EXE_NUM          - <  1200>    313    712 
e3c8h: EXE_PEEK_STMT    - <   912>    982 
e3c9h: EXE_POKE_STMT    - <   918>    988 
e27fh: EXE_PRINT_STMT   - <   595>    946 
e296h: EXE_PRINT_STMT1  - <   613>    602 
e2a6h: EXE_PRINT_STMT2  - <   622>    616 
e2b1h: EXE_PRINT_STMT3  - <   628>    624 
e2c3h: EXE_PRINT_STMT4  - <   638>    630    632    634 
e2d7h: EXE_PRINT_STMT_DONE - <   651>    636    646    648 
e284h: EXE_PRINT_STMT_LOOP - <   599>    649 
e2c9h: EXE_PRINT_STMT_TEST - <   643>    611    620    626 
e1dah: EXE_RELATION     - <   476>    664 
e24eh: EXE_RELATION_DONE - <   544>    492 
e232h: EXE_RELATION_EQ  - <   528>    490 
e214h: EXE_RELATION_GT  - <   511>    488 
e1e3h: EXE_RELATION_LOOP - <   483>    506    509    523    526    539    542 
e1f6h: EXE_RELATION_LT  - <   494>    486 
e248h: EXE_REL_NE       - <   540>    537 
e22ch: EXE_REL_NGT      - <   524>    521 
e20eh: EXE_REL_NLT      - <   507>    504 
e346h: EXE_RETURN_STMT  - <   741>    970 
e463h: EXE_RUN          - <  1066>   1074 
e46ch: EXE_RUN_CONT     - <  1072>   1069 
e487h: EXE_SET_VARIABLE - <  1104>    701    798    873 
e3d1h: EXE_STMT         - <   932>    673   1040 
e3dbh: EXE_STMT1        - <   949>    945 
e42ch: EXE_STMT10       - <  1003>    999 
e43ah: EXE_STMT11       - <  1011>   1005 
e443h: EXE_STMT12       - <  1017>   1013 
e3e4h: EXE_STMT2        - <   955>    951 
e3edh: EXE_STMT3        - <   961>    957 
e3f6h: EXE_STMT4        - <   967>    963 
e3ffh: EXE_STMT5        - <   973>    969 
e408h: EXE_STMT6        - <   979>    975 
e411h: EXE_STMT7        - <   985>    981 
e41ah: EXE_STMT8        - <   991>    987 
e423h: EXE_STMT9        - <   997>    993 
e0c0h: EXE_STMT_MSG     - <   217> 
e4dch: EXE_STRING       - <  1221>    607 
e122h: EXE_TERM         - <   337>    402    420    432    444    456 
e13eh: EXE_TERM_ASTR    - <   354>    347 
e16ah: EXE_TERM_DONE    - <   386>    352 
e12bh: EXE_TERM_LOOP    - <   344>    366    375    384 
e15fh: EXE_TERM_MOD     - <   377>    351 
e154h: EXE_TERM_SLASH   - <   368>    349 
e0f3h: EXE_VARFACTOR    - <   289>    328 
e4d8h: EXE_VARIABLE_NUM - <  1215>    292    692    784    851 
e93eh: FOUND            - <  1844>   1827 
e948h: NOKEYOWRDSFOUND  - <  1852>   1823 
e868h: PARSECHAR1       - <  1686>   1683 
e8b0h: PARSECHAR10      - <  1731>   1728 
e8b8h: PARSECHAR11      - <  1736>   1733 
e8c0h: PARSECHAR12      - <  1741>   1738 
e8c8h: PARSECHAR13      - <  1746>   1743 
e8d0h: PARSECHAR14      - <  1751>   1748 
e8d8h: PARSECHAR15      - <  1756>   1753 
e870h: PARSECHAR2       - <  1691>   1688 
e878h: PARSECHAR3       - <  1696>   1693 
e880h: PARSECHAR4       - <  1701>   1698 
e888h: PARSECHAR5       - <  1706>   1703 
e890h: PARSECHAR6       - <  1711>   1708 
e898h: PARSECHAR7       - <  1716>   1713 
e8a0h: PARSECHAR8       - <  1721>   1718 
e8a8h: PARSECHAR9       - <  1726>   1723 
ec48h: PARSE_ADD16      - <  2542>    426   2002   2391   2569 
eb41h: PARSE_ADDLINE    - <  2289> 
eb51h: PARSE_ADDLINE1   - <  2298>   2295 
eb57h: PARSE_ADDLINELOOP - <  2303>   2331 
eb80h: PARSE_ADDROOM    - <  2334>   2307   2316 
ea50h: PARSE_AF         - <  2073>   2070 
ec8dh: PARSE_COMPARE    - <  2628>    502    519    536   2314   2349 
ec9ch: PARSE_COMPAREH   - <  2640>   2632 
eca2h: PARSE_COMPAREH1  - <  2644>   2641 
eca5h: PARSE_COMPAREL   - <  2648>   2636 
ecabh: PARSE_COMPAREL1  - <  2652>   2649   2649 
ea67h: PARSE_ERROR_PRINT - <  2100> 
ea68h: PARSE_FINISHED   - <  2106>   1916   1948 
ea83h: PARSE_FINISHED_YES - <  2123>   2110   2116   2119 
ea46h: PARSE_GETNIBBLE  - <  2066>   2031   2038   2045   2052 
e8dbh: PARSE_GET_NEXT_TOK - <  1765>   1898   1935 
e8e0h: PARSE_GNT1       - <  1773> 
e8e7h: PARSE_GNT1LOOP   - <  1777>   1781 
e8f7h: PARSE_GNT2       - <  1789>   1776 
e905h: PARSE_GNT3       - <  1800>   1792 
e90bh: PARSE_GNT3LOOP   - <  1804>   1808 
e91bh: PARSE_GNT4       - <  1815>   1803 
e95eh: PARSE_GNT_ERROR  - <  1868>   1859   1861 
e964h: PARSE_INIT       - <  1890>   2161 
0300h: PARSE_INPUT_LINE - <   109> 
eb9fh: PARSE_INSERTLOOP - <  2356>   2362 
ec7dh: PARSE_ISDIGIT    - <  2605>   1775   1780   2018 
ec8ah: PARSE_ISDIGIT_NO - <  2614>   2607   2609 
ec60h: PARSE_ISHEX      - <  2578> 
ec6dh: PARSE_ISHEX_AF   - <  2585>   2582 
ec7ah: PARSE_ISHEX_NO   - <  2595>   2580   2587   2589 
ec77h: PARSE_ISHEX_YES  - <  2591>   2583 
e7f9h: PARSE_KEYWORDS   - <  1649>   1820 
ea97h: PARSE_LINE       - <  2159>    182 
eae2h: PARSE_LINE1      - <  2213>   2199 
eafeh: PARSE_LINE1DONE  - <  2230>   2222 
eaebh: PARSE_LINE1LOOP  - <  2219>   2229 
eb13h: PARSE_LINE2      - <  2242>   2215 
eb2ch: PARSE_LINE_DONE  - <  2258>   2189 
eab5h: PARSE_LINE_LOOP  - <  2185>   2211   2240   2244   2256 
ec0dh: PARSE_MUL16      - <  2471>    363   1997 
ec3ah: PARSE_MULADD16   - <  2522>   2484 
ec15h: PARSE_MULLOOP    - <  2478>   2518 
ec1eh: PARSE_MULSKIP    - <  2486>   2483 
e983h: PARSE_NEXT       - <  1914>   1964   2186 
e98ah: PARSE_NEXT1      - <  1920>   1917 
e992h: PARSE_NEXT1LOOP  - <  1925>   1930 
e99ch: PARSE_NEXT2      - <  1933>   1928 
e9adh: PARSE_NEXT3      - <  1947>   1939   1954 
e9bdh: PARSE_NEXTDONE   - <  1956>   1949   1952 
e9c4h: PARSE_NEXTDONE2  - <  1962>   1959 
e9cdh: PARSE_NUM        - <  1978>   2171   2200 
ea09h: PARSE_NUM_CHAR   - <  2016>   1985   1989 
ea13h: PARSE_NUM_CHAR1  - <  2022>   2019 
e9fdh: PARSE_NUM_DONE   - <  2006>   1993 
e9dfh: PARSE_NUM_LOOP   - <  1988>   2005 
ea18h: PARSE_NUM_OLD    - <  2028> 
ea97h: PARSE_POS        - <  2146> 
eba9h: PARSE_REMOVELINE - <  2369>    175   2291 
ebb5h: PARSE_REMOVELINE1 - <  2376>   2372   2374 
ebc6h: PARSE_REMOVELOOP - <  2392>   2401 
eb8ch: PARSE_ROOMLOOP   - <  2342>   2350 
e858h: PARSE_SINGLECHAR - <  1675>   1791 
ea58h: PARSE_STRING     - <  2083> 
ea61h: PARSE_STRING1    - <  2089>   2086 
ec56h: PARSE_SUB16      - <  2561>    438    450   2338 
e97fh: PARSE_TOKEN      - <  1907>   2084   2187 
0400h: PARSE_TOKEN_BUFFER - <   113>   1894   2165   2266   2353 
ea88h: PARSE_VARIABLE_NUM - <  2131>   2245 
e927h: PCMPLOOP         - <  1825>   1833 
ffcch: SHOWADDR         - <     7>   1266   1637 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    270   1018 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9>    170    173    640   1286   1629 
ffdch: SHOWREGS         - <    11>   1023 
e935h: SKIPLOOP         - <  1837>   1840 
e935h: SKIPTOEND        - <  1835>   1830 
ffc0h: STRINGOUT        - <     4>    609    653   1022   1265   1296   1335 
         1343   1351   1359   1367   1375   1383   1391   1399   1407   1415 
         1423   1431   1439   1447   1455   1613   1636 
0019h: TOKENIZER_AND    - <    43>    411   1500   1709 
001bh: TOKENIZER_ASTR   - <    45>    346   1520   1719 
0010h: TOKENIZER_CALL   - <    34>   1420   1661 
0015h: TOKENIZER_COMMA  - <    39>    615   1460   1689 
0024h: TOKENIZER_CR     - <    54>    573    645    679    702    715    831 
          892   1610   1684   2188   2259 
0009h: TOKENIZER_ELSE   - <    27>   1364   1654 
0014h: TOKENIZER_END    - <    38>    998   1452   1665 
0001h: TOKENIZER_EOF    - <    19>    647    681   1086   1271   2115   2118 
         2306   2421 
0023h: TOKENIZER_EQ     - <    53>    489    697    866   1600   1754 
0000h: TOKENIZER_ERROR  - <    18>   1262   1666   1870 
000ah: TOKENIZER_FOR    - <    28>    846    974   1372   1655 
000eh: TOKENIZER_GOSUB  - <    32>    710    962   1404   1659 
000dh: TOKENIZER_GOTO   - <    31>    587   1012   1396   1658 
0022h: TOKENIZER_GT     - <    52>    487   1590   1749 
001eh: TOKENIZER_HASH   - <    48>   1550   1734 
0007h: TOKENIZER_IF     - <    25>    661    950   1348   1652 
001fh: TOKENIZER_LEFTP  - <    49>    319    633   1560   1729 
0005h: TOKENIZER_LET    - <    23>   1004   1006   1332   1650 
0025h: TOKENIZER_LINENUM - <    55>   1038   1169   1618   2167 
0021h: TOKENIZER_LT     - <    51>    485   1580   1744 
0018h: TOKENIZER_MINUS  - <    42>    409   1490   1704 
001dh: TOKENIZER_MOD    - <    47>    350   1540   1724 
000ch: TOKENIZER_NEXT   - <    30>    779    992   1388   1657 
0002h: TOKENIZER_NUMBER - <    20>    311    631    713   1153   1277   1783 
         2198 
001ah: TOKENIZER_OR     - <    44>    413   1510   1714 
0012h: TOKENIZER_PEEK   - <    36>    980   1436   1663 
0017h: TOKENIZER_PLUS   - <    41>    407   1480   1699 
0013h: TOKENIZER_POKE   - <    37>    986   1444   1664 
0006h: TOKENIZER_PRINT  - <    24>    596    944   1340   1651 
0011h: TOKENIZER_REM    - <    35>   1428   1662   1938 
000fh: TOKENIZER_RETURN - <    33>    742    968   1412   1660 
0020h: TOKENIZER_RIGHTP - <    50>    323   1570   1739 
0016h: TOKENIZER_SEMICOLON - <    40>    623   1470   1694 
001ch: TOKENIZER_SLASH  - <    46>    348   1530 
0003h: TOKENIZER_STRING - <    21>    601   1179   1292   1811   2085   2214 
0008h: TOKENIZER_THEN   - <    26>    667   1356   1653 
000bh: TOKENIZER_TO     - <    29>    877   1380   1656 
0004h: TOKENIZER_VARIABLE - <    22>    297    629    695    789    864    956 
         1161   1309   1864   2243 
e536h: TOKL_CALL        - <  1250>   1422 
e4f6h: TOKL_ELSE        - <  1239>   1366 
e531h: TOKL_END         - <  1249>   1454 
e53ch: TOKL_ERROR       - <  1251>   1264   1635 
e4fch: TOKL_FOR         - <  1240>   1374 
e511h: TOKL_GOSUB       - <  1244>   1406 
e50bh: TOKL_GOTO        - <  1243>   1398 
e4ech: TOKL_IF          - <  1237>   1350 
e4e0h: TOKL_LET         - <  1235>   1334 
e505h: TOKL_NEXT        - <  1242>   1390 
e525h: TOKL_PEEK        - <  1247>   1438 
e52bh: TOKL_POKE        - <  1248>   1446 
e4e5h: TOKL_PRINT       - <  1236>   1342 
e520h: TOKL_REM         - <  1246>   1430 
e518h: TOKL_RETURN      - <  1245>   1414 
e4f0h: TOKL_THEN        - <  1238>   1358 
e501h: TOKL_TO          - <  1241>   1382 
e920h: TOP              - <  1821>   1842 
ffd0h: TOUPPER          - <     8>   2074 
ffc8h: UARTOUT          - <     6>    272   1020   1288   1298   1317   1328 
         1463   1465   1473   1475   1483   1485   1493   1495   1503   1505 
         1513   1515   1523   1525   1533   1535   1543   1545   1553   1555 
         1563   1565   1573   1575   1583   1585   1593   1595   1603   1605 
         1631 
eef0h: ZZZZ             - <  2697> 

2698 Lines assembled
0 Errors
317 Labels
Object Code:3441 bytes

