RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
92 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             uartin:     equ 0ffe8h
   15 0000:             charavail:  equ 0ffech
   16 0000:             
   17 0000:             ;
   18 0000:             ; Basic interpreter tokens
   19 0000:             ;
   20 0000:             TOKENIZER_ERROR: EQU 00
   21 0000:             TOKENIZER_EOF: EQU 01
   22 0000:             TOKENIZER_NUMBER: EQU 02
   23 0000:             TOKENIZER_STRING: EQU 03
   24 0000:             TOKENIZER_VARIABLE: EQU 04
   25 0000:             TOKENIZER_LET: EQU 05
   26 0000:             TOKENIZER_PRINT: EQU 06
   27 0000:             TOKENIZER_IF: EQU 07
   28 0000:             TOKENIZER_THEN: EQU 08
   29 0000:             TOKENIZER_ELSE: EQU 09
   30 0000:             TOKENIZER_FOR: EQU 10
   31 0000:             TOKENIZER_TO: EQU 11
   32 0000:             TOKENIZER_NEXT: EQU 12
   33 0000:             TOKENIZER_GOTO: EQU 13
   34 0000:             TOKENIZER_GOSUB: EQU 14
   35 0000:             TOKENIZER_RETURN: EQU 15
   36 0000:             TOKENIZER_CALL: EQU 16
   37 0000:             TOKENIZER_REM: EQU 17
   38 0000:             TOKENIZER_PEEK: EQU 18
   39 0000:             TOKENIZER_POKE: EQU 19
   40 0000:             TOKENIZER_END: EQU 20
   41 0000:             TOKENIZER_COMMA: EQU 21
   42 0000:             TOKENIZER_SEMICOLON: EQU 22
   43 0000:             TOKENIZER_PLUS: EQU 23
   44 0000:             TOKENIZER_MINUS: EQU 24
   45 0000:             TOKENIZER_AND: EQU 25
   46 0000:             TOKENIZER_OR: EQU 26
   47 0000:             TOKENIZER_ASTR: EQU 27
   48 0000:             TOKENIZER_SLASH: EQU 28
   49 0000:             TOKENIZER_MOD: EQU 29
   50 0000:             TOKENIZER_HASH: EQU 30
   51 0000:             TOKENIZER_LEFTP: EQU 31
   52 0000:             TOKENIZER_RIGHTP: EQU 32
   53 0000:             TOKENIZER_LT: EQU 33
   54 0000:             TOKENIZER_GT: EQU 34
   55 0000:             TOKENIZER_EQ: EQU 35
   56 0000:             TOKENIZER_CR: EQU 36
   57 0000:             TOKENIZER_LINENUM: EQU 37
   58 0000:             TOKENIZER_LIST: EQU 38
   59 0000:             TOKENIZER_RUN: EQU 39
   60 0000:             TOKENIZER_NEW: EQU 40
   61 0000:             TOKENIZER_EXIT: EQU 41
   62 0000:             TOKENIZER_INPUT: EQU 42
   63 0000:             TOKENIZER_INP: EQU 43
   64 0000:             TOKENIZER_OUTP: EQU 44
   65 0000:             TOKENIZER_ON: EQU 45
   66 0000:             TOKENIZER_OFF: EQU 46
   67 0000:             
   68 0000:             
   69 0000:             ;
   70 0000:             ; BASIC interpreter user variables area
   71 0000:             ; currently 26 1-byte variables
   72 0000:             ; for now must be 0xAA00 (256 byte) aligned
   73 0000:             ;
   74 0000:             BASIC_VARS: EQU 0100h
   75 0000:             
   76 0000:             ;
   77 0000:             ; Basic interpreter internal variables
   78 0000:             ;
   79 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   80 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   81 0000:             bas_nxtptr:       EQU 0204h ;
   82 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   83 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   84 0000:             bas_currenttoken: EQU 020Ah ; used in parsing
   85 0000:             bas_tokenbuffer:  EQU 020Ch ; Pointer to start of token buffer
   86 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   87 0000:                                         ; this value should be + 1 end of buffer
   88 0000:                                         ; if buffer is 0x1000-0x1fff this is
   89 0000:                                         ; set to 0x2000. Used in moving buffer around
   90 0000:                                         ; in add and remove line
   91 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   92 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   93 0000:             bas_insertptr:    EQU 0214H
   94 0000:             bas_negflag:      EQU 0216H ; PROCESS NEGATIVE NUMBER
   95 0000:             
   96 0000:             ;
   97 0000:             ; FOR-NEXT statement stack ptr and stack data
   98 0000:             ;
   99 0000:             ; for next stack data
  100 0000:             ; format
  101 0000:             ;   2 bytes for variable id (only first byte used for now)
  102 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
  103 0000:             ;   2 bytes ptr to line after for instruction (format HL)
  104 0000:             ; later add step amount
  105 0000:             ;
  106 0000:             bas_forstackptr: EQU 0280h
  107 0000:             bas_forstack: EQU 0282h
  108 0000:             
  109 0000:             ;
  110 0000:             ; GOSUB stack ptr and data
  111 0000:             ;
  112 0000:             ; gosub STACK
  113 0000:             ; format
  114 0000:             ;   2 bytes return location ptr
  115 0000:             ;
  116 0000:             bas_gosubptr: EQU 02c0h
  117 0000:             bas_gosubstack: EQU 02c2h
  118 0000:             
  119 0000:             ;
  120 0000:             ; Basic interpreter text input line buffer
  121 0000:             ;
  122 0000:             parse_input_line: EQU 300h
  123 0000:             ;
  124 0000:             ; Basic interpreter tmp buffer to build up current token line
  125 0000:             ;
  126 0000:             parse_token_buffer: EQU 400h
  127 0000:             ;
  128 0000:             ; Basic interpreter token buffer
  129 0000:             ;
  130 0000:             bas_tok_buf_start: EQU 1000h
  131 0000:             ;
  132 0000:             ; Basic interpreter token buffer end + 1
  133 0000:             ;
  134 0000:             bas_tok_buf_end: EQU 2000h
  135 0000:             ; OR
  136 0000:             ;bas_tok_buf_end: EQU 1100h ;smaller for easy debugging - 256 byte buffer
  137 0000:             
  138 0000:             ;
  139 0000:             ; basic interpreter, add IO and peek/poke
  140 0000:             ;
  141 0000:             
  142 0000:             ;
  143 0000:             ; Basic Interpreter
  144 0000:             ;
  145 0000:             
  146 0000:             ;
  147 0000:             ; BASIC Entry Points
  148 0000:             ;
  149 0000:               ORG 0e000h
  150 e000:             ;
  151 e000:             ; list
  152 e000:             ;
  153 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  154 e003: 04 e6 fd          JSR  basic_list
  155 e006: 05                Ret
  156 e007:             
  157 e007:             ;
  158 e007:                   ORG 0e010h
  159 e010:             ;
  160 e010:             ; run
  161 e010:             ;
  162 e010: 04 e5 8f          jsr basic_run
  163 e013: 05                Ret
  164 e014:             
  165 e014:             ;
  166 e014:                   ORG 0e020h
  167 e020:             ;
  168 e020:             ; cold start
  169 e020:             ;
  170 e020:             ; Hack later pass in R7
  171 e020:             ;
  172 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  173 e023: 0e 01             ldai TOKENIZER_EOF          ;write EOF to start of buffer
  174 e025: 4f                stavr r7
  175 e026: ef 02 0c          STR R7,bas_tokenbuffer
  176 e029: 1f 20 00          mviw r7,bas_tok_buf_end
  177 e02c: ef 02 0e          str r7,bas_bufferendhi
  178 e02f: 05                Ret
  179 e030:             
  180 e030:             ;
  181 e030:                   ORG 0e030h
  182 e030:             ;
  183 e030:             ; tests - called from monitor - used to test snippets of code
  184 e030:             ;
  185 e030: 04 e0 77          jsr bigtest
  186 e033: 05                ret
  187 e034:             ;
  188 e034:                   org 0e040h
  189 e040:             ;
  190 e040:             ; very basic cmd line driver
  191 e040:             ;
  192 e040: 04 ef 7a          jsr basic_interprter
  193 e043: 05                ret
  194 e044:             ;
  195 e044:                   org 0e050h
  196 e050:             ;
  197 e050:             ; parse line
  198 e050:             ;
  199 e050: 04 ec a4          jsr parse_line
  200 e053: 05                ret
  201 e054:             
  202 e054:             ;
  203 e054:                   ORG 0e060h
  204 e060:             ;
  205 e060:             ; Copy test program into token Buffer, copies 0x0400 bytes
  206 e060:             ;
  207 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  208 e063: 1e ef 00          mviw R6,BASIC_TEST
  209 e066: 1d 04 00          mviw R5,0400h
  210 e069:             ;
  211 e069:             bas_copyloop:
  212 e069: 46                ldavr R6
  213 e06a: 4f                stavr r7
  214 e06b: 56                incr r6
  215 e06c: 57                incr r7
  216 e06d: 5d                decr r5
  217 e06e: 2d                mvrha r5
  218 e06f: a2 e0 69          brnz bas_copyloop
  219 e072: 25                mvrla r5
  220 e073: a2 e0 69          brnz bas_copyloop
  221 e076: 05                ret
  222 e077:             
  223 e077:             bigtest:
  224 e077: 1d 00 69        mviw r5,0105
  225 e07a: 1c 00 0a        mviw r4,0010
  226 e07d: 04 ee 78        jsr parse_div16
  227 e080: 04 ff dc        jsr showregs
  228 e083: 1f ef b6        mviw r7,CRLF
  229 e086: 04 ff c0        jsr stringout
  230 e089:             
  231 e089: 1d 00 69        mviw r5,0105
  232 e08c: 1c 00 0a        mviw r4,0010
  233 e08f: 04 ee 99        jsr parse_mod16
  234 e092: 04 ff dc        jsr showregs
  235 e095: 1f ef b6        mviw r7,CRLF
  236 e098: 04 ff c0        jsr stringout
  237 e09b:             
  238 e09b: 1f 12 34        mviw r7,01234h
  239 e09e: 04 e6 17        jsr exe_itoa
  240 e0a1: 1f ef b6        mviw r7,CRLF
  241 e0a4: 04 ff c0        jsr stringout
  242 e0a7:             
  243 e0a7:             
  244 e0a7: 05              ret
  245 e0a8:             
  246 e0a8:             ;
  247 e0a8:             ; basic interpreter messages
  248 e0a8:             ;
  249 e0a8: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "accept - unexpected token",0,0ah,0dh
  250 e0c4: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  251 e0d5: 54 4f 4b 45 
            4e 20 4e 4f 
            54 20 53 55 
            50 50 4f 52 
            54 45 44 20 
            0a 0d       bas_msg3: db "token not supported ",0ah,0dh
  252 e0eb: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  253 e0f5: 55 4e 4b 4e 
            4f 57 4e 20 
            43 4f 4d 4d 
            41 4e 44 00 
            0a 0d       parse_cmd_error: db "UNKNOWN COMMAND",0,0ah,0DH
  254 e107:             
  255 e107:             ;
  256 e107:             ; Basic interpreter - execution engine
  257 e107:             ; Register Usage
  258 e107:             ; R0 - Program Counter
  259 e107:             ; R1 - Stack Pointer
  260 e107:             ; R2 - Direct addressing mode
  261 e107:             ; R3 - Basic Interpreter Token Buffer ptr
  262 e107:             ; R4 - working register  ; or is this for-next stack ptr
  263 e107:             ; R5 - working register  ; or is this gosub stack ptr
  264 e107:             ; R6 - Working register
  265 e107:             ; R7 - parameter passing & return value
  266 e107:             ;
  267 e107:             ;exe: Is this label needed
  268 e107:             ;
  269 e107:             ; void ubasic_init()
  270 e107:             ;
  271 e107:             ; Setup basic interpreter execution engine
  272 e107:             ;
  273 e107:             exe_init:
  274 e107: 09              push
  275 e108: 1d 02 c2        MVIW R5,bas_gosubstack
  276 e10b: 1c 02 82        MVIW R4,bas_forstack
  277 e10e: 1e 02 00        MVIW R6,bas_run_ended
  278 e111: 0e 00           LDAI 0
  279 e113: 4e              STAVR R6
  280 e114: f3 02 0c        LDR R3,bas_tokenbuffer
  281 e117: 0a              pop
  282 e118: 05              RET
  283 e119:             
  284 e119:             ;
  285 e119:             ; void accept(int)
  286 e119:             ;
  287 e119:             ; compare accumulator with current token then advance to next token in buffer
  288 e119:             ; assume accumulator destroyed
  289 e119:             ;
  290 e119:             exe_accept:
  291 e119: 09              push
  292 e11a:             ;
  293 e11a:             ; get current token into accumulator
  294 e11a:             ;
  295 e11a:             ; FIX: Switch to BRNEQ to error state and save a branch
  296 e11a:             ;
  297 e11a: 43              LDAVR R3
  298 e11b: 0b              MVAT
  299 e11c: 0a              POP
  300 e11d: a8 e1 2e        BREQ exe_accept_done
  301 e120:             ;
  302 e120:             ; debug information
  303 e120:             ;
  304 e120: 04 ff e0        JSR showbytea
  305 e123: 0e 23           ldai '#'
  306 e125: 04 ff c8        JSR uartout
  307 e128: 1f e0 a8        mviw R7,bas_msg1
  308 e12b: 04 e5 ce        JSR bas_error
  309 e12e:             ;
  310 e12e:             exe_accept_done:
  311 e12e: 04 e5 d0        jsr exe_next_token
  312 e131: 05              RET
  313 e132:             
  314 e132:             ;
  315 e132:             ; int varfactor()
  316 e132:             ;
  317 e132:             ; get variable id pointed to by exe_variable_num in token stream
  318 e132:             ; (this is not a value but a variable id)
  319 e132:             ; value returned by exe_get_variable in r7
  320 e132:             ;
  321 e132:             ; return value in R7
  322 e132:             ;
  323 e132:             exe_varfactor:
  324 e132: 04 e6 09        jsr exe_variable_num    ; get variable number id (one byte for now a-z)
  325 e135:                                         ;into accumulator
  326 e135:             ;
  327 e135:             ; variable id in accumulator, return value in r7
  328 e135:             ;
  329 e135: 04 e5 c3        jsr exe_get_variable
  330 e138: 0e 04           LDAI TOKENIZER_VARIABLE
  331 e13a: 04 e1 19        JSR exe_accept
  332 e13d: 05              RET
  333 e13e:             
  334 e13e:             ;
  335 e13e:             ; int factor()
  336 e13e:             ; return value in R7
  337 e13e:             ;
  338 e13e:             ; IS MOVE T TO A NEEDED IN ALL THESE :
  339 e13e:             ;
  340 e13e:             exe_factor:
  341 e13e:             ;
  342 e13e: 43              LDAVR R3               ;get current token into accumulator
  343 e13f: 0d 17           LDTI TOKENIZER_PLUS
  344 e141: aa e1 4c        BRNEQ exe_factor1A
  345 e144: 04 e1 19        JSR exe_accept
  346 e147: 04 e1 3e        JSR EXE_FACTOR
  347 e14a: 0c              MVTA
  348 e14b: 05              RET
  349 e14c:             
  350 e14c:             exe_factor1A:
  351 e14c: 43              LDAVR R3               ;get current token into accumulator
  352 e14d: 0d 18           LDTI TOKENIZER_MINUS
  353 e14f: aa e1 5d        BRNEQ exe_factor1B
  354 e152: 04 e1 19        JSR exe_accept
  355 e155: 04 e1 3e        JSR EXE_FACTOR
  356 e158: 04 ef 0b        JSR PARSE_NEG
  357 e15b: 0c              MVTA
  358 e15c: 05              RET
  359 e15d:             
  360 e15d:             exe_factor1B:
  361 e15d: 43              LDAVR R3               ;get current token into accumulator
  362 e15e: 0d 02           LDTI TOKENIZER_NUMBER
  363 e160: aa e1 6b        BRNEQ exe_factor1
  364 e163: 04 e6 00        JSR exe_num
  365 e166: 0c              MVTA
  366 e167: 04 e1 19        JSR exe_accept
  367 e16a: 05              RET
  368 e16b:             
  369 e16b:             exe_factor1:
  370 e16b: 0d 1f           LDTI TOKENIZER_LEFTP
  371 e16d: aa e1 7c        BRNEQ exe_factor2
  372 e170: 04 e1 19        JSR exe_accept
  373 e173: 04 e1 e5        JSR exe_expr
  374 e176: 0e 20           LDAI TOKENIZER_RIGHTP
  375 e178: 04 e1 19        JSR exe_accept
  376 e17b: 05              RET
  377 e17c:             
  378 e17c:             exe_factor2:
  379 e17c: 04 e1 32        jsr exe_varfactor
  380 e17f: 05              ret
  381 e180:             
  382 e180:             ;
  383 e180:             ; int term()
  384 e180:             ; R5 = F1
  385 e180:             ; R6 = F2
  386 e180:             ; R7 = return value
  387 e180:             ;
  388 e180:             exe_term:
  389 e180: 07 05           pushr r5
  390 e182: 07 06           pushr r6
  391 e184:             
  392 e184: 04 e1 3e        jsr exe_factor
  393 e187: 0f 57           MOVRR r7,r5
  394 e189:             
  395 e189:             exe_term_loop:
  396 e189: 43              LDAVR R3
  397 e18a: 0d 1b           ldti TOKENIZER_ASTR
  398 e18c: a8 e1 9c        BREQ exe_term_astr
  399 e18f: 0d 1c           LDTI TOKENIZER_SLASH
  400 e191: a8 e1 b2        breq exe_term_slash
  401 e194: 0d 1d           ldti TOKENIZER_MOD
  402 e196: a8 e1 c8        breq exe_term_mod
  403 e199: a0 e1 de        br exe_term_done
  404 e19c:             
  405 e19c:             exe_term_astr:
  406 e19c: 04 e5 d0        jsr exe_next_token
  407 e19f: 04 e1 3e        jsr exe_factor
  408 e1a2: 0f 67           movrr r7,r6
  409 e1a4:             ;
  410 e1a4:             ; do mulitply f1 = f1 * f2
  411 e1a4:             ;
  412 e1a4: 07 04           pushr r4
  413 e1a6: 0f 46           movrr r6,r4
  414 e1a8: 04 ee b8        jsr PARSE_MUL16
  415 e1ab: 0f 57           movrr r7,r5
  416 e1ad: 08 40           popr r4
  417 e1af: a0 e1 89        BR exe_term_loop
  418 e1b2:             
  419 e1b2:             exe_term_slash:
  420 e1b2: 04 e5 d0        jsr exe_next_token
  421 e1b5: 04 e1 3e        jsr exe_factor
  422 e1b8: 0f 67           movrr r7,r6
  423 e1ba:             ;
  424 e1ba:             ; do divide f1 = f1 / f2
  425 e1ba:             ;
  426 e1ba: 07 04           pushr r4
  427 e1bc: 0f 46           movrr r6,r4
  428 e1be: 04 ee 78        jsr PARSE_DIV16
  429 e1c1: 0f 57           movrr r7,r5
  430 e1c3: 08 40           popr r4
  431 e1c5: a0 e1 89        BR exe_term_loop
  432 e1c8:             
  433 e1c8:             exe_term_mod:
  434 e1c8: 04 e5 d0        jsr exe_next_token
  435 e1cb: 04 e1 3e        jsr exe_factor
  436 e1ce: 0f 67           movrr r7,r6
  437 e1d0:             ;
  438 e1d0:             ; f1 = f1 % f2
  439 e1d0:             ;
  440 e1d0: 07 04           pushr r4
  441 e1d2: 0f 46           movrr r6,r4
  442 e1d4: 04 ee 99        jsr PARSE_MOD16
  443 e1d7: 0f 57           movrr r7,r5
  444 e1d9: 08 40           popr r4
  445 e1db: a0 e1 89        BR exe_term_loop
  446 e1de:             
  447 e1de:             exe_term_done:
  448 e1de: 0f 75           MOVRR r5,r7
  449 e1e0: 08 60           popr r6
  450 e1e2: 08 50           popr r5
  451 e1e4: 05              ret
  452 e1e5:             
  453 e1e5:             ;
  454 e1e5:             ; static VARIABLE_TYPE expr()
  455 e1e5:             ;
  456 e1e5:             ; R5 = t1
  457 e1e5:             ; R6 = t2
  458 e1e5:             ; R7 = return value
  459 e1e5:             ;
  460 e1e5:             exe_expr:
  461 e1e5: 07 05           pushr r5
  462 e1e7: 07 06           pushr r6
  463 e1e9:             
  464 e1e9: 04 e1 80        jsr exe_term
  465 e1ec: 0f 57           MOVRR r7,r5
  466 e1ee:             
  467 e1ee:             exe_expr_loop:
  468 e1ee: 43              LDAVR R3
  469 e1ef: 0d 17           ldtI TOKENIZER_PLUS
  470 e1f1: a8 e2 06        BREQ exe_expr_plus
  471 e1f4: 0d 18           ldtI TOKENIZER_MINUS
  472 e1f6: a8 e2 18        breq exe_expr_minus
  473 e1f9: 0d 19           ldtI TOKENIZER_AND
  474 e1fb: a8 e2 2a        breq exe_expr_and
  475 e1fe: 0d 1a           ldti TOKENIZER_OR
  476 e200: a8 e2 3c        breq exe_expr_or
  477 e203:             
  478 e203: a0 e2 51        br exe_expr_done
  479 e206:             
  480 e206:             exe_expr_plus:
  481 e206: 04 e5 d0        jsr exe_next_token
  482 e209: 04 e1 80        jsr exe_term
  483 e20c: 0f 67           movrr r7,r6
  484 e20e:             ;
  485 e20e:             ; t1 = t1 + t2
  486 e20e:             ;
  487 e20e: 0f 75           movrr r5,r7
  488 e210: 04 ee f3        jsr parse_add16
  489 e213: 0f 57           movrr r7,r5
  490 e215: a0 e1 ee        BR exe_expr_loop
  491 e218:             
  492 e218:             exe_expr_minus:
  493 e218: 04 e5 d0        jsr exe_next_token
  494 e21b: 04 e1 80        jsr exe_term
  495 e21e: 0f 67           movrr r7,r6
  496 e220:             ;
  497 e220:             ; t1 = t1 - t2
  498 e220:             ;
  499 e220: 0f 75           movrr r5,r7
  500 e222: 04 ef 01        jsr parse_sub16
  501 e225: 0f 57           movrr r7,r5
  502 e227: a0 e1 ee        BR exe_expr_loop
  503 e22a:             
  504 e22a:             exe_expr_and:
  505 e22a: 04 e5 d0        jsr exe_next_token
  506 e22d: 04 e1 80        jsr exe_term
  507 e230: 0f 67           movrr r7,r6
  508 e232:             ;
  509 e232:             ; t1 = t1 & t2
  510 e232:             ;
  511 e232: 0f 75           movrr r5,r7
  512 e234: 04 ef 13        jsr parse_and16
  513 e237: 0f 57           movrr r7,r5
  514 e239: a0 e1 ee        BR exe_expr_loop
  515 e23c:             
  516 e23c:             exe_expr_or:
  517 e23c: 04 e5 d0        jsr exe_next_token
  518 e23f: 04 e1 80        jsr exe_term
  519 e242: 0f 67           movrr r7,r6
  520 e244:             ;
  521 e244:             ; t1 = t1 | t2
  522 e244:             ;
  523 e244: 0f 75           movrr r5,r7
  524 e246: 04 ef 1e        jsr parse_or16
  525 e249: 0f 57           movrr r7,r5
  526 e24b: a0 e1 ee        BR exe_expr_loop
  527 e24e: a0 e1 ee        BR exe_expr_loop
  528 e251:             
  529 e251:             exe_expr_done:
  530 e251: 0f 75           MOVRR r5,r7
  531 e253: 08 60           popr r6
  532 e255: 08 50           popr r5
  533 e257: 05              ret
  534 e258:             
  535 e258:             ;
  536 e258:             ; int relation ()
  537 e258:             ;
  538 e258:             ; R5 = r1
  539 e258:             ; R6 = r2
  540 e258:             ; R7 = return value
  541 e258:             ;
  542 e258:             exe_relation:
  543 e258: 07 05           pushr r5
  544 e25a: 07 06           pushr r6
  545 e25c:             
  546 e25c: 04 e1 e5        jsr exe_expr
  547 e25f: 0f 57           MOVRR r7,r5
  548 e261:             
  549 e261:             exe_relation_loop:
  550 e261: 43              LDAVR R3
  551 e262: 0d 21           LDTI TOKENIZER_LT
  552 e264: a8 e2 74        BREQ exe_relation_lt
  553 e267: 0d 22           ldti TOKENIZER_GT
  554 e269: a8 e2 92        breq exe_relation_gt
  555 e26c: 0d 23           ldti TOKENIZER_EQ
  556 e26e: a8 e2 b0        breq exe_relation_eq
  557 e271:             
  558 e271: a0 e2 cc        br exe_relation_done
  559 e274:             
  560 e274:             exe_relation_lt:
  561 e274: 04 e5 d0        jsr exe_next_token
  562 e277: 04 e1 e5        jsr exe_expr
  563 e27a: 0f 67           movrr r7,r6
  564 e27c:             ;
  565 e27c:             ; r1 = r1 < r2
  566 e27c:             ;
  567 e27c: 0f 75           movrr  r5,r7
  568 e27e: 04 ef 56        jsr parse_compare
  569 e281: 0d ff           ldti 0ffh
  570 e283: aa e2 8c        BRNEQ exe_rel_nlt
  571 e286: 1d 00 01        mviw r5,01h
  572 e289: a0 e2 61        BR exe_relation_loop
  573 e28c:             exe_rel_nlt:
  574 e28c: 1d 00 00        mviw r5,00h
  575 e28f: a0 e2 61        BR exe_relation_loop
  576 e292:             
  577 e292:             exe_relation_gt:
  578 e292: 04 e5 d0        jsr exe_next_token
  579 e295: 04 e1 e5        jsr exe_expr
  580 e298: 0f 67           movrr r7,r6
  581 e29a:             ;
  582 e29a:             ; r1 = r1 > r2
  583 e29a:             ;
  584 e29a: 0f 75           movrr  r5,r7
  585 e29c: 04 ef 56        jsr parse_compare
  586 e29f: 0d 01           ldti 01h
  587 e2a1: aa e2 aa        BRNEQ exe_rel_ngt
  588 e2a4: 1d 00 01        mviw r5,01h
  589 e2a7: a0 e2 61        BR exe_relation_loop
  590 e2aa:             exe_rel_ngt:
  591 e2aa: 1d 00 00        mviw r5,00h
  592 e2ad: a0 e2 61        BR exe_relation_loop
  593 e2b0:             
  594 e2b0:             exe_relation_eq:
  595 e2b0: 04 e5 d0        jsr exe_next_token
  596 e2b3: 04 e1 e5        jsr exe_expr
  597 e2b6: 0f 67           movrr r7,r6
  598 e2b8:             ;
  599 e2b8:             ; r1 = r1 == r2
  600 e2b8:             ;
  601 e2b8: 0f 75           movrr  r5,r7
  602 e2ba: 04 ef 56        jsr parse_compare
  603 e2bd: a2 e2 c6        brnz exe_rel_ne
  604 e2c0: 1d 00 01        mviw r5,01h
  605 e2c3: a0 e2 61        BR exe_relation_loop
  606 e2c6:             exe_rel_ne:
  607 e2c6: 1d 00 00        mviw r5,00h
  608 e2c9: a0 e2 61        BR exe_relation_loop
  609 e2cc:             
  610 e2cc:             exe_relation_done:
  611 e2cc: 0f 75           MOVRR r5,r7
  612 e2ce: 08 60           popr r6
  613 e2d0: 08 50           popr r5
  614 e2d2: 05              ret
  615 e2d3:             
  616 e2d3:             ;
  617 e2d3:             ; char * index_find (int linenum)
  618 e2d3:             ;
  619 e2d3:             ; call with line in R7
  620 e2d3:             ; return with val in R7 - tokenbuffer ptr
  621 e2d3:             ; THIS CAN BE REMOVED SINCE IT IS ONLY A SINGLE CALL
  622 e2d3:             ;
  623 e2d3:             exe_index_find:
  624 e2d3: 04 ee 3c        JSR basu_find
  625 e2d6: 05              RET
  626 e2d7:             
  627 e2d7:             ;
  628 e2d7:             ; void jump_linenum(linenum)
  629 e2d7:             ;
  630 e2d7:             ; Linenum in R7
  631 e2d7:             ;
  632 e2d7:             exe_jump_line:
  633 e2d7: 04 e2 d3        JSR exe_index_find
  634 e2da: 2f              MVRHA R7
  635 e2db: a2 e2 ee        BRNZ exe_jump_line1
  636 e2de: 27              MVRLA R7
  637 e2df: a2 e2 ee        BRNZ exe_jump_line1
  638 e2e2:             ;
  639 e2e2:             ; returned 0 line not found
  640 e2e2:             ;
  641 e2e2: 0e 24           LDAI TOKENIZER_CR
  642 e2e4: 04 e1 19        JSR exe_accept
  643 e2e7: 1e 02 00        MVIW r6,bas_run_ended
  644 e2ea: 0e 01           LDAI 1
  645 e2ec: 4e              STAVR R6
  646 e2ed: 05              ret
  647 e2ee:             exe_jump_line1:
  648 e2ee:             ;   jsr tok_goto ; WHAT IS THIS
  649 e2ee: 0f 37           movrr r7,r3
  650 e2f0: 05              ret
  651 e2f1:             
  652 e2f1:             ;
  653 e2f1:             ; void goto_statement()
  654 e2f1:             ;
  655 e2f1:             exe_goto_stmt:
  656 e2f1: 0e 0d           LDAI TOKENIZER_GOTO
  657 e2f3: 04 e1 19        JSR exe_accept
  658 e2f6: 04 e1 e5        JSR exe_expr
  659 e2f9: 04 e2 d7        JSR exe_jump_line
  660 e2fc: 05              RET
  661 e2fd:             
  662 e2fd:             ;
  663 e2fd:             ; void print_statment()
  664 e2fd:             ;
  665 e2fd:             exe_print_stmt:
  666 e2fd: 0e 06           LDAI TOKENIZER_PRINT
  667 e2ff: 04 e1 19        jsr exe_accept
  668 e302:             
  669 e302:             exe_print_stmt_loop:
  670 e302: 43              LDAVR R3
  671 e303: 0d 03           LDTI TOKENIZER_STRING
  672 e305: aa e3 14        BRNEQ exe_print_stmt1
  673 e308:             ;
  674 e308:             ; this should return string to print in r2
  675 e308:             ; exe_string may not be needed tokenbufferptr is at string ?
  676 e308:             ;
  677 e308: 0f 73           movrr r3,r7
  678 e30a: 57              incr r7
  679 e30b: 04 ff c0        jsr stringout
  680 e30e: 04 e5 d0        jsr exe_next_token
  681 e311: a0 e3 47        br exe_print_stmt_test
  682 e314:             
  683 e314:             exe_print_stmt1:
  684 e314: 0d 15           ldti TOKENIZER_COMMA
  685 e316: aa e3 24        BRNEQ exe_print_stmt2
  686 e319: 0e 20           LDAI ' '
  687 e31b: 04 ff c4        JSR charout
  688 e31e: 04 e5 d0        jsr exe_next_token
  689 e321: a0 e3 47        br exe_print_stmt_test
  690 e324:             
  691 e324:             exe_print_stmt2:
  692 e324: 0d 16           ldti TOKENIZER_SEMICOLON
  693 e326: aa e3 2f        BRNEQ exe_print_stmt3
  694 e329: 04 e5 d0        jsr exe_next_token
  695 e32c: a0 e3 47        br exe_print_stmt_test
  696 e32f:             
  697 e32f:             exe_print_stmt3:
  698 e32f: 0d 04           ldti TOKENIZER_VARIABLE
  699 e331: a8 e3 41        BREQ exe_print_stmt4
  700 e334: 0d 02           ldti TOKENIZER_NUMBER
  701 e336: a8 e3 41        breq exe_print_stmt4
  702 e339: 0d 1f           ldti  TOKENIZER_LEFTP
  703 e33b: a8 e3 41        breq exe_print_stmt4
  704 e33e:             
  705 e33e: a0 e3 55        br exe_print_stmt_done
  706 e341:             
  707 e341:             exe_print_stmt4:
  708 e341: 04 e1 e5        jsr exe_expr
  709 e344:                 ;JSR showr7
  710 e344: 04 e6 17        jsr exe_itoa
  711 e347:             
  712 e347:             exe_print_stmt_test:
  713 e347: 43              LDAVR R3
  714 e348: 0d 24           LDTI TOKENIZER_CR
  715 e34a: a8 e3 55        breq exe_print_stmt_done
  716 e34d: 0d 01           LDTI TOKENIZER_EOF
  717 e34f: a8 e3 55        breq exe_print_stmt_done
  718 e352: a0 e3 02        br exe_print_stmt_loop
  719 e355:             
  720 e355:             exe_print_stmt_done:
  721 e355: 1f ef b6        mviw R7,CRLF
  722 e358: 04 ff c0        jsr stringout
  723 e35b: 04 e5 d0        jsr exe_next_token
  724 e35e: 05              ret
  725 e35f:             
  726 e35f:             ;
  727 e35f:             ; void if_statement()
  728 e35f:             ;
  729 e35f:             exe_if_stmt:
  730 e35f: 0e 07           LDAI TOKENIZER_IF
  731 e361: 04 e1 19        JSR exe_accept
  732 e364:             
  733 e364: 04 e2 58        JSR exe_relation
  734 e367: 27              MVRLA R7
  735 e368: 09              push
  736 e369: 0e 08           LDAI TOKENIZER_THEN
  737 e36b: 04 e1 19        JSR exe_accept
  738 e36e: 0a              pop
  739 e36f:             
  740 e36f: 0d 01           LDTI 1
  741 e371: aa e3 78        BRNEQ exe_if_stmt1
  742 e374: 04 e4 c3        JSR exe_stmt
  743 e377: 05              ret
  744 e378:             
  745 e378:             exe_if_stmt1:
  746 e378: 04 e5 d0        jsr exe_next_token
  747 e37b: 43              LDAVR R3
  748 e37c: 0d 24           LDTI TOKENIZER_CR
  749 e37e: a8 e3 87        BREQ EXE_IF_STMT2
  750 e381: 0d 01           LDTI TOKENIZER_EOF
  751 e383: aa e3 78        BRNEQ EXE_IF_STMT1
  752 e386: 05              RET
  753 e387:             
  754 e387:             exe_if_stmt2:
  755 e387: 04 e5 d0        JSR EXE_NEXT_TOKEN
  756 e38a: 05              RET
  757 e38b:             
  758 e38b:             ;
  759 e38b:             ; void let_statement()
  760 e38b:             ;
  761 e38b:             exe_let_stmt:
  762 e38b: 04 e6 09        jsr exe_variable_num
  763 e38e: 37              mvarl r7
  764 e38f: 0f 67           movrr r7,r6
  765 e391: 0e 04           ldai TOKENIZER_VARIABLE
  766 e393: 04 e1 19        jsr exe_accept
  767 e396: 0e 23           ldai TOKENIZER_EQ
  768 e398: 04 e1 19        jsr exe_accept
  769 e39b: 04 e1 e5        jsr exe_expr
  770 e39e: 26              mvrla r6
  771 e39f: 04 e5 b8        JSR exe_set_variable
  772 e3a2: 0e 24           ldai TOKENIZER_CR
  773 e3a4: 04 e1 19        jsr exe_accept
  774 e3a7: 05              ret
  775 e3a8:             
  776 e3a8:             ;
  777 e3a8:             ; void gosub_statement()
  778 e3a8:             ;
  779 e3a8:             exe_gosub_stmt:
  780 e3a8: 0e 0e           ldai TOKENIZER_GOSUB
  781 e3aa: 04 e1 19        jsr exe_accept
  782 e3ad: 04 e6 00        jsr exe_num
  783 e3b0: 0e 02           ldai TOKENIZER_NUMBER
  784 e3b2: 04 e1 19        jsr exe_accept
  785 e3b5: 0e 24           ldai TOKENIZER_CR
  786 e3b7: 04 e1 19        jsr exe_accept
  787 e3ba:             ;
  788 e3ba:             ; save current token buffer ptr to gosub stack
  789 e3ba:             ;
  790 e3ba: 23             mvrla r3
  791 e3bb: 4d             stavr r5
  792 e3bc: 55             incr r5
  793 e3bd: 2b             mvrha r3
  794 e3be: 4d             stavr r5
  795 e3bf: 55             incr  r5
  796 e3c0:             ;
  797 e3c0:             ; write new gosub stack ptr location back
  798 e3c0:             ;
  799 e3c0: 04 e2 d7       JSR exe_jump_line
  800 e3c3: 05             RET
  801 e3c4:             
  802 e3c4:             ;
  803 e3c4:             ; void return_statment()
  804 e3c4:             ;
  805 e3c4:             exe_return_stmt:
  806 e3c4: 0e 0f           ldai TOKENIZER_RETURN
  807 e3c6: 04 e1 19        jsr exe_accept
  808 e3c9:             ;
  809 e3c9:             ; setup to use for storage area via R4
  810 e3c9:             ;
  811 e3c9: 5d             decr r5
  812 e3ca: 5d             decr r5
  813 e3cb:             
  814 e3cb: 45             ldavr r5
  815 e3cc: 33             mvarl r3
  816 e3cd: 55             incr r5
  817 e3ce: 45             ldavr r5
  818 e3cf: 3b             mvarh r3
  819 e3d0:             
  820 e3d0: 5d             decr r5
  821 e3d1: 05             ret
  822 e3d2:             
  823 e3d2:             ;
  824 e3d2:             ; void next_statement()
  825 e3d2:             ;
  826 e3d2:             exe_next_stmt:
  827 e3d2:             ;
  828 e3d2:             ; backup to the TO Value
  829 e3d2: 5c              decr r4
  830 e3d3: 5c              decr r4
  831 e3d4: 5c              decr r4
  832 e3d5: 5c              decr r4
  833 e3d6:             ;
  834 e3d6:             ; eat next
  835 e3d6:             ;
  836 e3d6: 0e 0c           ldai TOKENIZER_NEXT
  837 e3d8: 04 e1 19        jsr exe_accept
  838 e3db:             ;
  839 e3db:             ; get variable id (in accumulator) and hold in r6 lo
  840 e3db:             ;
  841 e3db: 04 e6 09        jsr exe_variable_num
  842 e3de: 36              mvarl r6
  843 e3df:             ;
  844 e3df:             ; eat TOKENIZER_VARIABLE id
  845 e3df:             ;
  846 e3df: 0e 04           ldai TOKENIZER_VARIABLE
  847 e3e1: 04 e1 19        jsr exe_accept
  848 e3e4:             ;
  849 e3e4:             ; get variable value, inc by 1 and store - ADD STEP VALUE
  850 e3e4:             ;
  851 e3e4: 26              mvrla r6
  852 e3e5: 04 e5 c3        jsr exe_get_variable
  853 e3e8: 57              incr r7
  854 e3e9: 26              mvrla r6
  855 e3ea: 04 e5 b8        jsr exe_set_variable
  856 e3ed:             ;
  857 e3ed:             ; get TO value into R6
  858 e3ed: 44              ldavr r4
  859 e3ee: 36              mvarl r6
  860 e3ef: 54              incr r4
  861 e3f0: 44              ldavr r4
  862 e3f1: 3e              mvarh r6
  863 e3f2: 54              incr r4
  864 e3f3:             ;
  865 e3f3:             ; for now only compare low byte HACK use compare code
  866 e3f3:             ; r7=r6 00
  867 e3f3:             ; r7>r6 01
  868 e3f3:             ; r7<r6 ff
  869 e3f3:             ;
  870 e3f3: 04 ef 56         jsr parse_compare
  871 e3f6: 0d 01            ldti 01
  872 e3f8: a8 e4 02         breq exe_next_done
  873 e3fb:             ;    mvrla r6
  874 e3fb:             ;    mvat
  875 e3fb:             ;    mvrla r7
  876 e3fb:             ;    brgt exe_next_done
  877 e3fb:             ;
  878 e3fb: 44              ldavr r4
  879 e3fc: 33              mvarl r3
  880 e3fd: 54              incr r4
  881 e3fe: 44              ldavr r4
  882 e3ff: 3b              mvarh r3
  883 e400: 54              incr r4
  884 e401: 05              ret
  885 e402:             
  886 e402:             exe_next_done:
  887 e402: 5c            decr r4
  888 e403: 5c            decr r4
  889 e404: 5c            decr r4
  890 e405: 5c            decr r4
  891 e406: 0e 24         ldai TOKENIZER_CR
  892 e408: 04 e1 19      jsr exe_accept
  893 e40b: 05            ret
  894 e40c:             
  895 e40c:             ;
  896 e40c:             ; void for_statement()
  897 e40c:             ;
  898 e40c:             exe_for_stmt:
  899 e40c:             ;
  900 e40c:             ; setup to use for storage area via R4
  901 e40c:             ;
  902 e40c: 0e 0a           ldai TOKENIZER_FOR    ; eat FOR
  903 e40e: 04 e1 19        jsr exe_accept
  904 e411:             ;
  905 e411:             ; get variable id (in accumulator) and hold in r6 lo
  906 e411:             ;
  907 e411: 04 e6 09        jsr exe_variable_num
  908 e414: 36              mvarl r6
  909 e415:             ;
  910 e415:             ; store variable id in FOR storage - hack only lo byte, hi byte 0
  911 e415:             ;
  912 e415: 4c              stavr r4
  913 e416: 54              incr r4
  914 e417: 0e 00           ldai 0
  915 e419: 4c              stavr r4
  916 e41a: 54              incr r4
  917 e41b:             ;
  918 e41b:             ; eat variable id and = then get starting value
  919 e41b:             ;
  920 e41b: 0e 04           ldai TOKENIZER_VARIABLE
  921 e41d: 04 e1 19        jsr exe_accept
  922 e420: 0e 23           ldai TOKENIZER_EQ
  923 e422: 04 e1 19        jsr exe_accept
  924 e425: 04 e1 e5        jsr exe_expr
  925 e428:             ;
  926 e428:             ; set variable to starting value
  927 e428:             ;
  928 e428: 26              mvrla r6
  929 e429: 04 e5 b8        JSR exe_set_variable
  930 e42c:             ;
  931 e42c:             ; eat TO and get to value
  932 e42c:             ;
  933 e42c: 0e 0b           ldai TOKENIZER_TO
  934 e42e: 04 e1 19        jsr exe_accept
  935 e431: 04 e1 e5        jsr exe_expr
  936 e434:             ;
  937 e434:             ; store to value in FOR storage area
  938 e434:             ;
  939 e434: 27              mvrla r7
  940 e435: 4c              stavr r4
  941 e436: 54              incr r4
  942 e437: 2f              mvrha r7
  943 e438: 4c              stavr r4
  944 e439: 54              incr r4
  945 e43a:             ;
  946 e43a:             ; EAT EOL
  947 e43a:             ;
  948 e43a: 0e 24           ldai TOKENIZER_CR
  949 e43c: 04 e1 19        jsr exe_accept
  950 e43f:             ;
  951 e43f:             ; store ptr to instruction after FOR in for storage area
  952 e43f:             ;
  953 e43f: 23              mvrla r3
  954 e440: 4c              stavr r4
  955 e441: 54              incr r4
  956 e442: 2b              mvrha r3
  957 e443: 4c              stavr r4
  958 e444: 54              incr r4
  959 e445:             ;
  960 e445:             ;   save for stackptr
  961 e445:             ;
  962 e445: 05              ret
  963 e446:             
  964 e446:             ;
  965 e446:             ; INP
  966 e446:             ;
  967 e446:             exe_inp_stmt:
  968 e446: 0e 2b           ldai TOKENIZER_INP   ; eat INP
  969 e448: 04 e1 19        jsr exe_accept
  970 e44b: 05              ret
  971 e44c:             
  972 e44c:             ;
  973 e44c:             ; outp
  974 e44c:             ;
  975 e44c:             exe_outp_stmt:
  976 e44c: 0e 2c           ldai TOKENIZER_OUTP   ; eat OUTP
  977 e44e: 04 e1 19        jsr exe_accept
  978 e451: 05              ret
  979 e452:             
  980 e452:             ;
  981 e452:             ; INPUT
  982 e452:             ;
  983 e452:             exe_input_stmt:
  984 e452: 0e 2a           ldai TOKENIZER_INPUT   ; eat INPUT
  985 e454: 04 e1 19        jsr exe_accept
  986 e457: 04 e6 09        jsr exe_variable_num
  987 e45a: 09              Push
  988 e45b:             
  989 e45b: 1f 03 00        mviw r7,parse_input_line
  990 e45e:             
  991 e45e: 04 ef 93        jsr get_inputline
  992 e461:             
  993 e461: 1f 03 00        mviw r7,parse_input_line
  994 e464: ef 02 02        str r7,bas_txtptr
  995 e467:             
  996 e467:             
  997 e467: 04 ec 05        jsr parse_num
  998 e46a: 0a              pop
  999 e46b: 04 e5 b8        jsr  EXE_SET_VARIABLE
 1000 e46e:             
 1001 e46e: 0e 04           ldai TOKENIZER_VARIABLE
 1002 e470: 04 e1 19        jsr EXE_ACCEPT
 1003 e473: 0e 24           ldai TOKENIZER_CR
 1004 e475: 04 e1 19        jsr exe_accept
 1005 e478: 05              RET
 1006 e479:             ;
 1007 e479:             ; void peek_statment()
 1008 e479:             ;
 1009 e479:             ;peek_statement(void) {
 1010 e479:             ;
 1011 e479:             exe_peek_stmt:
 1012 e479: 0e 12           ldai TOKENIZER_PEEK   ; eat PEEK
 1013 e47b: 04 e1 19        jsr exe_accept
 1014 e47e: 04 e1 e5        jsr exe_expr
 1015 e481: 47              LDAVR R7
 1016 e482: 37              MVARL R7
 1017 e483: 0e 00           LDAI 0
 1018 e485: 3f              MVARH R7
 1019 e486: 07 07           PUSHR R7
 1020 e488:             
 1021 e488: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
 1022 e48a: 04 e1 19        jsr exe_accept
 1023 e48d: 04 e6 09        jsr exe_variable_num
 1024 e490: 08 70           popr r7
 1025 e492:             
 1026 e492: 04 e5 b8        jsr  EXE_SET_VARIABLE
 1027 e495: 0e 04           ldai TOKENIZER_VARIABLE
 1028 e497: 04 e1 19        jsr EXE_ACCEPT
 1029 e49a: 0e 24           ldai TOKENIZER_CR
 1030 e49c: 04 e1 19        jsr exe_accept
 1031 e49f: 05              RET
 1032 e4a0:             
 1033 e4a0:             ;
 1034 e4a0:             ; void poke_statement()
 1035 e4a0:             ;
 1036 e4a0:             ;poke_statement(void) {
 1037 e4a0:             ;    VARIABLE_TYPE poke_addr;
 1038 e4a0:             ;    VARIABLE_TYPE value;
 1039 e4a0:             ;
 1040 e4a0:             ;    accept(TOKENIZER_POKE);
 1041 e4a0:             ;    poke_addr = expr();
 1042 e4a0:             ;    accept(TOKENIZER_COMMA);
 1043 e4a0:             ;    value = expr();
 1044 e4a0:             ;    accept(TOKENIZER_CR);
 1045 e4a0:             
 1046 e4a0:             ;    poke_function(poke_addr, value);
 1047 e4a0:             
 1048 e4a0:             exe_poke_stmt:
 1049 e4a0: 0e 13           ldai TOKENIZER_POKE   ; eat PEEK
 1050 e4a2: 04 e1 19        jsr exe_accept
 1051 e4a5:             
 1052 e4a5: 04 e1 e5        jsr exe_expr
 1053 e4a8: 07 07           PUSHR R7
 1054 e4aa:             
 1055 e4aa: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
 1056 e4ac: 04 e1 19        jsr exe_accept
 1057 e4af:             
 1058 e4af: 04 e1 e5        jsr exe_expr
 1059 e4b2: 27              MVRLA R7
 1060 e4b3:             
 1061 e4b3: 08 70           POPR R7
 1062 e4b5:             
 1063 e4b5: 4f              STAVR R7
 1064 e4b6:             
 1065 e4b6: 0e 24           ldai TOKENIZER_CR
 1066 e4b8: 04 e1 19        jsr exe_accept
 1067 e4bb: 05              RET
 1068 e4bc:             
 1069 e4bc:             ;
 1070 e4bc:             ; void end_statement()
 1071 e4bc:             ;
 1072 e4bc:             exe_end_stmt:
 1073 e4bc: 1e 02 00        mviw r6,bas_run_ended
 1074 e4bf: 0e 01           LDAI 1
 1075 e4c1: 4e              STAVR r6
 1076 e4c2: 05              ret
 1077 e4c3:             
 1078 e4c3:             ;
 1079 e4c3:             ; void statment()
 1080 e4c3:             ;
 1081 e4c3:             exe_stmt:
 1082 e4c3: 43              LDAVR R3
 1083 e4c4:             
 1084 e4c4: 0d 04           LDTI TOKENIZER_VARIABLE
 1085 e4c6: aa e4 cd        BRNEQ exe_stmt1
 1086 e4c9: 04 e3 8b        JSR exe_let_stmt
 1087 e4cc: 05              ret
 1088 e4cd:             
 1089 e4cd:             exe_stmt1:
 1090 e4cd: 0d 07           LDTI TOKENIZER_IF
 1091 e4cf: aa e4 d6        BRNEQ exe_stmt2
 1092 e4d2: 04 e3 5f        JSR exe_if_stmt
 1093 e4d5: 05              ret
 1094 e4d6:             
 1095 e4d6:             exe_stmt2:
 1096 e4d6: 0d 0c           LDTI TOKENIZER_NEXT
 1097 e4d8: aa e4 df        BRNEQ exe_stmt3
 1098 e4db: 04 e3 d2        JSR exe_next_stmt
 1099 e4de: 05              ret
 1100 e4df:             
 1101 e4df:             exe_stmt3:
 1102 e4df: 0d 06           LDTI TOKENIZER_PRINT
 1103 e4e1: aa e4 e8        BRNEQ exe_stmt4
 1104 e4e4: 04 e2 fd        JSR exe_print_stmt
 1105 e4e7: 05              ret
 1106 e4e8:             
 1107 e4e8:             exe_stmt4:
 1108 e4e8: 0d 0a           LDTI TOKENIZER_FOR
 1109 e4ea: aa e4 f1        BRNEQ exe_stmt5
 1110 e4ed: 04 e4 0c        JSR exe_for_stmt
 1111 e4f0: 05              ret
 1112 e4f1:             
 1113 e4f1:             exe_stmt5:
 1114 e4f1: 0d 0d           LDTI TOKENIZER_GOTO
 1115 e4f3: aa e4 fa        BRNEQ exe_stmt5a
 1116 e4f6: 04 e2 f1        JSR exe_goto_stmt
 1117 e4f9: 05              ret
 1118 e4fa:             
 1119 e4fa:             exe_stmt5a:
 1120 e4fa: 0d 2d           LDTI TOKENIZER_ON
 1121 e4fc: aa e5 0b        BRNEQ exe_stmt5b
 1122 e4ff: 0e 2d           ldai TOKENIZER_ON
 1123 e501: 04 e1 19        jsr exe_accept
 1124 e504: 0e 24           ldai TOKENIZER_CR
 1125 e506: 04 e1 19        jsr exe_accept
 1126 e509: 01              ON
 1127 e50a: 05              ret
 1128 e50b:             
 1129 e50b:             exe_stmt5b:
 1130 e50b: 0d 2e           LDTI TOKENIZER_OFF
 1131 e50d: aa e5 1c        BRNEQ exe_stmt6
 1132 e510: 0e 2e           ldai TOKENIZER_OFF
 1133 e512: 04 e1 19        jsr exe_accept
 1134 e515: 0e 24           ldai TOKENIZER_CR
 1135 e517: 04 e1 19        jsr exe_accept
 1136 e51a: 02              OFF
 1137 e51b: 05              ret
 1138 e51c:             
 1139 e51c:             exe_stmt6:
 1140 e51c: 0d 2a           LDTI TOKENIZER_INPUT
 1141 e51e: aa e5 25        BRNEQ exe_stmt7
 1142 e521: 04 e4 52        JSR exe_input_stmt
 1143 e524: 05              ret
 1144 e525:             
 1145 e525:             exe_stmt7:
 1146 e525: 0d 0e           LDTI TOKENIZER_GOSUB
 1147 e527: aa e5 2e        BRNEQ exe_stmt8
 1148 e52a: 04 e3 a8        JSR exe_gosub_stmt
 1149 e52d: 05              ret
 1150 e52e:             
 1151 e52e:             exe_stmt8:
 1152 e52e: 0d 0f           LDTI TOKENIZER_RETURN
 1153 e530: aa e5 37        BRNEQ exe_stmt9
 1154 e533: 04 e3 c4        JSR exe_return_stmt
 1155 e536: 05              ret
 1156 e537:             
 1157 e537:             exe_stmt9:
 1158 e537: 0d 12           LDTI TOKENIZER_PEEK
 1159 e539: aa e5 40        BRNEQ exe_stmt10
 1160 e53c: 04 e4 79        JSR exe_peek_stmt
 1161 e53f: 05              ret
 1162 e540:             
 1163 e540:             exe_stmt10:
 1164 e540: 0d 13           LDTI TOKENIZER_POKE
 1165 e542: aa e5 49        BRNEQ exe_stmt11
 1166 e545: 04 e4 a0        JSR exe_poke_stmt
 1167 e548: 05              ret
 1168 e549:             
 1169 e549:             exe_stmt11:
 1170 e549: 0d 14           LDTI TOKENIZER_END
 1171 e54b: aa e5 52        BRNEQ exe_stmt12
 1172 e54e: 04 e4 bc        JSR exe_end_stmt
 1173 e551: 05              ret
 1174 e552:             
 1175 e552:             exe_stmt12:
 1176 e552: 0d 05           LDTI TOKENIZER_LET
 1177 e554: aa e5 60        BRNEQ exe_stmt13
 1178 e557: 0e 05           LDAI TOKENIZER_LET
 1179 e559: 04 e1 19        JSR exe_accept
 1180 e55c: 04 e3 8b        JSR exe_let_stmt
 1181 e55f: 05              ret
 1182 e560:             
 1183 e560:             exe_stmt13:
 1184 e560: 0d 2b           LDTI TOKENIZER_INP
 1185 e562: aa e5 69        BRNEQ exe_stmt14
 1186 e565: 04 e4 46        JSR exe_inp_stmt
 1187 e568: 05              ret
 1188 e569:             
 1189 e569:             exe_stmt14:
 1190 e569: 0d 2c           LDTI TOKENIZER_OUTP
 1191 e56b: aa e5 72        BRNEQ exe_stmt15
 1192 e56e: 04 e4 4c        JSR exe_outp_stmt
 1193 e571: 05              ret
 1194 e572:             
 1195 e572:             exe_stmt15:
 1196 e572: 04 ff e0        jsr showbytea
 1197 e575: 0e 3d           ldai '='
 1198 e577: 04 ff c8        jsr uartout
 1199 e57a: 1f e0 d5        MVIW R7,bas_msg3
 1200 e57d: 04 ff c0        jsr stringout
 1201 e580: 04 ff dc        JSR SHOWREGS
 1202 e583: 04 e5 ce        jsr bas_error
 1203 e586:             
 1204 e586:             ;
 1205 e586:             ; void line_statement (void)
 1206 e586:             ;
 1207 e586:             ; IS LINENUM NEEDED? CAN we skip over here?
 1208 e586:             ;
 1209 e586:             exe_line_stmt:
 1210 e586: 0e 25           LDAI TOKENIZER_LINENUM
 1211 e588: 04 e1 19        jsr exe_accept
 1212 e58b: 04 e4 c3        jsr exe_stmt
 1213 e58e: 05              ret
 1214 e58f:             
 1215 e58f:             ;
 1216 e58f:             ; void ubasic_run()
 1217 e58f:             ;
 1218 e58f:             basic_run:
 1219 e58f: 04 e1 07        JSR exe_init
 1220 e592:             
 1221 e592:             exe_run:
 1222 e592: 04 e5 a1        jsr exe_finished
 1223 e595: 0d 01           LDTI 1
 1224 e597: aa e5 9b        BRNEQ exe_run_cont
 1225 e59a: 05              ret
 1226 e59b:             
 1227 e59b:             exe_run_cont:
 1228 e59b: 04 e5 86        jsr exe_line_stmt
 1229 e59e: a0 e5 92        BR exe_run
 1230 e5a1:             
 1231 e5a1:             ;
 1232 e5a1:             ; int ubasic_finished()
 1233 e5a1:             ;
 1234 e5a1:             exe_finished:
 1235 e5a1:             ;    MVIW R2,bas_run_ended
 1236 e5a1:             ;    LDAVR R2
 1237 e5a1: 04 ef a4        JSR test_input
 1238 e5a4: e4 02 00        LDA bas_run_ended
 1239 e5a7: 0d 01           LDTI 1
 1240 e5a9: a8 e5 b5        BREQ exe_finished_yes
 1241 e5ac:             
 1242 e5ac: 43              ldavr r3
 1243 e5ad: 0d 01           ldti TOKENIZER_EOF
 1244 e5af: a8 e5 b5        breq exe_finished_yes
 1245 e5b2: 0e 00           ldai 0
 1246 e5b4: 05              ret
 1247 e5b5:             
 1248 e5b5:             exe_finished_yes:
 1249 e5b5: 0e 01           LDAI 1
 1250 e5b7: 05              ret
 1251 e5b8:             
 1252 e5b8:             ;
 1253 e5b8:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1254 e5b8:             ;
 1255 e5b8:             ; R7 value (only using low byte)
 1256 e5b8:             ; ACCUMULATOR Variable ref number
 1257 e5b8:             ;
 1258 e5b8:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1259 e5b8:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1260 e5b8:             ;
 1261 e5b8:             exe_set_variable:
 1262 e5b8: 1a 01 00        MVIW R2,BASIC_VARS  ; SEE COMMENT below about memory alignment
 1263 e5bb: b6              SHL                 ; memory location x 2 (2 byte vars)
 1264 e5bc: 32              MVARL R2            ; change to add16 to remove align issue
 1265 e5bd:             ;
 1266 e5bd: 27              MVRLA R7
 1267 e5be: 4a              STAVR R2
 1268 e5bf: 52              INCR r2
 1269 e5c0: 2f              mvrha r7
 1270 e5c1: 4a              stavr r2
 1271 e5c2:             
 1272 e5c2: 05              RET
 1273 e5c3:             ;
 1274 e5c3:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1275 e5c3:             ;
 1276 e5c3:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1277 e5c3:             ;
 1278 e5c3:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1279 e5c3:             ; and only 0-25 (var names a-z) supported
 1280 e5c3:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1281 e5c3:             ;
 1282 e5c3:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1283 e5c3:             ;
 1284 e5c3:             exe_get_variable:
 1285 e5c3: 1a 01 00        MVIW R2,BASIC_VARS
 1286 e5c6: b6              shl
 1287 e5c7: 32              MVARL R2
 1288 e5c8:             ;
 1289 e5c8: 42              LDAVR R2
 1290 e5c9: 37              MVARL R7
 1291 e5ca: 52              INCR R2
 1292 e5cb: 42              LDAVR R2
 1293 e5cc: 3f              MVARH R7
 1294 e5cd: 05              RET
 1295 e5ce:             
 1296 e5ce:             ;
 1297 e5ce:             ; hack this needs work
 1298 e5ce:             ;
 1299 e5ce:             bas_error:
 1300 e5ce: 03            HALT
 1301 e5cf: 05            RET
 1302 e5d0:             
 1303 e5d0:             ;
 1304 e5d0:             ; Tokenizer execute support code
 1305 e5d0:             ;
 1306 e5d0:             ; tokenizer_next - exe version
 1307 e5d0:             ;
 1308 e5d0:             exe_next_token:
 1309 e5d0: 43            ldavr r3
 1310 e5d1: 0d 02         ldti TOKENIZER_NUMBER
 1311 e5d3: aa e5 da      BRNEQ exe_next_token1
 1312 e5d6: 53            incr r3
 1313 e5d7: 53            incr r3
 1314 e5d8: 53            incr r3
 1315 e5d9: 05            RET
 1316 e5da:             
 1317 e5da:             exe_next_token1:
 1318 e5da: 0d 04         ldti TOKENIZER_VARIABLE
 1319 e5dc: aa e5 e3      BRNEQ exe_next_token2
 1320 e5df: 53            incr r3
 1321 e5e0: 53            incr r3
 1322 e5e1: 53            incr r3
 1323 e5e2: 05            RET
 1324 e5e3:             
 1325 e5e3:             exe_next_token2:
 1326 e5e3: 0d 25         ldti TOKENIZER_LINENUM
 1327 e5e5: aa e5 ee      BRNEQ exe_next_token3
 1328 e5e8: 53            incr r3
 1329 e5e9: 53            incr r3
 1330 e5ea: 53            incr r3
 1331 e5eb: 53            incr r3
 1332 e5ec: 53            incr r3
 1333 e5ed: 05            RET
 1334 e5ee:             
 1335 e5ee:             exe_next_token3:
 1336 e5ee: 0d 03         ldti TOKENIZER_STRING
 1337 e5f0: aa e5 fe      BRNEQ exe_next_token4
 1338 e5f3: 53            incr r3
 1339 e5f4:             
 1340 e5f4:             exe_next_tok3_loop:
 1341 e5f4: 43            LDAVR R3
 1342 e5f5: a1 e5 fc      BRZ exe_next_tok3_done
 1343 e5f8: 53            incr r3
 1344 e5f9: a0 e5 f4      BR exe_next_tok3_loop
 1345 e5fc:             
 1346 e5fc:             exe_next_tok3_done:
 1347 e5fc: 53            incr r3
 1348 e5fd: 05            RET
 1349 e5fe:             
 1350 e5fe:             exe_next_token4:
 1351 e5fe: 53            incr r3
 1352 e5ff: 05            ret
 1353 e600:             
 1354 e600:             ;
 1355 e600:             ; numbers stored low byte followed by high byte in memory
 1356 e600:             ;
 1357 e600:             exe_num:
 1358 e600: 53              incr r3
 1359 e601: 43              ldavr r3
 1360 e602: 37              mvarl r7
 1361 e603: 53              incr r3
 1362 e604: 43              ldavr r3
 1363 e605: 3f              mvarh r7
 1364 e606: 5b              decr r3
 1365 e607: 5b              decr r3
 1366 e608: 05              ret
 1367 e609:             
 1368 e609:             ;
 1369 e609:             ; hack only using low byte of id for now
 1370 e609:             ; return in accumulator
 1371 e609:             ;
 1372 e609:             exe_variable_num:
 1373 e609: 53              incr r3
 1374 e60a: 43              ldavr r3
 1375 e60b: 5b              decr r3
 1376 e60c: 05              ret
 1377 e60d:             
 1378 e60d:             
 1379 e60d:             ;
 1380 e60d:             ; Convert number in r7 to ASCII
 1381 e60d:             ;
 1382 e60d:             ; for for negative numbers
 1383 e60d:             ;
 1384 e60d: 27 10 03 e8 
            00 64 00 0a 
            00 00       dividers: DW 02710h,03e8h,0064h,000Ah,0000h
 1385 e617:             
 1386 e617:             exe_itoa:
 1387 e617: 09                push
 1388 e618: 2f                mvrha r7
 1389 e619: b3 80             andi 080h
 1390 e61b: a1 e6 2a          brz exe_itoa_pos
 1391 e61e:             
 1392 e61e: 2f                mvrha r7
 1393 e61f: b5                inva
 1394 e620: 3f                mvarh r7
 1395 e621: 27                mvrla r7
 1396 e622: b5                inva
 1397 e623: 37                mvarl r7
 1398 e624: 57                incr r7
 1399 e625: 0e 2d             ldai '-'
 1400 e627: 04 ff c4          jsr charout
 1401 e62a:             
 1402 e62a:             exe_itoa_pos:
 1403 e62a: 07 04             pushr r4    ; dividers ptr
 1404 e62c: 07 05             pushr r5    ; value holder
 1405 e62e: 1d 00 00          mviw r5,0
 1406 e631: 0e 01             ldai 1
 1407 e633: 3d                mvarh r5
 1408 e634: 07 06             pushr r6    ;
 1409 e636: 1c e6 0d          mviw  r4,dividers
 1410 e639:             
 1411 e639:             exe_itoa_loop:
 1412 e639: 44                ldavr r4
 1413 e63a: 3e                mvarh r6
 1414 e63b: 54                incr r4
 1415 e63c: 44                ldavr r4
 1416 e63d: 36                mvarl r6
 1417 e63e: 5c                decr r4
 1418 e63f: 04 ef 56          jsr parse_compare
 1419 e642: 0d ff             ldti 0ffh
 1420 e644: a8 e6 51          breq exe_itoa_next
 1421 e647: 0e 00             ldai 0
 1422 e649: 3d                mvarh r5
 1423 e64a: 04 ef 01          jsr PARSE_SUB16
 1424 e64d: 55                incr r5
 1425 e64e: a0 e6 39          br exe_itoa_loop
 1426 e651:             
 1427 e651:             exe_itoa_next:
 1428 e651: 2d                mvrha r5
 1429 e652: a2 e6 5e          brnz exe_itoa_notyet
 1430 e655: 25                mvrla r5
 1431 e656: b0 30             addi '0'
 1432 e658: 04 ff c4          JSR charout
 1433 e65b: 0e 00             ldai 0
 1434 e65d: 3d                mvarh r5
 1435 e65e:             
 1436 e65e:             exe_itoa_notyet:
 1437 e65e: 0e 00             ldai 0
 1438 e660: 35                mvarl r5
 1439 e661: 54                incr r4
 1440 e662: 54                incr r4
 1441 e663: 44                ldavr r4
 1442 e664: a2 e6 39          brnz exe_itoa_loop
 1443 e667: 54                incr r4
 1444 e668: 44                ldavr r4
 1445 e669: 5c                decr r4
 1446 e66a: a2 e6 39          brnz exe_itoa_loop
 1447 e66d:             
 1448 e66d:             ;      mvrha r5
 1449 e66d:             ;      brz exe_itoa_noones
 1450 e66d: 27                mvrla r7
 1451 e66e: b0 30             addi '0'
 1452 e670: 04 ff c4          JSR charout
 1453 e673:             exe_itoa_noones:
 1454 e673: 08 60             popr r6
 1455 e675: 08 50             popr r5
 1456 e677: 08 40             popr r4
 1457 e679: 0a                pop
 1458 e67a: 05                RET
 1459 e67b:             
 1460 e67b:             
 1461 e67b:             
 1462 e67b:             ;
 1463 e67b:             ; List out token buffer in human readable form
 1464 e67b:             ;
 1465 e67b:             ; list out token buffer
 1466 e67b:             ; buffer address in r7
 1467 e67b:             ;
 1468 e67b: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1469 e680: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1470 e687: 49 46 20 00 tokl_if: DB "IF ",0
 1471 e68b: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1472 e691: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1473 e697: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1474 e69c: 54 4f 20 00 tokl_to: DB "TO ",0
 1475 e6a0: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1476 e6a6: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1477 e6ac: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1478 e6b3: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1479 e6bb: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1480 e6c0: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1481 e6c6: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1482 e6cc: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1483 e6d1: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1484 e6d7: 49 4e 50 55 
            54 20 00    tokl_input: DB "INPUT ",0
 1485 e6de: 49 4e 50 20 
            00          tokl_inp: DB "INP ",0
 1486 e6e3: 4f 55 54 50 
            20 00       tokl_outp: DB "OUTP ",0
 1487 e6e9: 4f 4e 20 00 tokl_on: DB "ON ",0
 1488 e6ed: 4f 46 46 20 
            00          tokl_off: DB "OFF ",0
 1489 e6f2: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1490 e6fd:             
 1491 e6fd:             
 1492 e6fd:             basic_list:
 1493 e6fd: 07 03           pushr r3
 1494 e6ff: 0f 37           movrr r7,r3
 1495 e701:             
 1496 e701:             
 1497 e701:             baslist_loop:
 1498 e701: 43              ldavr r3
 1499 e702:             
 1500 e702: 0d 00           LDTI TOKENIZER_ERROR
 1501 e704: aa e7 16        BRNEQ baslist1
 1502 e707: 1f e6 f2        MVIW R7,tokl_error
 1503 e70a: 04 ff c0        JSR stringout
 1504 e70d: 04 ff cc        JSR showaddr
 1505 e710: a0 e9 f7        BR baslist_done
 1506 e713: a0 e7 01        BR baslist_loop
 1507 e716:             
 1508 e716:             baslist1:
 1509 e716: 0d 01           LDTI TOKENIZER_EOF
 1510 e718: aa e7 21        BRNEQ baslist2
 1511 e71b: a0 e9 f7        BR baslist_done
 1512 e71e: a0 e7 01        BR baslist_loop
 1513 e721:             
 1514 e721:             baslist2:
 1515 e721: 0d 02           LDTI TOKENIZER_NUMBER
 1516 e723: aa e7 38        BRNEQ baslist3
 1517 e726: 53              incr r3
 1518 e727: 43              ldavr r3
 1519 e728: 37              mvarl r7
 1520 e729: 53              incr r3
 1521 e72a: 43              ldavr r3
 1522 e72b: 3f              mvarh r7
 1523 e72c: 53              INCR R3
 1524 e72d:             ;    jsr showr7
 1525 e72d: 04 e6 17        jsr exe_itoa
 1526 e730: 0e 20           ldai ' '
 1527 e732: 04 ff c8        jsr uartout
 1528 e735: a0 e7 01        BR baslist_loop
 1529 e738:             
 1530 e738:             baslist3:
 1531 e738:             ;
 1532 e738:             ; output quotes around string
 1533 e738:             ;
 1534 e738: 0d 03           LDTI TOKENIZER_STRING
 1535 e73a: aa e7 54        BRNEQ baslist4
 1536 e73d: 53              incr r3
 1537 e73e: 0f 73           movrr r3,r7
 1538 e740: 04 ff c0        jsr stringout
 1539 e743: 0e 20           ldai ' '
 1540 e745: 04 ff c8        jsr uartout
 1541 e748:             
 1542 e748:             ;
 1543 e748:             ; does r7 point to end of string here?
 1544 e748:             ;
 1545 e748:             baslist_string:
 1546 e748: 43              ldavr r3
 1547 e749: a1 e7 50        brz baslist_stringend
 1548 e74c: 53              incr r3
 1549 e74d: a0 e7 48        br baslist_string
 1550 e750:             
 1551 e750:             baslist_stringend:
 1552 e750: 53              incr r3
 1553 e751: a0 e7 01        BR baslist_loop
 1554 e754:             
 1555 e754:             baslist4:
 1556 e754: 0d 04           LDTI TOKENIZER_VARIABLE
 1557 e756: aa e7 6b        BRNEQ baslist5
 1558 e759: 53              incr r3
 1559 e75a: 43              ldavr r3
 1560 e75b: 0d 41           ldti 'A'
 1561 e75d: b8              ADDT
 1562 e75e: 53              incr r3
 1563 e75f: 53              incr r3
 1564 e760: 04 ff c8        jsr uartout
 1565 e763:             
 1566 e763:             ;    ldavr r3
 1567 e763:             ;    mvarl r7
 1568 e763:             ;    incr r3
 1569 e763:             ;    ldavr r3
 1570 e763:             ;    mvarh r7
 1571 e763:             ;    INCR R3
 1572 e763:             ;    jsr showr7
 1573 e763:             
 1574 e763: 0e 20           ldai ' '
 1575 e765: 04 ff c8        jsr uartout
 1576 e768: a0 e7 01        BR baslist_loop
 1577 e76b:             
 1578 e76b:             baslist5:
 1579 e76b: 0d 05           LDTI TOKENIZER_LET
 1580 e76d: aa e7 7a        BRNEQ baslist6
 1581 e770: 1f e6 7b        MVIW R7,tokl_let
 1582 e773: 04 ff c0        JSR stringout
 1583 e776: 53              INCR R3
 1584 e777: a0 e7 01        BR baslist_loop
 1585 e77a:             
 1586 e77a:             baslist6:
 1587 e77a: 0d 06           LDTI TOKENIZER_PRINT
 1588 e77c: aa e7 89        BRNEQ baslist7
 1589 e77f: 1f e6 80        MVIW R7,tokl_print
 1590 e782: 04 ff c0        jsr STRINGOUT
 1591 e785: 53              INCR R3
 1592 e786: a0 e7 01        BR baslist_loop
 1593 e789:             
 1594 e789:             baslist7:
 1595 e789: 0d 07           LDTI TOKENIZER_IF
 1596 e78b: aa e7 98        BRNEQ baslist8
 1597 e78e: 1f e6 87        MVIW R7,tokl_if
 1598 e791: 04 ff c0        JSR stringout
 1599 e794: 53              INCR R3
 1600 e795: a0 e7 01        BR baslist_loop
 1601 e798:             
 1602 e798:             baslist8:
 1603 e798: 0d 08           LDTI TOKENIZER_THEN
 1604 e79a: aa e7 a7        BRNEQ baslist9
 1605 e79d: 1f e6 8b        MVIW R7,tokl_then
 1606 e7a0: 04 ff c0        JSR stringout
 1607 e7a3: 53              INCR R3
 1608 e7a4: a0 e7 01        BR baslist_loop
 1609 e7a7:             
 1610 e7a7:             baslist9:
 1611 e7a7: 0d 09           LDTI TOKENIZER_ELSE
 1612 e7a9: aa e7 b6        BRNEQ baslist10
 1613 e7ac: 1f e6 91        MVIW R7,tokl_else
 1614 e7af: 04 ff c0        JSR stringout
 1615 e7b2: 53              INCR R3
 1616 e7b3: a0 e7 01        BR baslist_loop
 1617 e7b6:             
 1618 e7b6:             baslist10:
 1619 e7b6: 0d 0a           LDTI TOKENIZER_FOR
 1620 e7b8: aa e7 c5        BRNEQ baslist11
 1621 e7bb: 1f e6 97        MVIW R7,tokl_for
 1622 e7be: 04 ff c0        JSR stringout
 1623 e7c1: 53              INCR R3
 1624 e7c2: a0 e7 01        BR baslist_loop
 1625 e7c5:             
 1626 e7c5:             baslist11:
 1627 e7c5: 0d 0b           LDTI TOKENIZER_TO
 1628 e7c7: aa e7 d4        BRNEQ baslist12
 1629 e7ca: 1f e6 9c        MVIW R7,tokl_to
 1630 e7cd: 04 ff c0        JSR stringout
 1631 e7d0: 53              INCR R3
 1632 e7d1: a0 e7 01        BR baslist_loop
 1633 e7d4:             
 1634 e7d4:             baslist12:
 1635 e7d4: 0d 0c           LDTI TOKENIZER_NEXT
 1636 e7d6: aa e7 e3        BRNEQ baslist13
 1637 e7d9: 1f e6 a0        MVIW R7,tokl_next
 1638 e7dc: 04 ff c0        JSR stringout
 1639 e7df: 53              INCR R3
 1640 e7e0: a0 e7 01        BR baslist_loop
 1641 e7e3:             
 1642 e7e3:             baslist13:
 1643 e7e3: 0d 0d           LDTI TOKENIZER_GOTO
 1644 e7e5: aa e7 f2        BRNEQ baslist14
 1645 e7e8: 1f e6 a6        MVIW R7,tokl_goto
 1646 e7eb: 04 ff c0        JSR stringout
 1647 e7ee: 53              INCR R3
 1648 e7ef: a0 e7 01        BR baslist_loop
 1649 e7f2:             
 1650 e7f2:             baslist14:
 1651 e7f2: 0d 0e           LDTI TOKENIZER_GOSUB
 1652 e7f4: aa e8 01        BRNEQ baslist15
 1653 e7f7: 1f e6 ac        MVIW R7,tokl_gosub
 1654 e7fa: 04 ff c0        JSR stringout
 1655 e7fd: 53              INCR R3
 1656 e7fe: a0 e7 01        BR baslist_loop
 1657 e801:             
 1658 e801:             baslist15:
 1659 e801: 0d 0f           LDTI TOKENIZER_RETURN
 1660 e803: aa e8 10        BRNEQ baslist16
 1661 e806: 1f e6 b3        MVIW R7,tokl_return
 1662 e809: 04 ff c0        JSR stringout
 1663 e80c: 53              INCR R3
 1664 e80d: a0 e7 01        BR baslist_loop
 1665 e810:             
 1666 e810:             baslist16:
 1667 e810: 0d 10           LDTI TOKENIZER_CALL
 1668 e812: aa e8 1f        BRNEQ baslist17
 1669 e815: 1f e6 d1        MVIW R7,tokl_call
 1670 e818: 04 ff c0        JSR stringout
 1671 e81b: 53              INCR R3
 1672 e81c: a0 e7 01        BR baslist_loop
 1673 e81f:             
 1674 e81f:             baslist17:
 1675 e81f: 0d 11           LDTI TOKENIZER_REM
 1676 e821: aa e8 2e        BRNEQ baslist18
 1677 e824: 1f e6 bb        MVIW R7,tokl_rem
 1678 e827: 04 ff c0        JSR stringout
 1679 e82a: 53              INCR R3
 1680 e82b: a0 e7 01        BR baslist_loop
 1681 e82e:             
 1682 e82e:             baslist18:
 1683 e82e: 0d 12           LDTI TOKENIZER_PEEK
 1684 e830: aa e8 3d        BRNEQ baslist19
 1685 e833: 1f e6 c0        MVIW R7,tokl_peek
 1686 e836: 04 ff c0        JSR stringout
 1687 e839: 53              INCR R3
 1688 e83a: a0 e7 01        BR baslist_loop
 1689 e83d:             
 1690 e83d:             baslist19:
 1691 e83d: 0d 13           LDTI TOKENIZER_POKE
 1692 e83f: aa e8 4c        BRNEQ baslist20
 1693 e842: 1f e6 c6        MVIW R7,tokl_poke
 1694 e845: 04 ff c0        JSR stringout
 1695 e848: 53              INCR R3
 1696 e849: a0 e7 01        BR baslist_loop
 1697 e84c:             
 1698 e84c:             baslist20:
 1699 e84c: 0d 14           LDTI TOKENIZER_END
 1700 e84e: aa e8 5b        BRNEQ baslist20a
 1701 e851: 1f e6 cc        MVIW R7,tokl_end
 1702 e854: 04 ff c0        JSR stringout
 1703 e857: 53              INCR R3
 1704 e858: a0 e7 01        BR baslist_loop
 1705 e85b:             
 1706 e85b:             baslist20a:
 1707 e85b: 0d 2d           LDTI TOKENIZER_ON
 1708 e85d: aa e8 6a        BRNEQ baslist20b
 1709 e860: 1f e6 e9        MVIW R7,tokl_on
 1710 e863: 04 ff c0        JSR stringout
 1711 e866: 53              INCR R3
 1712 e867: a0 e7 01        BR baslist_loop
 1713 e86a:             
 1714 e86a:             baslist20b:
 1715 e86a: 0d 2e           LDTI TOKENIZER_OFF
 1716 e86c: aa e8 79        BRNEQ baslist21
 1717 e86f: 1f e6 ed        MVIW R7,tokl_off
 1718 e872: 04 ff c0        JSR stringout
 1719 e875: 53              INCR R3
 1720 e876: a0 e7 01        BR baslist_loop
 1721 e879:             
 1722 e879:             baslist21:
 1723 e879: 0d 15           LDTI TOKENIZER_COMMA
 1724 e87b: aa e8 8c        BRNEQ baslist22
 1725 e87e: 0e 2c           ldai ','
 1726 e880: 04 ff c8        jsr uartout
 1727 e883: 0e 20           ldai ' '
 1728 e885: 04 ff c8        jsr uartout
 1729 e888: 53              INCR R3
 1730 e889: a0 e7 01        BR baslist_loop
 1731 e88c:             
 1732 e88c:             baslist22:
 1733 e88c: 0d 16           LDTI TOKENIZER_SEMICOLON
 1734 e88e: aa e8 9f        BRNEQ baslist23
 1735 e891: 0e 3b           ldai ';'
 1736 e893: 04 ff c8        jsr uartout
 1737 e896: 0e 20           ldai ' '
 1738 e898: 04 ff c8        jsr uartout
 1739 e89b: 53              INCR R3
 1740 e89c: a0 e7 01        BR baslist_loop
 1741 e89f:             
 1742 e89f:             baslist23:
 1743 e89f: 0d 17           LDTI TOKENIZER_PLUS
 1744 e8a1: aa e8 b2        BRNEQ baslist24
 1745 e8a4: 0e 2b           ldai '+'
 1746 e8a6: 04 ff c8        jsr uartout
 1747 e8a9: 0e 20           ldai ' '
 1748 e8ab: 04 ff c8        jsr uartout
 1749 e8ae: 53              INCR R3
 1750 e8af: a0 e7 01        BR baslist_loop
 1751 e8b2:             
 1752 e8b2:             baslist24:
 1753 e8b2: 0d 18           LDTI TOKENIZER_MINUS
 1754 e8b4: aa e8 c5        BRNEQ baslist25
 1755 e8b7: 0e 2d           ldai '-'
 1756 e8b9: 04 ff c8        jsr uartout
 1757 e8bc: 0e 20           ldai ' '
 1758 e8be: 04 ff c8        jsr uartout
 1759 e8c1: 53              INCR R3
 1760 e8c2: a0 e7 01        BR baslist_loop
 1761 e8c5:             
 1762 e8c5:             baslist25:
 1763 e8c5: 0d 19           LDTI TOKENIZER_AND
 1764 e8c7: aa e8 d8        BRNEQ baslist26
 1765 e8ca: 0e 26           ldai '&'
 1766 e8cc: 04 ff c8        jsr uartout
 1767 e8cf: 0e 20           ldai ' '
 1768 e8d1: 04 ff c8        jsr uartout
 1769 e8d4: 53              INCR R3
 1770 e8d5: a0 e7 01        BR baslist_loop
 1771 e8d8:             
 1772 e8d8:             baslist26:
 1773 e8d8: 0d 1a           LDTI TOKENIZER_OR
 1774 e8da: aa e8 eb        BRNEQ baslist27
 1775 e8dd: 0e 7c           ldai '|'
 1776 e8df: 04 ff c8        jsr uartout
 1777 e8e2: 0e 20           ldai ' '
 1778 e8e4: 04 ff c8        jsr uartout
 1779 e8e7: 53              INCR R3
 1780 e8e8: a0 e7 01        BR baslist_loop
 1781 e8eb:             
 1782 e8eb:             baslist27:
 1783 e8eb: 0d 1b           LDTI TOKENIZER_ASTR
 1784 e8ed: aa e8 fe        BRNEQ baslist28
 1785 e8f0: 0e 2a           ldai '*'
 1786 e8f2: 04 ff c8        jsr uartout
 1787 e8f5: 0e 20           ldai ' '
 1788 e8f7: 04 ff c8        jsr uartout
 1789 e8fa: 53              INCR R3
 1790 e8fb: a0 e7 01        BR baslist_loop
 1791 e8fe:             
 1792 e8fe:             baslist28:
 1793 e8fe: 0d 1c           LDTI TOKENIZER_SLASH
 1794 e900: aa e9 11        BRNEQ baslist29
 1795 e903: 0e 2f           ldai '/'
 1796 e905: 04 ff c8        jsr uartout
 1797 e908: 0e 20           ldai ' '
 1798 e90a: 04 ff c8        jsr uartout
 1799 e90d: 53              INCR R3
 1800 e90e: a0 e7 01        BR baslist_loop
 1801 e911:             
 1802 e911:             baslist29:
 1803 e911: 0d 1d           LDTI TOKENIZER_MOD
 1804 e913: aa e9 24        BRNEQ baslist30
 1805 e916: 0e 25           ldai '%'
 1806 e918: 04 ff c8        jsr uartout
 1807 e91b: 0e 20           ldai ' '
 1808 e91d: 04 ff c8        jsr uartout
 1809 e920: 53              INCR R3
 1810 e921: a0 e7 01        BR baslist_loop
 1811 e924:             
 1812 e924:             baslist30:
 1813 e924: 0d 1e           LDTI TOKENIZER_HASH
 1814 e926: aa e9 37        BRNEQ baslist31
 1815 e929: 0e 23           ldai '#'
 1816 e92b: 04 ff c8        jsr uartout
 1817 e92e: 0e 20           ldai ' '
 1818 e930: 04 ff c8        jsr uartout
 1819 e933: 53              INCR R3
 1820 e934: a0 e7 01        BR baslist_loop
 1821 e937:             
 1822 e937:             baslist31:
 1823 e937: 0d 1f           LDTI TOKENIZER_LEFTP
 1824 e939: aa e9 4a        BRNEQ baslist32
 1825 e93c: 0e 28           ldai '()'
 1826 e93e: 04 ff c8        jsr uartout
 1827 e941: 0e 20           ldai ' '
 1828 e943: 04 ff c8        jsr uartout
 1829 e946: 53              INCR R3
 1830 e947: a0 e7 01        BR baslist_loop
 1831 e94a:             
 1832 e94a:             baslist32:
 1833 e94a: 0d 20           LDTI TOKENIZER_RIGHTP
 1834 e94c: aa e9 5d        BRNEQ baslist33
 1835 e94f: 0e 29           ldai ')'
 1836 e951: 04 ff c8        jsr uartout
 1837 e954: 0e 20           ldai ' '
 1838 e956: 04 ff c8        jsr uartout
 1839 e959: 53              INCR R3
 1840 e95a: a0 e7 01        BR baslist_loop
 1841 e95d:             
 1842 e95d:             baslist33:
 1843 e95d: 0d 21           LDTI TOKENIZER_LT
 1844 e95f: aa e9 70        BRNEQ baslist34
 1845 e962: 0e 3c           ldai '<'
 1846 e964: 04 ff c8        jsr uartout
 1847 e967: 0e 20           ldai ' '
 1848 e969: 04 ff c8        jsr uartout
 1849 e96c: 53              INCR R3
 1850 e96d: a0 e7 01        BR baslist_loop
 1851 e970:             
 1852 e970:             baslist34:
 1853 e970: 0d 22           LDTI TOKENIZER_GT
 1854 e972: aa e9 83        BRNEQ baslist35
 1855 e975: 0e 3e           ldai '>'
 1856 e977: 04 ff c8        jsr uartout
 1857 e97a: 0e 20           ldai ' '
 1858 e97c: 04 ff c8        jsr uartout
 1859 e97f: 53              INCR R3
 1860 e980: a0 e7 01        BR baslist_loop
 1861 e983:             
 1862 e983:             baslist35:
 1863 e983: 0d 23           LDTI TOKENIZER_EQ
 1864 e985: aa e9 96        BRNEQ baslist36
 1865 e988: 0e 3d           ldai '='
 1866 e98a: 04 ff c8        jsr uartout
 1867 e98d: 0e 20           ldai ' '
 1868 e98f: 04 ff c8        jsr uartout
 1869 e992: 53              INCR R3
 1870 e993: a0 e7 01        BR baslist_loop
 1871 e996:             
 1872 e996:             baslist36:
 1873 e996: 0d 24           LDTI TOKENIZER_CR
 1874 e998: aa e9 a5        BRNEQ baslist37
 1875 e99b: 1f ef b6        mviw R7,CRLF
 1876 e99e: 04 ff c0        jsr stringout
 1877 e9a1: 53              INCR R3
 1878 e9a2: a0 e7 01        BR baslist_loop
 1879 e9a5:             
 1880 e9a5:             baslist37:
 1881 e9a5: 0d 25           LDTI TOKENIZER_LINENUM
 1882 e9a7: aa e9 be        BRNEQ baslist38
 1883 e9aa: 53              incr r3
 1884 e9ab: 43              ldavr r3
 1885 e9ac: 37              mvarl r7
 1886 e9ad: 53              incr r3
 1887 e9ae: 43              ldavr r3
 1888 e9af: 3f              mvarh r7
 1889 e9b0: 53              INCR R3
 1890 e9b1: 53              incr r3         ;skip over line length
 1891 e9b2: 53              incr r3
 1892 e9b3: 04 e6 17        jsr exe_itoa
 1893 e9b6:                 ;jsr showr7
 1894 e9b6: 0e 20           ldai ' '
 1895 e9b8: 04 ff c8        jsr uartout
 1896 e9bb: a0 e7 01        BR baslist_loop
 1897 e9be:             
 1898 e9be:             baslist38:
 1899 e9be: 0d 2a           LDTI TOKENIZER_INPUT
 1900 e9c0: aa e9 cd        BRNEQ baslist39
 1901 e9c3: 1f e6 d7        MVIW R7,tokl_input
 1902 e9c6: 04 ff c0        JSR stringout
 1903 e9c9: 53              INCR R3
 1904 e9ca: a0 e7 01        BR baslist_loop
 1905 e9cd:             
 1906 e9cd:             baslist39:
 1907 e9cd: 0d 2b           LDTI TOKENIZER_INP
 1908 e9cf: aa e9 dc        BRNEQ baslist40
 1909 e9d2: 1f e6 de        MVIW R7,tokl_inp
 1910 e9d5: 04 ff c0        JSR stringout
 1911 e9d8: 53              INCR R3
 1912 e9d9: a0 e7 01        BR baslist_loop
 1913 e9dc:             
 1914 e9dc:             baslist40:
 1915 e9dc: 0d 2c           LDTI TOKENIZER_OUTP
 1916 e9de: aa e9 eb        BRNEQ baslist41
 1917 e9e1: 1f e6 e3        MVIW R7,tokl_outp
 1918 e9e4: 04 ff c0        JSR stringout
 1919 e9e7: 53              INCR R3
 1920 e9e8: a0 e7 01        BR baslist_loop
 1921 e9eb:             
 1922 e9eb:             baslist41:
 1923 e9eb: 1f e6 f2        MVIW R7,tokl_error
 1924 e9ee: 04 ff c0        JSR stringout
 1925 e9f1: 04 ff cc        JSR showaddr
 1926 e9f4: a0 e9 f7        BR baslist_done
 1927 e9f7:             ;
 1928 e9f7:             ; any cleanup
 1929 e9f7:             ;
 1930 e9f7:             baslist_done:
 1931 e9f7: 08 30           popr r3
 1932 e9f9: 05              ret
 1933 e9fa:             
 1934 e9fa:             ;
 1935 e9fa:             ; BASIC Interpreter Parser
 1936 e9fa:             ;
 1937 e9fa:             parse_keywords:
 1938 e9fa: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1939 e9ff: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1940 ea06: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1941 ea0a: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1942 ea10: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1943 ea16: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1944 ea1b: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1945 ea1f: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1946 ea25: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1947 ea2b: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1948 ea32: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1949 ea3a: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1950 ea40: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1951 ea45: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1952 ea4b: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1953 ea51: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1954 ea56: 4c 49 53 54 
            00 26             DB "list",0,TOKENIZER_LIST
 1955 ea5c: 52 55 4e 00 
            27                DB "run",0,TOKENIZER_RUN
 1956 ea61: 4e 45 57 00 
            28                DB "new",0,TOKENIZER_NEW
 1957 ea66: 45 58 49 54 
            00 29             DB "exit",0,TOKENIZER_EXIT
 1958 ea6c: 49 4e 50 55 
            54 00 2a          DB "input",0,TOKENIZER_INPUT
 1959 ea73: 49 4e 50 00 
            2b                DB "inp",0,TOKENIZER_INP
 1960 ea78: 4f 55 54 50 
            00 2c             DB "outp",0,TOKENIZER_OUTP
 1961 ea7e: 4f 4e 00 2d       DB "on",0,TOKENIZER_ON
 1962 ea82: 4f 46 46 00 
            2e                DB "off",0,TOKENIZER_OFF
 1963 ea87: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1964 ea8a:             
 1965 ea8a:             ;
 1966 ea8a:             ; int singlechar (void)
 1967 ea8a:             ;
 1968 ea8a:             ; return TOKEN result in accumulator
 1969 ea8a:             ;
 1970 ea8a:             ; ready for testing
 1971 ea8a:             ;
 1972 ea8a:             parse_singlechar:
 1973 ea8a:             ;
 1974 ea8a: 07 03           pushr r3
 1975 ea8c: f3 02 02        LDR r3,bas_txtptr
 1976 ea8f: 43              ldavr r3
 1977 ea90: 08 30           popr r3
 1978 ea92:             ;
 1979 ea92: 0d 0a           ldti 0ah
 1980 ea94: aa ea 9a        brneq parsechar1
 1981 ea97: 0e 24           ldai TOKENIZER_CR
 1982 ea99: 05              ret
 1983 ea9a:             parsechar1:
 1984 ea9a: 0d 2c           ldti ','
 1985 ea9c: aa ea a2        brneq parsechar2
 1986 ea9f: 0e 15           ldai TOKENIZER_COMMA
 1987 eaa1: 05              ret
 1988 eaa2:             parsechar2:
 1989 eaa2: 0d 3b           ldti ';'
 1990 eaa4: aa ea aa        brneq parsechar3
 1991 eaa7: 0e 16           ldai TOKENIZER_SEMICOLON
 1992 eaa9: 05              ret
 1993 eaaa:             parsechar3:
 1994 eaaa: 0d 2b           ldti '+'
 1995 eaac: aa ea b2        brneq parsechar4
 1996 eaaf: 0e 17           ldai TOKENIZER_PLUS
 1997 eab1: 05              ret
 1998 eab2:             parsechar4:
 1999 eab2: 0d 2d           ldti '-'
 2000 eab4: aa ea ba        brneq parsechar5
 2001 eab7: 0e 18           ldai TOKENIZER_MINUS
 2002 eab9: 05              ret
 2003 eaba:             parsechar5:
 2004 eaba: 0d 26           ldti '&'
 2005 eabc: aa ea c2        brneq parsechar6
 2006 eabf: 0e 19           ldai TOKENIZER_AND
 2007 eac1: 05              ret
 2008 eac2:             parsechar6:
 2009 eac2: 0d 7c           ldti '|'
 2010 eac4: aa ea ca        brneq parsechar7
 2011 eac7: 0e 1a           ldai TOKENIZER_OR
 2012 eac9: 05              ret
 2013 eaca:             parsechar7:
 2014 eaca: 0d 2a           ldti '*'
 2015 eacc: aa ea d2        brneq parsechar7A
 2016 eacf: 0e 1b           ldai TOKENIZER_ASTR
 2017 ead1: 05              ret
 2018 ead2:             parsechar7A:
 2019 ead2: 0d 2f           ldti '/'
 2020 ead4: aa ea da        brneq parsechar8
 2021 ead7: 0e 1c           ldai TOKENIZER_SLASH
 2022 ead9: 05              ret
 2023 eada:             parsechar8:
 2024 eada: 0d 25           ldti '%'
 2025 eadc: aa ea e2        brneq parsechar9
 2026 eadf: 0e 1d           ldai TOKENIZER_MOD
 2027 eae1: 05              ret
 2028 eae2:             parsechar9:
 2029 eae2: 0d 28           ldti '('
 2030 eae4: aa ea ea        brneq parsechar10
 2031 eae7: 0e 1f           ldai TOKENIZER_LEFTP
 2032 eae9: 05              ret
 2033 eaea:             parsechar10:
 2034 eaea: 0d 23           ldti '#'
 2035 eaec: aa ea f2        brneq parsechar11
 2036 eaef: 0e 1e           ldai TOKENIZER_HASH
 2037 eaf1: 05              ret
 2038 eaf2:             parsechar11:
 2039 eaf2: 0d 29           ldti ')'
 2040 eaf4: aa ea fa        brneq parsechar12
 2041 eaf7: 0e 20           ldai TOKENIZER_RIGHTP
 2042 eaf9: 05              ret
 2043 eafa:             parsechar12:
 2044 eafa: 0d 3c           ldti '<'
 2045 eafc: aa eb 02        brneq parsechar13
 2046 eaff: 0e 21           ldai TOKENIZER_LT
 2047 eb01: 05              ret
 2048 eb02:             parsechar13:
 2049 eb02: 0d 3e           ldti '>'
 2050 eb04: aa eb 0a        brneq parsechar14
 2051 eb07: 0e 22           ldai TOKENIZER_GT
 2052 eb09: 05              ret
 2053 eb0a:             parsechar14:
 2054 eb0a: 0d 3d           ldti '='
 2055 eb0c: aa eb 12        brneq parsechar15
 2056 eb0f: 0e 23           ldai TOKENIZER_EQ
 2057 eb11: 05              ret
 2058 eb12:             parsechar15:
 2059 eb12: 0e 00           ldai 0
 2060 eb14: 05              ret
 2061 eb15:             
 2062 eb15:             ;
 2063 eb15:             ; int get_next_token(void)
 2064 eb15:             ;
 2065 eb15:             ; under development fix ptr nextptr
 2066 eb15:             
 2067 eb15:             parse_get_next_tok:
 2068 eb15: 07 03           pushr r3
 2069 eb17: f3 02 02        LDR R3,bas_txtptr
 2070 eb1a:             ;
 2071 eb1a:             ; is digit
 2072 eb1a:             ;
 2073 eb1a:             ; chcek for number
 2074 eb1a:             ;
 2075 eb1a:             parse_gnt1:
 2076 eb1a: 43              ldavr r3
 2077 eb1b:             ;    ldti '-'
 2078 eb1b:             ;    brneq parse_gnt1_chkpos
 2079 eb1b:             ;    incr r3
 2080 eb1b:             ;    ldavr r3
 2081 eb1b:             ;    jsr parse_isdigit
 2082 eb1b:             ;    brz parse_gnt1_notneg
 2083 eb1b:             ;    br parse_gnt1
 2084 eb1b:             
 2085 eb1b:             parse_gnt1_chkpos:
 2086 eb1b: 04 ef 46        jsr parse_isdigit
 2087 eb1e: a1 eb 31        brz parse_gnt2
 2088 eb21:             
 2089 eb21:             parse_gnt1loop:
 2090 eb21: 53              incr R3
 2091 eb22: 43              ldavr r3
 2092 eb23: 04 ef 46        jsr parse_isdigit
 2093 eb26: a2 eb 21        brnz parse_gnt1loop
 2094 eb29: eb 02 04        STR r3,bas_nxtptr
 2095 eb2c: 0e 02           ldai TOKENIZER_NUMBER
 2096 eb2e: 08 30           popr r3
 2097 eb30: 05              ret
 2098 eb31:             
 2099 eb31:             ;parse_gnt1_notneg:
 2100 eb31:             ;    decr r3
 2101 eb31:             
 2102 eb31:             ;
 2103 eb31:             ; singlechar
 2104 eb31:             ;
 2105 eb31:             parse_gnt2:
 2106 eb31: 43             ldavr r3
 2107 eb32: 04 ea 8a       jsr parse_singlechar
 2108 eb35: a1 eb 3f       BRZ parse_gnt3
 2109 eb38: 53             incr r3
 2110 eb39: eb 02 04       STR r3,bas_nxtptr
 2111 eb3c: 08 30          popr r3
 2112 eb3e: 05             ret
 2113 eb3f:             ;
 2114 eb3f:             ; quote
 2115 eb3f:             ;
 2116 eb3f:             parse_gnt3:
 2117 eb3f: 43              ldavr R3
 2118 eb40: 0d 22           ldti '"'
 2119 eb42: aa eb 55        brneq parse_gnt4
 2120 eb45:             parse_gnt3loop:
 2121 eb45: 53              incr r3
 2122 eb46: 43              ldavr R3
 2123 eb47: 0d 22           ldti '"'
 2124 eb49: aa eb 45        brneq parse_gnt3loop
 2125 eb4c: 53              incr r3
 2126 eb4d: eb 02 04        STR r3,bas_nxtptr
 2127 eb50: 0e 03           ldai TOKENIZER_STRING
 2128 eb52: 08 30           popr r3
 2129 eb54: 05              ret
 2130 eb55:             ;
 2131 eb55:             parse_gnt4:
 2132 eb55:             ;
 2133 eb55:             ; keyword search
 2134 eb55:             ;
 2135 eb55: 07 04           pushr r4
 2136 eb57: 1c e9 fa        mviw r4,parse_keywords
 2137 eb5a:             top:
 2138 eb5a: 44              ldavr r4
 2139 eb5b: f3 02 02        LDR r3,bas_txtptr
 2140 eb5e: a1 eb 82        brz nokeyowrdsfound
 2141 eb61:             pcmploop:
 2142 eb61: 44              ldavr r4
 2143 eb62: a1 eb 78        brz found
 2144 eb65: 0b              MVAT
 2145 eb66: 43              ldavr r3
 2146 eb67: aa eb 6f        brneq skiptoend
 2147 eb6a: 54              incr r4
 2148 eb6b: 53              incr r3
 2149 eb6c: a0 eb 61        br pcmploop
 2150 eb6f:             
 2151 eb6f:             skiptoend:
 2152 eb6f:             ;  skip to end of string and skip over token
 2153 eb6f:             skiploop:
 2154 eb6f: 44              ldavr r4
 2155 eb70: 54              incr r4
 2156 eb71: a2 eb 6f        brnz skiploop
 2157 eb74: 54              incr r4
 2158 eb75: a0 eb 5a        br top
 2159 eb78:             
 2160 eb78:             found:
 2161 eb78: eb 02 04        str r3,bas_nxtptr
 2162 eb7b: 54              incr r4
 2163 eb7c: 44              ldavr r4
 2164 eb7d: 08 40           popr r4
 2165 eb7f: 08 30           popr r3
 2166 eb81: 05              ret
 2167 eb82:             
 2168 eb82:             nokeyowrdsfound:
 2169 eb82: 08 40           popr r4
 2170 eb84:             ;
 2171 eb84:             ;  check for variables
 2172 eb84:             ;
 2173 eb84: 43              ldavr r3
 2174 eb85: 0d 41           ldti 'A'
 2175 eb87: a7 eb 98        BRLT parse_gnt_error
 2176 eb8a: 0d 5a           ldti 'Z'
 2177 eb8c: a9 eb 98        BRGT parse_gnt_error
 2178 eb8f: 53              INCR r3
 2179 eb90: eb 02 04        str r3,bas_nxtptr
 2180 eb93: 0e 04           LDAI tokenizer_variable
 2181 eb95: 08 30           popr r3
 2182 eb97: 05              RET
 2183 eb98:             
 2184 eb98:             parse_gnt_error:
 2185 eb98:             ;    halt
 2186 eb98: 0e 00           ldai tokenizer_error
 2187 eb9a: 08 30           popr r3
 2188 eb9c: 05              ret
 2189 eb9d:             
 2190 eb9d:             ;
 2191 eb9d:             ; void TOKENIZER_GOTO (char * program)
 2192 eb9d:             ;
 2193 eb9d:             ; under development, may not be needed
 2194 eb9d:             ;
 2195 eb9d:             ;parse_goto:
 2196 eb9d:             ;    str r3,bas_txtptr
 2197 eb9d:             ;    jsr parse_get_next_tok
 2198 eb9d:             ;    sta bas_currenttoken
 2199 eb9d:             ;    ret
 2200 eb9d:             
 2201 eb9d:             ;
 2202 eb9d:             ; void tokenizer_init(int ptr)
 2203 eb9d:             ;
 2204 eb9d:             ; paramater ptr : R7 Points to text input line
 2205 eb9d:             ;
 2206 eb9d:             ; under development
 2207 eb9d:             ;
 2208 eb9d:             parse_init:
 2209 eb9d:             
 2210 eb9d: 07 03           pushr r3
 2211 eb9f: ef 02 02        STR R7,bas_txtptr
 2212 eba2: 1b 04 00        MVIW r3,parse_token_buffer
 2213 eba5: eb 02 06        STR  R3,bas_tokptr
 2214 eba8: 1b 00 00        mviw r3,0
 2215 ebab: eb 02 08        str r3,bas_tokcounter
 2216 ebae: 04 eb 15        jsr parse_get_next_tok
 2217 ebb1: e5 02 0a        sta bas_currenttoken
 2218 ebb4: 08 30           popr r3
 2219 ebb6: 05              ret
 2220 ebb7:             
 2221 ebb7:             ;
 2222 ebb7:             ; int tokenizer_token(void)
 2223 ebb7:             :
 2224 ebb7:             parse_token:
 2225 ebb7: e4 02 0a        lda bas_currenttoken
 2226 ebba: 05              ret
 2227 ebbb:             
 2228 ebbb:             ;
 2229 ebbb:             ; void tokenizer_next(void) parser version
 2230 ebbb:             ;
 2231 ebbb:             parse_next:
 2232 ebbb: 04 ec 75        jsr parse_finished
 2233 ebbe: a1 eb c2        brz parse_next1
 2234 ebc1: 05              ret
 2235 ebc2:             
 2236 ebc2:             parse_next1:
 2237 ebc2: 07 03           pushr r3
 2238 ebc4: f3 02 04        ldr r3,bas_nxtptr
 2239 ebc7: eb 02 02        str r3,bas_txtptr
 2240 ebca:             
 2241 ebca:             parse_next1loop:
 2242 ebca: 43              ldavr r3
 2243 ebcb: 0d 20           ldti ' '
 2244 ebcd: aa eb d4        brneq parse_next2
 2245 ebd0: 53              incr r3
 2246 ebd1: a0 eb ca        br parse_next1loop
 2247 ebd4:             
 2248 ebd4:             
 2249 ebd4:             parse_next2:
 2250 ebd4: eb 02 02        str r3,bas_txtptr
 2251 ebd7: 04 eb 15        jsr parse_get_next_tok
 2252 ebda: e5 02 0a        sta bas_currenttoken
 2253 ebdd:             
 2254 ebdd: 0d 11           ldti TOKENIZER_REM
 2255 ebdf: a8 eb e5        breq parse_next3
 2256 ebe2: 08 30           popr r3
 2257 ebe4: 05              ret
 2258 ebe5:             
 2259 ebe5:             ;
 2260 ebe5:             ; this needs to be fixed
 2261 ebe5:             ; if rem return to parsel line then copy into token buffer
 2262 ebe5:             ;
 2263 ebe5:             parse_next3:
 2264 ebe5: 04 ec 75        JSR parse_finished
 2265 ebe8: a2 eb f5        BRNZ parse_nextdone
 2266 ebeb: 43              ldavr r3
 2267 ebec: 0d 0a           ldti  0ah
 2268 ebee: a8 eb f5        breq parse_nextdone
 2269 ebf1: 53              incr r3
 2270 ebf2: a0 eb e5        br parse_next3
 2271 ebf5:             
 2272 ebf5:             parse_nextdone:
 2273 ebf5: 43              ldavr r3
 2274 ebf6: 0d 0a           ldti  0ah
 2275 ebf8: aa eb fc        brneq parse_nextdone2
 2276 ebfb: 53              incr r3
 2277 ebfc:             
 2278 ebfc:             parse_nextdone2:
 2279 ebfc: eb 02 04        str r3,bas_nxtptr
 2280 ebff: 04 eb bb        jsr parse_next
 2281 ec02: 08 30           popr r3
 2282 ec04: 05              ret
 2283 ec05:             
 2284 ec05:             ;
 2285 ec05:             ; VARIABLE_TYPE tokenizer_num(void)
 2286 ec05:             ;
 2287 ec05:             ; Hack for now input characters are ascii hex format HHHH
 2288 ec05:             ;
 2289 ec05:             ; value returned in R7
 2290 ec05:             ;
 2291 ec05:             ; Should this advance the line ptr?
 2292 ec05:             ;
 2293 ec05:             
 2294 ec05:             parse_num:
 2295 ec05: 07 03           pushr r3
 2296 ec07: 07 04           pushr r4
 2297 ec09: 07 05           pushr r5
 2298 ec0b: 07 06           pushr r6
 2299 ec0d: 1e 00 00        mviw r6,0           ;accumlate val in r6
 2300 ec10: f3 02 02        LDR r3,bas_txtptr
 2301 ec13: 1c 00 00        MVIW R4,0000h
 2302 ec16:             ;    STR R4,bas_negflag
 2303 ec16: 43              LDAVR R3
 2304 ec17:             ;  ldti '-'
 2305 ec17:             ;    brneq parse_num_pos
 2306 ec17:             ;    MVIW R4,0ffffh
 2307 ec17:             ;    STR R4,bas_negflag
 2308 ec17:             ;    incr r3
 2309 ec17:             
 2310 ec17:             parse_num_pos:
 2311 ec17: 04 ec 45        jsr parse_num_char
 2312 ec1a:             ;   jsr SHOWBYTEA
 2313 ec1a: 36              mvarl r6
 2314 ec1b:             parse_num_loop:
 2315 ec1b: 04 ec 45        jsr parse_num_char
 2316 ec1e:             ;   jsr showbytea
 2317 ec1e: 09              push
 2318 ec1f: 0d ff           ldti 0FFH
 2319 ec21: a8 ec 39        breq parse_num_done
 2320 ec24:             
 2321 ec24: 0f 56           movrr r6,r5
 2322 ec26: 1c 00 0a        mviw r4,0ah
 2323 ec29: 04 ee b8        jsr parse_mul16
 2324 ec2c:             ;    jsr showr7
 2325 ec2c: 0a              pop
 2326 ec2d: 1e 00 00        mviw r6,0
 2327 ec30: 36              mvarl r6
 2328 ec31: 04 ee f3        jsr parse_add16
 2329 ec34: 0f 67           movrr r7,r6
 2330 ec36:             ;    jsr showr7
 2331 ec36: a0 ec 1b        br parse_num_loop
 2332 ec39:             
 2333 ec39:             parse_num_done:
 2334 ec39: 0a              pop
 2335 ec3a: 0f 76           movrr r6,r7
 2336 ec3c:             ;    ldr r4,bas_negflag
 2337 ec3c:             ;    mvrla r4
 2338 ec3c:             ;    brz parse_num_done1
 2339 ec3c:             ;    jsr parse_neg
 2340 ec3c:             parse_num_done1:
 2341 ec3c: 08 60           popr r6
 2342 ec3e: 08 50           popr r5
 2343 ec40: 08 40           popr r4
 2344 ec42: 08 30           popr r3
 2345 ec44:             
 2346 ec44:             ;    jsr showr7
 2347 ec44: 05              ret
 2348 ec45:             
 2349 ec45:             parse_num_char:
 2350 ec45: 43              LDAVR R3
 2351 ec46: 04 ef 46        JSR parse_isdigit
 2352 ec49: a2 ec 4f        BRNZ parse_num_char1
 2353 ec4c: 0e ff           ldai 0ffh
 2354 ec4e: 05              ret
 2355 ec4f:             parse_num_char1:
 2356 ec4f: 43              ldavr r3
 2357 ec50: b1 30           SUBI '0'
 2358 ec52: 53              incr r3
 2359 ec53: 05              RET
 2360 ec54:             
 2361 ec54:             ;
 2362 ec54:             ; add error checking
 2363 ec54:             ;
 2364 ec54:             ; return hex nibble in accumulator
 2365 ec54:             ;
 2366 ec54:             parse_getnibble:
 2367 ec54: 43                LDAVR R3
 2368 ec55: 53                incr r3
 2369 ec56: 0d 39             LDTI '9'
 2370 ec58: a9 ec 5e          BRGT parse_af
 2371 ec5b: b1 30             SUBI '0'
 2372 ec5d: 05                RET
 2373 ec5e:             parse_af:
 2374 ec5e: 04 ff d0          JSR toupper
 2375 ec61: b1 41             SUBI 'A'
 2376 ec63: b0 0a             ADDI 10
 2377 ec65: 05                RET
 2378 ec66:             ;
 2379 ec66:             ; void tokenizer_string(char *dest, int len)
 2380 ec66:             ;
 2381 ec66:             ; not used, in line parse_line
 2382 ec66:             ;
 2383 ec66:             parse_string:
 2384 ec66: 04 eb b7        JSR parse_token
 2385 ec69: 0d 03           LDTI TOKENIZER_STRING
 2386 ec6b: a8 ec 6f        BREQ parse_string1
 2387 ec6e: 05              ret
 2388 ec6f:             
 2389 ec6f:             parse_string1:
 2390 ec6f: 07 03           pushr r3
 2391 ec71: f3 02 02        LDR r3,bas_txtptr
 2392 ec74: 43              LDAVR R3
 2393 ec75:             
 2394 ec75:             
 2395 ec75:             ;
 2396 ec75:             ; void tokenizer_error_print(void)
 2397 ec75:             ;
 2398 ec75:             ; fix
 2399 ec75:             ;
 2400 ec75:             ;parse_error_print:
 2401 ec75:             ;    halt
 2402 ec75:             
 2403 ec75:             ;
 2404 ec75:             ; int tokenizer_finished(void)
 2405 ec75:             ;
 2406 ec75:             parse_finished:
 2407 ec75: 07 03           pushr r3
 2408 ec77: f3 02 02        LDR r3,bas_txtptr
 2409 ec7a: 43              ldavr r3
 2410 ec7b: a1 ec 90        brz parse_finished_yes
 2411 ec7e:             ;    ldti 0ah
 2412 ec7e:             ;    breq parse_finished_yes
 2413 ec7e:             ;    ldti 0dh
 2414 ec7e:             ;    breq parse_finished_yes
 2415 ec7e: 0d 01           ldti TOKENIZER_EOF
 2416 ec80: a8 ec 90        breq parse_finished_yes
 2417 ec83: e4 02 0a        lda bas_currenttoken
 2418 ec86: 0d 01           ldti TOKENIZER_EOF
 2419 ec88: a8 ec 90        breq parse_finished_yes
 2420 ec8b: 08 30           popr r3
 2421 ec8d: 0e 00           ldai 0
 2422 ec8f: 05              ret
 2423 ec90:             parse_finished_yes:
 2424 ec90: 0e 01           ldai 1
 2425 ec92: 08 30           popr r3
 2426 ec94: 05              ret
 2427 ec95:             
 2428 ec95:             ;
 2429 ec95:             ; int tokenizer_variable_num(void)
 2430 ec95:             ;
 2431 ec95:             parse_variable_num:
 2432 ec95: 07 03             pushr r3
 2433 ec97: f3 02 02          LDR r3,bas_txtptr
 2434 ec9a: 43                ldavr r3
 2435 ec9b: b1 41             subi 'A'
 2436 ec9d: 37                mvarl r7
 2437 ec9e: 0e 00             ldai 0
 2438 eca0: 3f                mvarh r7
 2439 eca1: 08 30             popr r3
 2440 eca3: 05                ret
 2441 eca4:             
 2442 eca4:             ;
 2443 eca4:             ; char *const tokenizer_pos(void)
 2444 eca4:             ;
 2445 eca4:             ; probably not used
 2446 eca4:             parse_pos:
 2447 eca4:             
 2448 eca4:             ;not used old
 2449 eca4:             ; char *tokenize(char *program)
 2450 eca4:             ;
 2451 eca4:             ; parse:
 2452 eca4:             
 2453 eca4:             ;
 2454 eca4:             ; char *tokenizeLine(char *line)
 2455 eca4:             ;
 2456 eca4:             ; assume input text string in parse_input_line
 2457 eca4:             ;
 2458 eca4:             
 2459 eca4:             parse_line:
 2460 eca4: 04 eb 9d        JSR PARSE_INIT
 2461 eca7:             
 2462 eca7: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2463 ecaa: eb 02 08        str r3,bas_tokcounter
 2464 ecad: 1b 04 00        MVIW R3,parse_token_buffer
 2465 ecb0:             
 2466 ecb0: 07 03           pushr r3
 2467 ecb2: f3 02 02        LDR r3,bas_txtptr
 2468 ecb5: 43              ldavr r3
 2469 ecb6: 04 ef 46        jsr parse_isdigit
 2470 ecb9: 08 30           popr r3
 2471 ecbb: 0d 01           ldti 1
 2472 ecbd: a8 ed 04        breq parse_code
 2473 ecc0: 04 eb 15        jsr parse_get_next_tok
 2474 ecc3:             
 2475 ecc3:             parse_line_list:
 2476 ecc3: 0d 26           ldti tokenizer_list
 2477 ecc5: aa ec d1        brneq parse_line_exit
 2478 ecc8: f7 02 0c        ldr r7,bas_tokenbuffer
 2479 eccb: 04 e6 fd        JSR  basic_list
 2480 ecce: 0e 00           ldai 0
 2481 ecd0: 05              RET
 2482 ecd1:             
 2483 ecd1:             parse_line_exit:
 2484 ecd1: 0d 29           ldti TOKENIZER_EXIT
 2485 ecd3: aa ec dc        brneq parse_line_run
 2486 ecd6: 04 e5 8f        jsr basic_run
 2487 ecd9: 0e 01           ldai 1
 2488 ecdb: 05              RET
 2489 ecdc:             
 2490 ecdc:             parse_line_run:
 2491 ecdc: 0d 27           ldti TOKENIZER_RUN
 2492 ecde: aa ec e7        brneq parse_line_new
 2493 ece1: 04 e5 8f        jsr basic_run
 2494 ece4: 0e 00           ldai 0
 2495 ece6: 05              RET
 2496 ece7:             
 2497 ece7:             parse_line_new:
 2498 ece7: 0d 28           ldti TOKENIZER_NEW
 2499 ece9: aa ec f5        brneq parse_line_error
 2500 ecec: 1f 10 00        MVIW R7,bas_tok_buf_start
 2501 ecef: 0e 01           ldai TOKENIZER_EOF          ;write EOF to start of buffer
 2502 ecf1: 4f              stavr r7
 2503 ecf2: 0e 00           ldai 0
 2504 ecf4: 05              RET
 2505 ecf5:             
 2506 ecf5:             parse_line_error:
 2507 ecf5: 1f e0 f5        mviw r7,parse_cmd_error
 2508 ecf8: 04 ff c0        jsr stringout
 2509 ecfb: 1f ef b6        mviw r7,CRLF
 2510 ecfe: 04 ff c0        jsr stringout
 2511 ed01: 0e 00           ldai 0
 2512 ed03: 05              ret
 2513 ed04:             
 2514 ed04:             parse_code:
 2515 ed04: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2516 ed06: 4b              STAVR R3
 2517 ed07: 53              INCR R3
 2518 ed08:             
 2519 ed08: 04 ec 05        JSR parse_num           ;store line number
 2520 ed0b: ef 02 10        str r7,bas_newlinenum
 2521 ed0e: 27              mvrla r7
 2522 ed0f: 4b              stavr r3
 2523 ed10: 53              incr r3
 2524 ed11: 2f              mvrha r7
 2525 ed12: 4b              stavr r3
 2526 ed13: 53              incr r3
 2527 ed14:             
 2528 ed14: 53              incr r3                ; skip over line length - fill in later
 2529 ed15: 53              incr r3
 2530 ed16:             
 2531 ed16:             parse_line_loop:
 2532 ed16: 04 eb bb        JSR parse_next
 2533 ed19: 04 eb b7        JSR parse_token
 2534 ed1c: 0d 24           ldti TOKENIZER_CR
 2535 ed1e: a8 ed 8d        BREQ parse_line_done
 2536 ed21:             
 2537 ed21: 4b              STAVR R3
 2538 ed22: 53              INCR R3
 2539 ed23: f5 02 08        ldr r5,bas_tokcounter
 2540 ed26: 55              incr r5
 2541 ed27: ed 02 08        str r5,bas_tokcounter
 2542 ed2a:             
 2543 ed2a: 0d 02           ldti TOKENIZER_NUMBER
 2544 ed2c: aa ed 43        BRNEQ parse_line1
 2545 ed2f: 04 ec 05        JSR parse_num
 2546 ed32: 27              mvrla r7
 2547 ed33: 4b              stavr r3
 2548 ed34: 53              incr r3
 2549 ed35: 2f              mvrha r7
 2550 ed36: 4b              stavr r3
 2551 ed37: 53              incr r3
 2552 ed38: f5 02 08        ldr r5,bas_tokcounter
 2553 ed3b: 55              incr r5
 2554 ed3c: 55              incr r5
 2555 ed3d: ed 02 08        str r5,bas_tokcounter
 2556 ed40: a0 ed 16        BR parse_line_loop
 2557 ed43:             
 2558 ed43:             parse_line1:
 2559 ed43: 0d 03           ldti TOKENIZER_STRING
 2560 ed45: aa ed 74        BRNEQ parse_line2
 2561 ed48: f4 02 02        ldr r4,bas_txtptr
 2562 ed4b: 54              incr r4                   ;skip over opening "
 2563 ed4c:             
 2564 ed4c:             parse_line1loop:
 2565 ed4c: 44              ldavr r4
 2566 ed4d: 0d 22           ldti '"'
 2567 ed4f: a8 ed 5f        breq parse_line1done
 2568 ed52: 4b              stavr r3
 2569 ed53: 53              incr r3
 2570 ed54: 54              incr r4
 2571 ed55: f5 02 08        ldr r5,bas_tokcounter
 2572 ed58: 55              incr r5
 2573 ed59: ed 02 08        str r5,bas_tokcounter
 2574 ed5c: a0 ed 4c        BR parse_line1loop
 2575 ed5f:             parse_line1done:
 2576 ed5f: 54              incr r4                   ;skip over closing "
 2577 ed60: 0e 00           ldai 0                    ;add null into token buffer
 2578 ed62: 4b              stavr R3
 2579 ed63: 53              incr r3
 2580 ed64: f5 02 08        ldr r5,bas_tokcounter
 2581 ed67: 55              incr r5
 2582 ed68: ed 02 08        str r5,bas_tokcounter
 2583 ed6b: eb 02 06        str r3,BAS_TOKPTR
 2584 ed6e: ec 02 02        str r4,bas_txtptr
 2585 ed71: a0 ed 16        BR parse_line_loop
 2586 ed74:             
 2587 ed74:             parse_line2:
 2588 ed74: 0d 04           ldti TOKENIZER_VARIABLE
 2589 ed76: aa ed 16        BRNEQ parse_line_loop
 2590 ed79: 04 ec 95        JSR parse_variable_num
 2591 ed7c: 27              mvrla r7
 2592 ed7d: 4b              stavr r3
 2593 ed7e: 53              incr r3
 2594 ed7f: 2f              mvrha r7
 2595 ed80: 4b              stavr r3
 2596 ed81: 53              incr r3
 2597 ed82: f5 02 08        ldr r5,bas_tokcounter
 2598 ed85: 55              incr r5
 2599 ed86: 55              incr r5
 2600 ed87: ed 02 08        str r5,bas_tokcounter
 2601 ed8a: a0 ed 16        BR parse_line_loop
 2602 ed8d:             
 2603 ed8d:             parse_line_done:
 2604 ed8d: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2605 ed8f: 4b              STAVR R3
 2606 ed90: 53              INCR R3
 2607 ed91:             ;    ldr r5,bas_tokcounter
 2608 ed91:             ;    incr r5
 2609 ed91:             ;    str r5,bas_tokcounter
 2610 ed91:             
 2611 ed91: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2612 ed94: 53              incr r3
 2613 ed95: 53              incr r3
 2614 ed96: 53              incr r3
 2615 ed97: f7 02 08        ldr r7,bas_tokcounter
 2616 ed9a: ef 02 12        str r7,bas_newlinelen
 2617 ed9d: 27              mvrla r7
 2618 ed9e: 4b              stavr r3
 2619 ed9f: 53              incr r3
 2620 eda0: 2f              mvrha r7
 2621 eda1: 4b              stavr r3
 2622 eda2:             
 2623 eda2:             ;
 2624 eda2:             ; void addLine(char *buff)
 2625 eda2:             ; since addline is only called from parse_tokenizeline where are these
 2626 eda2:             ; values are know, pass them in or
 2627 eda2:             ; maybe merge addLine to bottom of parse_tokenizeline
 2628 eda2:             ;
 2629 eda2:             ; r7 points to line to insert
 2630 eda2:             ; r6 linenumber
 2631 eda2:             ; r5 linelength
 2632 eda2:             ;
 2633 eda2:             parse_addline:
 2634 eda2: f7 02 10          ldr r7,BAS_NEWLINENUM
 2635 eda5: 04 ee 14          JSR parse_removeline      ; if line number already exists delete it
 2636 eda8: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2637 edab: 27                mvrla r7
 2638 edac: 0d 06             ldti 6
 2639 edae: aa ed b4          brneq parse_addline1
 2640 edb1: 0e 00             ldai 0
 2641 edb3: 05                ret
 2642 edb4:             
 2643 edb4:             parse_addline1:                 ;find insert location
 2644 edb4: f7 02 10          ldr r7,BAS_NEWLINENUM
 2645 edb7: f3 02 0c          ldr r3,bas_tokenBuffer
 2646 edba:             
 2647 edba:             parse_addlineloop:
 2648 edba: eb 02 14          str r3,bas_insertptr
 2649 edbd: 43                ldavr r3
 2650 edbe: 0d 01             ldti TOKENIZER_EOF
 2651 edc0: a8 ed e3          BREQ parse_addroom
 2652 edc3: 53                incr r3                   ;get line number of line in token buffer into r6
 2653 edc4: 43                ldavr r3
 2654 edc5: 36                mvarl r6
 2655 edc6: 53                incr r3
 2656 edc7: 43                ldavr r3
 2657 edc8: 3e                mvarh r6
 2658 edc9: 04 ef 56          jsr parse_compare
 2659 edcc: 0d ff             ldti 0ffh
 2660 edce: a8 ed e3          breq parse_addroom
 2661 edd1:             
 2662 edd1: 53                incr r3                   ;get line length
 2663 edd2: 43                ldavr r3
 2664 edd3: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2665 edd6: 36                mvarl r6
 2666 edd7: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2667 edd8: 5e                decr r6
 2668 edd9: 5e                decr r6
 2669 edda:             
 2670 edda:             addline_moveptr:              ; advance pointer to next line
 2671 edda: 53                incr r3
 2672 eddb: 5e                decr r6
 2673 eddc: 26                mvrla r6
 2674 eddd: a2 ed da          brnz addline_moveptr
 2675 ede0: a0 ed ba          br parse_addlineloop
 2676 ede3:             
 2677 ede3:             
 2678 ede3:             parse_addroom:               ; make room
 2679 ede3: 1f 20 00          mviw r7,BAS_TOK_BUF_END
 2680 ede6:             ;      decr r7
 2681 ede6: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2682 ede9: 04 ef 01          jsr parse_sub16
 2683 edec: 1d 20 00          mviw r5,BAS_TOK_BUF_END
 2684 edef:             ;      decr r5
 2685 edef:             
 2686 edef: f6 02 14          ldr r6,bas_insertptr
 2687 edf2:             parse_roomloop:
 2688 edf2: 5f                decr r7
 2689 edf3: 5d                decr r5
 2690 edf4: 47                ldavr r7
 2691 edf5: 4d                stavr r5
 2692 edf6:             
 2693 edf6: 26                mvrla r6
 2694 edf7: 0b                mvat
 2695 edf8: 27                mvrla r7
 2696 edf9: aa ed f2          brneq parse_roomloop
 2697 edfc:             
 2698 edfc: 2e                mvrha r6
 2699 edfd: 0b                mvat
 2700 edfe: 2f                mvrha r7
 2701 edff: aa ed f2          brneq parse_roomloop
 2702 ee02:             
 2703 ee02: f7 02 14          ldr r7,bas_insertptr
 2704 ee05: 1e 04 00          MVIW R6,parse_token_buffer
 2705 ee08:             
 2706 ee08:             parse_insertloop:
 2707 ee08: 46                ldavr r6
 2708 ee09: 4f                stavr r7
 2709 ee0a: 56                incr r6
 2710 ee0b: 57                incr r7
 2711 ee0c: 0d 24             ldti 024h ; sub in actual eol token here
 2712 ee0e: aa ee 08          brneq parse_insertloop
 2713 ee11: 0e 00             ldai 0
 2714 ee13: 05                ret
 2715 ee14:             
 2716 ee14:             ;
 2717 ee14:             ; void removeLine(int lineNum)
 2718 ee14:             ;
 2719 ee14:             parse_removeline:
 2720 ee14: 04 ee 3c        JSR basu_find
 2721 ee17: 2f              mvrha R7
 2722 ee18: a2 ee 20        brnz parse_removeline1
 2723 ee1b: 27              mvrla R7
 2724 ee1c: a2 ee 20        brnz parse_removeline1
 2725 ee1f: 05              ret
 2726 ee20:             parse_removeline1:
 2727 ee20: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2728 ee22: 57              incr r7
 2729 ee23: 57              incr r7
 2730 ee24: 57              incr r7
 2731 ee25: 47              ldavr r7
 2732 ee26: 36              mvarl r6        ; R6 = remove length
 2733 ee27: 57              incr r7
 2734 ee28: 47              ldavr r7
 2735 ee29: 3e              mvarh r6
 2736 ee2a:             
 2737 ee2a: 5f              decr r7         ;backup to start of line
 2738 ee2b: 5f              decr r7
 2739 ee2c: 5f              decr r7
 2740 ee2d: 5f              decr r7
 2741 ee2e: 04 ee f3        JSR parse_add16
 2742 ee31:             parse_removeloop:
 2743 ee31: 47              ldavr r7
 2744 ee32: 4d              stavr r5
 2745 ee33: 55              incr r5
 2746 ee34: 57              incr r7
 2747 ee35: 2f              MVRHA r7
 2748 ee36:             
 2749 ee36: e6 02 0e        ldt  bas_bufferendhi
 2750 ee39:             
 2751 ee39: aa ee 31        brneq parse_removeloop
 2752 ee3c:             ;
 2753 ee3c:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2754 ee3c:             ; since we are moving complete contents of buffer
 2755 ee3c:             ; Make sure it is set during addline
 2756 ee3c:             ;
 2757 ee3c:             
 2758 ee3c:             
 2759 ee3c:             ; run & parse utilites
 2760 ee3c:             ;
 2761 ee3c:             
 2762 ee3c:             ;
 2763 ee3c:             ; find in the token buffer linenum in r7
 2764 ee3c:             ;
 2765 ee3c:             basu_find:
 2766 ee3c: 07 05           pushr r5                  ; save r5
 2767 ee3e: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2768 ee41:             
 2769 ee41:             basu_find_loop:
 2770 ee41: 45              ldavr r5                  ;get token
 2771 ee42: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2772 ee44: aa ee 4e        brneq basu_find_loop1     ;no continue
 2773 ee47: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2774 ee4a: 27              mvrla r7
 2775 ee4b: 08 50           popr r5
 2776 ee4d: 05              ret
 2777 ee4e:             
 2778 ee4e:             basu_find_loop1:
 2779 ee4e: 55              incr r5                   ;skip past linenum token
 2780 ee4f: 27              mvrla r7                  ;test low byte of linenum
 2781 ee50: 0b              MVAT
 2782 ee51: 45              ldavr r5
 2783 ee52: aa ee 65        brneq basu_find1          ;not eqaul
 2784 ee55: 55              incr r5
 2785 ee56: 2f              mvrha r7                  ;test high byte of linenum
 2786 ee57: 0b              MVAT
 2787 ee58: 45              ldavr r5
 2788 ee59: aa ee 66        brneq basu_find2          ;not equal
 2789 ee5c: 5d              decr r5                   ;if equal backup to linenum token
 2790 ee5d: 5d              decr r5
 2791 ee5e: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2792 ee60: 0e 01           ldai 1                    ;return 1 in accumulator
 2793 ee62: 08 50           popr r5
 2794 ee64: 05              ret
 2795 ee65:             
 2796 ee65:             basu_find1:
 2797 ee65: 55              incr r5                   ;skip over linenum high byte
 2798 ee66:             basu_find2:
 2799 ee66: 55              incr r5                   ;get line length
 2800 ee67: 45              ldavr r5
 2801 ee68: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2802 ee6b: 36              mvarl r6
 2803 ee6c: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2804 ee6d: 5e              decr r6
 2805 ee6e: 5e              decr r6
 2806 ee6f:             basu_find_moveptr:            ; advance pointer to next line
 2807 ee6f: 55              incr r5
 2808 ee70: 5e              decr r6
 2809 ee71: 26              mvrla r6
 2810 ee72: a2 ee 6f        brnz basu_find_moveptr
 2811 ee75: a0 ee 41        br basu_find_loop
 2812 ee78:             
 2813 ee78:             ;
 2814 ee78:             ; Divide r5 by r4 return answer in r7
 2815 ee78:             ;
 2816 ee78:             ; return result in r7
 2817 ee78:             ;
 2818 ee78:             parse_div16:
 2819 ee78: 07 06             pushr r6
 2820 ee7a: 0f 75             movrr r5,r7
 2821 ee7c: 0f 64             movrr r4,r6
 2822 ee7e: 1c 00 00          mviw r4,0
 2823 ee81:             ;
 2824 ee81:             ; 16 bit SUB of r6 from r7, return result in r7
 2825 ee81:             ;
 2826 ee81:             ; r7=r6 00
 2827 ee81:             ; r7>r6 01
 2828 ee81:             ; r7<r6 ff
 2829 ee81:             ;
 2830 ee81:             divloop:
 2831 ee81: 04 ef 56        jsr parse_compare
 2832 ee84: 0d ff           ldti 0FFH
 2833 ee86: a8 ee 94        breq div_done
 2834 ee89: 07 06           pushr r6
 2835 ee8b: 04 ef 01        jsr parse_sub16
 2836 ee8e: 08 60           popr r6
 2837 ee90: 54              incr r4
 2838 ee91: a0 ee 81        br divloop
 2839 ee94:             div_done:
 2840 ee94: 08 60           popr r6
 2841 ee96: 0f 74           MOVRR r4,r7
 2842 ee98: 05              ret
 2843 ee99:             
 2844 ee99:             ;
 2845 ee99:             ; mod r5 by r4 return answer in r7
 2846 ee99:             ;
 2847 ee99:             ; return result in r7
 2848 ee99:             ;
 2849 ee99:             parse_mod16:
 2850 ee99: 07 06             pushr r6
 2851 ee9b: 0f 75             movrr r5,r7
 2852 ee9d: 0f 64             movrr r4,r6
 2853 ee9f: 1c 00 00          mviw r4,0
 2854 eea2:             ;
 2855 eea2:             ; 16 bit SUB of r6 from r7, return result in r7
 2856 eea2:             ;
 2857 eea2:             modloop:
 2858 eea2: 04 ef 56        jsr parse_compare
 2859 eea5: 0d ff           ldti 0FFH
 2860 eea7: a8 ee b5        breq mod_done
 2861 eeaa: 07 06           pushr r6
 2862 eeac: 04 ef 01        jsr parse_sub16
 2863 eeaf: 08 60           popr r6
 2864 eeb1: 54              incr r4
 2865 eeb2: a0 ee a2        br modloop
 2866 eeb5:             mod_done:
 2867 eeb5: 08 60           popr r6
 2868 eeb7: 05              ret
 2869 eeb8:             
 2870 eeb8:             ;
 2871 eeb8:             ; Multiple numbers in R4 and R5
 2872 eeb8:             ;
 2873 eeb8:             ; Return in R7
 2874 eeb8:             ;
 2875 eeb8:             ; R6 = Bit counter
 2876 eeb8:             ;
 2877 eeb8:             parse_mul16:
 2878 eeb8: 07 06               pushr r6
 2879 eeba:             
 2880 eeba: 1f 00 00            MVIW R7,0
 2881 eebd: 1e 00 10            MVIW R6,10h
 2882 eec0:             ;        jsr showregs
 2883 eec0:             
 2884 eec0:             parse_mulloop:
 2885 eec0:             ;        jsr showregs
 2886 eec0:             
 2887 eec0: 25                  mvrla r5
 2888 eec1: b3 01               andi  01h
 2889 eec3: a1 ee c9            brz parse_mulskip
 2890 eec6: 04 ee e5            jsr parse_muladd16
 2891 eec9:             
 2892 eec9:             parse_mulskip:
 2893 eec9:             ;
 2894 eec9:             ; clear carry flag HACK
 2895 eec9:             ;
 2896 eec9: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2897 eecb: e0                  cshl
 2898 eecc: b0 00               addi 0      ; may not be needed
 2899 eece:             ;
 2900 eece: 24                  mvrla r4
 2901 eecf:             ;        jsr showcarry
 2902 eecf: e0                  cshl
 2903 eed0:             ;        jsr showcarry
 2904 eed0: 34                  mvarl r4
 2905 eed1: 2c                  mvrha r4
 2906 eed2:             ;        jsr showcarry
 2907 eed2: e0                  cshl
 2908 eed3:             ;        jsr showcarry
 2909 eed3: 3c                  mvarh r4
 2910 eed4:             
 2911 eed4: 0e 00               ldai 0      ;clear carry
 2912 eed6: e0                  cshl
 2913 eed7:             ;        addi 0
 2914 eed7:             
 2915 eed7: 2d                  mvrha r5
 2916 eed8: e1                  cshr
 2917 eed9: 3d                  mvarh r5
 2918 eeda: 25                  mvrla r5
 2919 eedb: e1                  cshr
 2920 eedc: 35                  mvarl r5
 2921 eedd:             
 2922 eedd: 5e                  decr r6
 2923 eede: 26                  mvrla r6
 2924 eedf: a2 ee c0            brnz parse_mulloop
 2925 eee2: 08 60               popr r6
 2926 eee4: 05                  ret
 2927 eee5:             
 2928 eee5:             parse_muladd16:
 2929 eee5: 0e 00               ldai 0      ;clear carry
 2930 eee7: e0                  cshl
 2931 eee8:             
 2932 eee8: 27                  MVRLA R7
 2933 eee9: 0b                  MVAT
 2934 eeea: 24                  mvrla r4
 2935 eeeb: b8                  ADDT
 2936 eeec: 37                  mvarl r7
 2937 eeed:             
 2938 eeed: 2f                  mvrha r7
 2939 eeee: 0b                  MVAT
 2940 eeef: 2c                  mvrha r4
 2941 eef0: e3                  addtc
 2942 eef1: 3f                  mvarh r7
 2943 eef2: 05                  ret
 2944 eef3:             
 2945 eef3:             ;
 2946 eef3:             ; 16 bit ADD r6 and r7, return result in r7
 2947 eef3:             ;
 2948 eef3:             parse_add16:
 2949 eef3:             
 2950 eef3: 0e 00             ldai 0      ;clear carry
 2951 eef5: e0                cshl
 2952 eef6: 26                MVRLA R6
 2953 eef7: 0b                MVAT
 2954 eef8: 27                mvrla r7
 2955 eef9: b8                ADDT
 2956 eefa: 37                mvarl r7
 2957 eefb: 2e                mvrha r6
 2958 eefc: 0b                MVAT
 2959 eefd: 2f                mvrha r7
 2960 eefe: e3                addtc
 2961 eeff: 3f                mvarh r7
 2962 ef00: 05                ret
 2963 ef01:             
 2964 ef01:             ;
 2965 ef01:             ; 16 bit SUB of r6 from r7, return result in r7
 2966 ef01:             ;
 2967 ef01:             parse_sub16:
 2968 ef01: 2e                mvrha r6
 2969 ef02: b5                inva
 2970 ef03: 3e                mvarh r6
 2971 ef04: 26                mvrla r6
 2972 ef05: b5                inva
 2973 ef06: 36                mvarl r6
 2974 ef07: 56                incr r6
 2975 ef08: a0 ee f3          br parse_add16
 2976 ef0b:             
 2977 ef0b:             ;
 2978 ef0b:             ; convert positive in r7 to negative
 2979 ef0b:             ;
 2980 ef0b:             parse_neg:
 2981 ef0b: 2f                mvrha r7
 2982 ef0c: b5                inva
 2983 ef0d: 3f                mvarh r7
 2984 ef0e: 27                mvrla r7
 2985 ef0f: b5                inva
 2986 ef10: 37                mvarl r7
 2987 ef11: 57                incr r7
 2988 ef12: 05                ret
 2989 ef13:             
 2990 ef13:             ;
 2991 ef13:             ; 16 bit AND r6 and r7, return result in r7
 2992 ef13:             ;
 2993 ef13:             parse_and16:
 2994 ef13: 26                MVRLA R6
 2995 ef14: 0b                MVAT
 2996 ef15: 27                mvrla r7
 2997 ef16: bb                ANDT
 2998 ef17: 37                mvarl r7
 2999 ef18: 2e                mvrha r6
 3000 ef19: 0b                MVAT
 3001 ef1a: 2f                mvrha r7
 3002 ef1b: bb                ANDT
 3003 ef1c: 3f                mvarh r7
 3004 ef1d: 05                ret
 3005 ef1e:             
 3006 ef1e:             ;
 3007 ef1e:             ; 16 bit OR r6 and r7, return result in r7
 3008 ef1e:             ;
 3009 ef1e:             parse_or16:
 3010 ef1e: 26                MVRLA R6
 3011 ef1f: 0b                MVAT
 3012 ef20: 27                mvrla r7
 3013 ef21: ba                ORT
 3014 ef22: 37                mvarl r7
 3015 ef23: 2e                mvrha r6
 3016 ef24: 0b                MVAT
 3017 ef25: 2f                mvrha r7
 3018 ef26: ba                ORT
 3019 ef27: 3f                mvarh r7
 3020 ef28: 05                ret
 3021 ef29:             
 3022 ef29:             
 3023 ef29:             ;
 3024 ef29:             ; is digit in accumulator hex
 3025 ef29:             ; returns 1 if yes and 0 if no
 3026 ef29:             ;
 3027 ef29:             ; what about upper/lower case
 3028 ef29:             ;
 3029 ef29:             ; destroys tmp register
 3030 ef29:             parse_ishex:
 3031 ef29: 0d 30          ldti '0'
 3032 ef2b: a7 ef 43       brlt parse_ishex_no
 3033 ef2e: 0d 39          ldti '9'
 3034 ef30: a9 ef 36       brgt parse_ishex_af
 3035 ef33: a0 ef 40       br parse_ishex_yes
 3036 ef36:             
 3037 ef36:             parse_ishex_af:
 3038 ef36: 0d 41           ldti 'A'
 3039 ef38: a7 ef 43        brlt parse_ishex_no
 3040 ef3b: 0d 46           ldti 'F'
 3041 ef3d: a9 ef 43        brgt parse_ishex_no
 3042 ef40:             
 3043 ef40:             parse_ishex_yes:
 3044 ef40: 0e 01           ldai 1
 3045 ef42: 05              ret
 3046 ef43:             
 3047 ef43:             parse_ishex_no:
 3048 ef43: 0e 00           ldai 0
 3049 ef45: 05              ret
 3050 ef46:             
 3051 ef46:             ;
 3052 ef46:             ; is digit in accumulator decimal
 3053 ef46:             ; returns 1 if yes and 0 if no
 3054 ef46:             ;
 3055 ef46:             ; destroys tmp register
 3056 ef46:             ;
 3057 ef46:             parse_isdigit:
 3058 ef46: 0d 30          ldti '0'
 3059 ef48: a7 ef 53       brlt parse_isdigit_no
 3060 ef4b: 0d 39          ldti '9'
 3061 ef4d: a9 ef 53       brgt parse_isdigit_no
 3062 ef50:             
 3063 ef50: 0e 01           ldai 1
 3064 ef52: 05              ret
 3065 ef53:             
 3066 ef53:             parse_isdigit_no:
 3067 ef53: 0e 00           ldai 0
 3068 ef55: 05              ret
 3069 ef56:             
 3070 ef56:             ;
 3071 ef56:             ; 16 bit compare r6 and r7
 3072 ef56:             ;
 3073 ef56:             ; returns in accumulator
 3074 ef56:             ; r7=r6 00
 3075 ef56:             ; r7>r6 01
 3076 ef56:             ; r7<r6 ff
 3077 ef56:             ;
 3078 ef56:             ; destory Tmp
 3079 ef56:             ;
 3080 ef56:             parse_compare:
 3081 ef56: 2e            mvrha r6
 3082 ef57: 0b            mvat
 3083 ef58: 2f            mvrha r7
 3084 ef59: aa ef 65      brneq parse_compareh
 3085 ef5c: 26            mvrla r6
 3086 ef5d: 0b            mvat
 3087 ef5e: 27            mvrla r7
 3088 ef5f: aa ef 6e      brneq parse_comparel
 3089 ef62: 0e 00         ldai 0
 3090 ef64: 05            ret
 3091 ef65:             
 3092 ef65:             parse_compareh:
 3093 ef65: a7 ef 6b      brlt parse_compareh1
 3094 ef68: 0e 01         ldai 1
 3095 ef6a: 05            ret
 3096 ef6b:             parse_compareh1:
 3097 ef6b: 0e ff         ldai 0ffh
 3098 ef6d: 05            ret
 3099 ef6e:             
 3100 ef6e:             parse_comparel:
 3101 ef6e: a7 ef 74      brlt parse_comparel1
 3102 ef71: 0e 01         ldai 1
 3103 ef73: 05            ret
 3104 ef74:             parse_comparel1:
 3105 ef74: 0e ff         ldai 0ffh
 3106 ef76: 05            ret
 3107 ef77:             
 3108 ef77: 3e 3e 00    basic_prompt: db ">>",0
 3109 ef7a:             basic_interprter:
 3110 ef7a:                     ;build input string
 3111 ef7a:                     ;point register to BUFFER
 3112 ef7a:                     ;loop fetch chars
 3113 ef7a:                     ;until CR
 3114 ef7a:                     ;be sure line ends with a NULL or CR
 3115 ef7a:                     ;what does parse require???
 3116 ef7a: 1f ef 77            MVIW R7,basic_prompt
 3117 ef7d: 04 ff c0            JSR stringout
 3118 ef80:             
 3119 ef80: 1f 03 00            mviw r7,parse_input_line
 3120 ef83:             
 3121 ef83:             parse_inputloop:
 3122 ef83: 04 ef 93            jsr get_inputline
 3123 ef86:             
 3124 ef86: 1f 03 00            mviw r7,parse_input_line
 3125 ef89: 04 ec a4            JSR parse_line
 3126 ef8c:             
 3127 ef8c: a1 ef 7a            BRZ basic_interprter
 3128 ef8f: 05                  RET
 3129 ef90:             
 3130 ef90: 1b 03 00            mviw r3,parse_input_line
 3131 ef93:             
 3132 ef93:             get_inputline:
 3133 ef93: 04 ff e8            jsr uartin
 3134 ef96: 4f                  stavr r7
 3135 ef97: 57                  incr r7
 3136 ef98: 0d 0a               ldti 0ah  ;1 changed from 0a to 0D for new emulator code, changed back
 3137 ef9a: aa ef 93            brneq get_inputline
 3138 ef9d: 1f ef b6            MVIW R7,CRLF
 3139 efa0: 04 ff c0            JSR STRINGOUT
 3140 efa3: 05                  RET
 3141 efa4:             
 3142 efa4:             test_input:
 3143 efa4: 04 ff ec            jsr charavail
 3144 efa7: a2 ef ab            brnz setbreak
 3145 efaa: 05                  ret
 3146 efab:             setbreak:
 3147 efab: 07 06               pushr r6
 3148 efad: 1e 02 00            mviw r6,bas_run_ended
 3149 efb0: 0e 01               LDAI 1
 3150 efb2: 4e                  STAVR r6
 3151 efb3: 08 60               popr r6
 3152 efb5: 05                  ret
 3153 efb6:             
 3154 efb6:             ;
 3155 efb6:             ; STRINGS
 3156 efb6:             ;
 3157 efb6: 0a 0d 00    CRLF: DB 0ah,0dh,0
 3158 efb9:             ;
 3159 efb9:             
 3160 efb9:               ORG 0EF00h
 3161 ef00:             BASIC_TEST:
 3162 ef00:             ;
 3163 ef00:             ; The End
 3164 ef00:             ;
 3165 ef00:               ORG 0EFFFh
 3166 efff:             ZZZZ:
 3167 efff: 00            DB   0

eddah: ADDLINE_MOVEPTR  - <  2670>   2674 
ef7ah: BASIC_INTERPRTER - <  3109>    192   3127 
e6fdh: BASIC_LIST       - <  1492>    154   2479 
ef77h: BASIC_PROMPT     - <  3108>   3116 
e58fh: BASIC_RUN        - <  1218>    162   2486   2493 
ef00h: BASIC_TEST       - <  3161>    208 
0100h: BASIC_VARS       - <    74>   1262   1285 
e716h: BASLIST1         - <  1508>   1501 
e7b6h: BASLIST10        - <  1618>   1612 
e7c5h: BASLIST11        - <  1626>   1620 
e7d4h: BASLIST12        - <  1634>   1628 
e7e3h: BASLIST13        - <  1642>   1636 
e7f2h: BASLIST14        - <  1650>   1644 
e801h: BASLIST15        - <  1658>   1652 
e810h: BASLIST16        - <  1666>   1660 
e81fh: BASLIST17        - <  1674>   1668 
e82eh: BASLIST18        - <  1682>   1676 
e83dh: BASLIST19        - <  1690>   1684 
e721h: BASLIST2         - <  1514>   1510 
e84ch: BASLIST20        - <  1698>   1692 
e85bh: BASLIST20A       - <  1706>   1700 
e86ah: BASLIST20B       - <  1714>   1708 
e879h: BASLIST21        - <  1722>   1716 
e88ch: BASLIST22        - <  1732>   1724 
e89fh: BASLIST23        - <  1742>   1734 
e8b2h: BASLIST24        - <  1752>   1744 
e8c5h: BASLIST25        - <  1762>   1754 
e8d8h: BASLIST26        - <  1772>   1764 
e8ebh: BASLIST27        - <  1782>   1774 
e8feh: BASLIST28        - <  1792>   1784 
e911h: BASLIST29        - <  1802>   1794 
e738h: BASLIST3         - <  1530>   1516 
e924h: BASLIST30        - <  1812>   1804 
e937h: BASLIST31        - <  1822>   1814 
e94ah: BASLIST32        - <  1832>   1824 
e95dh: BASLIST33        - <  1842>   1834 
e970h: BASLIST34        - <  1852>   1844 
e983h: BASLIST35        - <  1862>   1854 
e996h: BASLIST36        - <  1872>   1864 
e9a5h: BASLIST37        - <  1880>   1874 
e9beh: BASLIST38        - <  1898>   1882 
e9cdh: BASLIST39        - <  1906>   1900 
e754h: BASLIST4         - <  1555>   1535 
e9dch: BASLIST40        - <  1914>   1908 
e9ebh: BASLIST41        - <  1922>   1916 
e76bh: BASLIST5         - <  1578>   1557 
e77ah: BASLIST6         - <  1586>   1580 
e789h: BASLIST7         - <  1594>   1588 
e798h: BASLIST8         - <  1602>   1596 
e7a7h: BASLIST9         - <  1610>   1604 
e9f7h: BASLIST_DONE     - <  1930>   1505   1511   1926 
e701h: BASLIST_LOOP     - <  1497>   1506   1512   1528   1553   1576   1584 
         1592   1600   1608   1616   1624   1632   1640   1648   1656   1664 
         1672   1680   1688   1696   1704   1712   1720   1730   1740   1750 
         1760   1770   1780   1790   1800   1810   1820   1830   1840   1850 
         1860   1870   1878   1896   1904   1912   1920 
e748h: BASLIST_STRING   - <  1545>   1549 
e750h: BASLIST_STRINGEND - <  1551>   1547 
ee3ch: BASU_FIND        - <  2765>    624   2720 
ee65h: BASU_FIND1       - <  2796>   2783 
ee66h: BASU_FIND2       - <  2798>   2788 
ee41h: BASU_FIND_LOOP   - <  2769>   2811 
ee4eh: BASU_FIND_LOOP1  - <  2778>   2772 
ee6fh: BASU_FIND_MOVEPTR - <  2806>   2810 
020eh: BAS_BUFFERENDHI  - <    86>    177   2749 
e069h: BAS_COPYLOOP     - <   211>    218    220 
020ah: BAS_CURRENTTOKEN - <    84>   2217   2225   2252   2417 
e5ceh: BAS_ERROR        - <  1299>    308   1202 
0282h: BAS_FORSTACK     - <   107>    276 
0280h: BAS_FORSTACKPTR  - <   106> 
02c0h: BAS_GOSUBPTR     - <   116> 
02c2h: BAS_GOSUBSTACK   - <   117>    275 
0214h: BAS_INSERTPTR    - <    93>   2648   2686   2703 
e0a8h: BAS_MSG1         - <   249>    307 
e0c4h: BAS_MSG2         - <   250> 
e0d5h: BAS_MSG3         - <   251>   1199 
0216h: BAS_NEGFLAG      - <    94> 
0212h: BAS_NEWLINELEN   - <    92>   2616   2636   2681 
0210h: BAS_NEWLINENUM   - <    91>   2520   2634   2644 
0204h: BAS_NXTPTR       - <    81>   2094   2110   2126   2161   2179   2238 
         2279 
0200h: BAS_RUN_ENDED    - <    79>    277    643   1073   1238   3148   3148 
0208h: BAS_TOKCOUNTER   - <    83>   2215   2463   2539   2541   2552   2555 
         2571   2573   2580   2582   2597   2600   2615 
020ch: BAS_TOKENBUFFER  - <    85>    153    175    280   2478   2645   2767 
0206h: BAS_TOKPTR       - <    82>   2213   2583 
2000h: BAS_TOK_BUF_END  - <   134>    176   2679   2683 
1000h: BAS_TOK_BUF_START - <   130>    172    207   2500 
0202h: BAS_TXTPTR       - <    80>    994   1975   2069   2139   2211   2239 
         2250   2300   2391   2408   2433   2467   2561   2584 
e077h: BIGTEST          - <   223>    185 
ffech: CHARAVAIL        - <    15>   3143 
ffc4h: CHAROUT          - <     5>    687   1400   1432   1452 
efb6h: CRLF             - <  3157>    228    235    240    721   1875   2509 
         3138 
e60dh: DIVIDERS         - <  1384>   1409 
ee81h: DIVLOOP          - <  2830>   2838 
ee94h: DIV_DONE         - <  2839>   2833 
e119h: EXE_ACCEPT       - <   290>    331    345    354    366    372    375 
          642    657    667    731    737    766    768    773    781    784 
          786    807    837    847    892    903    921    923    934    949 
          969    977    985   1002   1004   1013   1022   1028   1030   1050 
         1056   1066   1123   1125   1133   1135   1179   1211 
e12eh: EXE_ACCEPT_DONE  - <   310>    300 
e4bch: EXE_END_STMT     - <  1072>   1172 
e1e5h: EXE_EXPR         - <   460>    373    546    562    579    596    658 
          708    769    924    935   1014   1052   1058 
e22ah: EXE_EXPR_AND     - <   504>    474 
e251h: EXE_EXPR_DONE    - <   529>    478 
e1eeh: EXE_EXPR_LOOP    - <   467>    490    502    514    526    527 
e218h: EXE_EXPR_MINUS   - <   492>    472 
e23ch: EXE_EXPR_OR      - <   516>    476 
e206h: EXE_EXPR_PLUS    - <   480>    470 
e13eh: EXE_FACTOR       - <   340>    346    355    392    407    421    435 
e16bh: EXE_FACTOR1      - <   369>    363 
e14ch: EXE_FACTOR1A     - <   350>    344 
e15dh: EXE_FACTOR1B     - <   360>    353 
e17ch: EXE_FACTOR2      - <   378>    371 
e5a1h: EXE_FINISHED     - <  1234>   1222 
e5b5h: EXE_FINISHED_YES - <  1248>   1240   1244 
e40ch: EXE_FOR_STMT     - <   898>   1110 
e5c3h: EXE_GET_VARIABLE - <  1284>    329    852 
e3a8h: EXE_GOSUB_STMT   - <   779>   1148 
e2f1h: EXE_GOTO_STMT    - <   655>   1116 
e35fh: EXE_IF_STMT      - <   729>   1092 
e378h: EXE_IF_STMT1     - <   745>    741    751 
e387h: EXE_IF_STMT2     - <   754>    749 
e2d3h: EXE_INDEX_FIND   - <   623>    633 
e107h: EXE_INIT         - <   273>   1219 
e452h: EXE_INPUT_STMT   - <   983>   1142 
e446h: EXE_INP_STMT     - <   967>   1186 
e617h: EXE_ITOA         - <  1386>    239    710   1525   1892 
e639h: EXE_ITOA_LOOP    - <  1411>   1425   1442   1446 
e651h: EXE_ITOA_NEXT    - <  1427>   1420 
e673h: EXE_ITOA_NOONES  - <  1453> 
e65eh: EXE_ITOA_NOTYET  - <  1436>   1429 
e62ah: EXE_ITOA_POS     - <  1402>   1390 
e2d7h: EXE_JUMP_LINE    - <   632>    659    799 
e2eeh: EXE_JUMP_LINE1   - <   647>    635    637 
e38bh: EXE_LET_STMT     - <   761>   1086   1180 
e586h: EXE_LINE_STMT    - <  1209>   1228 
e402h: EXE_NEXT_DONE    - <   886>    872 
e3d2h: EXE_NEXT_STMT    - <   826>   1098 
e5fch: EXE_NEXT_TOK3_DONE - <  1346>   1342 
e5f4h: EXE_NEXT_TOK3_LOOP - <  1340>   1344 
e5d0h: EXE_NEXT_TOKEN   - <  1308>    311    406    420    434    481    493 
          505    517    561    578    595    680    688    694    723    746 
          755 
e5dah: EXE_NEXT_TOKEN1  - <  1317>   1311 
e5e3h: EXE_NEXT_TOKEN2  - <  1325>   1319 
e5eeh: EXE_NEXT_TOKEN3  - <  1335>   1327 
e5feh: EXE_NEXT_TOKEN4  - <  1350>   1337 
e600h: EXE_NUM          - <  1357>    364    782 
e44ch: EXE_OUTP_STMT    - <   975>   1192 
e479h: EXE_PEEK_STMT    - <  1011>   1160 
e4a0h: EXE_POKE_STMT    - <  1048>   1166 
e2fdh: EXE_PRINT_STMT   - <   665>   1104 
e314h: EXE_PRINT_STMT1  - <   683>    672 
e324h: EXE_PRINT_STMT2  - <   691>    685 
e32fh: EXE_PRINT_STMT3  - <   697>    693 
e341h: EXE_PRINT_STMT4  - <   707>    699    701    703 
e355h: EXE_PRINT_STMT_DONE - <   720>    705    715    717 
e302h: EXE_PRINT_STMT_LOOP - <   669>    718 
e347h: EXE_PRINT_STMT_TEST - <   712>    681    689    695 
e258h: EXE_RELATION     - <   542>    733 
e2cch: EXE_RELATION_DONE - <   610>    558 
e2b0h: EXE_RELATION_EQ  - <   594>    556 
e292h: EXE_RELATION_GT  - <   577>    554 
e261h: EXE_RELATION_LOOP - <   549>    572    575    589    592    605    608 
e274h: EXE_RELATION_LT  - <   560>    552 
e2c6h: EXE_REL_NE       - <   606>    603 
e2aah: EXE_REL_NGT      - <   590>    587 
e28ch: EXE_REL_NLT      - <   573>    570 
e3c4h: EXE_RETURN_STMT  - <   805>   1154 
e592h: EXE_RUN          - <  1221>   1229 
e59bh: EXE_RUN_CONT     - <  1227>   1224 
e5b8h: EXE_SET_VARIABLE - <  1261>    771    855    929    999   1026 
e4c3h: EXE_STMT         - <  1081>    742   1212 
e4cdh: EXE_STMT1        - <  1089>   1085 
e540h: EXE_STMT10       - <  1163>   1159 
e549h: EXE_STMT11       - <  1169>   1165 
e552h: EXE_STMT12       - <  1175>   1171 
e560h: EXE_STMT13       - <  1183>   1177 
e569h: EXE_STMT14       - <  1189>   1185 
e572h: EXE_STMT15       - <  1195>   1191 
e4d6h: EXE_STMT2        - <  1095>   1091 
e4dfh: EXE_STMT3        - <  1101>   1097 
e4e8h: EXE_STMT4        - <  1107>   1103 
e4f1h: EXE_STMT5        - <  1113>   1109 
e4fah: EXE_STMT5A       - <  1119>   1115 
e50bh: EXE_STMT5B       - <  1129>   1121 
e51ch: EXE_STMT6        - <  1139>   1131 
e525h: EXE_STMT7        - <  1145>   1141 
e52eh: EXE_STMT8        - <  1151>   1147 
e537h: EXE_STMT9        - <  1157>   1153 
e0ebh: EXE_STMT_MSG     - <   252> 
e180h: EXE_TERM         - <   388>    464    482    494    506    518 
e19ch: EXE_TERM_ASTR    - <   405>    398 
e1deh: EXE_TERM_DONE    - <   447>    403 
e189h: EXE_TERM_LOOP    - <   395>    417    431    445 
e1c8h: EXE_TERM_MOD     - <   433>    402 
e1b2h: EXE_TERM_SLASH   - <   419>    400 
e132h: EXE_VARFACTOR    - <   323>    379 
e609h: EXE_VARIABLE_NUM - <  1372>    324    762    841    907    986   1023 
eb78h: FOUND            - <  2160>   2143 
ef93h: GET_INPUTLINE    - <  3132>    991   3122   3137 
eea2h: MODLOOP          - <  2857>   2865 
eeb5h: MOD_DONE         - <  2866>   2860 
eb82h: NOKEYOWRDSFOUND  - <  2168>   2140 
ea9ah: PARSECHAR1       - <  1983>   1980 
eaeah: PARSECHAR10      - <  2033>   2030 
eaf2h: PARSECHAR11      - <  2038>   2035 
eafah: PARSECHAR12      - <  2043>   2040 
eb02h: PARSECHAR13      - <  2048>   2045 
eb0ah: PARSECHAR14      - <  2053>   2050 
eb12h: PARSECHAR15      - <  2058>   2055 
eaa2h: PARSECHAR2       - <  1988>   1985 
eaaah: PARSECHAR3       - <  1993>   1990 
eab2h: PARSECHAR4       - <  1998>   1995 
eabah: PARSECHAR5       - <  2003>   2000 
eac2h: PARSECHAR6       - <  2008>   2005 
eacah: PARSECHAR7       - <  2013>   2010 
ead2h: PARSECHAR7A      - <  2018>   2015 
eadah: PARSECHAR8       - <  2023>   2020 
eae2h: PARSECHAR9       - <  2028>   2025 
eef3h: PARSE_ADD16      - <  2948>    488   2328   2741   2975 
eda2h: PARSE_ADDLINE    - <  2633> 
edb4h: PARSE_ADDLINE1   - <  2643>   2639 
edbah: PARSE_ADDLINELOOP - <  2647>   2675 
ede3h: PARSE_ADDROOM    - <  2678>   2651   2660 
ec5eh: PARSE_AF         - <  2373>   2370 
ef13h: PARSE_AND16      - <  2993>    512 
e0f5h: PARSE_CMD_ERROR  - <   253>   2507 
ed04h: PARSE_CODE       - <  2514>   2472 
ef56h: PARSE_COMPARE    - <  3080>    568    585    602    870   1418   2658 
         2831   2858 
ef65h: PARSE_COMPAREH   - <  3092>   3084 
ef6bh: PARSE_COMPAREH1  - <  3096>   3093 
ef6eh: PARSE_COMPAREL   - <  3100>   3088 
ef74h: PARSE_COMPAREL1  - <  3104>   3101 
ee78h: PARSE_DIV16      - <  2818>    226    428 
ec75h: PARSE_FINISHED   - <  2406>   2232   2264 
ec90h: PARSE_FINISHED_YES - <  2423>   2410   2416   2419 
ec54h: PARSE_GETNIBBLE  - <  2366> 
eb15h: PARSE_GET_NEXT_TOK - <  2067>   2216   2251   2473 
eb1ah: PARSE_GNT1       - <  2075> 
eb21h: PARSE_GNT1LOOP   - <  2089>   2093 
eb1bh: PARSE_GNT1_CHKPOS - <  2085> 
eb31h: PARSE_GNT2       - <  2105>   2087 
eb3fh: PARSE_GNT3       - <  2116>   2108 
eb45h: PARSE_GNT3LOOP   - <  2120>   2124 
eb55h: PARSE_GNT4       - <  2131>   2119 
eb98h: PARSE_GNT_ERROR  - <  2184>   2175   2177 
eb9dh: PARSE_INIT       - <  2208>   2460 
ef83h: PARSE_INPUTLOOP  - <  3121> 
0300h: PARSE_INPUT_LINE - <   122>    989    993   3119   3124   3130 
ee08h: PARSE_INSERTLOOP - <  2706>   2712 
ef46h: PARSE_ISDIGIT    - <  3057>   2086   2092   2351   2469 
ef53h: PARSE_ISDIGIT_NO - <  3066>   3059   3061 
ef29h: PARSE_ISHEX      - <  3030> 
ef36h: PARSE_ISHEX_AF   - <  3037>   3034 
ef43h: PARSE_ISHEX_NO   - <  3047>   3032   3039   3041 
ef40h: PARSE_ISHEX_YES  - <  3043>   3035 
e9fah: PARSE_KEYWORDS   - <  1937>   2136 
eca4h: PARSE_LINE       - <  2459>    199   3125 
ed43h: PARSE_LINE1      - <  2558>   2544 
ed5fh: PARSE_LINE1DONE  - <  2575>   2567 
ed4ch: PARSE_LINE1LOOP  - <  2564>   2574 
ed74h: PARSE_LINE2      - <  2587>   2560 
ed8dh: PARSE_LINE_DONE  - <  2603>   2535 
ecf5h: PARSE_LINE_ERROR - <  2506>   2499 
ecd1h: PARSE_LINE_EXIT  - <  2483>   2477 
ecc3h: PARSE_LINE_LIST  - <  2475> 
ed16h: PARSE_LINE_LOOP  - <  2531>   2556   2585   2589   2601 
ece7h: PARSE_LINE_NEW   - <  2497>   2492 
ecdch: PARSE_LINE_RUN   - <  2490>   2485 
ee99h: PARSE_MOD16      - <  2849>    233    442 
eeb8h: PARSE_MUL16      - <  2877>    414   2323 
eee5h: PARSE_MULADD16   - <  2928>   2890 
eec0h: PARSE_MULLOOP    - <  2884>   2924 
eec9h: PARSE_MULSKIP    - <  2892>   2889 
ef0bh: PARSE_NEG        - <  2980>    356 
ebbbh: PARSE_NEXT       - <  2231>   2280   2532 
ebc2h: PARSE_NEXT1      - <  2236>   2233 
ebcah: PARSE_NEXT1LOOP  - <  2241>   2246 
ebd4h: PARSE_NEXT2      - <  2249>   2244 
ebe5h: PARSE_NEXT3      - <  2263>   2255   2270 
ebf5h: PARSE_NEXTDONE   - <  2272>   2265   2268 
ebfch: PARSE_NEXTDONE2  - <  2278>   2275 
ec05h: PARSE_NUM        - <  2294>    997   2519   2545 
ec45h: PARSE_NUM_CHAR   - <  2349>   2311   2315 
ec4fh: PARSE_NUM_CHAR1  - <  2355>   2352 
ec39h: PARSE_NUM_DONE   - <  2333>   2319 
ec3ch: PARSE_NUM_DONE1  - <  2340> 
ec1bh: PARSE_NUM_LOOP   - <  2314>   2331 
ec17h: PARSE_NUM_POS    - <  2310> 
ef1eh: PARSE_OR16       - <  3009>    524 
eca4h: PARSE_POS        - <  2446> 
ee14h: PARSE_REMOVELINE - <  2719>   2635 
ee20h: PARSE_REMOVELINE1 - <  2726>   2722   2724 
ee31h: PARSE_REMOVELOOP - <  2742>   2751 
edf2h: PARSE_ROOMLOOP   - <  2687>   2696   2701 
ea8ah: PARSE_SINGLECHAR - <  1972>   2107 
ec66h: PARSE_STRING     - <  2383> 
ec6fh: PARSE_STRING1    - <  2389>   2386 
ef01h: PARSE_SUB16      - <  2967>    500   1423   2682   2835   2862 
ebb7h: PARSE_TOKEN      - <  2224>   2384   2533 
0400h: PARSE_TOKEN_BUFFER - <   126>   2212   2464   2611   2704 
ec95h: PARSE_VARIABLE_NUM - <  2431>   2590 
eb61h: PCMPLOOP         - <  2141>   2149 
efabh: SETBREAK         - <  3146>   3144 
ffcch: SHOWADDR         - <     7>   1504   1925 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    304   1196 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9> 
ffdch: SHOWREGS         - <    11>    227    234   1201 
eb6fh: SKIPLOOP         - <  2153>   2156 
eb6fh: SKIPTOEND        - <  2151>   2146 
ffc0h: STRINGOUT        - <     4>    229    236    241    679    722   1200 
         1503   1538   1582   1590   1598   1606   1614   1622   1630   1638 
         1646   1654   1662   1670   1678   1686   1694   1702   1710   1718 
         1876   1902   1910   1918   1924   2508   2510   3117   3139 
efa4h: TEST_INPUT       - <  3142>   1237 
0019h: TOKENIZER_AND    - <    45>    473   1763   2006 
001bh: TOKENIZER_ASTR   - <    47>    397   1783   2016 
0010h: TOKENIZER_CALL   - <    36>   1667   1949 
0015h: TOKENIZER_COMMA  - <    41>    684   1021   1055   1723   1986 
0024h: TOKENIZER_CR     - <    56>    641    714    748    772    785    891 
          948   1003   1029   1065   1124   1134   1873   1981   2534   2604 
0009h: TOKENIZER_ELSE   - <    29>   1611   1942 
0014h: TOKENIZER_END    - <    40>   1170   1699   1953 
0001h: TOKENIZER_EOF    - <    21>    173    716    750   1243   1509   2415 
         2418   2501   2650   2771 
0023h: TOKENIZER_EQ     - <    55>    555    767    922   1863   2056 
0000h: TOKENIZER_ERROR  - <    20>   1500   1963   2186 
0029h: TOKENIZER_EXIT   - <    61>   1957   2484 
000ah: TOKENIZER_FOR    - <    30>    902   1108   1619   1943 
000eh: TOKENIZER_GOSUB  - <    34>    780   1146   1651   1947 
000dh: TOKENIZER_GOTO   - <    33>    656   1114   1643   1946 
0022h: TOKENIZER_GT     - <    54>    553   1853   2051 
001eh: TOKENIZER_HASH   - <    50>   1813   2036 
0007h: TOKENIZER_IF     - <    27>    730   1090   1595   1940 
002bh: TOKENIZER_INP    - <    63>    968   1184   1907   1959 
002ah: TOKENIZER_INPUT  - <    62>    984   1140   1899   1958 
001fh: TOKENIZER_LEFTP  - <    51>    370    702   1823   2031 
0005h: TOKENIZER_LET    - <    25>   1176   1178   1579   1938 
0025h: TOKENIZER_LINENUM - <    57>   1210   1326   1881   2515 
0026h: TOKENIZER_LIST   - <    58>   1954   2476 
0021h: TOKENIZER_LT     - <    53>    551   1843   2046 
0018h: TOKENIZER_MINUS  - <    44>    352    471   1753   2001 
001dh: TOKENIZER_MOD    - <    49>    401   1803   2026 
0028h: TOKENIZER_NEW    - <    60>   1956   2498 
000ch: TOKENIZER_NEXT   - <    32>    836   1096   1635   1945 
0002h: TOKENIZER_NUMBER - <    22>    362    700    783   1310   1515   2095 
         2543 
002eh: TOKENIZER_OFF    - <    66>   1130   1132   1715   1962 
002dh: TOKENIZER_ON     - <    65>   1120   1122   1707   1961 
001ah: TOKENIZER_OR     - <    46>    475   1773   2011 
002ch: TOKENIZER_OUTP   - <    64>    976   1190   1915   1960 
0012h: TOKENIZER_PEEK   - <    38>   1012   1158   1683   1951 
0017h: TOKENIZER_PLUS   - <    43>    343    469   1743   1996 
0013h: TOKENIZER_POKE   - <    39>   1049   1164   1691   1952 
0006h: TOKENIZER_PRINT  - <    26>    666   1102   1587   1939 
0011h: TOKENIZER_REM    - <    37>   1675   1950   2254 
000fh: TOKENIZER_RETURN - <    35>    806   1152   1659   1948 
0020h: TOKENIZER_RIGHTP - <    52>    374   1833   2041 
0027h: TOKENIZER_RUN    - <    59>   1955   2491 
0016h: TOKENIZER_SEMICOLON - <    42>    692   1733   1991 
001ch: TOKENIZER_SLASH  - <    48>    399   1793   2021 
0003h: TOKENIZER_STRING - <    23>    671   1336   1534   2127   2385   2559 
0008h: TOKENIZER_THEN   - <    28>    736   1603   1941 
000bh: TOKENIZER_TO     - <    31>    933   1627   1944 
0004h: TOKENIZER_VARIABLE - <    24>    330    698    765    846    920   1001 
         1027   1084   1318   1556   2180   2588 
e6d1h: TOKL_CALL        - <  1483>   1669 
e691h: TOKL_ELSE        - <  1472>   1613 
e6cch: TOKL_END         - <  1482>   1701 
e6f2h: TOKL_ERROR       - <  1489>   1502   1923 
e697h: TOKL_FOR         - <  1473>   1621 
e6ach: TOKL_GOSUB       - <  1477>   1653 
e6a6h: TOKL_GOTO        - <  1476>   1645 
e687h: TOKL_IF          - <  1470>   1597 
e6deh: TOKL_INP         - <  1485>   1909 
e6d7h: TOKL_INPUT       - <  1484>   1901 
e67bh: TOKL_LET         - <  1468>   1581 
e6a0h: TOKL_NEXT        - <  1475>   1637 
e6edh: TOKL_OFF         - <  1488>   1717 
e6e9h: TOKL_ON          - <  1487>   1709 
e6e3h: TOKL_OUTP        - <  1486>   1917 
e6c0h: TOKL_PEEK        - <  1480>   1685 
e6c6h: TOKL_POKE        - <  1481>   1693 
e680h: TOKL_PRINT       - <  1469>   1589 
e6bbh: TOKL_REM         - <  1479>   1677 
e6b3h: TOKL_RETURN      - <  1478>   1661 
e68bh: TOKL_THEN        - <  1471>   1605 
e69ch: TOKL_TO          - <  1474>   1629 
eb5ah: TOP              - <  2137>   2158 
ffd0h: TOUPPER          - <     8>   2374 
ffe8h: UARTIN           - <    14>   3133 
ffc8h: UARTOUT          - <     6>    306   1198   1527   1540   1564   1575 
         1726   1728   1736   1738   1746   1748   1756   1758   1766   1768 
         1776   1778   1786   1788   1796   1798   1806   1808   1816   1818 
         1826   1828   1836   1838   1846   1848   1856   1858   1866   1868 
         1895 
efffh: ZZZZ             - <  3166> 

3167 Lines assembled
0 Errors
379 Labels
Object Code:3969 bytes

