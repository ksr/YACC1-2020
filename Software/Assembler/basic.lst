RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ff00h
    5 0000:             charout:    EQU 0ff04h
    6 0000:             uartout:    EQU 0ff08h
    7 0000:             showaddr:   EQU 0ff0ch
    8 0000:             toupper:    EQU 0ff10h
    9 0000:             showr7:     EQU 0ff14h
   10 0000:             showbyte:   equ 0ff18h
   11 0000:             
   12 0000:             
   13 0000:             
   14 0000:             ;
   15 0000:             ; Basic interpreter tokens
   16 0000:             ;
   17 0000:             TOKENIZER_ERROR: EQU 00
   18 0000:             TOKENIZER_EOF: EQU 01
   19 0000:             TOKENIZER_NUMBER: EQU 02
   20 0000:             TOKENIZER_STRING: EQU 03
   21 0000:             TOKENIZER_VARIABLE: EQU 04
   22 0000:             TOKENIZER_LET: EQU 05
   23 0000:             TOKENIZER_PRINT: EQU 06
   24 0000:             TOKENIZER_IF: EQU 07
   25 0000:             TOKENIZER_THEN: EQU 08
   26 0000:             TOKENIZER_ELSE: EQU 09
   27 0000:             TOKENIZER_FOR: EQU 10
   28 0000:             TOKENIZER_TO: EQU 11
   29 0000:             TOKENIZER_NEXT: EQU 12
   30 0000:             TOKENIZER_GOTO: EQU 13
   31 0000:             TOKENIZER_GOSUB: EQU 14
   32 0000:             TOKENIZER_RETURN: EQU 15
   33 0000:             TOKENIZER_CALL: EQU 16
   34 0000:             TOKENIZER_REM: EQU 17
   35 0000:             TOKENIZER_PEEK: EQU 18
   36 0000:             TOKENIZER_POKE: EQU 19
   37 0000:             TOKENIZER_END: EQU 20
   38 0000:             TOKENIZER_COMMA: EQU 21
   39 0000:             TOKENIZER_SEMICOLON: EQU 22
   40 0000:             TOKENIZER_PLUS: EQU 23
   41 0000:             TOKENIZER_MINUS: EQU 24
   42 0000:             TOKENIZER_AND: EQU 25
   43 0000:             TOKENIZER_OR: EQU 26
   44 0000:             TOKENIZER_ASTR: EQU 27
   45 0000:             TOKENIZER_SLASH: EQU 28
   46 0000:             TOKENIZER_MOD: EQU 29
   47 0000:             TOKENIZER_HASH: EQU 30
   48 0000:             TOKENIZER_LEFTP: EQU 31
   49 0000:             TOKENIZER_RIGHTP: EQU 32
   50 0000:             TOKENIZER_LT: EQU 33
   51 0000:             TOKENIZER_GT: EQU 34
   52 0000:             TOKENIZER_EQ: EQU 35
   53 0000:             TOKENIZER_CR: EQU 36
   54 0000:             TOKENIZER_LINENUM: EQU 37
   55 0000:             
   56 0000:             ;
   57 0000:             ; BASIC interpreter user variables area
   58 0000:             ; currently 26 1-byte variables
   59 0000:             ; for now must be 0xAA00 (256 byte) aligned
   60 0000:             ;
   61 0000:             BASIC_VARS: EQU 0100h
   62 0000:             
   63 0000:             ;
   64 0000:             ; Basic interpreter internal variables
   65 0000:             ;
   66 0000:             bas_ended: EQU 0200h
   67 0000:             
   68 0000:             ;
   69 0000:             ; for next statement stack ptr and stack data
   70 0000:             ;
   71 0000:             ; for next stack data
   72 0000:             ; format
   73 0000:             ;   2 bytes for variable id (only first byte used for now)
   74 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
   75 0000:             ;   2 bytes ptr to line after for instruction (format HL)
   76 0000:             ; later add step amount
   77 0000:             ;
   78 0000:             bas_forstackptr: EQU 0202h
   79 0000:             bas_forstack: EQU 0204h
   80 0000:             
   81 0000:             ;
   82 0000:             ; gosub stack ptr and data
   83 0000:             ;
   84 0000:             ; gosub STACK
   85 0000:             ; format
   86 0000:             ;   2 bytes return location ptr
   87 0000:             ;
   88 0000:             bas_gosubptr: EQU 0240h
   89 0000:             bas_gosubstack: EQU 0242h
   90 0000:             
   91 0000:             ;
   92 0000:             ; Basic interpreter text line buffer
   93 0000:             ;
   94 0000:             parse_input_line: EQU 300h
   95 0000:             parse_token_buffer: EQU 400h
   96 0000:             
   97 0000:             ;
   98 0000:             ; basic interpreter, add IO and peek/poke
   99 0000:             ;
  100 0000:             
  101 0000:             ;
  102 0000:             ; Basic Interpreter
  103 0000:             ;
  104 0000:                   ORG 0e000h
  105 e000:             ;
  106 e000:             ; Entry Points
  107 e000:             ;
  108 e000:             basic_list:
  109 e000: 1f e9 74            mviw r7,basic_test
  110 e003: 04 e4 be            JSR tok_list
  111 e006: 05                  Ret
  112 e007:             ;
  113 e007:                   ORG 0e010h
  114 e010:             ;
  115 e010: 04 e3 8a          jsr do_basic
  116 e013: 05                Ret
  117 e014:             
  118 e014:             ;
  119 e014:             ; basic interpreter messages
  120 e014:             ;
  121 e014: 55 4e 45 58 
            50 45 43 54 
            45 44 20 54 
            4f 4b 45 4e 
            00 0a 0d    bas_msg1: db "unexpected token",0,0ah,0dh
  122 e027: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  123 e038: 42 41 53 49 
            43 20 49 4e 
            53 20 4e 4f 
            54 20 46 4f 
            55 4e 44 20 
            0a 0d       bas_msg3: db "Basic ins not found ",0ah,0dh
  124 e04e: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  125 e058:             ;
  126 e058:             ; Basic interpreter - execution engine
  127 e058:             ; Register Usage
  128 e058:             ; R0 - Program Counter
  129 e058:             ; R1 - Stack Pointer
  130 e058:             ; R2 - Used to send strings for output - assume destructive
  131 e058:             ; R3 - Basic Interpreter Token Buffer ptr
  132 e058:             ; R4 - working register
  133 e058:             ; R5 - working register
  134 e058:             ; R6 - Working register
  135 e058:             ; R7 - return value
  136 e058:             ;
  137 e058:             exe:
  138 e058:             
  139 e058:             ;
  140 e058:             ; void ubasic_init()
  141 e058:             ;
  142 e058:             ; Setup basic interpreter execution engine
  143 e058:             ;
  144 e058:             ; destorys R4 and accumulator
  145 e058:             ; ?? Should these pointers be zero based or actual address in memory
  146 e058:             ;
  147 e058:             exe_init:
  148 e058: 1d 02 42        MVIW R5,bas_gosubstack
  149 e05b:             ;    movrr r6,r9
  150 e05b: 1c 02 04        MVIW R4,bas_forstack
  151 e05e:             ;    movrr r6,r8
  152 e05e: 1e 02 00        MVIW R6,bas_ended
  153 e061: 0e 00           LDAI 0
  154 e063: 4e              STAVR R6
  155 e064:             ;
  156 e064:             ; initialize tokenbufferptr to start of tokenBuffer (actual memory address)
  157 e064:             ;
  158 e064: 04 e3 c7        JSR tok_init
  159 e067: 05              RET
  160 e068:             
  161 e068:             ;
  162 e068:             ; void accept(int)
  163 e068:             ;
  164 e068:             ; compare accumulator with current token then advance to next token in buffer
  165 e068:             ; assume accumulator destroyed
  166 e068:             ;
  167 e068:             exe_accept:
  168 e068: 09              push
  169 e069:             ;
  170 e069:             ; get current token into accumulator
  171 e069:             ;
  172 e069: 04 e3 c5        jsr tok_token
  173 e06c: 0b              MVAT
  174 e06d: 0a              POP
  175 e06e: a8 e0 77        BREQ exe_accept_done
  176 e071: 1a e0 14        mviw r2,bas_msg1
  177 e074: 04 e3 c4        JSR bas_error
  178 e077:             exe_accept_done:
  179 e077: 04 e3 cb        jsr tok_next
  180 e07a: 05              RET
  181 e07b:             
  182 e07b:             ;
  183 e07b:             ; int varfactor()
  184 e07b:             ;
  185 e07b:             ; get variable id pointed to by tok_variable_num in token stream
  186 e07b:             ; (this is not a value but a variable id)
  187 e07b:             ; value returned by exe_get_variable in r7
  188 e07b:             ;
  189 e07b:             ; return value in R7
  190 e07b:             ;
  191 e07b:             exe_varfactor:
  192 e07b:             ; get variable number id (one byte for now a-z) into accumulator
  193 e07b:             ;
  194 e07b: 04 e4 04        jsr tok_variable_num
  195 e07e:             ;
  196 e07e:             ; variable id in accumulator, return in r7
  197 e07e:             ;
  198 e07e: 04 e3 ba        jsr exe_get_variable
  199 e081: 0e 04           LDAI TOKENIZER_VARIABLE
  200 e083: 04 e0 68        JSR exe_accept
  201 e086: 05              RET
  202 e087:             
  203 e087:             ;
  204 e087:             ; int factor()
  205 e087:             ; return value in R7
  206 e087:             ;
  207 e087:             exe_factor:
  208 e087:             ;
  209 e087:             ; get current token into accumulator
  210 e087:             ;
  211 e087: 04 e3 c5        jsr tok_token
  212 e08a:             ;
  213 e08a: 0d 02           LDTI TOKENIZER_NUMBER
  214 e08c: aa e0 97        BRNEQ exe_factor1
  215 e08f: 04 e3 fb        JSR tok_num
  216 e092: 0c              MVTA
  217 e093: 04 e0 68        JSR exe_accept
  218 e096: 05              RET
  219 e097:             
  220 e097:             exe_factor1:
  221 e097: 0d 1f           LDTI TOKENIZER_LEFTP
  222 e099: aa e0 a8        BRNEQ exe_factor2
  223 e09c: 04 e0 68        JSR exe_accept
  224 e09f: 04 e0 f2        JSR exe_expr
  225 e0a2: 0e 20           LDAI TOKENIZER_RIGHTP
  226 e0a4: 04 e0 68        JSR exe_accept
  227 e0a7: 05              RET
  228 e0a8:             
  229 e0a8:             exe_factor2:
  230 e0a8: 04 e0 7b        jsr exe_varfactor
  231 e0ab: 05              ret
  232 e0ac:             
  233 e0ac:             ;
  234 e0ac:             ; int term()
  235 e0ac:             ; R5 = F1
  236 e0ac:             ; R6 = F2
  237 e0ac:             ; R7 = return value
  238 e0ac:             ;
  239 e0ac:             exe_term:
  240 e0ac: 07 05           pushr r5
  241 e0ae: 07 06           pushr r6
  242 e0b0:             
  243 e0b0: 04 e0 87        jsr exe_factor
  244 e0b3: 0f 57           MOVRR r7,r5
  245 e0b5:             
  246 e0b5:             exe_term_loop:
  247 e0b5: 04 e3 c5        jsr tok_token
  248 e0b8: 0d 1b           ldti TOKENIZER_ASTR
  249 e0ba: a8 e0 ca        BREQ exe_term_astr
  250 e0bd: 0d 1c           LDTI TOKENIZER_SLASH
  251 e0bf: a8 e0 d5        breq exe_term_slash
  252 e0c2: 0d 1d           ldti TOKENIZER_MOD
  253 e0c4: a8 e0 e0        breq exe_term_mod
  254 e0c7: a0 e0 eb        br exe_term_done
  255 e0ca:             
  256 e0ca:             exe_term_astr:
  257 e0ca: 04 e3 cb        jsr tok_next
  258 e0cd: 04 e0 87        jsr exe_factor
  259 e0d0: 0f 67           movrr r7,r6
  260 e0d2:             ;
  261 e0d2:             ; do mulitply f1 = f1 * f2
  262 e0d2:             ;
  263 e0d2: a0 e0 b5        BR exe_term_loop
  264 e0d5:             
  265 e0d5:             exe_term_slash:
  266 e0d5: 04 e3 cb        jsr tok_next
  267 e0d8: 04 e0 87        jsr exe_factor
  268 e0db: 0f 67           movrr r7,r6
  269 e0dd:             ;
  270 e0dd:             ; do divide f1 = f1 / f2
  271 e0dd:             ;
  272 e0dd: a0 e0 b5        BR exe_term_loop
  273 e0e0:             
  274 e0e0:             exe_term_mod:
  275 e0e0: 04 e3 cb        jsr tok_next
  276 e0e3: 04 e0 87        jsr exe_factor
  277 e0e6: 0f 67           movrr r7,r6
  278 e0e8:             ;
  279 e0e8:             ; f1 = f1 % f2
  280 e0e8:             ;
  281 e0e8: a0 e0 b5        BR exe_term_loop
  282 e0eb:             
  283 e0eb:             exe_term_done:
  284 e0eb: 0f 75           MOVRR r5,r7
  285 e0ed: 08 60           popr r6
  286 e0ef: 08 50           popr r5
  287 e0f1: 05              ret
  288 e0f2:             ;
  289 e0f2:             ; static VARIABLE_TYPE expr()
  290 e0f2:             ;
  291 e0f2:             ; R5 = t1
  292 e0f2:             ; R6 = t2
  293 e0f2:             ; R7 = return value
  294 e0f2:             ;
  295 e0f2:             exe_expr:
  296 e0f2: 07 05           pushr r5
  297 e0f4: 07 06           pushr r6
  298 e0f6:             
  299 e0f6: 04 e0 ac        jsr exe_term
  300 e0f9: 0f 57           MOVRR r7,r5
  301 e0fb:             
  302 e0fb:             exe_expr_loop:
  303 e0fb: 04 e3 c5        jsr tok_token
  304 e0fe: 0d 17           ldtI TOKENIZER_PLUS
  305 e100: a8 e1 15        BREQ exe_expr_plus
  306 e103: 0d 18           ldtI TOKENIZER_MINUS
  307 e105: a8 e1 20        breq exe_expr_minus
  308 e108: 0d 19           ldtI TOKENIZER_AND
  309 e10a: a8 e1 2b        breq exe_expr_and
  310 e10d: 0d 1a           ldti TOKENIZER_OR
  311 e10f: a8 e1 36        breq exe_expr_or
  312 e112:             
  313 e112: a0 e1 41        br exe_expr_done
  314 e115:             
  315 e115:             exe_expr_plus:
  316 e115: 04 e3 cb        jsr tok_next
  317 e118: 04 e0 ac        jsr exe_term
  318 e11b: 0f 67           movrr r7,r6
  319 e11d:             ;
  320 e11d:             ; t1 = t1 + t2
  321 e11d:             ;
  322 e11d: a0 e0 fb        BR exe_expr_loop
  323 e120:             
  324 e120:             exe_expr_minus:
  325 e120: 04 e3 cb        jsr tok_next
  326 e123: 04 e0 ac        jsr exe_term
  327 e126: 0f 67           movrr r7,r6
  328 e128:             ;
  329 e128:             ; t1 = t1 - t2
  330 e128:             ;
  331 e128: a0 e0 fb        BR exe_expr_loop
  332 e12b:             
  333 e12b:             exe_expr_and:
  334 e12b: 04 e3 cb        jsr tok_next
  335 e12e: 04 e0 ac        jsr exe_term
  336 e131: 0f 67           movrr r7,r6
  337 e133:             ;
  338 e133:             ; t1 = t1 & t2
  339 e133:             ;
  340 e133: a0 e0 fb        BR exe_expr_loop
  341 e136:             
  342 e136:             exe_expr_or:
  343 e136: 04 e3 cb        jsr tok_next
  344 e139: 04 e0 ac        jsr exe_term
  345 e13c: 0f 67           movrr r7,r6
  346 e13e:             ;
  347 e13e:             ; t1 = t1 | t2
  348 e13e:             ;
  349 e13e: a0 e0 fb        BR exe_expr_loop
  350 e141:             
  351 e141:             exe_expr_done:
  352 e141: 0f 75           MOVRR r5,r7
  353 e143: 08 60           popr r6
  354 e145: 08 50           popr r5
  355 e147: 05              ret
  356 e148:             ;
  357 e148:             ; int relation ()
  358 e148:             ;
  359 e148:             ; R5 = r1
  360 e148:             ; R6 = r2
  361 e148:             ; R7 = return value
  362 e148:             ;
  363 e148:             
  364 e148:             exe_relation:
  365 e148: 07 05           pushr r5
  366 e14a: 07 06           pushr r6
  367 e14c:             
  368 e14c: 04 e0 f2        jsr exe_expr
  369 e14f: 0f 57           MOVRR r7,r5
  370 e151:             
  371 e151:             exe_relation_loop:
  372 e151: 04 e3 c5        jsr tok_token
  373 e154: 0d 21           LDTI TOKENIZER_LT
  374 e156: a8 e1 66        BREQ exe_relation_lt
  375 e159: 0d 22           ldti TOKENIZER_GT
  376 e15b: a8 e1 71        breq exe_relation_gt
  377 e15e: 0d 23           ldti TOKENIZER_EQ
  378 e160: a8 e1 7c        breq exe_relation_eq
  379 e163:             
  380 e163: a0 e1 87        br exe_relation_done
  381 e166:             
  382 e166:             exe_relation_lt:
  383 e166: 04 e3 cb        jsr tok_next
  384 e169: 04 e0 f2        jsr exe_expr
  385 e16c: 0f 67           movrr r7,r6
  386 e16e:             ;
  387 e16e:             ; r1 = r1 < r2
  388 e16e:             ;
  389 e16e: a0 e1 51        BR exe_relation_loop
  390 e171:             
  391 e171:             exe_relation_gt:
  392 e171: 04 e3 cb        jsr tok_next
  393 e174: 04 e0 f2        jsr exe_expr
  394 e177: 0f 67           movrr r7,r6
  395 e179:             ;
  396 e179:             ; r1 = r1 > r2
  397 e179:             ;
  398 e179:             
  399 e179: a0 e1 51        BR exe_relation_loop
  400 e17c:             
  401 e17c:             exe_relation_eq:
  402 e17c: 04 e3 cb        jsr tok_next
  403 e17f: 04 e0 f2        jsr exe_expr
  404 e182: 0f 67           movrr r7,r6
  405 e184:             ;
  406 e184:             ; r1 = r1 == r2
  407 e184:             ;
  408 e184: a0 e1 51        BR exe_relation_loop
  409 e187:             
  410 e187:             exe_relation_done:
  411 e187: 0f 75           MOVRR r5,r7
  412 e189: 08 60           popr r6
  413 e18b: 08 50           popr r5
  414 e18d: 05              ret
  415 e18e:             
  416 e18e:             ;
  417 e18e:             ; char * index_find (int linenum)
  418 e18e:             ;
  419 e18e:             ; call with line in R7
  420 e18e:             ; return with val in R7 - tokenbuffer ptr
  421 e18e:             ;
  422 e18e:             exe_index_find:
  423 e18e: 04 e4 18        JSR tok_find
  424 e191: 05              RET
  425 e192:             ;
  426 e192:             ; void jump_linenum(linenum)
  427 e192:             ;
  428 e192:             ; Linenum in R7
  429 e192:             ;
  430 e192:             exe_jump_line:
  431 e192: 04 e1 8e        JSR exe_index_find
  432 e195: 2f              MVRHA R7
  433 e196: a2 e1 a9        BRNZ exe_jump_line1
  434 e199: 27              MVRLA R7
  435 e19a: a2 e1 a9        BRNZ exe_jump_line1
  436 e19d:             ;
  437 e19d:             ; returned 0 line not found
  438 e19d:             ;
  439 e19d: 0e 24           LDAI TOKENIZER_CR
  440 e19f: 04 e0 68        JSR exe_accept
  441 e1a2: 1e 02 00        MVIW r6,bas_ended
  442 e1a5: 0e 01           LDAI 1
  443 e1a7: 4e              STAVR R6
  444 e1a8: 05              ret
  445 e1a9:             exe_jump_line1:
  446 e1a9: 04 e4 54        jsr tok_goto
  447 e1ac: 05              ret
  448 e1ad:             ;
  449 e1ad:             ; void goto_statement()
  450 e1ad:             ;
  451 e1ad:             exe_goto_stmt:
  452 e1ad: 0e 0d           LDAI TOKENIZER_GOTO
  453 e1af: 04 e0 68        JSR exe_accept
  454 e1b2: 04 e0 f2        JSR exe_expr
  455 e1b5: 04 e1 92        JSR exe_jump_line
  456 e1b8: 05              RET
  457 e1b9:             ;
  458 e1b9:             ; void print_statment()
  459 e1b9:             ;
  460 e1b9:             exe_print_stmt:
  461 e1b9: 0e 06           LDAI TOKENIZER_PRINT
  462 e1bb: 04 e0 68        jsr exe_accept
  463 e1be:             
  464 e1be:             exe_print_stmt_loop:
  465 e1be: 04 e3 c5        jsr tok_token
  466 e1c1: 0d 03           LDTI TOKENIZER_STRING
  467 e1c3: aa e1 d4        BRNEQ exe_print_stmt1
  468 e1c6:             ;
  469 e1c6:             ; this should return string to print in r2
  470 e1c6:             ; tok_string may not be needed tokenbufferptr is at string ?
  471 e1c6:             ;
  472 e1c6: 04 e4 08        jsr tok_string
  473 e1c9: 0f 27           movrr r7,r2
  474 e1cb: 04 ff 00        jsr stringout
  475 e1ce: 04 e3 cb        jsr tok_next
  476 e1d1: a0 e2 07        br exe_print_stmt_test
  477 e1d4:             
  478 e1d4:             exe_print_stmt1:
  479 e1d4:             
  480 e1d4: 0d 15           ldti TOKENIZER_COMMA
  481 e1d6: aa e1 e4        BRNEQ exe_print_stmt2
  482 e1d9: 0e 20           LDAI ' '
  483 e1db: 04 ff 04        JSR charout
  484 e1de: 04 e3 cb        jsr tok_next
  485 e1e1: a0 e2 07        br exe_print_stmt_test
  486 e1e4:             
  487 e1e4:             exe_print_stmt2:
  488 e1e4: 0d 16           ldti TOKENIZER_SEMICOLON
  489 e1e6: aa e1 ef        BRNEQ exe_print_stmt3
  490 e1e9: 04 e3 cb        jsr tok_next
  491 e1ec: a0 e2 07        br exe_print_stmt_test
  492 e1ef:             
  493 e1ef:             exe_print_stmt3:
  494 e1ef: 0d 04           ldti TOKENIZER_VARIABLE
  495 e1f1: a8 e2 01        BREQ exe_print_stmt4
  496 e1f4: 0d 02           ldti TOKENIZER_NUMBER
  497 e1f6: a8 e2 01        breq exe_print_stmt4
  498 e1f9: 0d 1f           ldti  TOKENIZER_LEFTP
  499 e1fb: a8 e2 01        breq exe_print_stmt4
  500 e1fe:             
  501 e1fe: a0 e2 17        br exe_print_stmt_done
  502 e201:             
  503 e201:             exe_print_stmt4:
  504 e201: 04 e0 f2        jsr exe_expr
  505 e204: 04 ff 14        JSR showr7
  506 e207:             ;   br exe_print_stmt_test // falls through
  507 e207:             
  508 e207:             exe_print_stmt_test:
  509 e207: 04 e3 c5        jsr tok_token
  510 e20a: 0d 24           LDTI TOKENIZER_CR
  511 e20c: a8 e2 17        breq exe_print_stmt_done
  512 e20f: 0d 01           LDTI TOKENIZER_EOF
  513 e211: a8 e2 17        breq exe_print_stmt_done
  514 e214: a0 e1 be        br exe_print_stmt_loop
  515 e217:             
  516 e217:             exe_print_stmt_done:
  517 e217: 1a ea 64        mviw R2,CRLF
  518 e21a: 04 ff 00        jsr stringout
  519 e21d: 04 e3 cb        jsr tok_next
  520 e220: 05              ret
  521 e221:             
  522 e221:             ;
  523 e221:             ; void if_statement()
  524 e221:             ;
  525 e221:             exe_if_stmt:
  526 e221: 03              halt
  527 e222: 0e 07           LDAI TOKENIZER_IF
  528 e224: 04 e0 68        JSR exe_accept
  529 e227:             
  530 e227: 04 e1 48        JSR exe_relation
  531 e22a: 0e 08           LDAI TOKENIZER_THEN
  532 e22c: 04 e0 68        JSR exe_accept
  533 e22f: 0d 01           LDTI 1
  534 e231: aa e2 37        BRNEQ exe_if_stmt1
  535 e234: 04 e2 fe        JSR exe_stmt
  536 e237:             exe_if_stmt1:
  537 e237: 04 00 0c        jsr TOKENIZER_NEXT
  538 e23a:             ;    ////////
  539 e23a:             
  540 e23a:             ;
  541 e23a:             ; void let_statement()
  542 e23a:             ;
  543 e23a:             exe_let_stmt:
  544 e23a: 04 e4 04      jsr tok_variable_num
  545 e23d: 37            mvarl r7
  546 e23e: 0f 67         movrr r7,r6
  547 e240: 0e 04         ldai TOKENIZER_VARIABLE
  548 e242: 04 e0 68      jsr exe_accept
  549 e245: 0e 23         ldai TOKENIZER_EQ
  550 e247: 04 e0 68      jsr exe_accept
  551 e24a: 04 e0 f2      jsr exe_expr
  552 e24d: 26            mvrla r6
  553 e24e: 04 e3 b3      JSR exe_set_variable
  554 e251: 0e 24         ldai TOKENIZER_CR
  555 e253: 04 e0 68      jsr exe_accept
  556 e256: 05            ret
  557 e257:             
  558 e257:             ;
  559 e257:             ; void gosub_statement()
  560 e257:             ;
  561 e257:             exe_gosub_stmt:
  562 e257: 0e 0e           ldai TOKENIZER_GOSUB
  563 e259: 04 e0 68        jsr exe_accept
  564 e25c: 04 e3 fb        jsr tok_num
  565 e25f: 0e 02           ldai TOKENIZER_NUMBER
  566 e261: 04 e0 68        jsr exe_accept
  567 e264: 0e 24           ldai TOKENIZER_CR
  568 e266: 04 e0 68        jsr exe_accept
  569 e269:             ;
  570 e269:             ; setup to use for storage area via R4
  571 e269:             ;
  572 e269:             ;   movrr R9,R4
  573 e269:             ;
  574 e269:             ; save current token buffer ptr to gosub stack
  575 e269:             ;
  576 e269: 23             mvrla r3
  577 e26a: 4d             stavr r5
  578 e26b: 55             incr r5
  579 e26c: 2b             mvrha r3
  580 e26d: 4d             stavr r5
  581 e26e: 55             incr  r5
  582 e26f:             ;
  583 e26f:             ; write new gosub stack ptr location back
  584 e26f:             ;
  585 e26f:             ;   MOVRR R4,R9
  586 e26f:             
  587 e26f: 04 e1 92       JSR exe_jump_line
  588 e272: 05             RET
  589 e273:             
  590 e273:             ;
  591 e273:             ; void return_statment()
  592 e273:             ;
  593 e273:             exe_return_stmt:
  594 e273: 0e 0f           ldai TOKENIZER_RETURN
  595 e275: 04 e0 68        jsr exe_accept
  596 e278:             ;
  597 e278:             ; setup to use for storage area via R4
  598 e278:             ;
  599 e278:             ;   movrr R9,R4
  600 e278:             
  601 e278: 5d             decr r5
  602 e279: 5d             decr r5
  603 e27a:             
  604 e27a: 45             ldavr r5
  605 e27b: 33             mvarl r3
  606 e27c: 55             incr r5
  607 e27d: 45             ldavr r5
  608 e27e: 3b             mvarh r3
  609 e27f:             
  610 e27f: 5d             decr r5
  611 e280:             ;   movrr r4,r9
  612 e280:             
  613 e280: 05             ret
  614 e281:             
  615 e281:             ;
  616 e281:             ; void next_statement()
  617 e281:             ;
  618 e281:             exe_next_stmt:
  619 e281:             ;
  620 e281:             ; setup to use for storage area via R4
  621 e281:             ;
  622 e281:             ;    movrr r8,r4
  623 e281:             ; backup to the TO Value
  624 e281: 5c              decr r4
  625 e282: 5c              decr r4
  626 e283: 5c              decr r4
  627 e284: 5c              decr r4
  628 e285:             ;
  629 e285:             ; eat next
  630 e285:             ;
  631 e285: 0e 0c           ldai TOKENIZER_NEXT
  632 e287: 04 e0 68        jsr exe_accept
  633 e28a:             ;
  634 e28a:             ; get variable id (in accumulator) and hold in r6 lo
  635 e28a:             ;
  636 e28a: 04 e4 04        jsr tok_variable_num
  637 e28d: 36              mvarl r6
  638 e28e:             ;
  639 e28e:             ; eat TOKENIZER_VARIABLE id
  640 e28e:             ;
  641 e28e: 0e 04           ldai TOKENIZER_VARIABLE
  642 e290: 04 e0 68        jsr exe_accept
  643 e293:             ;
  644 e293:             ; get variable value, inc by 1 and store
  645 e293:             ;
  646 e293: 26              mvrla r6
  647 e294: 04 e3 ba        jsr exe_get_variable
  648 e297: 57              incr r7
  649 e298: 26              mvrla r6
  650 e299: 04 e3 b3        jsr exe_set_variable
  651 e29c:             ;
  652 e29c:             ; get TO value into R6
  653 e29c: 44              ldavr r4
  654 e29d: 36              mvarl r6
  655 e29e: 54              incr r4
  656 e29f: 44              ldavr r4
  657 e2a0: 3e              mvarh r6
  658 e2a1: 54              incr r4
  659 e2a2:             ;
  660 e2a2:             ; for now only compare low byte hack
  661 e2a2:             ;
  662 e2a2: 26              mvrla r6
  663 e2a3: 0b              mvat
  664 e2a4: 27              mvrla r7
  665 e2a5: a9 e2 af        brgt exe_next_done
  666 e2a8:             ;
  667 e2a8: 44              ldavr r4
  668 e2a9: 33              mvarl r3
  669 e2aa: 54              incr r4
  670 e2ab: 44              ldavr r4
  671 e2ac: 3b              mvarh r3
  672 e2ad: 54              incr r4
  673 e2ae: 05              ret
  674 e2af:             
  675 e2af:             exe_next_done:
  676 e2af: 5c            decr r4
  677 e2b0: 5c            decr r4
  678 e2b1: 5c            decr r4
  679 e2b2: 5c            decr r4
  680 e2b3: 5c            decr r4
  681 e2b4: 5c            decr r4
  682 e2b5:             ;  movrr r4,r8
  683 e2b5: 0e 24         ldai TOKENIZER_CR
  684 e2b7: 04 e0 68      jsr exe_accept
  685 e2ba: 05            ret
  686 e2bb:             
  687 e2bb:             ;
  688 e2bb:             ; void for_statement()
  689 e2bb:             ;
  690 e2bb:             exe_for_stmt:
  691 e2bb:             ;
  692 e2bb:             ; setup to use for storage area via R4
  693 e2bb:             ;
  694 e2bb:             ;    movrr r8,r4
  695 e2bb:             ;
  696 e2bb:             ; eat FOR
  697 e2bb:             ;
  698 e2bb: 0e 0a         ldai TOKENIZER_FOR
  699 e2bd: 04 e0 68      jsr exe_accept
  700 e2c0:             ;
  701 e2c0:             ; get variable id (in accumulator) and hold in r6 lo
  702 e2c0:             ;
  703 e2c0: 04 e4 04      jsr tok_variable_num
  704 e2c3: 36            mvarl r6
  705 e2c4:             ;
  706 e2c4:             ; store variable id in for storage hack only lo byte, hi byte 0
  707 e2c4:             ;
  708 e2c4: 4c            stavr r4
  709 e2c5: 54            incr r4
  710 e2c6: 0e 00         ldai 0
  711 e2c8: 4c            stavr r4
  712 e2c9: 54            incr r4
  713 e2ca:             ;
  714 e2ca:             ; eat variable id and = then get starting value
  715 e2ca:             ;
  716 e2ca: 0e 04         ldai TOKENIZER_VARIABLE
  717 e2cc: 04 e0 68      jsr exe_accept
  718 e2cf: 0e 23         ldai TOKENIZER_EQ
  719 e2d1: 04 e0 68      jsr exe_accept
  720 e2d4: 04 e0 f2      jsr exe_expr
  721 e2d7:             ;
  722 e2d7:             ; set variable to starting value
  723 e2d7:             ;
  724 e2d7: 26            mvrla r6
  725 e2d8: 04 e3 b3      JSR exe_set_variable
  726 e2db:             ;
  727 e2db:             ; eat TO and get to value
  728 e2db:             ;
  729 e2db: 0e 0b         ldai TOKENIZER_TO
  730 e2dd: 04 e0 68      jsr exe_accept
  731 e2e0: 04 e0 f2      jsr exe_expr
  732 e2e3:             ;
  733 e2e3:             ; store to value in for storage area
  734 e2e3:             ;
  735 e2e3: 27            mvrla r7
  736 e2e4: 4c            stavr r4
  737 e2e5: 54            incr r4
  738 e2e6: 2f            mvrha r7
  739 e2e7: 4c            stavr r4
  740 e2e8: 54            incr r4
  741 e2e9:             ;
  742 e2e9:             ; EAT EOL
  743 e2e9:             ;
  744 e2e9: 0e 24         ldai TOKENIZER_CR
  745 e2eb: 04 e0 68      jsr exe_accept
  746 e2ee:             ;
  747 e2ee:             ; store instruction after for in for storage area
  748 e2ee:             ;
  749 e2ee: 23              mvrla r3
  750 e2ef: 4c              stavr r4
  751 e2f0: 54              incr r4
  752 e2f1: 2b              mvrha r3
  753 e2f2: 4c              stavr r4
  754 e2f3: 54              incr r4
  755 e2f4:             ;
  756 e2f4:             ;   save for stackptr
  757 e2f4:             ;
  758 e2f4:             ;    movrr r4,r8
  759 e2f4:             ;
  760 e2f4: 05              ret
  761 e2f5:             ;
  762 e2f5:             ; void peek_statment()
  763 e2f5:             ;
  764 e2f5:             exe_peek_stmt:
  765 e2f5: 03            halt
  766 e2f6:             
  767 e2f6:             ;
  768 e2f6:             ; void poke_statement()
  769 e2f6:             ;
  770 e2f6:             exe_poke_stmt:
  771 e2f6: 03            halt
  772 e2f7:             
  773 e2f7:             ;
  774 e2f7:             ; void end_statement()
  775 e2f7:             ;
  776 e2f7:             exe_end_stmt:
  777 e2f7: 1e 02 00      mviw r6,bas_ended
  778 e2fa: 0e 01         LDAI 1
  779 e2fc: 4e            STAVR r6
  780 e2fd: 05            ret
  781 e2fe:             ;
  782 e2fe:             ; void statment()
  783 e2fe:             ;
  784 e2fe:             exe_stmt:
  785 e2fe:             ;    MVIW R2,exe_stmt_msg
  786 e2fe:             ;    JSR stringout
  787 e2fe:             ;    JSR showaddr
  788 e2fe: 04 e3 c5        jsr tok_token
  789 e301:             ;    PUSH
  790 e301:             ;    JSR showbytea
  791 e301:             ;    MVIW R2,CRLF
  792 e301:             ;    JSR STRINGOUT
  793 e301:             ;    POP
  794 e301:             
  795 e301:             
  796 e301: 0d 06           LDTI TOKENIZER_PRINT
  797 e303: aa e3 0a        BRNEQ exe_stmt1
  798 e306: 04 e1 b9        JSR exe_print_stmt
  799 e309: 05              ret
  800 e30a:             
  801 e30a:             exe_stmt1:
  802 e30a: 0d 07           LDTI TOKENIZER_IF
  803 e30c: aa e3 13        BRNEQ exe_stmt2
  804 e30f: 04 e2 21        JSR exe_if_stmt
  805 e312: 05              ret
  806 e313:             
  807 e313:             exe_stmt2:
  808 e313: 0d 04           LDTI TOKENIZER_VARIABLE
  809 e315: aa e3 1c        BRNEQ exe_stmt3
  810 e318: 04 e2 3a        JSR exe_let_stmt
  811 e31b: 05              ret
  812 e31c:             
  813 e31c:             exe_stmt3:
  814 e31c: 0d 0e           LDTI TOKENIZER_GOSUB
  815 e31e: aa e3 25        BRNEQ exe_stmt4
  816 e321: 04 e2 57        JSR exe_gosub_stmt
  817 e324: 05              ret
  818 e325:             
  819 e325:             exe_stmt4:
  820 e325: 0d 0f           LDTI TOKENIZER_RETURN
  821 e327: aa e3 2e        BRNEQ exe_stmt5
  822 e32a: 04 e2 73        JSR exe_return_stmt
  823 e32d: 05              ret
  824 e32e:             
  825 e32e:             exe_stmt5:
  826 e32e: 0d 0a           LDTI TOKENIZER_FOR
  827 e330: aa e3 37        BRNEQ exe_stmt6
  828 e333: 04 e2 bb        JSR exe_for_stmt
  829 e336: 05              ret
  830 e337:             
  831 e337:             exe_stmt6:
  832 e337: 0d 12           LDTI TOKENIZER_PEEK
  833 e339: aa e3 40        BRNEQ exe_stmt7
  834 e33c: 04 e2 f5        JSR exe_peek_stmt
  835 e33f: 05              ret
  836 e340:             
  837 e340:             exe_stmt7:
  838 e340: 0d 13           LDTI TOKENIZER_POKE
  839 e342: aa e3 49        BRNEQ exe_stmt8
  840 e345: 04 e2 f6        JSR exe_poke_stmt
  841 e348: 05              ret
  842 e349:             
  843 e349:             exe_stmt8:
  844 e349: 0d 0c           LDTI TOKENIZER_NEXT
  845 e34b: aa e3 52        BRNEQ exe_stmt9
  846 e34e: 04 e2 81        JSR exe_next_stmt
  847 e351: 05              ret
  848 e352:             
  849 e352:             exe_stmt9:
  850 e352: 0d 14           LDTI TOKENIZER_END
  851 e354: aa e3 5b        BRNEQ exe_stmt10
  852 e357: 04 e2 f7        JSR exe_end_stmt
  853 e35a: 05              ret
  854 e35b:             
  855 e35b:             exe_stmt10:
  856 e35b: 0d 05           LDTI TOKENIZER_LET
  857 e35d: aa e3 69        BRNEQ exe_stmt11
  858 e360: 0e 05           LDAI TOKENIZER_LET
  859 e362: 04 e0 68        JSR exe_accept
  860 e365: 04 e2 3a        JSR exe_let_stmt
  861 e368: 05              ret
  862 e369:             
  863 e369:             exe_stmt11:
  864 e369: 0d 0d           LDTI TOKENIZER_GOTO
  865 e36b: aa e3 72        BRNEQ exe_stmt12
  866 e36e: 04 e1 ad        JSR exe_goto_stmt
  867 e371: 05              ret
  868 e372:             
  869 e372:             exe_stmt12:
  870 e372: 1a e0 38        MVIW R2,bas_msg3
  871 e375: 04 ff 00        jsr stringout
  872 e378: 04 ff 0c        jsr showaddr
  873 e37b: 04 ff 18        jsr showbyte
  874 e37e: 04 e3 c4        jsr bas_error
  875 e381:             
  876 e381:             ;
  877 e381:             ; void line_statement (void)
  878 e381:             ;
  879 e381:             exe_line_stmt:
  880 e381:             ;line_statement(void) {
  881 e381:             ;    DEBUG_PRINTF("----------- Line number %d ---------\n", tokenizer_num());
  882 e381:             ;#ifdef unused
  883 e381:             ;    index_add(tokenizer_num(), tokenizer_pos());
  884 e381:             ;#endif
  885 e381:             ;    accept(TOKENIZER_LINENUM);
  886 e381:             ;    statement();
  887 e381:             ;    return;
  888 e381: 0e 25           LDAI TOKENIZER_LINENUM
  889 e383: 04 e0 68        jsr exe_accept
  890 e386: 04 e2 fe        jsr exe_stmt
  891 e389: 05              ret
  892 e38a:             
  893 e38a:             ;
  894 e38a:             ; void ubasic_run()
  895 e38a:             ;
  896 e38a:             do_basic:
  897 e38a:             ;    mviw r7,000ah
  898 e38a:             ;    jsr tok_find
  899 e38a:             ;    jsr showr7
  900 e38a:             ;    mviw r2,CRLF
  901 e38a:             ;    jsr stringout
  902 e38a:             
  903 e38a:             ;    mviw r7,0014h
  904 e38a:             ;    jsr tok_find
  905 e38a:             ;    jsr showr7
  906 e38a:             ;    mviw r2,CRLF
  907 e38a:             ;    jsr stringout
  908 e38a:             
  909 e38a: 04 e0 58        JSR exe_init
  910 e38d:             
  911 e38d:             ;    mviw r7,0080h
  912 e38d:             ;    jsr tok_find
  913 e38d:             ;    jsr showr7
  914 e38d:             ;    mviw r2,CRLF
  915 e38d:             ;    jsr stringout
  916 e38d:             exe_run:
  917 e38d: 04 e3 9c        jsr exe_finished
  918 e390: 0d 01           LDTI 1
  919 e392: aa e3 96        BRNEQ exe_run_cont
  920 e395: 05              ret
  921 e396:             
  922 e396:             exe_run_cont:
  923 e396: 04 e3 81        jsr exe_line_stmt
  924 e399: a0 e3 8d        BR exe_run
  925 e39c:             
  926 e39c:             ;
  927 e39c:             ; int ubasic_finished()
  928 e39c:             ;
  929 e39c:             exe_finished:
  930 e39c: 1a 02 00        MVIW R2,bas_ended
  931 e39f: 42              LDAVR R2
  932 e3a0: 0d 01           LDTI 1
  933 e3a2: a8 e3 b0        BREQ exe_finished_yes
  934 e3a5: 04 e4 0c        JSR tok_finished
  935 e3a8: 0d 01           LDTI 1
  936 e3aa: a8 e3 b0        BREQ exe_finished_yes
  937 e3ad: 0e 00           LDAI 0
  938 e3af: 05              RET
  939 e3b0:             exe_finished_yes:
  940 e3b0: 0e 01           LDAI 1
  941 e3b2: 05              ret
  942 e3b3:             
  943 e3b3:             ;
  944 e3b3:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
  945 e3b3:             ;
  946 e3b3:             ; R7 value (only using low byte)
  947 e3b3:             ; ACCUMULATOR Variable ref number
  948 e3b3:             ;
  949 e3b3:             ; Destroys R2 and accumulator, could be fixed with a push/pop
  950 e3b3:             ;
  951 e3b3:             exe_set_variable:
  952 e3b3: 1a 01 00        MVIW R2,BASIC_VARS
  953 e3b6: 32              MVARL R2
  954 e3b7:             ;
  955 e3b7: 27              MVRLA R7
  956 e3b8: 4a              STAVR R2
  957 e3b9: 05              RET
  958 e3ba:             ;
  959 e3ba:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
  960 e3ba:             ;
  961 e3ba:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
  962 e3ba:             ;
  963 e3ba:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
  964 e3ba:             ; and only 0-25 (var names a-z) supported
  965 e3ba:             ; for now values are 1 byte, upper byte of R7 forced to 0
  966 e3ba:             ;
  967 e3ba:             ; Destroys R2 and accumulator, could be fixed with a push/pop
  968 e3ba:             ;
  969 e3ba:             exe_get_variable:
  970 e3ba: 1a 01 00        MVIW R2,BASIC_VARS
  971 e3bd: 32              MVARL R2
  972 e3be:             ;
  973 e3be: 42              LDAVR R2
  974 e3bf: 37              MVARL R7
  975 e3c0: 0e 00           LDAI 0
  976 e3c2: 3f              MVARH R7
  977 e3c3: 05              RET
  978 e3c4:             
  979 e3c4:             
  980 e3c4:             bas_error:
  981 e3c4: 05            RET
  982 e3c5:             
  983 e3c5:             ;
  984 e3c5:             ; Tokenizer execute support code
  985 e3c5:             ;
  986 e3c5:             tok_token:
  987 e3c5: 43            LDAVR R3
  988 e3c6: 05            RET
  989 e3c7:             
  990 e3c7:             tok_init:
  991 e3c7: 1b e9 74      MVIW r3,basic_test
  992 e3ca: 05            RET
  993 e3cb:             
  994 e3cb:             tok_next:
  995 e3cb: 43            ldavr r3
  996 e3cc: 0d 02         ldti TOKENIZER_NUMBER
  997 e3ce: aa e3 d5      BRNEQ tok_next1
  998 e3d1: 53            incr r3
  999 e3d2: 53            incr r3
 1000 e3d3: 53            incr r3
 1001 e3d4: 05            RET
 1002 e3d5:             
 1003 e3d5:             tok_next1:
 1004 e3d5: 0d 04         ldti TOKENIZER_VARIABLE
 1005 e3d7: aa e3 de      BRNEQ tok_next2
 1006 e3da: 53            incr r3
 1007 e3db: 53            incr r3
 1008 e3dc: 53            incr r3
 1009 e3dd: 05            RET
 1010 e3de:             
 1011 e3de:             tok_next2:
 1012 e3de: 0d 25         ldti TOKENIZER_LINENUM
 1013 e3e0: aa e3 e9      BRNEQ tok_next3
 1014 e3e3: 53            incr r3
 1015 e3e4: 53            incr r3
 1016 e3e5: 53            incr r3
 1017 e3e6: 53            incr r3
 1018 e3e7: 53            incr r3
 1019 e3e8: 05            RET
 1020 e3e9:             
 1021 e3e9:             tok_next3:
 1022 e3e9: 0d 03         ldti TOKENIZER_STRING
 1023 e3eb: aa e3 f9      BRNEQ tok_next4
 1024 e3ee: 53            incr r3
 1025 e3ef:             
 1026 e3ef:             tok_next3_loop:
 1027 e3ef: 43            LDAVR R3
 1028 e3f0: a1 e3 f7      BRZ tok_next3_done
 1029 e3f3: 53            incr r3
 1030 e3f4: a0 e3 ef      BR tok_next3_loop
 1031 e3f7:             
 1032 e3f7:             tok_next3_done:
 1033 e3f7: 53            incr r3
 1034 e3f8: 05            RET
 1035 e3f9:             
 1036 e3f9:             tok_next4:
 1037 e3f9: 53            incr r3
 1038 e3fa: 05            ret
 1039 e3fb:             
 1040 e3fb:             ;
 1041 e3fb:             ; numbers stored low byte followed by high byte in memory
 1042 e3fb:             
 1043 e3fb:             tok_num:
 1044 e3fb: 53              incr r3
 1045 e3fc: 43              ldavr r3
 1046 e3fd: 37              mvarl r7
 1047 e3fe: 53              incr r3
 1048 e3ff: 43              ldavr r3
 1049 e400: 3f              mvarh r7
 1050 e401: 5b              decr r3
 1051 e402: 5b              decr r3
 1052 e403: 05              ret
 1053 e404:             
 1054 e404:             ;
 1055 e404:             ; hack only using low byte of id for now
 1056 e404:             ; return in accumulator
 1057 e404:             ;
 1058 e404:             tok_variable_num:
 1059 e404: 53              incr r3
 1060 e405: 43              ldavr r3
 1061 e406: 5b              decr r3
 1062 e407: 05              ret
 1063 e408:             
 1064 e408:             tok_string:
 1065 e408: 0f 73           movrr r3,r7
 1066 e40a: 57              incr r7
 1067 e40b: 05              ret
 1068 e40c:             
 1069 e40c:             tok_finished:
 1070 e40c: 43              ldavr r3
 1071 e40d: 0d 01           ldti 1
 1072 e40f: aa e4 15        brneq tok_finished1
 1073 e412: 0e 01           ldai 1
 1074 e414: 05              ret
 1075 e415:             tok_finished1:
 1076 e415: 0e 00           ldai 0
 1077 e417: 05              ret
 1078 e418:             
 1079 e418:             ;
 1080 e418:             ; find linenum in r7
 1081 e418:             ;
 1082 e418:             tok_find:
 1083 e418:             ;    jsr showr7
 1084 e418: 07 05           pushr r5
 1085 e41a: 1d e9 74        MVIW r5,basic_test
 1086 e41d:             
 1087 e41d:             tok_find_loop:
 1088 e41d: 45              ldavr r5
 1089 e41e: 0d 01           ldti 01
 1090 e420: aa e4 2a        brneq tok_find_loop1
 1091 e423: 1f 00 00        mviw r7,0
 1092 e426: 27              mvrla r7
 1093 e427: 08 50           popr r5
 1094 e429:             
 1095 e429: 05              ret
 1096 e42a:             tok_find_loop1:
 1097 e42a: 55              incr r5
 1098 e42b: 27              mvrla r7
 1099 e42c: 0b              MVAT
 1100 e42d: 45              ldavr r5
 1101 e42e: aa e4 41        brneq tok_find1
 1102 e431: 55              incr r5
 1103 e432: 2f              mvrha r7
 1104 e433: 0b              MVAT
 1105 e434: 45              ldavr r5
 1106 e435: aa e4 42        brneq tok_find2
 1107 e438: 5d              decr r5
 1108 e439: 5d              decr r5
 1109 e43a: 0f 75           movrr r5,r7
 1110 e43c: 0e 01           ldai 1
 1111 e43e: 08 50           popr r5
 1112 e440: 05              ret
 1113 e441:             
 1114 e441:             tok_find1:
 1115 e441: 55              incr r5
 1116 e442:             tok_find2:
 1117 e442: 55              incr r5
 1118 e443: 45              ldavr r5
 1119 e444: 1e 00 00        mviw r6,0
 1120 e447: 36              mvarl r6
 1121 e448: 5e              decr r6
 1122 e449: 5e              decr r6
 1123 e44a: 5e              decr r6
 1124 e44b:             tok_find_moveptr:
 1125 e44b: 55              incr r5
 1126 e44c: 5e              decr r6
 1127 e44d: 26              mvrla r6
 1128 e44e: a2 e4 4b        brnz tok_find_moveptr
 1129 e451: a0 e4 1d        br tok_find_loop
 1130 e454:             
 1131 e454:             tok_goto:
 1132 e454: 0f 37           movrr r7,r3
 1133 e456: 05              ret
 1134 e457:             
 1135 e457:             ;
 1136 e457:             ; list out token buffer
 1137 e457:             ; buffer address in r7
 1138 e457:             ;
 1139 e457: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1140 e45c: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1141 e463: 49 46 20 00 tokl_if: DB "IF ",0
 1142 e467: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1143 e46d: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1144 e473: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1145 e478: 54 4f 20 00 tokl_to: DB "TO ",0
 1146 e47c: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1147 e482: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1148 e488: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1149 e48f: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1150 e497: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1151 e49c: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1152 e4a2: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1153 e4a8: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1154 e4ad: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1155 e4b3: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1156 e4be:             
 1157 e4be:             
 1158 e4be:             tok_list:
 1159 e4be: 07 03           pushr r3
 1160 e4c0: 0f 37           movrr r7,r3
 1161 e4c2:             
 1162 e4c2:             
 1163 e4c2:             tok_list_loop:
 1164 e4c2: 43              ldavr r3
 1165 e4c3:             
 1166 e4c3: 0d 00           LDTI TOKENIZER_ERROR
 1167 e4c5: aa e4 d7        BRNEQ tok_list1
 1168 e4c8: 1a e4 b3        MVIW R2,tokl_error
 1169 e4cb: 04 ff 00        JSR stringout
 1170 e4ce: 04 ff 0c        JSR showaddr
 1171 e4d1: a0 e7 6d        BR tok_list_done
 1172 e4d4: a0 e4 c2        BR tok_list_loop
 1173 e4d7:             
 1174 e4d7:             tok_list1:
 1175 e4d7: 0d 01           LDTI TOKENIZER_EOF
 1176 e4d9: aa e4 e2        BRNEQ tok_list2
 1177 e4dc: a0 e7 6d        BR tok_list_done
 1178 e4df: a0 e4 c2        BR tok_list_loop
 1179 e4e2:             
 1180 e4e2:             tok_list2:
 1181 e4e2: 0d 02           LDTI TOKENIZER_NUMBER
 1182 e4e4: aa e4 f9        BRNEQ tok_list3
 1183 e4e7: 53              incr r3
 1184 e4e8: 43              ldavr r3
 1185 e4e9: 37              mvarl r7
 1186 e4ea: 53              incr r3
 1187 e4eb: 43              ldavr r3
 1188 e4ec: 3f              mvarh r7
 1189 e4ed: 53              INCR R3
 1190 e4ee: 04 ff 14        jsr showr7
 1191 e4f1: 0e 20           ldai ' '
 1192 e4f3: 04 ff 08        jsr uartout
 1193 e4f6: a0 e4 c2        BR tok_list_loop
 1194 e4f9:             
 1195 e4f9:             tok_list3:
 1196 e4f9: 0d 03           LDTI TOKENIZER_STRING
 1197 e4fb: aa e5 15        BRNEQ tok_list4
 1198 e4fe: 53              incr r3
 1199 e4ff: 0f 23           movrr r3,r2
 1200 e501: 04 ff 00        jsr stringout
 1201 e504: 0e 20           ldai ' '
 1202 e506: 04 ff 08        jsr uartout
 1203 e509:             tok_list_string:
 1204 e509: 43              ldavr r3
 1205 e50a: a1 e5 11        brz tok_list_stringend
 1206 e50d: 53              incr r3
 1207 e50e: a0 e5 09        br tok_list_string
 1208 e511:             tok_list_stringend:
 1209 e511: 53              incr r3
 1210 e512: a0 e4 c2        BR tok_list_loop
 1211 e515:             
 1212 e515:             tok_list4:
 1213 e515: 0d 04           LDTI TOKENIZER_VARIABLE
 1214 e517: aa e5 2c        BRNEQ tok_list5
 1215 e51a: 53              incr r3
 1216 e51b: 43              ldavr r3
 1217 e51c: 0d 41           ldti 'A'
 1218 e51e: b8              ADDT
 1219 e51f: 53              incr r3
 1220 e520: 53              incr r3
 1221 e521: 04 ff 08        jsr uartout
 1222 e524:             
 1223 e524:             ;    ldavr r3
 1224 e524:             ;    mvarl r7
 1225 e524:             ;    incr r3
 1226 e524:             ;    ldavr r3
 1227 e524:             ;    mvarh r7
 1228 e524:             ;    INCR R3
 1229 e524:             ;    jsr showr7
 1230 e524:             
 1231 e524: 0e 20           ldai ' '
 1232 e526: 04 ff 08        jsr uartout
 1233 e529: a0 e4 c2        BR tok_list_loop
 1234 e52c:             
 1235 e52c:             tok_list5:
 1236 e52c: 0d 05           LDTI TOKENIZER_LET
 1237 e52e: aa e5 3b        BRNEQ tok_list6
 1238 e531: 1a e4 57        MVIW R2,tokl_let
 1239 e534: 04 ff 00        JSR stringout
 1240 e537: 53              INCR R3
 1241 e538: a0 e4 c2        BR tok_list_loop
 1242 e53b:             
 1243 e53b:             tok_list6:
 1244 e53b: 0d 06           LDTI TOKENIZER_PRINT
 1245 e53d: aa e5 4a        BRNEQ tok_list7
 1246 e540: 1a e4 5c        MVIW R2,tokl_print
 1247 e543: 04 ff 00        jsr STRINGOUT
 1248 e546: 53              INCR R3
 1249 e547: a0 e4 c2        BR tok_list_loop
 1250 e54a:             
 1251 e54a:             tok_list7:
 1252 e54a: 0d 07           LDTI TOKENIZER_IF
 1253 e54c: aa e5 59        BRNEQ tok_list8
 1254 e54f: 1a e4 63        MVIW R2,tokl_if
 1255 e552: 04 ff 00        JSR stringout
 1256 e555: 53              INCR R3
 1257 e556: a0 e4 c2        BR tok_list_loop
 1258 e559:             
 1259 e559:             tok_list8:
 1260 e559: 0d 08           LDTI TOKENIZER_THEN
 1261 e55b: aa e5 68        BRNEQ tok_list9
 1262 e55e: 1a e4 67        MVIW R2,tokl_then
 1263 e561: 04 ff 00        JSR stringout
 1264 e564: 53              INCR R3
 1265 e565: a0 e4 c2        BR tok_list_loop
 1266 e568:             
 1267 e568:             tok_list9:
 1268 e568: 0d 09           LDTI TOKENIZER_ELSE
 1269 e56a: aa e5 77        BRNEQ tok_list10
 1270 e56d: 1a e4 6d        MVIW R2,tokl_else
 1271 e570: 04 ff 00        JSR stringout
 1272 e573: 53              INCR R3
 1273 e574: a0 e4 c2        BR tok_list_loop
 1274 e577:             
 1275 e577:             tok_list10:
 1276 e577: 0d 0a           LDTI TOKENIZER_FOR
 1277 e579: aa e5 86        BRNEQ tok_list11
 1278 e57c: 1a e4 73        MVIW R2,tokl_for
 1279 e57f: 04 ff 00        JSR stringout
 1280 e582: 53              INCR R3
 1281 e583: a0 e4 c2        BR tok_list_loop
 1282 e586:             
 1283 e586:             tok_list11:
 1284 e586: 0d 0b           LDTI TOKENIZER_TO
 1285 e588: aa e5 95        BRNEQ tok_list12
 1286 e58b: 1a e4 78        MVIW R2,tokl_to
 1287 e58e: 04 ff 00        JSR stringout
 1288 e591: 53              INCR R3
 1289 e592: a0 e4 c2        BR tok_list_loop
 1290 e595:             
 1291 e595:             tok_list12:
 1292 e595: 0d 0c           LDTI TOKENIZER_NEXT
 1293 e597: aa e5 a4        BRNEQ tok_list13
 1294 e59a: 1a e4 7c        MVIW R2,tokl_next
 1295 e59d: 04 ff 00        JSR stringout
 1296 e5a0: 53              INCR R3
 1297 e5a1: a0 e4 c2        BR tok_list_loop
 1298 e5a4:             
 1299 e5a4:             tok_list13:
 1300 e5a4: 0d 0d           LDTI TOKENIZER_GOTO
 1301 e5a6: aa e5 b3        BRNEQ tok_list14
 1302 e5a9: 1a e4 82        MVIW R2,tokl_goto
 1303 e5ac: 04 ff 00        JSR stringout
 1304 e5af: 53              INCR R3
 1305 e5b0: a0 e4 c2        BR tok_list_loop
 1306 e5b3:             
 1307 e5b3:             tok_list14:
 1308 e5b3: 0d 0e           LDTI TOKENIZER_GOSUB
 1309 e5b5: aa e5 c2        BRNEQ tok_list15
 1310 e5b8: 1a e4 88        MVIW R2,tokl_gosub
 1311 e5bb: 04 ff 00        JSR stringout
 1312 e5be: 53              INCR R3
 1313 e5bf: a0 e4 c2        BR tok_list_loop
 1314 e5c2:             
 1315 e5c2:             tok_list15:
 1316 e5c2: 0d 0f           LDTI TOKENIZER_RETURN
 1317 e5c4: aa e5 d1        BRNEQ tok_list16
 1318 e5c7: 1a e4 8f        MVIW R2,tokl_return
 1319 e5ca: 04 ff 00        JSR stringout
 1320 e5cd: 53              INCR R3
 1321 e5ce: a0 e4 c2        BR tok_list_loop
 1322 e5d1:             
 1323 e5d1:             tok_list16:
 1324 e5d1: 0d 10           LDTI TOKENIZER_CALL
 1325 e5d3: aa e5 e0        BRNEQ tok_list17
 1326 e5d6: 1a e4 ad        MVIW R2,tokl_call
 1327 e5d9: 04 ff 00        JSR stringout
 1328 e5dc: 53              INCR R3
 1329 e5dd: a0 e4 c2        BR tok_list_loop
 1330 e5e0:             
 1331 e5e0:             tok_list17:
 1332 e5e0: 0d 11           LDTI TOKENIZER_REM
 1333 e5e2: aa e5 ef        BRNEQ tok_list18
 1334 e5e5: 1a e4 97        MVIW R2,tokl_rem
 1335 e5e8: 04 ff 00        JSR stringout
 1336 e5eb: 53              INCR R3
 1337 e5ec: a0 e4 c2        BR tok_list_loop
 1338 e5ef:             
 1339 e5ef:             tok_list18:
 1340 e5ef: 0d 12           LDTI TOKENIZER_PEEK
 1341 e5f1: aa e5 fe        BRNEQ tok_list19
 1342 e5f4: 1a e4 9c        MVIW R2,tokl_peek
 1343 e5f7: 04 ff 00        JSR stringout
 1344 e5fa: 53              INCR R3
 1345 e5fb: a0 e4 c2        BR tok_list_loop
 1346 e5fe:             
 1347 e5fe:             tok_list19:
 1348 e5fe: 0d 13           LDTI TOKENIZER_POKE
 1349 e600: aa e6 0d        BRNEQ tok_list20
 1350 e603: 1a e4 a2        MVIW R2,tokl_poke
 1351 e606: 04 ff 00        JSR stringout
 1352 e609: 53              INCR R3
 1353 e60a: a0 e4 c2        BR tok_list_loop
 1354 e60d:             
 1355 e60d:             tok_list20:
 1356 e60d: 0d 14           LDTI TOKENIZER_END
 1357 e60f: aa e6 1c        BRNEQ tok_list21
 1358 e612: 1a e4 a8        MVIW R2,tokl_end
 1359 e615: 04 ff 00        JSR stringout
 1360 e618: 53              INCR R3
 1361 e619: a0 e4 c2        BR tok_list_loop
 1362 e61c:             
 1363 e61c:             tok_list21:
 1364 e61c: 0d 15           LDTI TOKENIZER_COMMA
 1365 e61e: aa e6 2f        BRNEQ tok_list22
 1366 e621: 0e 2c           ldai ','
 1367 e623: 04 ff 08        jsr uartout
 1368 e626: 0e 20           ldai ' '
 1369 e628: 04 ff 08        jsr uartout
 1370 e62b: 53              INCR R3
 1371 e62c: a0 e4 c2        BR tok_list_loop
 1372 e62f:             
 1373 e62f:             tok_list22:
 1374 e62f: 0d 16           LDTI TOKENIZER_SEMICOLON
 1375 e631: aa e6 42        BRNEQ tok_list23
 1376 e634: 0e 3b           ldai ';'
 1377 e636: 04 ff 08        jsr uartout
 1378 e639: 0e 20           ldai ' '
 1379 e63b: 04 ff 08        jsr uartout
 1380 e63e: 53              INCR R3
 1381 e63f: a0 e4 c2        BR tok_list_loop
 1382 e642:             
 1383 e642:             tok_list23:
 1384 e642: 0d 17           LDTI TOKENIZER_PLUS
 1385 e644: aa e6 55        BRNEQ tok_list24
 1386 e647: 0e 2b           ldai '+'
 1387 e649: 04 ff 08        jsr uartout
 1388 e64c: 0e 20           ldai ' '
 1389 e64e: 04 ff 08        jsr uartout
 1390 e651: 53              INCR R3
 1391 e652: a0 e4 c2        BR tok_list_loop
 1392 e655:             
 1393 e655:             tok_list24:
 1394 e655: 0d 18           LDTI TOKENIZER_MINUS
 1395 e657: aa e6 68        BRNEQ tok_list25
 1396 e65a: 0e 2d           ldai '-'
 1397 e65c: 04 ff 08        jsr uartout
 1398 e65f: 0e 20           ldai ' '
 1399 e661: 04 ff 08        jsr uartout
 1400 e664: 53              INCR R3
 1401 e665: a0 e4 c2        BR tok_list_loop
 1402 e668:             
 1403 e668:             tok_list25:
 1404 e668: 0d 19           LDTI TOKENIZER_AND
 1405 e66a: aa e6 7b        BRNEQ tok_list26
 1406 e66d: 0e 26           ldai '&'
 1407 e66f: 04 ff 08        jsr uartout
 1408 e672: 0e 20           ldai ' '
 1409 e674: 04 ff 08        jsr uartout
 1410 e677: 53              INCR R3
 1411 e678: a0 e4 c2        BR tok_list_loop
 1412 e67b:             
 1413 e67b:             tok_list26:
 1414 e67b: 0d 1a           LDTI TOKENIZER_OR
 1415 e67d: aa e6 8e        BRNEQ tok_list27
 1416 e680: 0e 7c           ldai '|'
 1417 e682: 04 ff 08        jsr uartout
 1418 e685: 0e 20           ldai ' '
 1419 e687: 04 ff 08        jsr uartout
 1420 e68a: 53              INCR R3
 1421 e68b: a0 e4 c2        BR tok_list_loop
 1422 e68e:             
 1423 e68e:             tok_list27:
 1424 e68e: 0d 1b           LDTI TOKENIZER_ASTR
 1425 e690: aa e6 a1        BRNEQ tok_list28
 1426 e693: 0e 2a           ldai '*'
 1427 e695: 04 ff 08        jsr uartout
 1428 e698: 0e 20           ldai ' '
 1429 e69a: 04 ff 08        jsr uartout
 1430 e69d: 53              INCR R3
 1431 e69e: a0 e4 c2        BR tok_list_loop
 1432 e6a1:             
 1433 e6a1:             tok_list28:
 1434 e6a1: 0d 1c           LDTI TOKENIZER_SLASH
 1435 e6a3: aa e6 b4        BRNEQ tok_list29
 1436 e6a6: 0e 2f           ldai '/'
 1437 e6a8: 04 ff 08        jsr uartout
 1438 e6ab: 0e 20           ldai ' '
 1439 e6ad: 04 ff 08        jsr uartout
 1440 e6b0: 53              INCR R3
 1441 e6b1: a0 e4 c2        BR tok_list_loop
 1442 e6b4:             
 1443 e6b4:             tok_list29:
 1444 e6b4: 0d 1d           LDTI TOKENIZER_MOD
 1445 e6b6: aa e6 c7        BRNEQ tok_list30
 1446 e6b9: 0e 25           ldai '%'
 1447 e6bb: 04 ff 08        jsr uartout
 1448 e6be: 0e 20           ldai ' '
 1449 e6c0: 04 ff 08        jsr uartout
 1450 e6c3: 53              INCR R3
 1451 e6c4: a0 e4 c2        BR tok_list_loop
 1452 e6c7:             
 1453 e6c7:             tok_list30:
 1454 e6c7: 0d 1e           LDTI TOKENIZER_HASH
 1455 e6c9: aa e6 da        BRNEQ tok_list31
 1456 e6cc: 0e 23           ldai '#'
 1457 e6ce: 04 ff 08        jsr uartout
 1458 e6d1: 0e 20           ldai ' '
 1459 e6d3: 04 ff 08        jsr uartout
 1460 e6d6: 53              INCR R3
 1461 e6d7: a0 e4 c2        BR tok_list_loop
 1462 e6da:             
 1463 e6da:             tok_list31:
 1464 e6da: 0d 1f           LDTI TOKENIZER_LEFTP
 1465 e6dc: aa e6 ed        BRNEQ tok_list32
 1466 e6df: 0e 28           ldai '()'
 1467 e6e1: 04 ff 08        jsr uartout
 1468 e6e4: 0e 20           ldai ' '
 1469 e6e6: 04 ff 08        jsr uartout
 1470 e6e9: 53              INCR R3
 1471 e6ea: a0 e4 c2        BR tok_list_loop
 1472 e6ed:             
 1473 e6ed:             tok_list32:
 1474 e6ed: 0d 20           LDTI TOKENIZER_RIGHTP
 1475 e6ef: aa e7 00        BRNEQ tok_list33
 1476 e6f2: 0e 29           ldai ')'
 1477 e6f4: 04 ff 08        jsr uartout
 1478 e6f7: 0e 20           ldai ' '
 1479 e6f9: 04 ff 08        jsr uartout
 1480 e6fc: 53              INCR R3
 1481 e6fd: a0 e4 c2        BR tok_list_loop
 1482 e700:             
 1483 e700:             tok_list33:
 1484 e700: 0d 21           LDTI TOKENIZER_LT
 1485 e702: aa e7 13        BRNEQ tok_list34
 1486 e705: 0e 3c           ldai '<'
 1487 e707: 04 ff 08        jsr uartout
 1488 e70a: 0e 20           ldai ' '
 1489 e70c: 04 ff 08        jsr uartout
 1490 e70f: 53              INCR R3
 1491 e710: a0 e4 c2        BR tok_list_loop
 1492 e713:             
 1493 e713:             tok_list34:
 1494 e713: 0d 22           LDTI TOKENIZER_GT
 1495 e715: aa e7 26        BRNEQ tok_list35
 1496 e718: 0e 3e           ldai '>'
 1497 e71a: 04 ff 08        jsr uartout
 1498 e71d: 0e 20           ldai ' '
 1499 e71f: 04 ff 08        jsr uartout
 1500 e722: 53              INCR R3
 1501 e723: a0 e4 c2        BR tok_list_loop
 1502 e726:             
 1503 e726:             tok_list35:
 1504 e726: 0d 23           LDTI TOKENIZER_EQ
 1505 e728: aa e7 39        BRNEQ tok_list36
 1506 e72b: 0e 3d           ldai '='
 1507 e72d: 04 ff 08        jsr uartout
 1508 e730: 0e 20           ldai ' '
 1509 e732: 04 ff 08        jsr uartout
 1510 e735: 53              INCR R3
 1511 e736: a0 e4 c2        BR tok_list_loop
 1512 e739:             
 1513 e739:             tok_list36:
 1514 e739: 0d 24           LDTI TOKENIZER_CR
 1515 e73b: aa e7 48        BRNEQ tok_list37
 1516 e73e: 1a ea 64        mviw r2,CRLF
 1517 e741: 04 ff 00        jsr stringout
 1518 e744: 53              INCR R3
 1519 e745: a0 e4 c2        BR tok_list_loop
 1520 e748:             
 1521 e748:             tok_list37:
 1522 e748: 0d 25           LDTI TOKENIZER_LINENUM
 1523 e74a: aa e7 61        BRNEQ tok_list38
 1524 e74d: 53              incr r3
 1525 e74e: 43              ldavr r3
 1526 e74f: 37              mvarl r7
 1527 e750: 53              incr r3
 1528 e751: 43              ldavr r3
 1529 e752: 3f              mvarh r7
 1530 e753: 53              INCR R3
 1531 e754: 53              incr r3
 1532 e755: 53              incr r3
 1533 e756: 04 ff 14        jsr showr7
 1534 e759: 0e 20           ldai ' '
 1535 e75b: 04 ff 08        jsr uartout
 1536 e75e: a0 e4 c2        BR tok_list_loop
 1537 e761:             
 1538 e761:             tok_list38:
 1539 e761: 1a e4 b3        MVIW R2,tokl_error
 1540 e764: 04 ff 00        JSR stringout
 1541 e767: 04 ff 0c        JSR showaddr
 1542 e76a: a0 e7 6d        BR tok_list_done
 1543 e76d:             ;
 1544 e76d:             ; any cleanup
 1545 e76d:             ;
 1546 e76d:             tok_list_done:
 1547 e76d: 08 30           popr r3
 1548 e76f: 05              ret
 1549 e770:             
 1550 e770:             ;
 1551 e770:             ;
 1552 e770:             ; Basic InterpreterParser
 1553 e770:             ; R3   =  UTILITY PTR
 1554 e770:             ; R4.L =  INPUT TEXT LINE PTR
 1555 e770:             ; R4.H =  INPUT TEXT LINE NEXTPTR
 1556 e770:             ; R5.L =  TOKEN BUFFER PTR
 1557 e770:             ; R5.H =  CURRENT TOKEN
 1558 e770:             ;
 1559 e770:             parse_keywords:
 1560 e770: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1561 e775: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1562 e77c: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1563 e780: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1564 e786: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1565 e78c: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1566 e791: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1567 e795: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1568 e79b: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1569 e7a1: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1570 e7a8: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1571 e7b0: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1572 e7b6: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1573 e7bb: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1574 e7c1: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1575 e7c7: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1576 e7cc: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1577 e7cf:             
 1578 e7cf:             ;
 1579 e7cf:             ; int singlechar (void)
 1580 e7cf:             ;
 1581 e7cf:             ; return TOKEN result in accumulator
 1582 e7cf:             ;
 1583 e7cf:             ; ready for testing
 1584 e7cf:             ;
 1585 e7cf:             parse_singlechar:
 1586 e7cf:             ;
 1587 e7cf: 1b 03 00        MVIW r3,parse_input_line
 1588 e7d2: 24              mvrla r4
 1589 e7d3: 33              mvarl r3
 1590 e7d4:             ;
 1591 e7d4: 0d 0a           ldti 0ah
 1592 e7d6: aa e7 dc        brneq parsechar1
 1593 e7d9: 0e 24           ldai TOKENIZER_CR
 1594 e7db: 05              ret
 1595 e7dc:             parsechar1:
 1596 e7dc: 0d 2c           ldti ','
 1597 e7de: aa e7 e4        brneq parsechar2
 1598 e7e1: 0e 15           ldai TOKENIZER_COMMA
 1599 e7e3: 05              ret
 1600 e7e4:             parsechar2:
 1601 e7e4: 0d 3b           ldti ';'
 1602 e7e6: aa e7 ec        brneq parsechar3
 1603 e7e9: 0e 16           ldai TOKENIZER_SEMICOLON
 1604 e7eb: 05              ret
 1605 e7ec:             parsechar3:
 1606 e7ec: 0d 2b           ldti '+'
 1607 e7ee: aa e7 f4        brneq parsechar4
 1608 e7f1: 0e 17           ldai TOKENIZER_PLUS
 1609 e7f3: 05              ret
 1610 e7f4:             parsechar4:
 1611 e7f4: 0d 2d           ldti '-'
 1612 e7f6: aa e7 fc        brneq parsechar5
 1613 e7f9: 0e 18           ldai TOKENIZER_MINUS
 1614 e7fb: 05              ret
 1615 e7fc:             parsechar5:
 1616 e7fc: 0d 26           ldti '&'
 1617 e7fe: aa e8 04        brneq parsechar6
 1618 e801: 0e 19           ldai TOKENIZER_AND
 1619 e803: 05              ret
 1620 e804:             parsechar6:
 1621 e804: 0d 7c           ldti '|'
 1622 e806: aa e8 0c        brneq parsechar7
 1623 e809: 0e 1a           ldai TOKENIZER_OR
 1624 e80b: 05              ret
 1625 e80c:             parsechar7:
 1626 e80c: 0d 2a           ldti '*'
 1627 e80e: aa e8 14        brneq parsechar8
 1628 e811: 0e 1b           ldai TOKENIZER_ASTR
 1629 e813: 05              ret
 1630 e814:             parsechar8:
 1631 e814: 0d 25           ldti '%'
 1632 e816: aa e8 1c        brneq parsechar9
 1633 e819: 0e 1d           ldai TOKENIZER_MOD
 1634 e81b: 05              ret
 1635 e81c:             parsechar9:
 1636 e81c: 0d 28           ldti '()'
 1637 e81e: aa e8 24        brneq parsechar10
 1638 e821: 0e 1f           ldai TOKENIZER_LEFTP
 1639 e823: 05              ret
 1640 e824:             parsechar10:
 1641 e824: 0d 23           ldti '#'
 1642 e826: aa e8 2c        brneq parsechar11
 1643 e829: 0e 1e           ldai TOKENIZER_HASH
 1644 e82b: 05              ret
 1645 e82c:             parsechar11:
 1646 e82c: 0d 29           ldti ')'
 1647 e82e: aa e8 34        brneq parsechar12
 1648 e831: 0e 20           ldai TOKENIZER_RIGHTP
 1649 e833: 05              ret
 1650 e834:             parsechar12:
 1651 e834: 0d 3c           ldti '<'
 1652 e836: aa e8 3c        brneq parsechar13
 1653 e839: 0e 21           ldai TOKENIZER_LT
 1654 e83b: 05              ret
 1655 e83c:             parsechar13:
 1656 e83c: 0d 3e           ldti '>'
 1657 e83e: aa e8 44        brneq parsechar14
 1658 e841: 0e 22           ldai TOKENIZER_GT
 1659 e843: 05              ret
 1660 e844:             parsechar14:
 1661 e844: 0d 3d           ldti '='
 1662 e846: aa e8 4c        brneq parsechar15
 1663 e849: 0e 23           ldai TOKENIZER_EQ
 1664 e84b: 05              ret
 1665 e84c:             parsechar15:
 1666 e84c: 0e 00           ldai 0
 1667 e84e: 05              ret
 1668 e84f:             
 1669 e84f:             ;
 1670 e84f:             ; int get_next_token(void)
 1671 e84f:             ;
 1672 e84f:             ; under development fix ptr nextptr
 1673 e84f:             
 1674 e84f:             parse_get_next_tok:
 1675 e84f: 07 06           pushr r6
 1676 e851: 1b 03 00        MVIW r3,parse_input_line
 1677 e854: 24              mvrla r4
 1678 e855: 33              mvarl r3
 1679 e856:             ;
 1680 e856: 43              ldavr R3
 1681 e857: a2 e8 5f        brnz parse_gnt1
 1682 e85a: 0e 01           ldai TOKENIZER_EOF
 1683 e85c: 08 60           popr r6
 1684 e85e: 05              ret
 1685 e85f:             
 1686 e85f:             parse_gnt1:
 1687 e85f:             ;
 1688 e85f:             ; is digit
 1689 e85f:             ;
 1690 e85f:             ; chcek for number
 1691 e85f: 43              ldavr R3
 1692 e860: 04 e9 57        jsr parse_isdigit
 1693 e863: a1 e8 74        brz parse_gnt2
 1694 e866:             parse_gnt1loop:
 1695 e866: 53              incr R3
 1696 e867: 04 e9 57        jsr parse_isdigit
 1697 e86a: a2 e8 66        brnz parse_gnt1loop
 1698 e86d: 23              mvrla R3
 1699 e86e: 3c              mvarh R4
 1700 e86f: 0e 02           ldai TOKENIZER_NUMBER
 1701 e871: 08 60           popr r6
 1702 e873: 05              ret
 1703 e874:             ;
 1704 e874:             parse_gnt2:
 1705 e874:             ;
 1706 e874:             ; singlechar
 1707 e874:             ;
 1708 e874: 43             ldavr R3
 1709 e875: 04 e7 cf       jsr parse_singlechar
 1710 e878: a1 e8 83       BRZ parse_gnt3
 1711 e87b: 09             push
 1712 e87c: 53             incr r3
 1713 e87d: 23             mvrla R3
 1714 e87e: 3c             mvarh R4
 1715 e87f: 0a             pop
 1716 e880: 08 60          popr r6
 1717 e882: 05             ret
 1718 e883:             ;
 1719 e883:             parse_gnt3:
 1720 e883:             ;
 1721 e883:             ; quote
 1722 e883:             ;
 1723 e883: 43            ldavr R3
 1724 e884: 0d 22         ldti '"'
 1725 e886: aa e8 98      brneq parse_gnt4
 1726 e889:             parse_gnt3loop:
 1727 e889: 53            incr r3
 1728 e88a: 43            ldavr R3
 1729 e88b: 0d 22         ldti '"'
 1730 e88d: aa e8 89      brneq parse_gnt3loop
 1731 e890: 53            incr r3
 1732 e891: 23            mvrla R3
 1733 e892: 3c            mvarh R4
 1734 e893: 0e 03         ldai TOKENIZER_STRING
 1735 e895: 08 60         popr r6
 1736 e897: 05            ret
 1737 e898:             ;
 1738 e898:             parse_gnt4:
 1739 e898:             ;
 1740 e898:             ; keyword search
 1741 e898:             ;
 1742 e898: 07 05         pushr r5
 1743 e89a: 1d e7 70      mviw r5,parse_keywords
 1744 e89d:             top:
 1745 e89d: 45            ldavr r5
 1746 e89e: a1 e8 c3      brz nokeyowrdsfound
 1747 e8a1: 0f 63         movrr r3,r6
 1748 e8a3:             pcmploop:
 1749 e8a3: 45            ldavr r5
 1750 e8a4: a1 e8 ba      brz found
 1751 e8a7: 0b            MVAT
 1752 e8a8: 46            ldavr r6
 1753 e8a9: aa e8 b1      brneq skiptoend
 1754 e8ac: 55            incr r5
 1755 e8ad: 56            incr r6
 1756 e8ae: a0 e8 a3      br pcmploop
 1757 e8b1:             
 1758 e8b1:             skiptoend:
 1759 e8b1:             ;  skip to end of string and skip over token
 1760 e8b1:             skiploop:
 1761 e8b1: 45              ldavr r5
 1762 e8b2: 55              incr r5
 1763 e8b3: a2 e8 b1        brnz skiploop
 1764 e8b6: 55              incr r5
 1765 e8b7: a0 e8 9d        br top
 1766 e8ba:             
 1767 e8ba:             found:
 1768 e8ba: 26              mvrla r6
 1769 e8bb: 3c              mvarh r4
 1770 e8bc: 55              incr r5
 1771 e8bd: 45              ldavr r5
 1772 e8be: 08 50           popr r5
 1773 e8c0: 08 60           popr r6
 1774 e8c2: 05              ret
 1775 e8c3:             
 1776 e8c3:             nokeyowrdsfound:
 1777 e8c3: 08 60           popr r6
 1778 e8c5: 08 50           popr r5
 1779 e8c7:             ;
 1780 e8c7:             ;  check for variables
 1781 e8c7:             ;
 1782 e8c7: 43              ldavr r3
 1783 e8c8: 0d 41           ldti 'A'
 1784 e8ca: a7 e8 da        BRLT parse_gnt_error
 1785 e8cd: 0d 5a           ldti 'Z'
 1786 e8cf: a9 e8 da        BRGT parse_gnt_error
 1787 e8d2: 53              INCR r3
 1788 e8d3: 23              mvrla R3
 1789 e8d4: 34              mvarl R4
 1790 e8d5: 0e 04           LDAI tokenizer_variable
 1791 e8d7: 08 60           POPR R6
 1792 e8d9: 05              RET
 1793 e8da:             parse_gnt_error:
 1794 e8da: 0e 00           ldai tokenizer_error
 1795 e8dc: 08 60           POPR R6
 1796 e8de: 05              ret
 1797 e8df:             
 1798 e8df:             ;
 1799 e8df:             ; void TOKENIZER_GOTO (char * program)
 1800 e8df:             ;
 1801 e8df:             ; under development
 1802 e8df:             ;
 1803 e8df:             parse_goto:
 1804 e8df: 0f 37           movrr r7,r3
 1805 e8e1: 04 e8 4f        jsr parse_get_next_tok
 1806 e8e4: 36              mvarl r6
 1807 e8e5: 05              ret
 1808 e8e6:             
 1809 e8e6:             ;
 1810 e8e6:             ; void tokenizer_init(int ptr)
 1811 e8e6:             ;
 1812 e8e6:             ; changed to set ptr to 0, assumes input line buffer is 256 byte aligned
 1813 e8e6:             ; so set ptrs to 0
 1814 e8e6:             ; ptr into line buffer R4.L
 1815 e8e6:             ; ptr int token buffer R5.L
 1816 e8e6:             ; token counter R5.H
 1817 e8e6:             ;
 1818 e8e6:             ; under development
 1819 e8e6:             ;
 1820 e8e6:             parse_init:
 1821 e8e6: 0e 00           ldai 0
 1822 e8e8: 34              mvarl R4
 1823 e8e9: 3d              mvarh R5
 1824 e8ea: 35              mvarl R5
 1825 e8eb: 04 e8 4f        jsr parse_get_next_tok
 1826 e8ee: 05              ret
 1827 e8ef:             
 1828 e8ef:             ;
 1829 e8ef:             ; int tokenizer_token(void)
 1830 e8ef:             :
 1831 e8ef:             parse_token:
 1832 e8ef: 26              mvrla r6
 1833 e8f0: 05              ret
 1834 e8f1:             
 1835 e8f1:             ;
 1836 e8f1:             ; void tokenizer_next(void)
 1837 e8f1:             ;
 1838 e8f1:             parse_next:
 1839 e8f1:             
 1840 e8f1:             ;
 1841 e8f1:             ; VARIABLE_TYPE tokenizer_num(void)
 1842 e8f1:             ;
 1843 e8f1:             ; Hack for now input characters are ascii hex format HHHH
 1844 e8f1:             ;
 1845 e8f1:             ; value returned in R7
 1846 e8f1:             ;
 1847 e8f1:             ; Should this advance the line ptr?
 1848 e8f1:             ;
 1849 e8f1:             parse_num:
 1850 e8f1: 04 e9 18        JSR parse_getnibble
 1851 e8f4: b6              SHL
 1852 e8f5: b6              SHL
 1853 e8f6: b6              SHL
 1854 e8f7: b6              SHL
 1855 e8f8: b3 f0           ANDI 0f0h
 1856 e8fa: 09              Push
 1857 e8fb: 04 e9 18        JSR parse_getnibble
 1858 e8fe: b3 0f           ANDI 0FH
 1859 e900: 0b              MVAT
 1860 e901: 0a              Pop
 1861 e902: ba              ORT
 1862 e903: 3f              MVARH R7
 1863 e904:             
 1864 e904: 04 e9 18        JSR parse_getnibble
 1865 e907: b6              SHL
 1866 e908: b6              shl
 1867 e909: b6              shl
 1868 e90a: b6              shl
 1869 e90b: b3 f0           ANDI 0f0h
 1870 e90d: 09              push
 1871 e90e: 04 e9 18        JSR parse_getnibble
 1872 e911: b3 0f           ANDI 0FH
 1873 e913: 0b              MVAT
 1874 e914: 0a              pop
 1875 e915: ba              ORT
 1876 e916: 37              MVARL R7
 1877 e917: 05              RET
 1878 e918:             
 1879 e918:             ;
 1880 e918:             ; add error checking
 1881 e918:             ;
 1882 e918:             ; return hex nibble in accumulator
 1883 e918:             ;
 1884 e918:             parse_getnibble:
 1885 e918: 1b 03 00          MVIW r3,parse_input_line
 1886 e91b: 24                mvrla r4
 1887 e91c: 33                mvarl r3
 1888 e91d:             ;
 1889 e91d: 43                LDAVR R3
 1890 e91e:             ;
 1891 e91e:             ; Risk if input line is greater then 255 chars, maybe test at input
 1892 e91e:             ;
 1893 e91e: 54                incr r4
 1894 e91f:             
 1895 e91f: 0d 39             LDTI '9'
 1896 e921: a9 e9 27          BRGT parse_af
 1897 e924: b1 30             SUBI '0'
 1898 e926: 05                RET
 1899 e927:             parse_af:
 1900 e927: 04 ff 10          JSR toupper
 1901 e92a: b1 41             SUBI 'A'
 1902 e92c: b0 0a             ADDI 10
 1903 e92e: 05                RET
 1904 e92f:             ;
 1905 e92f:             ; void tokenizer_string(char *dest, int len)
 1906 e92f:             ;
 1907 e92f:             parse_string:
 1908 e92f: 04 e8 ef        JSR parse_token
 1909 e932: 0d 03           LDTI TOKENIZER_STRING
 1910 e934: a8 e9 38        BREQ parse_string1
 1911 e937: 05              ret
 1912 e938:             
 1913 e938:             parse_string1:
 1914 e938: 1b 03 00        MVIW r3,parse_input_line
 1915 e93b: 24              mvrla r4
 1916 e93c: 33              mvarl r3
 1917 e93d:                 ;
 1918 e93d: 43              LDAVR R3
 1919 e93e:             
 1920 e93e:             
 1921 e93e:             ;
 1922 e93e:             ; void tokenizer_error_print(void)
 1923 e93e:             ;
 1924 e93e:             parse_error_print:
 1925 e93e:             
 1926 e93e:             ;
 1927 e93e:             ; int tokenizer_finished(void)
 1928 e93e:             ;
 1929 e93e:             parse_finished:
 1930 e93e:             
 1931 e93e:             ;
 1932 e93e:             ; int tokenizer_variable_num(void)
 1933 e93e:             ;
 1934 e93e:             parse_variable_num:
 1935 e93e:             
 1936 e93e:             ;
 1937 e93e:             ; char *const tokenizer_pos(void)
 1938 e93e:             ;
 1939 e93e:             parse_pos:
 1940 e93e:             
 1941 e93e:             ;not used old
 1942 e93e:             ; char *tokenize(char *program)
 1943 e93e:             ;
 1944 e93e:             ; parse:
 1945 e93e:             
 1946 e93e:             ;
 1947 e93e:             ; char *tokenizeLine(char *line)
 1948 e93e:             ;
 1949 e93e:             parse_line:
 1950 e93e: 1b 04 00        MVIW R3,parse_token_buffer
 1951 e941: 0e 00           LDAI 0
 1952 e943: 33              mvarl R3
 1953 e944: 34              mvarl R4
 1954 e945: 35              MVARL R5
 1955 e946: 0e 25           LDAI TOKENIZER_LINENUM
 1956 e948: 4b              STAVR R3
 1957 e949: 53              INCR R3
 1958 e94a:             
 1959 e94a: 04 e8 f1        JSR parse_num ; testexamine
 1960 e94d:             
 1961 e94d:                 ;
 1962 e94d: 43              LDAVR R3
 1963 e94e:             
 1964 e94e: 04 e8 ef    JSR parse_token
 1965 e951: 0d 03       LDTI TOKENIZER_STRING
 1966 e953: a8 e9 38    BREQ parse_string1
 1967 e956: 05          ret
 1968 e957:             
 1969 e957:             
 1970 e957:             ;
 1971 e957:             ; void addLine(char *buff)
 1972 e957:             ;
 1973 e957:             parse_addline:
 1974 e957:             
 1975 e957:             ;
 1976 e957:             ; void removeLine(int lineNum)
 1977 e957:             ;
 1978 e957:             parse_removeline:
 1979 e957:             
 1980 e957:             ;
 1981 e957:             ; parse utilites
 1982 e957:             ;
 1983 e957:             
 1984 e957:             ;
 1985 e957:             ; is digit
 1986 e957:             ; returns 1 if yes and 0 if no
 1987 e957:             ;
 1988 e957:             ; hack for now include HEX
 1989 e957:             ;
 1990 e957:             ; destroys tmp register
 1991 e957:             parse_isdigit:
 1992 e957: 0d 30          ldti '0'
 1993 e959: a7 e9 71       brlt parse_isdigit_no
 1994 e95c: 0d 39          ldti '9'
 1995 e95e: a9 e9 64       brgt parse_isdigit_af
 1996 e961: a0 e9 6e       br parse_isdigit_yes
 1997 e964:             
 1998 e964:             parse_isdigit_af:
 1999 e964: 0d 41           ldti 'A'
 2000 e966: a7 e9 71        brlt parse_isdigit_no
 2001 e969: 0d 46           ldti 'F'
 2002 e96b: a9 e9 71        brgt parse_isdigit_no
 2003 e96e:             
 2004 e96e:             parse_isdigit_yes:
 2005 e96e: 0e 01           ldai 1
 2006 e970: 05              ret
 2007 e971:             
 2008 e971:             parse_isdigit_no:
 2009 e971: 0e 00           ldai 0
 2010 e973: 05              ret
 2011 e974:             
 2012 e974:             basic_test:
 2013 e974: 25 0a 00 0e 
            00 06 03 68 
            65 6c 6c 6f 
            00 24 25 14     DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 2014 e984: 00 0d 00 04 
            02 00 23 02 
            09 00 24 25 
            1e 00 0a 00     DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 2015 e994: 06 04 02 00 
            24 25 28 00 
            0d 00 04 04 
            00 23 02 32     DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 2016 e9a4: 00 24 25 32 
            00 17 00 06 
            03 68 32 00 
            15 04 02 00     DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 2017 e9b4: 15 04 04 00 
            15 02 16 00 
            24 25 3c 00 
            12 00 0a 04     DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 2018 e9c4: 03 00 23 02 
            01 00 0b 02 
            05 00 24 25 
            46 00 0a 00     DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 2019 e9d4: 06 04 03 00 
            24 25 50 00 
            0a 00 0c 04 
            03 00 24 25     DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 2020 e9e4: 51 00 12 00 
            06 03 6e 65 
            78 74 20 64 
            6f 6e 65 00     DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 2021 e9f4: 24 25 52 00 
            0a 00 0e 02 
            6e 00 24 25 
            55 00 0a 00     DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 2022 ea04: 0d 02 7d 00 
            24 25 5a 00 
            12 00 06 03 
            6e 65 78 74     DB  0dh,02h,7dh,00h,24h,25h,5ah,00h,12h,00h,06h,03h,6eh,65h,78h,74h
 2023 ea14: 20 64 6f 6e 
            65 00 24 25 
            6e 00 11 00 
            06 03 69 6e     DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 2024 ea24: 20 67 6f 73 
            75 62 00 24 
            25 70 00 11 
            00 06 03 69     DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 2025 ea34: 6e 20 73 75 
            62 20 32 00 
            24 25 72 00 
            07 00 0f 24     DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 2026 ea44: 25 7d 00 0c 
            00 06 03 65 
            6e 64 00 24 
            25 7e 00 07     DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 2027 ea54: 00 14 24 01 
            00 00 00 00 
            00 00 00 00 
            00 00 00 00     DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 2028 ea64:             ;
 2029 ea64:             ; STRINGS
 2030 ea64:             ;
 2031 ea64: 0a 0d 00    CRLF: DB 0ah,0dh,0
 2032 ea67:             ;
 2033 ea67:             ; The End
 2034 ea67:             ;
 2035 ea67:             ZZZZ:
 2036 ea67: 00            DB   0

e000h: BASIC_LIST       - <   108> 
e974h: BASIC_TEST       - <  2012>    109    991   1085 
0100h: BASIC_VARS       - <    61>    952    970 
0200h: BAS_ENDED        - <    66>    152    441    777    930 
e3c4h: BAS_ERROR        - <   980>    177    874 
0204h: BAS_FORSTACK     - <    79>    150 
0202h: BAS_FORSTACKPTR  - <    78> 
0240h: BAS_GOSUBPTR     - <    88> 
0242h: BAS_GOSUBSTACK   - <    89>    148 
e014h: BAS_MSG1         - <   121>    176 
e027h: BAS_MSG2         - <   122> 
e038h: BAS_MSG3         - <   123>    870 
ff04h: CHAROUT          - <     5>    483 
ea64h: CRLF             - <  2031>    517   1516 
e38ah: DO_BASIC         - <   896>    115 
e058h: EXE              - <   137> 
e068h: EXE_ACCEPT       - <   167>    200    217    223    226    440    453 
          462    528    532    548    550    555    563    566    568    595 
          632    642    684    699    717    719    730    745    859    889 
e077h: EXE_ACCEPT_DONE  - <   178>    175 
e2f7h: EXE_END_STMT     - <   776>    852 
e0f2h: EXE_EXPR         - <   295>    224    368    384    393    403    454 
          504    551    720    731 
e12bh: EXE_EXPR_AND     - <   333>    309 
e141h: EXE_EXPR_DONE    - <   351>    313 
e0fbh: EXE_EXPR_LOOP    - <   302>    322    331    340    349 
e120h: EXE_EXPR_MINUS   - <   324>    307 
e136h: EXE_EXPR_OR      - <   342>    311 
e115h: EXE_EXPR_PLUS    - <   315>    305 
e087h: EXE_FACTOR       - <   207>    243    258    267    276 
e097h: EXE_FACTOR1      - <   220>    214 
e0a8h: EXE_FACTOR2      - <   229>    222 
e39ch: EXE_FINISHED     - <   929>    917 
e3b0h: EXE_FINISHED_YES - <   939>    933    936 
e2bbh: EXE_FOR_STMT     - <   690>    828 
e3bah: EXE_GET_VARIABLE - <   969>    198    647 
e257h: EXE_GOSUB_STMT   - <   561>    816 
e1adh: EXE_GOTO_STMT    - <   451>    866 
e221h: EXE_IF_STMT      - <   525>    804 
e237h: EXE_IF_STMT1     - <   536>    534 
e18eh: EXE_INDEX_FIND   - <   422>    431 
e058h: EXE_INIT         - <   147>    909 
e192h: EXE_JUMP_LINE    - <   430>    455    587 
e1a9h: EXE_JUMP_LINE1   - <   445>    433    435 
e23ah: EXE_LET_STMT     - <   543>    810    860 
e381h: EXE_LINE_STMT    - <   879>    923 
e2afh: EXE_NEXT_DONE    - <   675>    665 
e281h: EXE_NEXT_STMT    - <   618>    846 
e2f5h: EXE_PEEK_STMT    - <   764>    834 
e2f6h: EXE_POKE_STMT    - <   770>    840 
e1b9h: EXE_PRINT_STMT   - <   460>    798 
e1d4h: EXE_PRINT_STMT1  - <   478>    467 
e1e4h: EXE_PRINT_STMT2  - <   487>    481 
e1efh: EXE_PRINT_STMT3  - <   493>    489 
e201h: EXE_PRINT_STMT4  - <   503>    495    497    499 
e217h: EXE_PRINT_STMT_DONE - <   516>    501    511    513 
e1beh: EXE_PRINT_STMT_LOOP - <   464>    514 
e207h: EXE_PRINT_STMT_TEST - <   508>    476    485    491 
e148h: EXE_RELATION     - <   364>    530 
e187h: EXE_RELATION_DONE - <   410>    380 
e17ch: EXE_RELATION_EQ  - <   401>    378 
e171h: EXE_RELATION_GT  - <   391>    376 
e151h: EXE_RELATION_LOOP - <   371>    389    399    408 
e166h: EXE_RELATION_LT  - <   382>    374 
e273h: EXE_RETURN_STMT  - <   593>    822 
e38dh: EXE_RUN          - <   916>    924 
e396h: EXE_RUN_CONT     - <   922>    919 
e3b3h: EXE_SET_VARIABLE - <   951>    553    650    725 
e2feh: EXE_STMT         - <   784>    535    890 
e30ah: EXE_STMT1        - <   801>    797 
e35bh: EXE_STMT10       - <   855>    851 
e369h: EXE_STMT11       - <   863>    857 
e372h: EXE_STMT12       - <   869>    865 
e313h: EXE_STMT2        - <   807>    803 
e31ch: EXE_STMT3        - <   813>    809 
e325h: EXE_STMT4        - <   819>    815 
e32eh: EXE_STMT5        - <   825>    821 
e337h: EXE_STMT6        - <   831>    827 
e340h: EXE_STMT7        - <   837>    833 
e349h: EXE_STMT8        - <   843>    839 
e352h: EXE_STMT9        - <   849>    845 
e04eh: EXE_STMT_MSG     - <   124> 
e0ach: EXE_TERM         - <   239>    299    317    326    335    344 
e0cah: EXE_TERM_ASTR    - <   256>    249 
e0ebh: EXE_TERM_DONE    - <   283>    254 
e0b5h: EXE_TERM_LOOP    - <   246>    263    272    281 
e0e0h: EXE_TERM_MOD     - <   274>    253 
e0d5h: EXE_TERM_SLASH   - <   265>    251 
e07bh: EXE_VARFACTOR    - <   191>    230 
e8bah: FOUND            - <  1767>   1750 
e8c3h: NOKEYOWRDSFOUND  - <  1776>   1746 
e7dch: PARSECHAR1       - <  1595>   1592 
e824h: PARSECHAR10      - <  1640>   1637 
e82ch: PARSECHAR11      - <  1645>   1642 
e834h: PARSECHAR12      - <  1650>   1647 
e83ch: PARSECHAR13      - <  1655>   1652 
e844h: PARSECHAR14      - <  1660>   1657 
e84ch: PARSECHAR15      - <  1665>   1662 
e7e4h: PARSECHAR2       - <  1600>   1597 
e7ech: PARSECHAR3       - <  1605>   1602 
e7f4h: PARSECHAR4       - <  1610>   1607 
e7fch: PARSECHAR5       - <  1615>   1612 
e804h: PARSECHAR6       - <  1620>   1617 
e80ch: PARSECHAR7       - <  1625>   1622 
e814h: PARSECHAR8       - <  1630>   1627 
e81ch: PARSECHAR9       - <  1635>   1632 
e957h: PARSE_ADDLINE    - <  1973> 
e927h: PARSE_AF         - <  1899>   1896 
e93eh: PARSE_ERROR_PRINT - <  1924> 
e93eh: PARSE_FINISHED   - <  1929> 
e918h: PARSE_GETNIBBLE  - <  1884>   1850   1857   1864   1871 
e84fh: PARSE_GET_NEXT_TOK - <  1674>   1805   1825 
e85fh: PARSE_GNT1       - <  1686>   1681 
e866h: PARSE_GNT1LOOP   - <  1694>   1697 
e874h: PARSE_GNT2       - <  1704>   1693 
e883h: PARSE_GNT3       - <  1719>   1710 
e889h: PARSE_GNT3LOOP   - <  1726>   1730 
e898h: PARSE_GNT4       - <  1738>   1725 
e8dah: PARSE_GNT_ERROR  - <  1793>   1784   1786 
e8dfh: PARSE_GOTO       - <  1803> 
e8e6h: PARSE_INIT       - <  1820> 
0300h: PARSE_INPUT_LINE - <    94>   1587   1676   1885   1914 
e957h: PARSE_ISDIGIT    - <  1991>   1692   1696 
e964h: PARSE_ISDIGIT_AF - <  1998>   1995 
e971h: PARSE_ISDIGIT_NO - <  2008>   1993   2000   2002   2002 
e96eh: PARSE_ISDIGIT_YES - <  2004>   1996 
e770h: PARSE_KEYWORDS   - <  1559>   1743 
e93eh: PARSE_LINE       - <  1949> 
e8f1h: PARSE_NEXT       - <  1838> 
e8f1h: PARSE_NUM        - <  1849>   1959 
e93eh: PARSE_POS        - <  1939> 
e957h: PARSE_REMOVELINE - <  1978> 
e7cfh: PARSE_SINGLECHAR - <  1585>   1709 
e92fh: PARSE_STRING     - <  1907> 
e938h: PARSE_STRING1    - <  1913>   1910   1966 
e8efh: PARSE_TOKEN      - <  1831>   1908   1964 
0400h: PARSE_TOKEN_BUFFER - <    95>   1950 
e93eh: PARSE_VARIABLE_NUM - <  1934> 
e8a3h: PCMPLOOP         - <  1748>   1756 
ff0ch: SHOWADDR         - <     7>    872   1170   1541 
ff18h: SHOWBYTE         - <    10>    873 
ff14h: SHOWR7           - <     9>    505   1190   1533 
e8b1h: SKIPLOOP         - <  1760>   1763 
e8b1h: SKIPTOEND        - <  1758>   1753 
ff00h: STRINGOUT        - <     4>    474    518    871   1169   1200   1239 
         1247   1255   1263   1271   1279   1287   1295   1303   1311   1319 
         1327   1335   1343   1351   1359   1517   1540 
0019h: TOKENIZER_AND    - <    42>    308   1404   1618 
001bh: TOKENIZER_ASTR   - <    44>    248   1424   1628 
0010h: TOKENIZER_CALL   - <    33>   1324   1571 
0015h: TOKENIZER_COMMA  - <    38>    480   1364   1598 
0024h: TOKENIZER_CR     - <    53>    439    510    554    567    683    744 
         1514   1593 
0009h: TOKENIZER_ELSE   - <    26>   1268   1564 
0014h: TOKENIZER_END    - <    37>    850   1356   1575 
0001h: TOKENIZER_EOF    - <    18>    512   1175   1682 
0023h: TOKENIZER_EQ     - <    52>    377    549    718   1504   1663 
0000h: TOKENIZER_ERROR  - <    17>   1166   1576   1794 
000ah: TOKENIZER_FOR    - <    27>    698    826   1276   1565 
000eh: TOKENIZER_GOSUB  - <    31>    562    814   1308   1569 
000dh: TOKENIZER_GOTO   - <    30>    452    864   1300   1568 
0022h: TOKENIZER_GT     - <    51>    375   1494   1658 
001eh: TOKENIZER_HASH   - <    47>   1454   1643 
0007h: TOKENIZER_IF     - <    24>    527    802   1252   1562 
001fh: TOKENIZER_LEFTP  - <    48>    221    498   1464   1638 
0005h: TOKENIZER_LET    - <    22>    856    858   1236   1560 
0025h: TOKENIZER_LINENUM - <    54>    888   1012   1522   1955 
0021h: TOKENIZER_LT     - <    50>    373   1484   1653 
0018h: TOKENIZER_MINUS  - <    41>    306   1394   1613 
001dh: TOKENIZER_MOD    - <    46>    252   1444   1633 
000ch: TOKENIZER_NEXT   - <    29>    537    631    844   1292   1567 
0002h: TOKENIZER_NUMBER - <    19>    213    496    565    996   1181   1700 
001ah: TOKENIZER_OR     - <    43>    310   1414   1623 
0012h: TOKENIZER_PEEK   - <    35>    832   1340   1573 
0017h: TOKENIZER_PLUS   - <    40>    304   1384   1608 
0013h: TOKENIZER_POKE   - <    36>    838   1348   1574 
0006h: TOKENIZER_PRINT  - <    23>    461    796   1244   1561 
0011h: TOKENIZER_REM    - <    34>   1332   1572 
000fh: TOKENIZER_RETURN - <    32>    594    820   1316   1570 
0020h: TOKENIZER_RIGHTP - <    49>    225   1474   1648 
0016h: TOKENIZER_SEMICOLON - <    39>    488   1374   1603 
001ch: TOKENIZER_SLASH  - <    45>    250   1434 
0003h: TOKENIZER_STRING - <    20>    466   1022   1196   1734   1909   1965 
0008h: TOKENIZER_THEN   - <    25>    531   1260   1563 
000bh: TOKENIZER_TO     - <    28>    729   1284   1566 
0004h: TOKENIZER_VARIABLE - <    21>    199    494    547    641    716    808 
         1004   1213   1790 
e4adh: TOKL_CALL        - <  1154>   1326 
e46dh: TOKL_ELSE        - <  1143>   1270 
e4a8h: TOKL_END         - <  1153>   1358 
e4b3h: TOKL_ERROR       - <  1155>   1168   1539 
e473h: TOKL_FOR         - <  1144>   1278 
e488h: TOKL_GOSUB       - <  1148>   1310 
e482h: TOKL_GOTO        - <  1147>   1302 
e463h: TOKL_IF          - <  1141>   1254 
e457h: TOKL_LET         - <  1139>   1238 
e47ch: TOKL_NEXT        - <  1146>   1294 
e49ch: TOKL_PEEK        - <  1151>   1342 
e4a2h: TOKL_POKE        - <  1152>   1350 
e45ch: TOKL_PRINT       - <  1140>   1246 
e497h: TOKL_REM         - <  1150>   1334 
e48fh: TOKL_RETURN      - <  1149>   1318 
e467h: TOKL_THEN        - <  1142>   1262 
e478h: TOKL_TO          - <  1145>   1286 
e418h: TOK_FIND         - <  1082>    423 
e441h: TOK_FIND1        - <  1114>   1101 
e442h: TOK_FIND2        - <  1116>   1106 
e41dh: TOK_FIND_LOOP    - <  1087>   1129 
e42ah: TOK_FIND_LOOP1   - <  1096>   1090 
e44bh: TOK_FIND_MOVEPTR - <  1124>   1128 
e40ch: TOK_FINISHED     - <  1069>    934 
e415h: TOK_FINISHED1    - <  1075>   1072 
e454h: TOK_GOTO         - <  1131>    446 
e3c7h: TOK_INIT         - <   990>    158 
e4beh: TOK_LIST         - <  1158>    110 
e4d7h: TOK_LIST1        - <  1174>   1167 
e577h: TOK_LIST10       - <  1275>   1269 
e586h: TOK_LIST11       - <  1283>   1277 
e595h: TOK_LIST12       - <  1291>   1285 
e5a4h: TOK_LIST13       - <  1299>   1293 
e5b3h: TOK_LIST14       - <  1307>   1301 
e5c2h: TOK_LIST15       - <  1315>   1309 
e5d1h: TOK_LIST16       - <  1323>   1317 
e5e0h: TOK_LIST17       - <  1331>   1325 
e5efh: TOK_LIST18       - <  1339>   1333 
e5feh: TOK_LIST19       - <  1347>   1341 
e4e2h: TOK_LIST2        - <  1180>   1176 
e60dh: TOK_LIST20       - <  1355>   1349 
e61ch: TOK_LIST21       - <  1363>   1357 
e62fh: TOK_LIST22       - <  1373>   1365 
e642h: TOK_LIST23       - <  1383>   1375 
e655h: TOK_LIST24       - <  1393>   1385 
e668h: TOK_LIST25       - <  1403>   1395 
e67bh: TOK_LIST26       - <  1413>   1405 
e68eh: TOK_LIST27       - <  1423>   1415 
e6a1h: TOK_LIST28       - <  1433>   1425 
e6b4h: TOK_LIST29       - <  1443>   1435 
e4f9h: TOK_LIST3        - <  1195>   1182 
e6c7h: TOK_LIST30       - <  1453>   1445 
e6dah: TOK_LIST31       - <  1463>   1455 
e6edh: TOK_LIST32       - <  1473>   1465 
e700h: TOK_LIST33       - <  1483>   1475 
e713h: TOK_LIST34       - <  1493>   1485 
e726h: TOK_LIST35       - <  1503>   1495 
e739h: TOK_LIST36       - <  1513>   1505 
e748h: TOK_LIST37       - <  1521>   1515 
e761h: TOK_LIST38       - <  1538>   1523 
e515h: TOK_LIST4        - <  1212>   1197 
e52ch: TOK_LIST5        - <  1235>   1214 
e53bh: TOK_LIST6        - <  1243>   1237 
e54ah: TOK_LIST7        - <  1251>   1245 
e559h: TOK_LIST8        - <  1259>   1253 
e568h: TOK_LIST9        - <  1267>   1261 
e76dh: TOK_LIST_DONE    - <  1546>   1171   1177   1542 
e4c2h: TOK_LIST_LOOP    - <  1163>   1172   1178   1193   1210   1233   1241 
         1249   1257   1265   1273   1281   1289   1297   1305   1313   1321 
         1329   1337   1345   1353   1361   1371   1381   1391   1401   1411 
         1421   1431   1441   1451   1461   1471   1481   1491   1501   1511 
         1519   1536 
e509h: TOK_LIST_STRING  - <  1203>   1207 
e511h: TOK_LIST_STRINGEND - <  1208>   1205 
e3cbh: TOK_NEXT         - <   994>    179    257    266    275    316    325 
          334    343    383    392    402    475    484    490    519 
e3d5h: TOK_NEXT1        - <  1003>    997 
e3deh: TOK_NEXT2        - <  1011>   1005 
e3e9h: TOK_NEXT3        - <  1021>   1013 
e3f7h: TOK_NEXT3_DONE   - <  1032>   1028 
e3efh: TOK_NEXT3_LOOP   - <  1026>   1030 
e3f9h: TOK_NEXT4        - <  1036>   1023 
e3fbh: TOK_NUM          - <  1043>    215    564 
e408h: TOK_STRING       - <  1064>    472 
e3c5h: TOK_TOKEN        - <   986>    172    211    247    303    372    465 
          509    788 
e404h: TOK_VARIABLE_NUM - <  1058>    194    544    636    703 
e89dh: TOP              - <  1744>   1765 
ff10h: TOUPPER          - <     8>   1900 
ff08h: UARTOUT          - <     6>   1192   1202   1221   1232   1367   1369 
         1377   1379   1387   1389   1397   1399   1407   1409   1417   1419 
         1427   1429   1437   1439   1447   1449   1457   1459   1467   1469 
         1477   1479   1487   1489   1497   1499   1507   1509   1535 
ea67h: ZZZZ             - <  2035> 

2036 Lines assembled
0 Errors
265 Labels
Object Code:2655 bytes

