RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             
   15 0000:             ;
   16 0000:             ; Basic interpreter tokens
   17 0000:             ;
   18 0000:             TOKENIZER_ERROR: EQU 00
   19 0000:             TOKENIZER_EOF: EQU 01
   20 0000:             TOKENIZER_NUMBER: EQU 02
   21 0000:             TOKENIZER_STRING: EQU 03
   22 0000:             TOKENIZER_VARIABLE: EQU 04
   23 0000:             TOKENIZER_LET: EQU 05
   24 0000:             TOKENIZER_PRINT: EQU 06
   25 0000:             TOKENIZER_IF: EQU 07
   26 0000:             TOKENIZER_THEN: EQU 08
   27 0000:             TOKENIZER_ELSE: EQU 09
   28 0000:             TOKENIZER_FOR: EQU 10
   29 0000:             TOKENIZER_TO: EQU 11
   30 0000:             TOKENIZER_NEXT: EQU 12
   31 0000:             TOKENIZER_GOTO: EQU 13
   32 0000:             TOKENIZER_GOSUB: EQU 14
   33 0000:             TOKENIZER_RETURN: EQU 15
   34 0000:             TOKENIZER_CALL: EQU 16
   35 0000:             TOKENIZER_REM: EQU 17
   36 0000:             TOKENIZER_PEEK: EQU 18
   37 0000:             TOKENIZER_POKE: EQU 19
   38 0000:             TOKENIZER_END: EQU 20
   39 0000:             TOKENIZER_COMMA: EQU 21
   40 0000:             TOKENIZER_SEMICOLON: EQU 22
   41 0000:             TOKENIZER_PLUS: EQU 23
   42 0000:             TOKENIZER_MINUS: EQU 24
   43 0000:             TOKENIZER_AND: EQU 25
   44 0000:             TOKENIZER_OR: EQU 26
   45 0000:             TOKENIZER_ASTR: EQU 27
   46 0000:             TOKENIZER_SLASH: EQU 28
   47 0000:             TOKENIZER_MOD: EQU 29
   48 0000:             TOKENIZER_HASH: EQU 30
   49 0000:             TOKENIZER_LEFTP: EQU 31
   50 0000:             TOKENIZER_RIGHTP: EQU 32
   51 0000:             TOKENIZER_LT: EQU 33
   52 0000:             TOKENIZER_GT: EQU 34
   53 0000:             TOKENIZER_EQ: EQU 35
   54 0000:             TOKENIZER_CR: EQU 36
   55 0000:             TOKENIZER_LINENUM: EQU 37
   56 0000:             
   57 0000:             ;
   58 0000:             ; BASIC interpreter user variables area
   59 0000:             ; currently 26 1-byte variables
   60 0000:             ; for now must be 0xAA00 (256 byte) aligned
   61 0000:             ;
   62 0000:             BASIC_VARS: EQU 0100h
   63 0000:             
   64 0000:             ;
   65 0000:             ; Basic interpreter internal variables
   66 0000:             ;
   67 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   68 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   69 0000:             bas_nxtptr:       EQU 0204h ;
   70 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   71 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   72 0000:             bas_currenttoken: EQU 020Ah ; used in parsing
   73 0000:             bas_tokenbuffer:  EQU 020Ch ; Pointer to start of token buffer
   74 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   75 0000:                                         ; this value should be + 1 end of buffer
   76 0000:                                         ; if buffer is 0x1000-0x1fff this is
   77 0000:                                         ; set to 0x2000. Used in moving buffer around
   78 0000:                                         ; in add and remove line
   79 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   80 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   81 0000:             bas_insertptr:    EQU 0214H
   82 0000:             
   83 0000:             ;
   84 0000:             ; FOR-NEXT statement stack ptr and stack data
   85 0000:             ;
   86 0000:             ; for next stack data
   87 0000:             ; format
   88 0000:             ;   2 bytes for variable id (only first byte used for now)
   89 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
   90 0000:             ;   2 bytes ptr to line after for instruction (format HL)
   91 0000:             ; later add step amount
   92 0000:             ;
   93 0000:             bas_forstackptr: EQU 0280h
   94 0000:             bas_forstack: EQU 0282h
   95 0000:             
   96 0000:             ;
   97 0000:             ; GOSUB stack ptr and data
   98 0000:             ;
   99 0000:             ; gosub STACK
  100 0000:             ; format
  101 0000:             ;   2 bytes return location ptr
  102 0000:             ;
  103 0000:             bas_gosubptr: EQU 02c0h
  104 0000:             bas_gosubstack: EQU 02c2h
  105 0000:             
  106 0000:             ;
  107 0000:             ; Basic interpreter text input line buffer
  108 0000:             ;
  109 0000:             parse_input_line: EQU 300h
  110 0000:             ;
  111 0000:             ; Basic interpreter tmp buffer to build up current token line
  112 0000:             ;
  113 0000:             parse_token_buffer: EQU 400h
  114 0000:             ;
  115 0000:             ; Basic interpreter token buffer
  116 0000:             ;
  117 0000:             bas_tok_buf_start: EQU 1000h
  118 0000:             ;
  119 0000:             ; Basic interpreter token buffer end + 1
  120 0000:             ;
  121 0000:             bas_tok_buf_end: EQU 2000h
  122 0000:             ; OR
  123 0000:             ;bas_tok_buf_end: EQU 1100h ;smaller for easy debugging - 256 byte buffer
  124 0000:             
  125 0000:             ;
  126 0000:             ; basic interpreter, add IO and peek/poke
  127 0000:             ;
  128 0000:             
  129 0000:             ;
  130 0000:             ; Basic Interpreter
  131 0000:             ;
  132 0000:             
  133 0000:             ;
  134 0000:             ; BASIC Entry Points
  135 0000:             ;
  136 0000:               ORG 0e000h
  137 e000:             ;
  138 e000:             ; list
  139 e000:             ;
  140 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  141 e003: 04 e5 4d          JSR  basic_list
  142 e006: 05                Ret
  143 e007:             
  144 e007:             ;
  145 e007:                   ORG 0e010h
  146 e010:             ;
  147 e010:             ; run
  148 e010:             ;
  149 e010: 04 e4 6a          jsr basic_run
  150 e013: 05                Ret
  151 e014:             
  152 e014:             ;
  153 e014:                   ORG 0e020h
  154 e020:             ;
  155 e020:             ; cold start
  156 e020:             ;
  157 e020:             ; Hack later pass in R7
  158 e020:             ;
  159 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  160 e023: 0e 01             ldai TOKENIZER_EOF          ;write EOF to start of buffer
  161 e025: 4f                stavr r7
  162 e026: ff 02 0c          STR R7,bas_tokenbuffer
  163 e029: 1f 20 00          mviw r7,bas_tok_buf_end
  164 e02c: ff 02 0e          str r7,bas_bufferendhi
  165 e02f: 05                Ret
  166 e030:             
  167 e030:             ;
  168 e030:                   ORG 0e030h
  169 e030:             ;
  170 e030:             ; tests - called from monitor - used to test snippets of code
  171 e030:             ;
  172 e030: 04 ff d4          jsr showr7
  173 e033: 1f 00 0a          mviw r7,0010
  174 e036: 04 eb d6          jsr basu_find
  175 e039: 04 ff d4          jsr showr7
  176 e03c: 1f 00 0a          mviw r7,0010
  177 e03f: 04 eb ae          jsr parse_removeline
  178 e042: 05                ret
  179 e043:             
  180 e043:             ;
  181 e043:                   org 0e050h
  182 e050:             ;
  183 e050:             ; parse line
  184 e050:             ;
  185 e050: 04 ea 9c          jsr parse_line
  186 e053: 05                ret
  187 e054:             
  188 e054:             ;
  189 e054:                   ORG 0e060h
  190 e060:             ;
  191 e060:             ; Copy test program into token Buffer, copies 0x0400 bytes
  192 e060:             ;
  193 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  194 e063: 1e ee 00          mviw R6,BASIC_TEST
  195 e066: 1d 04 00          mviw R5,0400h
  196 e069:             
  197 e069:             bas_copyloop:
  198 e069: 46                ldavr R6
  199 e06a: 4f                stavr r7
  200 e06b: 56                incr r6
  201 e06c: 57                incr r7
  202 e06d: 5d                decr r5
  203 e06e: 2d                mvrha r5
  204 e06f: a2 e0 69          brnz bas_copyloop
  205 e072: 25                mvrla r5
  206 e073: a2 e0 69          brnz bas_copyloop
  207 e076: 05                ret
  208 e077:             
  209 e077:             ;
  210 e077:             ; basic interpreter messages
  211 e077:             ;
  212 e077: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "Accept - unexpected token",0,0ah,0dh
  213 e093: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  214 e0a4: 42 41 53 49 
            43 20 54 4f 
            4b 45 4e 20 
            4e 4f 54 20 
            53 55 50 50 
            4f 52 54 45 
            44 20 0a 0d bas_msg3: db "Basic token not supported ",0ah,0dh
  215 e0c0: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  216 e0ca:             ;
  217 e0ca:             ; Basic interpreter - execution engine
  218 e0ca:             ; Register Usage
  219 e0ca:             ; R0 - Program Counter
  220 e0ca:             ; R1 - Stack Pointer
  221 e0ca:             ; R2 - Direct addressing mode
  222 e0ca:             ; R3 - Basic Interpreter Token Buffer ptr
  223 e0ca:             ; R4 - working register  ; or is this for-next stack ptr
  224 e0ca:             ; R5 - working register  ; or is this gosub stack ptr
  225 e0ca:             ; R6 - Working register
  226 e0ca:             ; R7 - parameter passing & return value
  227 e0ca:             ;
  228 e0ca:             ;exe: Is this label needed
  229 e0ca:             ;
  230 e0ca:             ; void ubasic_init()
  231 e0ca:             ;
  232 e0ca:             ; Setup basic interpreter execution engine
  233 e0ca:             ;
  234 e0ca:             exe_init:
  235 e0ca: 09              push
  236 e0cb: 1d 02 c2        MVIW R5,bas_gosubstack
  237 e0ce: 1c 02 82        MVIW R4,bas_forstack
  238 e0d1: 1e 02 00        MVIW R6,bas_run_ended
  239 e0d4: 0e 00           LDAI 0
  240 e0d6: 4e              STAVR R6
  241 e0d7: f3 02 0c        LDR R3,bas_tokenbuffer
  242 e0da: 0a              pop
  243 e0db: 05              RET
  244 e0dc:             
  245 e0dc:             ;
  246 e0dc:             ; void accept(int)
  247 e0dc:             ;
  248 e0dc:             ; compare accumulator with current token then advance to next token in buffer
  249 e0dc:             ; assume accumulator destroyed
  250 e0dc:             ;
  251 e0dc:             exe_accept:
  252 e0dc: 09              push
  253 e0dd:             ;
  254 e0dd:             ; get current token into accumulator
  255 e0dd:             ;
  256 e0dd: 43              LDAVR R3
  257 e0de: 0b              MVAT
  258 e0df: 0a              POP
  259 e0e0: a8 e0 f1        BREQ exe_accept_done
  260 e0e3:             ;
  261 e0e3:             ; debug information
  262 e0e3:             ;
  263 e0e3: 04 ff e0        JSR showbytea
  264 e0e6: 0e 2d           ldai '-'
  265 e0e8: 04 ff c8        JSR uartout
  266 e0eb: 1f e0 77        mviw R7,bas_msg1
  267 e0ee: 04 e4 a7        JSR bas_error
  268 e0f1:             ;
  269 e0f1:             exe_accept_done:
  270 e0f1: 04 e4 a9        jsr exe_next_token
  271 e0f4: 05              RET
  272 e0f5:             
  273 e0f5:             ;
  274 e0f5:             ; int varfactor()
  275 e0f5:             ;
  276 e0f5:             ; get variable id pointed to by exe_variable_num in token stream
  277 e0f5:             ; (this is not a value but a variable id)
  278 e0f5:             ; value returned by exe_get_variable in r7
  279 e0f5:             ;
  280 e0f5:             ; return value in R7
  281 e0f5:             ;
  282 e0f5:             exe_varfactor:
  283 e0f5: 04 e4 e2        jsr exe_variable_num    ; get variable number id (one byte for now a-z)
  284 e0f8:                                         ;into accumulator
  285 e0f8:             ;
  286 e0f8:             ; variable id in accumulator, return value in r7
  287 e0f8:             ;
  288 e0f8: 04 e4 9c        jsr exe_get_variable
  289 e0fb: 0e 04           LDAI TOKENIZER_VARIABLE
  290 e0fd: 04 e0 dc        JSR exe_accept
  291 e100: 05              RET
  292 e101:             
  293 e101:             ;
  294 e101:             ; int factor()
  295 e101:             ; return value in R7
  296 e101:             ;
  297 e101:             exe_factor:
  298 e101:             ;
  299 e101: 43              LDAVR R3               ;get current token into accumulator
  300 e102: 0d 02           LDTI TOKENIZER_NUMBER
  301 e104: aa e1 0f        BRNEQ exe_factor1
  302 e107: 04 e4 d9        JSR exe_num
  303 e10a: 0c              MVTA
  304 e10b: 04 e0 dc        JSR exe_accept
  305 e10e: 05              RET
  306 e10f:             
  307 e10f:             exe_factor1:
  308 e10f: 0d 1f           LDTI TOKENIZER_LEFTP
  309 e111: aa e1 20        BRNEQ exe_factor2
  310 e114: 04 e0 dc        JSR exe_accept
  311 e117: 04 e1 73        JSR exe_expr
  312 e11a: 0e 20           LDAI TOKENIZER_RIGHTP
  313 e11c: 04 e0 dc        JSR exe_accept
  314 e11f: 05              RET
  315 e120:             
  316 e120:             exe_factor2:
  317 e120: 04 e0 f5        jsr exe_varfactor
  318 e123: 05              ret
  319 e124:             
  320 e124:             ;
  321 e124:             ; int term()
  322 e124:             ; R5 = F1
  323 e124:             ; R6 = F2
  324 e124:             ; R7 = return value
  325 e124:             ;
  326 e124:             exe_term:
  327 e124: 07 05           pushr r5
  328 e126: 07 06           pushr r6
  329 e128:             
  330 e128: 04 e1 01        jsr exe_factor
  331 e12b: 0f 57           MOVRR r7,r5
  332 e12d:             
  333 e12d:             exe_term_loop:
  334 e12d: 43              LDAVR R3
  335 e12e: 0d 1b           ldti TOKENIZER_ASTR
  336 e130: a8 e1 40        BREQ exe_term_astr
  337 e133: 0d 1c           LDTI TOKENIZER_SLASH
  338 e135: a8 e1 56        breq exe_term_slash
  339 e138: 0d 1d           ldti TOKENIZER_MOD
  340 e13a: a8 e1 61        breq exe_term_mod
  341 e13d: a0 e1 6c        br exe_term_done
  342 e140:             
  343 e140:             exe_term_astr:
  344 e140: 04 e4 a9        jsr exe_next_token
  345 e143: 04 e1 01        jsr exe_factor
  346 e146: 0f 67           movrr r7,r6
  347 e148:             ;
  348 e148:             ; do mulitply f1 = f1 * f2
  349 e148:             ;
  350 e148: 07 04           pushr r4
  351 e14a: 0f 46           movrr r6,r4
  352 e14c: 04 ec 12        jsr PARSE_MUL16
  353 e14f: 0f 57           movrr r7,r5
  354 e151: 08 40           popr r4
  355 e153: a0 e1 2d        BR exe_term_loop
  356 e156:             
  357 e156:             exe_term_slash:
  358 e156: 04 e4 a9        jsr exe_next_token
  359 e159: 04 e1 01        jsr exe_factor
  360 e15c: 0f 67           movrr r7,r6
  361 e15e:             ;
  362 e15e:             ; do divide f1 = f1 / f2
  363 e15e:             ;
  364 e15e: a0 e1 2d        BR exe_term_loop
  365 e161:             
  366 e161:             exe_term_mod:
  367 e161: 04 e4 a9        jsr exe_next_token
  368 e164: 04 e1 01        jsr exe_factor
  369 e167: 0f 67           movrr r7,r6
  370 e169:             ;
  371 e169:             ; f1 = f1 % f2
  372 e169:             ;
  373 e169: a0 e1 2d        BR exe_term_loop
  374 e16c:             
  375 e16c:             exe_term_done:
  376 e16c: 0f 75           MOVRR r5,r7
  377 e16e: 08 60           popr r6
  378 e170: 08 50           popr r5
  379 e172: 05              ret
  380 e173:             
  381 e173:             ;
  382 e173:             ; static VARIABLE_TYPE expr()
  383 e173:             ;
  384 e173:             ; R5 = t1
  385 e173:             ; R6 = t2
  386 e173:             ; R7 = return value
  387 e173:             ;
  388 e173:             exe_expr:
  389 e173: 07 05           pushr r5
  390 e175: 07 06           pushr r6
  391 e177:             
  392 e177: 04 e1 24        jsr exe_term
  393 e17a: 0f 57           MOVRR r7,r5
  394 e17c:             
  395 e17c:             exe_expr_loop:
  396 e17c: 43              LDAVR R3
  397 e17d: 0d 17           ldtI TOKENIZER_PLUS
  398 e17f: a8 e1 94        BREQ exe_expr_plus
  399 e182: 0d 18           ldtI TOKENIZER_MINUS
  400 e184: a8 e1 a6        breq exe_expr_minus
  401 e187: 0d 19           ldtI TOKENIZER_AND
  402 e189: a8 e1 b8        breq exe_expr_and
  403 e18c: 0d 1a           ldti TOKENIZER_OR
  404 e18e: a8 e1 ca        breq exe_expr_or
  405 e191:             
  406 e191: a0 e1 df        br exe_expr_done
  407 e194:             
  408 e194:             exe_expr_plus:
  409 e194: 04 e4 a9        jsr exe_next_token
  410 e197: 04 e1 24        jsr exe_term
  411 e19a: 0f 67           movrr r7,r6
  412 e19c:             ;
  413 e19c:             ; t1 = t1 + t2
  414 e19c:             ;
  415 e19c: 0f 75           movrr r5,r7
  416 e19e: 04 ec 4d        jsr parse_add16
  417 e1a1: 0f 57           movrr r7,r5
  418 e1a3: a0 e1 7c        BR exe_expr_loop
  419 e1a6:             
  420 e1a6:             exe_expr_minus:
  421 e1a6: 04 e4 a9        jsr exe_next_token
  422 e1a9: 04 e1 24        jsr exe_term
  423 e1ac: 0f 67           movrr r7,r6
  424 e1ae:             ;
  425 e1ae:             ; t1 = t1 - t2
  426 e1ae:             ;
  427 e1ae: 0f 75           movrr r5,r7
  428 e1b0: 04 ec 5b        jsr parse_sub16
  429 e1b3: 0f 57           movrr r7,r5
  430 e1b5: a0 e1 7c        BR exe_expr_loop
  431 e1b8:             
  432 e1b8:             exe_expr_and:
  433 e1b8: 04 e4 a9        jsr exe_next_token
  434 e1bb: 04 e1 24        jsr exe_term
  435 e1be: 0f 67           movrr r7,r6
  436 e1c0:             ;
  437 e1c0:             ; t1 = t1 & t2
  438 e1c0:             ;
  439 e1c0: 0f 75           movrr r5,r7
  440 e1c2: 04 ec 65        jsr parse_and16
  441 e1c5: 0f 57           movrr r7,r5
  442 e1c7: a0 e1 7c        BR exe_expr_loop
  443 e1ca:             
  444 e1ca:             exe_expr_or:
  445 e1ca: 04 e4 a9        jsr exe_next_token
  446 e1cd: 04 e1 24        jsr exe_term
  447 e1d0: 0f 67           movrr r7,r6
  448 e1d2:             ;
  449 e1d2:             ; t1 = t1 | t2
  450 e1d2:             ;
  451 e1d2: 0f 75           movrr r5,r7
  452 e1d4: 04 ec 70        jsr parse_or16
  453 e1d7: 0f 57           movrr r7,r5
  454 e1d9: a0 e1 7c        BR exe_expr_loop
  455 e1dc: a0 e1 7c        BR exe_expr_loop
  456 e1df:             
  457 e1df:             exe_expr_done:
  458 e1df: 0f 75           MOVRR r5,r7
  459 e1e1: 08 60           popr r6
  460 e1e3: 08 50           popr r5
  461 e1e5: 05              ret
  462 e1e6:             
  463 e1e6:             ;
  464 e1e6:             ; int relation ()
  465 e1e6:             ;
  466 e1e6:             ; R5 = r1
  467 e1e6:             ; R6 = r2
  468 e1e6:             ; R7 = return value
  469 e1e6:             ;
  470 e1e6:             exe_relation:
  471 e1e6: 07 05           pushr r5
  472 e1e8: 07 06           pushr r6
  473 e1ea:             
  474 e1ea: 04 e1 73        jsr exe_expr
  475 e1ed: 0f 57           MOVRR r7,r5
  476 e1ef:             
  477 e1ef:             exe_relation_loop:
  478 e1ef: 43              LDAVR R3
  479 e1f0: 0d 21           LDTI TOKENIZER_LT
  480 e1f2: a8 e2 02        BREQ exe_relation_lt
  481 e1f5: 0d 22           ldti TOKENIZER_GT
  482 e1f7: a8 e2 20        breq exe_relation_gt
  483 e1fa: 0d 23           ldti TOKENIZER_EQ
  484 e1fc: a8 e2 3e        breq exe_relation_eq
  485 e1ff:             
  486 e1ff: a0 e2 5a        br exe_relation_done
  487 e202:             
  488 e202:             exe_relation_lt:
  489 e202: 04 e4 a9        jsr exe_next_token
  490 e205: 04 e1 73        jsr exe_expr
  491 e208: 0f 67           movrr r7,r6
  492 e20a:             ;
  493 e20a:             ; r1 = r1 < r2
  494 e20a:             ;
  495 e20a: 0f 75           movrr  r5,r7
  496 e20c: 04 ec a8        jsr parse_compare
  497 e20f: 0d ff           ldti 0ffh
  498 e211: aa e2 1a        BRNEQ exe_rel_nlt
  499 e214: 1d 00 01        mviw r5,01h
  500 e217: a0 e1 ef        BR exe_relation_loop
  501 e21a:             exe_rel_nlt:
  502 e21a: 1d 00 00        mviw r5,00h
  503 e21d: a0 e1 ef        BR exe_relation_loop
  504 e220:             
  505 e220:             exe_relation_gt:
  506 e220: 04 e4 a9        jsr exe_next_token
  507 e223: 04 e1 73        jsr exe_expr
  508 e226: 0f 67           movrr r7,r6
  509 e228:             ;
  510 e228:             ; r1 = r1 > r2
  511 e228:             ;
  512 e228: 0f 75           movrr  r5,r7
  513 e22a: 04 ec a8        jsr parse_compare
  514 e22d: 0d 01           ldti 01h
  515 e22f: aa e2 38        BRNEQ exe_rel_ngt
  516 e232: 1d 00 01        mviw r5,01h
  517 e235: a0 e1 ef        BR exe_relation_loop
  518 e238:             exe_rel_ngt:
  519 e238: 1d 00 00        mviw r5,00h
  520 e23b: a0 e1 ef        BR exe_relation_loop
  521 e23e:             
  522 e23e:             exe_relation_eq:
  523 e23e: 04 e4 a9        jsr exe_next_token
  524 e241: 04 e1 73        jsr exe_expr
  525 e244: 0f 67           movrr r7,r6
  526 e246:             ;
  527 e246:             ; r1 = r1 == r2
  528 e246:             ;
  529 e246: 0f 75           movrr  r5,r7
  530 e248: 04 ec a8        jsr parse_compare
  531 e24b: a2 e2 54        brnz exe_rel_ne
  532 e24e: 1d 00 01        mviw r5,01h
  533 e251: a0 e1 ef        BR exe_relation_loop
  534 e254:             exe_rel_ne:
  535 e254: 1d 00 00        mviw r5,00h
  536 e257: a0 e1 ef        BR exe_relation_loop
  537 e25a:             
  538 e25a:             exe_relation_done:
  539 e25a: 0f 75           MOVRR r5,r7
  540 e25c: 08 60           popr r6
  541 e25e: 08 50           popr r5
  542 e260: 05              ret
  543 e261:             
  544 e261:             ;
  545 e261:             ; char * index_find (int linenum)
  546 e261:             ;
  547 e261:             ; call with line in R7
  548 e261:             ; return with val in R7 - tokenbuffer ptr
  549 e261:             ; THIS CAN BE REMOVED SINCE IT IS ONLY A SINGLE CALL
  550 e261:             ;
  551 e261:             exe_index_find:
  552 e261: 04 eb d6        JSR basu_find
  553 e264: 05              RET
  554 e265:             
  555 e265:             ;
  556 e265:             ; void jump_linenum(linenum)
  557 e265:             ;
  558 e265:             ; Linenum in R7
  559 e265:             ;
  560 e265:             exe_jump_line:
  561 e265: 04 e2 61        JSR exe_index_find
  562 e268: 2f              MVRHA R7
  563 e269: a2 e2 7c        BRNZ exe_jump_line1
  564 e26c: 27              MVRLA R7
  565 e26d: a2 e2 7c        BRNZ exe_jump_line1
  566 e270:             ;
  567 e270:             ; returned 0 line not found
  568 e270:             ;
  569 e270: 0e 24           LDAI TOKENIZER_CR
  570 e272: 04 e0 dc        JSR exe_accept
  571 e275: 1e 02 00        MVIW r6,bas_run_ended
  572 e278: 0e 01           LDAI 1
  573 e27a: 4e              STAVR R6
  574 e27b: 05              ret
  575 e27c:             exe_jump_line1:
  576 e27c:             ;   jsr tok_goto ; WHAT IS THIS
  577 e27c: 0f 37           movrr r7,r3
  578 e27e: 05              ret
  579 e27f:             
  580 e27f:             ;
  581 e27f:             ; void goto_statement()
  582 e27f:             ;
  583 e27f:             exe_goto_stmt:
  584 e27f: 0e 0d           LDAI TOKENIZER_GOTO
  585 e281: 04 e0 dc        JSR exe_accept
  586 e284: 04 e1 73        JSR exe_expr
  587 e287: 04 e2 65        JSR exe_jump_line
  588 e28a: 05              RET
  589 e28b:             
  590 e28b:             ;
  591 e28b:             ; void print_statment()
  592 e28b:             ;
  593 e28b:             exe_print_stmt:
  594 e28b: 0e 06           LDAI TOKENIZER_PRINT
  595 e28d: 04 e0 dc        jsr exe_accept
  596 e290:             
  597 e290:             exe_print_stmt_loop:
  598 e290: 43              LDAVR R3
  599 e291: 0d 03           LDTI TOKENIZER_STRING
  600 e293: aa e2 a2        BRNEQ exe_print_stmt1
  601 e296:             ;
  602 e296:             ; this should return string to print in r2
  603 e296:             ; exe_string may not be needed tokenbufferptr is at string ?
  604 e296:             ;
  605 e296: 0f 73           movrr r3,r7
  606 e298: 57              incr r7
  607 e299: 04 ff c0        jsr stringout
  608 e29c: 04 e4 a9        jsr exe_next_token
  609 e29f: a0 e2 d5        br exe_print_stmt_test
  610 e2a2:             
  611 e2a2:             exe_print_stmt1:
  612 e2a2: 0d 15           ldti TOKENIZER_COMMA
  613 e2a4: aa e2 b2        BRNEQ exe_print_stmt2
  614 e2a7: 0e 20           LDAI ' '
  615 e2a9: 04 ff c4        JSR charout
  616 e2ac: 04 e4 a9        jsr exe_next_token
  617 e2af: a0 e2 d5        br exe_print_stmt_test
  618 e2b2:             
  619 e2b2:             exe_print_stmt2:
  620 e2b2: 0d 16           ldti TOKENIZER_SEMICOLON
  621 e2b4: aa e2 bd        BRNEQ exe_print_stmt3
  622 e2b7: 04 e4 a9        jsr exe_next_token
  623 e2ba: a0 e2 d5        br exe_print_stmt_test
  624 e2bd:             
  625 e2bd:             exe_print_stmt3:
  626 e2bd: 0d 04           ldti TOKENIZER_VARIABLE
  627 e2bf: a8 e2 cf        BREQ exe_print_stmt4
  628 e2c2: 0d 02           ldti TOKENIZER_NUMBER
  629 e2c4: a8 e2 cf        breq exe_print_stmt4
  630 e2c7: 0d 1f           ldti  TOKENIZER_LEFTP
  631 e2c9: a8 e2 cf        breq exe_print_stmt4
  632 e2cc:             
  633 e2cc: a0 e2 e3        br exe_print_stmt_done
  634 e2cf:             
  635 e2cf:             exe_print_stmt4:
  636 e2cf: 04 e1 73        jsr exe_expr
  637 e2d2: 04 ff d4        JSR showr7
  638 e2d5:             
  639 e2d5:             exe_print_stmt_test:
  640 e2d5: 43              LDAVR R3
  641 e2d6: 0d 24           LDTI TOKENIZER_CR
  642 e2d8: a8 e2 e3        breq exe_print_stmt_done
  643 e2db: 0d 01           LDTI TOKENIZER_EOF
  644 e2dd: a8 e2 e3        breq exe_print_stmt_done
  645 e2e0: a0 e2 90        br exe_print_stmt_loop
  646 e2e3:             
  647 e2e3:             exe_print_stmt_done:
  648 e2e3: 1f ec c9        mviw R7,CRLF
  649 e2e6: 04 ff c0        jsr stringout
  650 e2e9: 04 e4 a9        jsr exe_next_token
  651 e2ec: 05              ret
  652 e2ed:             
  653 e2ed:             ;
  654 e2ed:             ; void if_statement()
  655 e2ed:             ;
  656 e2ed:             exe_if_stmt:
  657 e2ed: 0e 07           LDAI TOKENIZER_IF
  658 e2ef: 04 e0 dc        JSR exe_accept
  659 e2f2:             
  660 e2f2: 04 e1 e6        JSR exe_relation
  661 e2f5: 27              MVRLA R7
  662 e2f6: 09              push
  663 e2f7: 0e 08           LDAI TOKENIZER_THEN
  664 e2f9: 04 e0 dc        JSR exe_accept
  665 e2fc: 0a              pop
  666 e2fd:             
  667 e2fd: 0d 01           LDTI 1
  668 e2ff: aa e3 06        BRNEQ exe_if_stmt1
  669 e302: 04 e3 db        JSR exe_stmt
  670 e305: 05              ret
  671 e306:             
  672 e306:             exe_if_stmt1:
  673 e306: 04 e4 a9        jsr exe_next_token
  674 e309: 43              LDAVR R3
  675 e30a: 0d 24           LDTI TOKENIZER_CR
  676 e30c: a8 e3 15        BREQ EXE_IF_STMT2
  677 e30f: 0d 01           LDTI TOKENIZER_EOF
  678 e311: aa e3 06        BRNEQ EXE_IF_STMT1
  679 e314: 05              RET
  680 e315:             
  681 e315:             exe_if_stmt2:
  682 e315: 04 e4 a9        JSR EXE_NEXT_TOKEN
  683 e318: 05              RET
  684 e319:             
  685 e319:             ;
  686 e319:             ; void let_statement()
  687 e319:             ;
  688 e319:             exe_let_stmt:
  689 e319: 04 e4 e2        jsr exe_variable_num
  690 e31c: 37              mvarl r7
  691 e31d: 0f 67           movrr r7,r6
  692 e31f: 0e 04           ldai TOKENIZER_VARIABLE
  693 e321: 04 e0 dc        jsr exe_accept
  694 e324: 0e 23           ldai TOKENIZER_EQ
  695 e326: 04 e0 dc        jsr exe_accept
  696 e329: 04 e1 73        jsr exe_expr
  697 e32c: 26              mvrla r6
  698 e32d: 04 e4 91        JSR exe_set_variable
  699 e330: 0e 24           ldai TOKENIZER_CR
  700 e332: 04 e0 dc        jsr exe_accept
  701 e335: 05              ret
  702 e336:             
  703 e336:             ;
  704 e336:             ; void gosub_statement()
  705 e336:             ;
  706 e336:             exe_gosub_stmt:
  707 e336: 0e 0e           ldai TOKENIZER_GOSUB
  708 e338: 04 e0 dc        jsr exe_accept
  709 e33b: 04 e4 d9        jsr exe_num
  710 e33e: 0e 02           ldai TOKENIZER_NUMBER
  711 e340: 04 e0 dc        jsr exe_accept
  712 e343: 0e 24           ldai TOKENIZER_CR
  713 e345: 04 e0 dc        jsr exe_accept
  714 e348:             ;
  715 e348:             ; save current token buffer ptr to gosub stack
  716 e348:             ;
  717 e348: 23             mvrla r3
  718 e349: 4d             stavr r5
  719 e34a: 55             incr r5
  720 e34b: 2b             mvrha r3
  721 e34c: 4d             stavr r5
  722 e34d: 55             incr  r5
  723 e34e:             ;
  724 e34e:             ; write new gosub stack ptr location back
  725 e34e:             ;
  726 e34e: 04 e2 65       JSR exe_jump_line
  727 e351: 05             RET
  728 e352:             
  729 e352:             ;
  730 e352:             ; void return_statment()
  731 e352:             ;
  732 e352:             exe_return_stmt:
  733 e352: 0e 0f           ldai TOKENIZER_RETURN
  734 e354: 04 e0 dc        jsr exe_accept
  735 e357:             ;
  736 e357:             ; setup to use for storage area via R4
  737 e357:             ;
  738 e357: 5d             decr r5
  739 e358: 5d             decr r5
  740 e359:             
  741 e359: 45             ldavr r5
  742 e35a: 33             mvarl r3
  743 e35b: 55             incr r5
  744 e35c: 45             ldavr r5
  745 e35d: 3b             mvarh r3
  746 e35e:             
  747 e35e: 5d             decr r5
  748 e35f: 05             ret
  749 e360:             
  750 e360:             ;
  751 e360:             ; void next_statement()
  752 e360:             ;
  753 e360:             exe_next_stmt:
  754 e360:             ;
  755 e360:             ; backup to the TO Value
  756 e360: 5c              decr r4
  757 e361: 5c              decr r4
  758 e362: 5c              decr r4
  759 e363: 5c              decr r4
  760 e364:             ;
  761 e364:             ; eat next
  762 e364:             ;
  763 e364: 0e 0c           ldai TOKENIZER_NEXT
  764 e366: 04 e0 dc        jsr exe_accept
  765 e369:             ;
  766 e369:             ; get variable id (in accumulator) and hold in r6 lo
  767 e369:             ;
  768 e369: 04 e4 e2        jsr exe_variable_num
  769 e36c: 36              mvarl r6
  770 e36d:             ;
  771 e36d:             ; eat TOKENIZER_VARIABLE id
  772 e36d:             ;
  773 e36d: 0e 04           ldai TOKENIZER_VARIABLE
  774 e36f: 04 e0 dc        jsr exe_accept
  775 e372:             ;
  776 e372:             ; get variable value, inc by 1 and store - ADD STEP VALUE
  777 e372:             ;
  778 e372: 26              mvrla r6
  779 e373: 04 e4 9c        jsr exe_get_variable
  780 e376: 57              incr r7
  781 e377: 26              mvrla r6
  782 e378: 04 e4 91        jsr exe_set_variable
  783 e37b:             ;
  784 e37b:             ; get TO value into R6
  785 e37b: 44              ldavr r4
  786 e37c: 36              mvarl r6
  787 e37d: 54              incr r4
  788 e37e: 44              ldavr r4
  789 e37f: 3e              mvarh r6
  790 e380: 54              incr r4
  791 e381:             ;
  792 e381:             ; for now only compare low byte HACK use compare code
  793 e381:             ;
  794 e381: 26              mvrla r6
  795 e382: 0b              mvat
  796 e383: 27              mvrla r7
  797 e384: a9 e3 8e        brgt exe_next_done
  798 e387:             ;
  799 e387: 44              ldavr r4
  800 e388: 33              mvarl r3
  801 e389: 54              incr r4
  802 e38a: 44              ldavr r4
  803 e38b: 3b              mvarh r3
  804 e38c: 54              incr r4
  805 e38d: 05              ret
  806 e38e:             
  807 e38e:             exe_next_done:
  808 e38e: 5c            decr r4
  809 e38f: 5c            decr r4
  810 e390: 5c            decr r4
  811 e391: 5c            decr r4
  812 e392: 0e 24         ldai TOKENIZER_CR
  813 e394: 04 e0 dc      jsr exe_accept
  814 e397: 05            ret
  815 e398:             
  816 e398:             ;
  817 e398:             ; void for_statement()
  818 e398:             ;
  819 e398:             exe_for_stmt:
  820 e398:             ;
  821 e398:             ; setup to use for storage area via R4
  822 e398:             ;
  823 e398: 0e 0a           ldai TOKENIZER_FOR    ; eat FOR
  824 e39a: 04 e0 dc        jsr exe_accept
  825 e39d:             ;
  826 e39d:             ; get variable id (in accumulator) and hold in r6 lo
  827 e39d:             ;
  828 e39d: 04 e4 e2        jsr exe_variable_num
  829 e3a0: 36              mvarl r6
  830 e3a1:             ;
  831 e3a1:             ; store variable id in FOR storage - hack only lo byte, hi byte 0
  832 e3a1:             ;
  833 e3a1: 4c              stavr r4
  834 e3a2: 54              incr r4
  835 e3a3: 0e 00           ldai 0
  836 e3a5: 4c              stavr r4
  837 e3a6: 54              incr r4
  838 e3a7:             ;
  839 e3a7:             ; eat variable id and = then get starting value
  840 e3a7:             ;
  841 e3a7: 0e 04           ldai TOKENIZER_VARIABLE
  842 e3a9: 04 e0 dc        jsr exe_accept
  843 e3ac: 0e 23           ldai TOKENIZER_EQ
  844 e3ae: 04 e0 dc        jsr exe_accept
  845 e3b1: 04 e1 73        jsr exe_expr
  846 e3b4:             ;
  847 e3b4:             ; set variable to starting value
  848 e3b4:             ;
  849 e3b4: 26              mvrla r6
  850 e3b5: 04 e4 91        JSR exe_set_variable
  851 e3b8:             ;
  852 e3b8:             ; eat TO and get to value
  853 e3b8:             ;
  854 e3b8: 0e 0b           ldai TOKENIZER_TO
  855 e3ba: 04 e0 dc        jsr exe_accept
  856 e3bd: 04 e1 73        jsr exe_expr
  857 e3c0:             ;
  858 e3c0:             ; store to value in FOR storage area
  859 e3c0:             ;
  860 e3c0: 27              mvrla r7
  861 e3c1: 4c              stavr r4
  862 e3c2: 54              incr r4
  863 e3c3: 2f              mvrha r7
  864 e3c4: 4c              stavr r4
  865 e3c5: 54              incr r4
  866 e3c6:             ;
  867 e3c6:             ; EAT EOL
  868 e3c6:             ;
  869 e3c6: 0e 24           ldai TOKENIZER_CR
  870 e3c8: 04 e0 dc        jsr exe_accept
  871 e3cb:             ;
  872 e3cb:             ; store ptr to instruction after FOR in for storage area
  873 e3cb:             ;
  874 e3cb: 23              mvrla r3
  875 e3cc: 4c              stavr r4
  876 e3cd: 54              incr r4
  877 e3ce: 2b              mvrha r3
  878 e3cf: 4c              stavr r4
  879 e3d0: 54              incr r4
  880 e3d1:             ;
  881 e3d1:             ;   save for stackptr
  882 e3d1:             ;
  883 e3d1: 05              ret
  884 e3d2:             
  885 e3d2:             ;
  886 e3d2:             ; void peek_statment()
  887 e3d2:             ;
  888 e3d2:             exe_peek_stmt:
  889 e3d2: 03              halt
  890 e3d3:             
  891 e3d3:             ;
  892 e3d3:             ; void poke_statement()
  893 e3d3:             ;
  894 e3d3:             exe_poke_stmt:
  895 e3d3: 03              halt
  896 e3d4:             
  897 e3d4:             ;
  898 e3d4:             ; void end_statement()
  899 e3d4:             ;
  900 e3d4:             exe_end_stmt:
  901 e3d4: 1e 02 00        mviw r6,bas_run_ended
  902 e3d7: 0e 01           LDAI 1
  903 e3d9: 4e              STAVR r6
  904 e3da: 05              ret
  905 e3db:             
  906 e3db:             ;
  907 e3db:             ; void statment()
  908 e3db:             ;
  909 e3db:             exe_stmt:
  910 e3db: 43              LDAVR R3
  911 e3dc:             
  912 e3dc: 0d 06           LDTI TOKENIZER_PRINT
  913 e3de: aa e3 e5        BRNEQ exe_stmt1
  914 e3e1: 04 e2 8b        JSR exe_print_stmt
  915 e3e4: 05              ret
  916 e3e5:             
  917 e3e5:             exe_stmt1:
  918 e3e5: 0d 07           LDTI TOKENIZER_IF
  919 e3e7: aa e3 ee        BRNEQ exe_stmt2
  920 e3ea: 04 e2 ed        JSR exe_if_stmt
  921 e3ed: 05              ret
  922 e3ee:             
  923 e3ee:             exe_stmt2:
  924 e3ee: 0d 04           LDTI TOKENIZER_VARIABLE
  925 e3f0: aa e3 f7        BRNEQ exe_stmt3
  926 e3f3: 04 e3 19        JSR exe_let_stmt
  927 e3f6: 05              ret
  928 e3f7:             
  929 e3f7:             exe_stmt3:
  930 e3f7: 0d 0e           LDTI TOKENIZER_GOSUB
  931 e3f9: aa e4 00        BRNEQ exe_stmt4
  932 e3fc: 04 e3 36        JSR exe_gosub_stmt
  933 e3ff: 05              ret
  934 e400:             
  935 e400:             exe_stmt4:
  936 e400: 0d 0f           LDTI TOKENIZER_RETURN
  937 e402: aa e4 09        BRNEQ exe_stmt5
  938 e405: 04 e3 52        JSR exe_return_stmt
  939 e408: 05              ret
  940 e409:             
  941 e409:             exe_stmt5:
  942 e409: 0d 0a           LDTI TOKENIZER_FOR
  943 e40b: aa e4 12        BRNEQ exe_stmt6
  944 e40e: 04 e3 98        JSR exe_for_stmt
  945 e411: 05              ret
  946 e412:             
  947 e412:             exe_stmt6:
  948 e412: 0d 12           LDTI TOKENIZER_PEEK
  949 e414: aa e4 1b        BRNEQ exe_stmt7
  950 e417: 04 e3 d2        JSR exe_peek_stmt
  951 e41a: 05              ret
  952 e41b:             
  953 e41b:             exe_stmt7:
  954 e41b: 0d 13           LDTI TOKENIZER_POKE
  955 e41d: aa e4 24        BRNEQ exe_stmt8
  956 e420: 04 e3 d3        JSR exe_poke_stmt
  957 e423: 05              ret
  958 e424:             
  959 e424:             exe_stmt8:
  960 e424: 0d 0c           LDTI TOKENIZER_NEXT
  961 e426: aa e4 2d        BRNEQ exe_stmt9
  962 e429: 04 e3 60        JSR exe_next_stmt
  963 e42c: 05              ret
  964 e42d:             
  965 e42d:             exe_stmt9:
  966 e42d: 0d 14           LDTI TOKENIZER_END
  967 e42f: aa e4 36        BRNEQ exe_stmt10
  968 e432: 04 e3 d4        JSR exe_end_stmt
  969 e435: 05              ret
  970 e436:             
  971 e436:             exe_stmt10:
  972 e436: 0d 05           LDTI TOKENIZER_LET
  973 e438: aa e4 44        BRNEQ exe_stmt11
  974 e43b: 0e 05           LDAI TOKENIZER_LET
  975 e43d: 04 e0 dc        JSR exe_accept
  976 e440: 04 e3 19        JSR exe_let_stmt
  977 e443: 05              ret
  978 e444:             
  979 e444:             exe_stmt11:
  980 e444: 0d 0d           LDTI TOKENIZER_GOTO
  981 e446: aa e4 4d        BRNEQ exe_stmt12
  982 e449: 04 e2 7f        JSR exe_goto_stmt
  983 e44c: 05              ret
  984 e44d:             
  985 e44d:             exe_stmt12:
  986 e44d: 04 ff e0        jsr showbytea
  987 e450: 0e 3d           ldai '='
  988 e452: 04 ff c8        jsr uartout
  989 e455: 1f e0 a4        MVIW R7,bas_msg3
  990 e458: 04 ff c0        jsr stringout
  991 e45b: 04 ff dc        JSR SHOWREGS
  992 e45e: 04 e4 a7        jsr bas_error
  993 e461:             
  994 e461:             ;
  995 e461:             ; void line_statement (void)
  996 e461:             ;
  997 e461:             exe_line_stmt:
  998 e461: 0e 25           LDAI TOKENIZER_LINENUM
  999 e463: 04 e0 dc        jsr exe_accept
 1000 e466: 04 e3 db        jsr exe_stmt
 1001 e469: 05              ret
 1002 e46a:             
 1003 e46a:             ;
 1004 e46a:             ; void ubasic_run()
 1005 e46a:             ;
 1006 e46a:             basic_run:
 1007 e46a: 04 e0 ca        JSR exe_init
 1008 e46d:             
 1009 e46d:             exe_run:
 1010 e46d: 04 e4 7c        jsr exe_finished
 1011 e470: 0d 01           LDTI 1
 1012 e472: aa e4 76        BRNEQ exe_run_cont
 1013 e475: 05              ret
 1014 e476:             
 1015 e476:             exe_run_cont:
 1016 e476: 04 e4 61        jsr exe_line_stmt
 1017 e479: a0 e4 6d        BR exe_run
 1018 e47c:             
 1019 e47c:             ;
 1020 e47c:             ; int ubasic_finished()
 1021 e47c:             ;
 1022 e47c:             exe_finished:
 1023 e47c: 1a 02 00        MVIW R2,bas_run_ended
 1024 e47f: 42              LDAVR R2
 1025 e480: 0d 01           LDTI 1
 1026 e482: a8 e4 8e        BREQ exe_finished_yes
 1027 e485:             
 1028 e485: 43              ldavr r3
 1029 e486: 0d 01           ldti TOKENIZER_EOF
 1030 e488: a8 e4 8e        breq exe_finished_yes
 1031 e48b: 0e 00           ldai 0
 1032 e48d: 05              ret
 1033 e48e:             
 1034 e48e:             exe_finished_yes:
 1035 e48e: 0e 01           LDAI 1
 1036 e490: 05              ret
 1037 e491:             
 1038 e491:             ;
 1039 e491:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1040 e491:             ;
 1041 e491:             ; R7 value (only using low byte)
 1042 e491:             ; ACCUMULATOR Variable ref number
 1043 e491:             ;
 1044 e491:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1045 e491:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1046 e491:             ;
 1047 e491:             exe_set_variable:
 1048 e491: 1a 01 00        MVIW R2,BASIC_VARS  ; SEE COMMENT below about memory alignment
 1049 e494: b6              SHL                 ; memory location x 2 (2 byte vars)
 1050 e495: 32              MVARL R2            ; change to add16 to remove align issue
 1051 e496:             ;
 1052 e496: 27              MVRLA R7
 1053 e497: 4a              STAVR R2
 1054 e498: 52              INCR r2
 1055 e499: 2f              mvrha r7
 1056 e49a: 4a              stavr r2
 1057 e49b:             
 1058 e49b: 05              RET
 1059 e49c:             ;
 1060 e49c:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1061 e49c:             ;
 1062 e49c:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1063 e49c:             ;
 1064 e49c:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1065 e49c:             ; and only 0-25 (var names a-z) supported
 1066 e49c:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1067 e49c:             ;
 1068 e49c:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1069 e49c:             ;
 1070 e49c:             exe_get_variable:
 1071 e49c: 1a 01 00        MVIW R2,BASIC_VARS
 1072 e49f: b6              shl
 1073 e4a0: 32              MVARL R2
 1074 e4a1:             ;
 1075 e4a1: 42              LDAVR R2
 1076 e4a2: 37              MVARL R7
 1077 e4a3: 52              INCR R2
 1078 e4a4: 42              LDAVR R2
 1079 e4a5: 3f              MVARH R7
 1080 e4a6: 05              RET
 1081 e4a7:             
 1082 e4a7:             ;
 1083 e4a7:             ; hack this needs work
 1084 e4a7:             ;
 1085 e4a7:             bas_error:
 1086 e4a7: 03            HALT
 1087 e4a8: 05            RET
 1088 e4a9:             
 1089 e4a9:             ;
 1090 e4a9:             ; Tokenizer execute support code
 1091 e4a9:             ;
 1092 e4a9:             ; tokenizer_next - exe version
 1093 e4a9:             ;
 1094 e4a9:             exe_next_token:
 1095 e4a9: 43            ldavr r3
 1096 e4aa: 0d 02         ldti TOKENIZER_NUMBER
 1097 e4ac: aa e4 b3      BRNEQ exe_next_token1
 1098 e4af: 53            incr r3
 1099 e4b0: 53            incr r3
 1100 e4b1: 53            incr r3
 1101 e4b2: 05            RET
 1102 e4b3:             
 1103 e4b3:             exe_next_token1:
 1104 e4b3: 0d 04         ldti TOKENIZER_VARIABLE
 1105 e4b5: aa e4 bc      BRNEQ exe_next_token2
 1106 e4b8: 53            incr r3
 1107 e4b9: 53            incr r3
 1108 e4ba: 53            incr r3
 1109 e4bb: 05            RET
 1110 e4bc:             
 1111 e4bc:             exe_next_token2:
 1112 e4bc: 0d 25         ldti TOKENIZER_LINENUM
 1113 e4be: aa e4 c7      BRNEQ exe_next_token3
 1114 e4c1: 53            incr r3
 1115 e4c2: 53            incr r3
 1116 e4c3: 53            incr r3
 1117 e4c4: 53            incr r3
 1118 e4c5: 53            incr r3
 1119 e4c6: 05            RET
 1120 e4c7:             
 1121 e4c7:             exe_next_token3:
 1122 e4c7: 0d 03         ldti TOKENIZER_STRING
 1123 e4c9: aa e4 d7      BRNEQ exe_next_token4
 1124 e4cc: 53            incr r3
 1125 e4cd:             
 1126 e4cd:             exe_next_tok3_loop:
 1127 e4cd: 43            LDAVR R3
 1128 e4ce: a1 e4 d5      BRZ exe_next_tok3_done
 1129 e4d1: 53            incr r3
 1130 e4d2: a0 e4 cd      BR exe_next_tok3_loop
 1131 e4d5:             
 1132 e4d5:             exe_next_tok3_done:
 1133 e4d5: 53            incr r3
 1134 e4d6: 05            RET
 1135 e4d7:             
 1136 e4d7:             exe_next_token4:
 1137 e4d7: 53            incr r3
 1138 e4d8: 05            ret
 1139 e4d9:             
 1140 e4d9:             ;
 1141 e4d9:             ; numbers stored low byte followed by high byte in memory
 1142 e4d9:             ;
 1143 e4d9:             exe_num:
 1144 e4d9: 53              incr r3
 1145 e4da: 43              ldavr r3
 1146 e4db: 37              mvarl r7
 1147 e4dc: 53              incr r3
 1148 e4dd: 43              ldavr r3
 1149 e4de: 3f              mvarh r7
 1150 e4df: 5b              decr r3
 1151 e4e0: 5b              decr r3
 1152 e4e1: 05              ret
 1153 e4e2:             
 1154 e4e2:             ;
 1155 e4e2:             ; hack only using low byte of id for now
 1156 e4e2:             ; return in accumulator
 1157 e4e2:             ;
 1158 e4e2:             exe_variable_num:
 1159 e4e2: 53              incr r3
 1160 e4e3: 43              ldavr r3
 1161 e4e4: 5b              decr r3
 1162 e4e5: 05              ret
 1163 e4e6:             
 1164 e4e6:             ;
 1165 e4e6:             ; List out token buffer in human readable form
 1166 e4e6:             ;
 1167 e4e6:             ; list out token buffer
 1168 e4e6:             ; buffer address in r7
 1169 e4e6:             ;
 1170 e4e6: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1171 e4eb: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1172 e4f2: 49 46 20 00 tokl_if: DB "IF ",0
 1173 e4f6: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1174 e4fc: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1175 e502: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1176 e507: 54 4f 20 00 tokl_to: DB "TO ",0
 1177 e50b: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1178 e511: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1179 e517: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1180 e51e: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1181 e526: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1182 e52b: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1183 e531: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1184 e537: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1185 e53c: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1186 e542: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1187 e54d:             
 1188 e54d:             
 1189 e54d:             basic_list:
 1190 e54d: 07 03           pushr r3
 1191 e54f: 0f 37           movrr r7,r3
 1192 e551:             
 1193 e551:             
 1194 e551:             baslist_loop:
 1195 e551: 43              ldavr r3
 1196 e552:             
 1197 e552: 0d 00           LDTI TOKENIZER_ERROR
 1198 e554: aa e5 66        BRNEQ baslist1
 1199 e557: 1f e5 42        MVIW R7,tokl_error
 1200 e55a: 04 ff c0        JSR stringout
 1201 e55d: 04 ff cc        JSR showaddr
 1202 e560: a0 e7 fc        BR baslist_done
 1203 e563: a0 e5 51        BR baslist_loop
 1204 e566:             
 1205 e566:             baslist1:
 1206 e566: 0d 01           LDTI TOKENIZER_EOF
 1207 e568: aa e5 71        BRNEQ baslist2
 1208 e56b: a0 e7 fc        BR baslist_done
 1209 e56e: a0 e5 51        BR baslist_loop
 1210 e571:             
 1211 e571:             baslist2:
 1212 e571: 0d 02           LDTI TOKENIZER_NUMBER
 1213 e573: aa e5 88        BRNEQ baslist3
 1214 e576: 53              incr r3
 1215 e577: 43              ldavr r3
 1216 e578: 37              mvarl r7
 1217 e579: 53              incr r3
 1218 e57a: 43              ldavr r3
 1219 e57b: 3f              mvarh r7
 1220 e57c: 53              INCR R3
 1221 e57d: 04 ff d4        jsr showr7
 1222 e580: 0e 20           ldai ' '
 1223 e582: 04 ff c8        jsr uartout
 1224 e585: a0 e5 51        BR baslist_loop
 1225 e588:             
 1226 e588:             baslist3:
 1227 e588: 0d 03           LDTI TOKENIZER_STRING
 1228 e58a: aa e5 a4        BRNEQ baslist4
 1229 e58d: 53              incr r3
 1230 e58e: 0f 73           movrr r3,r7
 1231 e590: 04 ff c0        jsr stringout
 1232 e593: 0e 20           ldai ' '
 1233 e595: 04 ff c8        jsr uartout
 1234 e598:             baslist_string:
 1235 e598: 43              ldavr r3
 1236 e599: a1 e5 a0        brz baslist_stringend
 1237 e59c: 53              incr r3
 1238 e59d: a0 e5 98        br baslist_string
 1239 e5a0:             baslist_stringend:
 1240 e5a0: 53              incr r3
 1241 e5a1: a0 e5 51        BR baslist_loop
 1242 e5a4:             
 1243 e5a4:             baslist4:
 1244 e5a4: 0d 04           LDTI TOKENIZER_VARIABLE
 1245 e5a6: aa e5 bb        BRNEQ baslist5
 1246 e5a9: 53              incr r3
 1247 e5aa: 43              ldavr r3
 1248 e5ab: 0d 41           ldti 'A'
 1249 e5ad: b8              ADDT
 1250 e5ae: 53              incr r3
 1251 e5af: 53              incr r3
 1252 e5b0: 04 ff c8        jsr uartout
 1253 e5b3:             
 1254 e5b3:             ;    ldavr r3
 1255 e5b3:             ;    mvarl r7
 1256 e5b3:             ;    incr r3
 1257 e5b3:             ;    ldavr r3
 1258 e5b3:             ;    mvarh r7
 1259 e5b3:             ;    INCR R3
 1260 e5b3:             ;    jsr showr7
 1261 e5b3:             
 1262 e5b3: 0e 20           ldai ' '
 1263 e5b5: 04 ff c8        jsr uartout
 1264 e5b8: a0 e5 51        BR baslist_loop
 1265 e5bb:             
 1266 e5bb:             baslist5:
 1267 e5bb: 0d 05           LDTI TOKENIZER_LET
 1268 e5bd: aa e5 ca        BRNEQ baslist6
 1269 e5c0: 1f e4 e6        MVIW R7,tokl_let
 1270 e5c3: 04 ff c0        JSR stringout
 1271 e5c6: 53              INCR R3
 1272 e5c7: a0 e5 51        BR baslist_loop
 1273 e5ca:             
 1274 e5ca:             baslist6:
 1275 e5ca: 0d 06           LDTI TOKENIZER_PRINT
 1276 e5cc: aa e5 d9        BRNEQ baslist7
 1277 e5cf: 1f e4 eb        MVIW R7,tokl_print
 1278 e5d2: 04 ff c0        jsr STRINGOUT
 1279 e5d5: 53              INCR R3
 1280 e5d6: a0 e5 51        BR baslist_loop
 1281 e5d9:             
 1282 e5d9:             baslist7:
 1283 e5d9: 0d 07           LDTI TOKENIZER_IF
 1284 e5db: aa e5 e8        BRNEQ baslist8
 1285 e5de: 1f e4 f2        MVIW R7,tokl_if
 1286 e5e1: 04 ff c0        JSR stringout
 1287 e5e4: 53              INCR R3
 1288 e5e5: a0 e5 51        BR baslist_loop
 1289 e5e8:             
 1290 e5e8:             baslist8:
 1291 e5e8: 0d 08           LDTI TOKENIZER_THEN
 1292 e5ea: aa e5 f7        BRNEQ baslist9
 1293 e5ed: 1f e4 f6        MVIW R7,tokl_then
 1294 e5f0: 04 ff c0        JSR stringout
 1295 e5f3: 53              INCR R3
 1296 e5f4: a0 e5 51        BR baslist_loop
 1297 e5f7:             
 1298 e5f7:             baslist9:
 1299 e5f7: 0d 09           LDTI TOKENIZER_ELSE
 1300 e5f9: aa e6 06        BRNEQ baslist10
 1301 e5fc: 1f e4 fc        MVIW R7,tokl_else
 1302 e5ff: 04 ff c0        JSR stringout
 1303 e602: 53              INCR R3
 1304 e603: a0 e5 51        BR baslist_loop
 1305 e606:             
 1306 e606:             baslist10:
 1307 e606: 0d 0a           LDTI TOKENIZER_FOR
 1308 e608: aa e6 15        BRNEQ baslist11
 1309 e60b: 1f e5 02        MVIW R7,tokl_for
 1310 e60e: 04 ff c0        JSR stringout
 1311 e611: 53              INCR R3
 1312 e612: a0 e5 51        BR baslist_loop
 1313 e615:             
 1314 e615:             baslist11:
 1315 e615: 0d 0b           LDTI TOKENIZER_TO
 1316 e617: aa e6 24        BRNEQ baslist12
 1317 e61a: 1f e5 07        MVIW R7,tokl_to
 1318 e61d: 04 ff c0        JSR stringout
 1319 e620: 53              INCR R3
 1320 e621: a0 e5 51        BR baslist_loop
 1321 e624:             
 1322 e624:             baslist12:
 1323 e624: 0d 0c           LDTI TOKENIZER_NEXT
 1324 e626: aa e6 33        BRNEQ baslist13
 1325 e629: 1f e5 0b        MVIW R7,tokl_next
 1326 e62c: 04 ff c0        JSR stringout
 1327 e62f: 53              INCR R3
 1328 e630: a0 e5 51        BR baslist_loop
 1329 e633:             
 1330 e633:             baslist13:
 1331 e633: 0d 0d           LDTI TOKENIZER_GOTO
 1332 e635: aa e6 42        BRNEQ baslist14
 1333 e638: 1f e5 11        MVIW R7,tokl_goto
 1334 e63b: 04 ff c0        JSR stringout
 1335 e63e: 53              INCR R3
 1336 e63f: a0 e5 51        BR baslist_loop
 1337 e642:             
 1338 e642:             baslist14:
 1339 e642: 0d 0e           LDTI TOKENIZER_GOSUB
 1340 e644: aa e6 51        BRNEQ baslist15
 1341 e647: 1f e5 17        MVIW R7,tokl_gosub
 1342 e64a: 04 ff c0        JSR stringout
 1343 e64d: 53              INCR R3
 1344 e64e: a0 e5 51        BR baslist_loop
 1345 e651:             
 1346 e651:             baslist15:
 1347 e651: 0d 0f           LDTI TOKENIZER_RETURN
 1348 e653: aa e6 60        BRNEQ baslist16
 1349 e656: 1f e5 1e        MVIW R7,tokl_return
 1350 e659: 04 ff c0        JSR stringout
 1351 e65c: 53              INCR R3
 1352 e65d: a0 e5 51        BR baslist_loop
 1353 e660:             
 1354 e660:             baslist16:
 1355 e660: 0d 10           LDTI TOKENIZER_CALL
 1356 e662: aa e6 6f        BRNEQ baslist17
 1357 e665: 1f e5 3c        MVIW R7,tokl_call
 1358 e668: 04 ff c0        JSR stringout
 1359 e66b: 53              INCR R3
 1360 e66c: a0 e5 51        BR baslist_loop
 1361 e66f:             
 1362 e66f:             baslist17:
 1363 e66f: 0d 11           LDTI TOKENIZER_REM
 1364 e671: aa e6 7e        BRNEQ baslist18
 1365 e674: 1f e5 26        MVIW R7,tokl_rem
 1366 e677: 04 ff c0        JSR stringout
 1367 e67a: 53              INCR R3
 1368 e67b: a0 e5 51        BR baslist_loop
 1369 e67e:             
 1370 e67e:             baslist18:
 1371 e67e: 0d 12           LDTI TOKENIZER_PEEK
 1372 e680: aa e6 8d        BRNEQ baslist19
 1373 e683: 1f e5 2b        MVIW R7,tokl_peek
 1374 e686: 04 ff c0        JSR stringout
 1375 e689: 53              INCR R3
 1376 e68a: a0 e5 51        BR baslist_loop
 1377 e68d:             
 1378 e68d:             baslist19:
 1379 e68d: 0d 13           LDTI TOKENIZER_POKE
 1380 e68f: aa e6 9c        BRNEQ baslist20
 1381 e692: 1f e5 31        MVIW R7,tokl_poke
 1382 e695: 04 ff c0        JSR stringout
 1383 e698: 53              INCR R3
 1384 e699: a0 e5 51        BR baslist_loop
 1385 e69c:             
 1386 e69c:             baslist20:
 1387 e69c: 0d 14           LDTI TOKENIZER_END
 1388 e69e: aa e6 ab        BRNEQ baslist21
 1389 e6a1: 1f e5 37        MVIW R7,tokl_end
 1390 e6a4: 04 ff c0        JSR stringout
 1391 e6a7: 53              INCR R3
 1392 e6a8: a0 e5 51        BR baslist_loop
 1393 e6ab:             
 1394 e6ab:             baslist21:
 1395 e6ab: 0d 15           LDTI TOKENIZER_COMMA
 1396 e6ad: aa e6 be        BRNEQ baslist22
 1397 e6b0: 0e 2c           ldai ','
 1398 e6b2: 04 ff c8        jsr uartout
 1399 e6b5: 0e 20           ldai ' '
 1400 e6b7: 04 ff c8        jsr uartout
 1401 e6ba: 53              INCR R3
 1402 e6bb: a0 e5 51        BR baslist_loop
 1403 e6be:             
 1404 e6be:             baslist22:
 1405 e6be: 0d 16           LDTI TOKENIZER_SEMICOLON
 1406 e6c0: aa e6 d1        BRNEQ baslist23
 1407 e6c3: 0e 3b           ldai ';'
 1408 e6c5: 04 ff c8        jsr uartout
 1409 e6c8: 0e 20           ldai ' '
 1410 e6ca: 04 ff c8        jsr uartout
 1411 e6cd: 53              INCR R3
 1412 e6ce: a0 e5 51        BR baslist_loop
 1413 e6d1:             
 1414 e6d1:             baslist23:
 1415 e6d1: 0d 17           LDTI TOKENIZER_PLUS
 1416 e6d3: aa e6 e4        BRNEQ baslist24
 1417 e6d6: 0e 2b           ldai '+'
 1418 e6d8: 04 ff c8        jsr uartout
 1419 e6db: 0e 20           ldai ' '
 1420 e6dd: 04 ff c8        jsr uartout
 1421 e6e0: 53              INCR R3
 1422 e6e1: a0 e5 51        BR baslist_loop
 1423 e6e4:             
 1424 e6e4:             baslist24:
 1425 e6e4: 0d 18           LDTI TOKENIZER_MINUS
 1426 e6e6: aa e6 f7        BRNEQ baslist25
 1427 e6e9: 0e 2d           ldai '-'
 1428 e6eb: 04 ff c8        jsr uartout
 1429 e6ee: 0e 20           ldai ' '
 1430 e6f0: 04 ff c8        jsr uartout
 1431 e6f3: 53              INCR R3
 1432 e6f4: a0 e5 51        BR baslist_loop
 1433 e6f7:             
 1434 e6f7:             baslist25:
 1435 e6f7: 0d 19           LDTI TOKENIZER_AND
 1436 e6f9: aa e7 0a        BRNEQ baslist26
 1437 e6fc: 0e 26           ldai '&'
 1438 e6fe: 04 ff c8        jsr uartout
 1439 e701: 0e 20           ldai ' '
 1440 e703: 04 ff c8        jsr uartout
 1441 e706: 53              INCR R3
 1442 e707: a0 e5 51        BR baslist_loop
 1443 e70a:             
 1444 e70a:             baslist26:
 1445 e70a: 0d 1a           LDTI TOKENIZER_OR
 1446 e70c: aa e7 1d        BRNEQ baslist27
 1447 e70f: 0e 7c           ldai '|'
 1448 e711: 04 ff c8        jsr uartout
 1449 e714: 0e 20           ldai ' '
 1450 e716: 04 ff c8        jsr uartout
 1451 e719: 53              INCR R3
 1452 e71a: a0 e5 51        BR baslist_loop
 1453 e71d:             
 1454 e71d:             baslist27:
 1455 e71d: 0d 1b           LDTI TOKENIZER_ASTR
 1456 e71f: aa e7 30        BRNEQ baslist28
 1457 e722: 0e 2a           ldai '*'
 1458 e724: 04 ff c8        jsr uartout
 1459 e727: 0e 20           ldai ' '
 1460 e729: 04 ff c8        jsr uartout
 1461 e72c: 53              INCR R3
 1462 e72d: a0 e5 51        BR baslist_loop
 1463 e730:             
 1464 e730:             baslist28:
 1465 e730: 0d 1c           LDTI TOKENIZER_SLASH
 1466 e732: aa e7 43        BRNEQ baslist29
 1467 e735: 0e 2f           ldai '/'
 1468 e737: 04 ff c8        jsr uartout
 1469 e73a: 0e 20           ldai ' '
 1470 e73c: 04 ff c8        jsr uartout
 1471 e73f: 53              INCR R3
 1472 e740: a0 e5 51        BR baslist_loop
 1473 e743:             
 1474 e743:             baslist29:
 1475 e743: 0d 1d           LDTI TOKENIZER_MOD
 1476 e745: aa e7 56        BRNEQ baslist30
 1477 e748: 0e 25           ldai '%'
 1478 e74a: 04 ff c8        jsr uartout
 1479 e74d: 0e 20           ldai ' '
 1480 e74f: 04 ff c8        jsr uartout
 1481 e752: 53              INCR R3
 1482 e753: a0 e5 51        BR baslist_loop
 1483 e756:             
 1484 e756:             baslist30:
 1485 e756: 0d 1e           LDTI TOKENIZER_HASH
 1486 e758: aa e7 69        BRNEQ baslist31
 1487 e75b: 0e 23           ldai '#'
 1488 e75d: 04 ff c8        jsr uartout
 1489 e760: 0e 20           ldai ' '
 1490 e762: 04 ff c8        jsr uartout
 1491 e765: 53              INCR R3
 1492 e766: a0 e5 51        BR baslist_loop
 1493 e769:             
 1494 e769:             baslist31:
 1495 e769: 0d 1f           LDTI TOKENIZER_LEFTP
 1496 e76b: aa e7 7c        BRNEQ baslist32
 1497 e76e: 0e 28           ldai '()'
 1498 e770: 04 ff c8        jsr uartout
 1499 e773: 0e 20           ldai ' '
 1500 e775: 04 ff c8        jsr uartout
 1501 e778: 53              INCR R3
 1502 e779: a0 e5 51        BR baslist_loop
 1503 e77c:             
 1504 e77c:             baslist32:
 1505 e77c: 0d 20           LDTI TOKENIZER_RIGHTP
 1506 e77e: aa e7 8f        BRNEQ baslist33
 1507 e781: 0e 29           ldai ')'
 1508 e783: 04 ff c8        jsr uartout
 1509 e786: 0e 20           ldai ' '
 1510 e788: 04 ff c8        jsr uartout
 1511 e78b: 53              INCR R3
 1512 e78c: a0 e5 51        BR baslist_loop
 1513 e78f:             
 1514 e78f:             baslist33:
 1515 e78f: 0d 21           LDTI TOKENIZER_LT
 1516 e791: aa e7 a2        BRNEQ baslist34
 1517 e794: 0e 3c           ldai '<'
 1518 e796: 04 ff c8        jsr uartout
 1519 e799: 0e 20           ldai ' '
 1520 e79b: 04 ff c8        jsr uartout
 1521 e79e: 53              INCR R3
 1522 e79f: a0 e5 51        BR baslist_loop
 1523 e7a2:             
 1524 e7a2:             baslist34:
 1525 e7a2: 0d 22           LDTI TOKENIZER_GT
 1526 e7a4: aa e7 b5        BRNEQ baslist35
 1527 e7a7: 0e 3e           ldai '>'
 1528 e7a9: 04 ff c8        jsr uartout
 1529 e7ac: 0e 20           ldai ' '
 1530 e7ae: 04 ff c8        jsr uartout
 1531 e7b1: 53              INCR R3
 1532 e7b2: a0 e5 51        BR baslist_loop
 1533 e7b5:             
 1534 e7b5:             baslist35:
 1535 e7b5: 0d 23           LDTI TOKENIZER_EQ
 1536 e7b7: aa e7 c8        BRNEQ baslist36
 1537 e7ba: 0e 3d           ldai '='
 1538 e7bc: 04 ff c8        jsr uartout
 1539 e7bf: 0e 20           ldai ' '
 1540 e7c1: 04 ff c8        jsr uartout
 1541 e7c4: 53              INCR R3
 1542 e7c5: a0 e5 51        BR baslist_loop
 1543 e7c8:             
 1544 e7c8:             baslist36:
 1545 e7c8: 0d 24           LDTI TOKENIZER_CR
 1546 e7ca: aa e7 d7        BRNEQ baslist37
 1547 e7cd: 1f ec c9        mviw R7,CRLF
 1548 e7d0: 04 ff c0        jsr stringout
 1549 e7d3: 53              INCR R3
 1550 e7d4: a0 e5 51        BR baslist_loop
 1551 e7d7:             
 1552 e7d7:             baslist37:
 1553 e7d7: 0d 25           LDTI TOKENIZER_LINENUM
 1554 e7d9: aa e7 f0        BRNEQ baslist38
 1555 e7dc: 53              incr r3
 1556 e7dd: 43              ldavr r3
 1557 e7de: 37              mvarl r7
 1558 e7df: 53              incr r3
 1559 e7e0: 43              ldavr r3
 1560 e7e1: 3f              mvarh r7
 1561 e7e2: 53              INCR R3
 1562 e7e3: 53              incr r3
 1563 e7e4: 53              incr r3
 1564 e7e5: 04 ff d4        jsr showr7
 1565 e7e8: 0e 20           ldai ' '
 1566 e7ea: 04 ff c8        jsr uartout
 1567 e7ed: a0 e5 51        BR baslist_loop
 1568 e7f0:             
 1569 e7f0:             baslist38:
 1570 e7f0: 1f e5 42        MVIW R7,tokl_error
 1571 e7f3: 04 ff c0        JSR stringout
 1572 e7f6: 04 ff cc        JSR showaddr
 1573 e7f9: a0 e7 fc        BR baslist_done
 1574 e7fc:             ;
 1575 e7fc:             ; any cleanup
 1576 e7fc:             ;
 1577 e7fc:             baslist_done:
 1578 e7fc: 08 30           popr r3
 1579 e7fe: 05              ret
 1580 e7ff:             
 1581 e7ff:             ;
 1582 e7ff:             ; Basic Interpreter Parser
 1583 e7ff:             ;
 1584 e7ff:             parse_keywords:
 1585 e7ff: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1586 e804: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1587 e80b: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1588 e80f: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1589 e815: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1590 e81b: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1591 e820: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1592 e824: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1593 e82a: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1594 e830: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1595 e837: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1596 e83f: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1597 e845: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1598 e84a: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1599 e850: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1600 e856: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1601 e85b: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1602 e85e:             
 1603 e85e:             ;
 1604 e85e:             ; int singlechar (void)
 1605 e85e:             ;
 1606 e85e:             ; return TOKEN result in accumulator
 1607 e85e:             ;
 1608 e85e:             ; ready for testing
 1609 e85e:             ;
 1610 e85e:             parse_singlechar:
 1611 e85e:             ;
 1612 e85e: 07 03           pushr r3
 1613 e860: f3 02 02        LDR r3,bas_txtptr
 1614 e863: 43              ldavr r3
 1615 e864: 08 30           popr r3
 1616 e866:             ;
 1617 e866: 0d 0a           ldti 0ah
 1618 e868: aa e8 6e        brneq parsechar1
 1619 e86b: 0e 24           ldai TOKENIZER_CR
 1620 e86d: 05              ret
 1621 e86e:             parsechar1:
 1622 e86e: 0d 2c           ldti ','
 1623 e870: aa e8 76        brneq parsechar2
 1624 e873: 0e 15           ldai TOKENIZER_COMMA
 1625 e875: 05              ret
 1626 e876:             parsechar2:
 1627 e876: 0d 3b           ldti ';'
 1628 e878: aa e8 7e        brneq parsechar3
 1629 e87b: 0e 16           ldai TOKENIZER_SEMICOLON
 1630 e87d: 05              ret
 1631 e87e:             parsechar3:
 1632 e87e: 0d 2b           ldti '+'
 1633 e880: aa e8 86        brneq parsechar4
 1634 e883: 0e 17           ldai TOKENIZER_PLUS
 1635 e885: 05              ret
 1636 e886:             parsechar4:
 1637 e886: 0d 2d           ldti '-'
 1638 e888: aa e8 8e        brneq parsechar5
 1639 e88b: 0e 18           ldai TOKENIZER_MINUS
 1640 e88d: 05              ret
 1641 e88e:             parsechar5:
 1642 e88e: 0d 26           ldti '&'
 1643 e890: aa e8 96        brneq parsechar6
 1644 e893: 0e 19           ldai TOKENIZER_AND
 1645 e895: 05              ret
 1646 e896:             parsechar6:
 1647 e896: 0d 7c           ldti '|'
 1648 e898: aa e8 9e        brneq parsechar7
 1649 e89b: 0e 1a           ldai TOKENIZER_OR
 1650 e89d: 05              ret
 1651 e89e:             parsechar7:
 1652 e89e: 0d 2a           ldti '*'
 1653 e8a0: aa e8 a6        brneq parsechar8
 1654 e8a3: 0e 1b           ldai TOKENIZER_ASTR
 1655 e8a5: 05              ret
 1656 e8a6:             parsechar8:
 1657 e8a6: 0d 25           ldti '%'
 1658 e8a8: aa e8 ae        brneq parsechar9
 1659 e8ab: 0e 1d           ldai TOKENIZER_MOD
 1660 e8ad: 05              ret
 1661 e8ae:             parsechar9:
 1662 e8ae: 0d 28           ldti '('
 1663 e8b0: aa e8 b6        brneq parsechar10
 1664 e8b3: 0e 1f           ldai TOKENIZER_LEFTP
 1665 e8b5: 05              ret
 1666 e8b6:             parsechar10:
 1667 e8b6: 0d 23           ldti '#'
 1668 e8b8: aa e8 be        brneq parsechar11
 1669 e8bb: 0e 1e           ldai TOKENIZER_HASH
 1670 e8bd: 05              ret
 1671 e8be:             parsechar11:
 1672 e8be: 0d 29           ldti ')'
 1673 e8c0: aa e8 c6        brneq parsechar12
 1674 e8c3: 0e 20           ldai TOKENIZER_RIGHTP
 1675 e8c5: 05              ret
 1676 e8c6:             parsechar12:
 1677 e8c6: 0d 3c           ldti '<'
 1678 e8c8: aa e8 ce        brneq parsechar13
 1679 e8cb: 0e 21           ldai TOKENIZER_LT
 1680 e8cd: 05              ret
 1681 e8ce:             parsechar13:
 1682 e8ce: 0d 3e           ldti '>'
 1683 e8d0: aa e8 d6        brneq parsechar14
 1684 e8d3: 0e 22           ldai TOKENIZER_GT
 1685 e8d5: 05              ret
 1686 e8d6:             parsechar14:
 1687 e8d6: 0d 3d           ldti '='
 1688 e8d8: aa e8 de        brneq parsechar15
 1689 e8db: 0e 23           ldai TOKENIZER_EQ
 1690 e8dd: 05              ret
 1691 e8de:             parsechar15:
 1692 e8de: 0e 00           ldai 0
 1693 e8e0: 05              ret
 1694 e8e1:             
 1695 e8e1:             ;
 1696 e8e1:             ; int get_next_token(void)
 1697 e8e1:             ;
 1698 e8e1:             ; under development fix ptr nextptr
 1699 e8e1:             
 1700 e8e1:             parse_get_next_tok:
 1701 e8e1: 07 03           pushr r3
 1702 e8e3: f3 02 02        LDR R3,bas_txtptr
 1703 e8e6:             ;
 1704 e8e6:             ; is digit
 1705 e8e6:             ;
 1706 e8e6:             ; chcek for number
 1707 e8e6:             ;
 1708 e8e6:             parse_gnt1:
 1709 e8e6: 43              ldavr r3
 1710 e8e7: 04 ec 98        jsr parse_isdigit
 1711 e8ea: a1 e8 fd        brz parse_gnt2
 1712 e8ed:             parse_gnt1loop:
 1713 e8ed: 53              incr R3
 1714 e8ee: 43              ldavr r3
 1715 e8ef: 04 ec 98        jsr parse_isdigit
 1716 e8f2: a2 e8 ed        brnz parse_gnt1loop
 1717 e8f5: fb 02 04        STR r3,bas_nxtptr
 1718 e8f8: 0e 02           ldai TOKENIZER_NUMBER
 1719 e8fa: 08 30           popr r3
 1720 e8fc: 05              ret
 1721 e8fd:             ;
 1722 e8fd:             ; singlechar
 1723 e8fd:             ;
 1724 e8fd:             parse_gnt2:
 1725 e8fd: 43             ldavr r3
 1726 e8fe: 04 e8 5e       jsr parse_singlechar
 1727 e901: a1 e9 0b       BRZ parse_gnt3
 1728 e904: 53             incr r3
 1729 e905: fb 02 04       STR r3,bas_nxtptr
 1730 e908: 08 30          popr r3
 1731 e90a: 05             ret
 1732 e90b:             ;
 1733 e90b:             ; quote
 1734 e90b:             ;
 1735 e90b:             parse_gnt3:
 1736 e90b: 43              ldavr R3
 1737 e90c: 0d 22           ldti '"'
 1738 e90e: aa e9 21        brneq parse_gnt4
 1739 e911:             parse_gnt3loop:
 1740 e911: 53              incr r3
 1741 e912: 43              ldavr R3
 1742 e913: 0d 22           ldti '"'
 1743 e915: aa e9 11        brneq parse_gnt3loop
 1744 e918: 53              incr r3
 1745 e919: fb 02 04        STR r3,bas_nxtptr
 1746 e91c: 0e 03           ldai TOKENIZER_STRING
 1747 e91e: 08 30           popr r3
 1748 e920: 05              ret
 1749 e921:             ;
 1750 e921:             parse_gnt4:
 1751 e921:             ;
 1752 e921:             ; keyword search
 1753 e921:             ;
 1754 e921: 07 04           pushr r4
 1755 e923: 1c e7 ff        mviw r4,parse_keywords
 1756 e926:             top:
 1757 e926: 44              ldavr r4
 1758 e927: f3 02 02        LDR r3,bas_txtptr
 1759 e92a: a1 e9 4e        brz nokeyowrdsfound
 1760 e92d:             pcmploop:
 1761 e92d: 44              ldavr r4
 1762 e92e: a1 e9 44        brz found
 1763 e931: 0b              MVAT
 1764 e932: 43              ldavr r3
 1765 e933: aa e9 3b        brneq skiptoend
 1766 e936: 54              incr r4
 1767 e937: 53              incr r3
 1768 e938: a0 e9 2d        br pcmploop
 1769 e93b:             
 1770 e93b:             skiptoend:
 1771 e93b:             ;  skip to end of string and skip over token
 1772 e93b:             skiploop:
 1773 e93b: 44              ldavr r4
 1774 e93c: 54              incr r4
 1775 e93d: a2 e9 3b        brnz skiploop
 1776 e940: 54              incr r4
 1777 e941: a0 e9 26        br top
 1778 e944:             
 1779 e944:             found:
 1780 e944: fb 02 04        str r3,bas_nxtptr
 1781 e947: 54              incr r4
 1782 e948: 44              ldavr r4
 1783 e949: 08 40           popr r4
 1784 e94b: 08 30           popr r3
 1785 e94d: 05              ret
 1786 e94e:             
 1787 e94e:             nokeyowrdsfound:
 1788 e94e: 08 40           popr r4
 1789 e950:             ;
 1790 e950:             ;  check for variables
 1791 e950:             ;
 1792 e950: 43              ldavr r3
 1793 e951: 0d 41           ldti 'A'
 1794 e953: a7 e9 64        BRLT parse_gnt_error
 1795 e956: 0d 5a           ldti 'Z'
 1796 e958: a9 e9 64        BRGT parse_gnt_error
 1797 e95b: 53              INCR r3
 1798 e95c: fb 02 04        str r3,bas_nxtptr
 1799 e95f: 0e 04           LDAI tokenizer_variable
 1800 e961: 08 30           popr r3
 1801 e963: 05              RET
 1802 e964:             
 1803 e964:             parse_gnt_error:
 1804 e964: 03              halt
 1805 e965: 0e 00           ldai tokenizer_error
 1806 e967: 08 30           popr r3
 1807 e969: 05              ret
 1808 e96a:             
 1809 e96a:             ;
 1810 e96a:             ; void TOKENIZER_GOTO (char * program)
 1811 e96a:             ;
 1812 e96a:             ; under development, may not be needed
 1813 e96a:             ;
 1814 e96a:             ;parse_goto:
 1815 e96a:             ;    str r3,bas_txtptr
 1816 e96a:             ;    jsr parse_get_next_tok
 1817 e96a:             ;    sta bas_currenttoken
 1818 e96a:             ;    ret
 1819 e96a:             
 1820 e96a:             ;
 1821 e96a:             ; void tokenizer_init(int ptr)
 1822 e96a:             ;
 1823 e96a:             ; under development
 1824 e96a:             ;
 1825 e96a:             parse_init:
 1826 e96a:             
 1827 e96a: 07 03           pushr r3
 1828 e96c: ff 02 02        STR R7,bas_txtptr
 1829 e96f: 1b 04 00        MVIW r3,parse_token_buffer
 1830 e972: fb 02 06        STR  R3,bas_tokptr
 1831 e975: 1b 00 00        mviw r3,0
 1832 e978: fb 02 08        str r3,bas_tokcounter
 1833 e97b: 04 e8 e1        jsr parse_get_next_tok
 1834 e97e: ed 02 0a        sta bas_currenttoken
 1835 e981: 08 30           popr r3
 1836 e983: 05              ret
 1837 e984:             
 1838 e984:             ;
 1839 e984:             ; int tokenizer_token(void)
 1840 e984:             :
 1841 e984:             parse_token:
 1842 e984: ec 02 0a        lda bas_currenttoken
 1843 e987: 05              ret
 1844 e988:             
 1845 e988:             ;
 1846 e988:             ; void tokenizer_next(void) parser version
 1847 e988:             ;
 1848 e988:             parse_next:
 1849 e988: 04 ea 6d        jsr parse_finished
 1850 e98b: a1 e9 8f        brz parse_next1
 1851 e98e: 05              ret
 1852 e98f:             
 1853 e98f:             parse_next1:
 1854 e98f: 07 03           pushr r3
 1855 e991: f3 02 04        ldr r3,bas_nxtptr
 1856 e994: fb 02 02        str r3,bas_txtptr
 1857 e997:             
 1858 e997:             parse_next1loop:
 1859 e997: 43              ldavr r3
 1860 e998: 0d 20           ldti ' '
 1861 e99a: aa e9 a1        brneq parse_next2
 1862 e99d: 53              incr r3
 1863 e99e: a0 e9 97        br parse_next1loop
 1864 e9a1:             
 1865 e9a1:             
 1866 e9a1:             parse_next2:
 1867 e9a1: fb 02 02        str r3,bas_txtptr
 1868 e9a4: 04 e8 e1        jsr parse_get_next_tok
 1869 e9a7: ed 02 0a        sta bas_currenttoken
 1870 e9aa:             
 1871 e9aa: 0d 11           ldti TOKENIZER_REM
 1872 e9ac: a8 e9 b2        breq parse_next3
 1873 e9af: 08 30           popr r3
 1874 e9b1: 05              ret
 1875 e9b2:             
 1876 e9b2:             ;
 1877 e9b2:             ; this needs to be fixed
 1878 e9b2:             ; if rem return to parsel line then copy into token buffer
 1879 e9b2:             ;
 1880 e9b2:             parse_next3:
 1881 e9b2: 04 ea 6d        JSR parse_finished
 1882 e9b5: a2 e9 c2        BRNZ parse_nextdone
 1883 e9b8: 43              ldavr r3
 1884 e9b9: 0d 0a           ldti  0ah
 1885 e9bb: a8 e9 c2        breq parse_nextdone
 1886 e9be: 53              incr r3
 1887 e9bf: a0 e9 b2        br parse_next3
 1888 e9c2:             
 1889 e9c2:             parse_nextdone:
 1890 e9c2: 43              ldavr r3
 1891 e9c3: 0d 0a           ldti  0ah
 1892 e9c5: aa e9 c9        brneq parse_nextdone2
 1893 e9c8: 53              incr r3
 1894 e9c9:             
 1895 e9c9:             parse_nextdone2:
 1896 e9c9: fb 02 04        str r3,bas_nxtptr
 1897 e9cc: 04 e9 88        jsr parse_next
 1898 e9cf: 08 30           popr r3
 1899 e9d1: 05              ret
 1900 e9d2:             
 1901 e9d2:             ;
 1902 e9d2:             ; VARIABLE_TYPE tokenizer_num(void)
 1903 e9d2:             ;
 1904 e9d2:             ; Hack for now input characters are ascii hex format HHHH
 1905 e9d2:             ;
 1906 e9d2:             ; value returned in R7
 1907 e9d2:             ;
 1908 e9d2:             ; Should this advance the line ptr?
 1909 e9d2:             ;
 1910 e9d2:             
 1911 e9d2:             parse_num:
 1912 e9d2: 07 03           pushr r3
 1913 e9d4: 07 04           pushr r4
 1914 e9d6: 07 05           pushr r5
 1915 e9d8: 07 06           pushr r6
 1916 e9da: 1e 00 00        mviw r6,0           ;accumlate val in r6
 1917 e9dd: f3 02 02        LDR r3,bas_txtptr
 1918 e9e0: 04 ea 0e        jsr parse_num_char
 1919 e9e3:             ;   jsr SHOWBYTEA
 1920 e9e3: 36              mvarl r6
 1921 e9e4:             parse_num_loop:
 1922 e9e4: 04 ea 0e        jsr parse_num_char
 1923 e9e7:             ;   jsr showbytea
 1924 e9e7: 09              push
 1925 e9e8: 0d ff           ldti 0FFH
 1926 e9ea: a8 ea 02        breq parse_num_done
 1927 e9ed:             
 1928 e9ed: 0f 56           movrr r6,r5
 1929 e9ef: 1c 00 0a        mviw r4,0ah
 1930 e9f2: 04 ec 12        jsr parse_mul16
 1931 e9f5:             ;    jsr showr7
 1932 e9f5: 0a              pop
 1933 e9f6: 1e 00 00        mviw r6,0
 1934 e9f9: 36              mvarl r6
 1935 e9fa: 04 ec 4d        jsr parse_add16
 1936 e9fd: 0f 67           movrr r7,r6
 1937 e9ff:             ;    jsr showr7
 1938 e9ff: a0 e9 e4        br parse_num_loop
 1939 ea02:             parse_num_done:
 1940 ea02: 0a              pop
 1941 ea03: 0f 76           movrr r6,r7
 1942 ea05: 08 60           popr r6
 1943 ea07: 08 50           popr r5
 1944 ea09: 08 40           popr r4
 1945 ea0b: 08 30           popr r3
 1946 ea0d:             ;    jsr showr7
 1947 ea0d: 05              ret
 1948 ea0e:             
 1949 ea0e:             parse_num_char:
 1950 ea0e: 43              LDAVR R3
 1951 ea0f: 04 ec 98        JSR parse_isdigit
 1952 ea12: a2 ea 18        BRNZ parse_num_char1
 1953 ea15: 0e ff           ldai 0ffh
 1954 ea17: 05              ret
 1955 ea18:             parse_num_char1:
 1956 ea18: 43              ldavr r3
 1957 ea19: b1 30           SUBI '0'
 1958 ea1b: 53              incr r3
 1959 ea1c: 05              RET
 1960 ea1d:             
 1961 ea1d:             parse_num_old:
 1962 ea1d: 07 03           pushr r3
 1963 ea1f: f3 02 02        LDR r3,bas_txtptr
 1964 ea22: 04 ea 4b        JSR parse_getnibble
 1965 ea25: b6              SHL
 1966 ea26: b6              SHL
 1967 ea27: b6              SHL
 1968 ea28: b6              SHL
 1969 ea29: b3 f0           ANDI 0f0h
 1970 ea2b: 09              Push
 1971 ea2c: 04 ea 4b        JSR parse_getnibble
 1972 ea2f: b3 0f           ANDI 0FH
 1973 ea31: 0b              MVAT
 1974 ea32: 0a              Pop
 1975 ea33: ba              ORT
 1976 ea34: 3f              MVARH R7
 1977 ea35:             
 1978 ea35: 04 ea 4b        JSR parse_getnibble
 1979 ea38: b6              SHL
 1980 ea39: b6              shl
 1981 ea3a: b6              shl
 1982 ea3b: b6              shl
 1983 ea3c: b3 f0           ANDI 0f0h
 1984 ea3e: 09              push
 1985 ea3f: 04 ea 4b        JSR parse_getnibble
 1986 ea42: b3 0f           ANDI 0FH
 1987 ea44: 0b              MVAT
 1988 ea45: 0a              pop
 1989 ea46: ba              ORT
 1990 ea47: 37              MVARL R7
 1991 ea48: 08 30           popr r3
 1992 ea4a: 05              RET
 1993 ea4b:             
 1994 ea4b:             ;
 1995 ea4b:             ; add error checking
 1996 ea4b:             ;
 1997 ea4b:             ; return hex nibble in accumulator
 1998 ea4b:             ;
 1999 ea4b:             parse_getnibble:
 2000 ea4b: 43                LDAVR R3
 2001 ea4c: 53                incr r3
 2002 ea4d: 0d 39             LDTI '9'
 2003 ea4f: a9 ea 55          BRGT parse_af
 2004 ea52: b1 30             SUBI '0'
 2005 ea54: 05                RET
 2006 ea55:             parse_af:
 2007 ea55: 04 ff d0          JSR toupper
 2008 ea58: b1 41             SUBI 'A'
 2009 ea5a: b0 0a             ADDI 10
 2010 ea5c: 05                RET
 2011 ea5d:             ;
 2012 ea5d:             ; void tokenizer_string(char *dest, int len)
 2013 ea5d:             ;
 2014 ea5d:             ; not used, in line parse_line
 2015 ea5d:             ;
 2016 ea5d:             parse_string:
 2017 ea5d: 04 e9 84        JSR parse_token
 2018 ea60: 0d 03           LDTI TOKENIZER_STRING
 2019 ea62: a8 ea 66        BREQ parse_string1
 2020 ea65: 05              ret
 2021 ea66:             
 2022 ea66:             parse_string1:
 2023 ea66: 07 03           pushr r3
 2024 ea68: f3 02 02        LDR r3,bas_txtptr
 2025 ea6b: 43              LDAVR R3
 2026 ea6c:             
 2027 ea6c:             
 2028 ea6c:             ;
 2029 ea6c:             ; void tokenizer_error_print(void)
 2030 ea6c:             ;
 2031 ea6c:             ; fix
 2032 ea6c:             ;
 2033 ea6c:             parse_error_print:
 2034 ea6c: 03              halt
 2035 ea6d:             
 2036 ea6d:             ;
 2037 ea6d:             ; int tokenizer_finished(void)
 2038 ea6d:             ;
 2039 ea6d:             parse_finished:
 2040 ea6d: 07 03           pushr r3
 2041 ea6f: f3 02 02        LDR r3,bas_txtptr
 2042 ea72: 43              ldavr r3
 2043 ea73: a1 ea 88        brz parse_finished_yes
 2044 ea76:             ;    ldti 0ah
 2045 ea76:             ;    breq parse_finished_yes
 2046 ea76:             ;    ldti 0dh
 2047 ea76:             ;    breq parse_finished_yes
 2048 ea76: 0d 01           ldti TOKENIZER_EOF
 2049 ea78: a8 ea 88        breq parse_finished_yes
 2050 ea7b: ec 02 0a        lda bas_currenttoken
 2051 ea7e: 0d 01           ldti TOKENIZER_EOF
 2052 ea80: a8 ea 88        breq parse_finished_yes
 2053 ea83: 08 30           popr r3
 2054 ea85: 0e 00           ldai 0
 2055 ea87: 05              ret
 2056 ea88:             parse_finished_yes:
 2057 ea88: 0e 01           ldai 1
 2058 ea8a: 08 30           popr r3
 2059 ea8c: 05              ret
 2060 ea8d:             
 2061 ea8d:             ;
 2062 ea8d:             ; int tokenizer_variable_num(void)
 2063 ea8d:             ;
 2064 ea8d:             parse_variable_num:
 2065 ea8d: 07 03             pushr r3
 2066 ea8f: f3 02 02          LDR r3,bas_txtptr
 2067 ea92: 43                ldavr r3
 2068 ea93: b1 41             subi 'A'
 2069 ea95: 37                mvarl r7
 2070 ea96: 0e 00             ldai 0
 2071 ea98: 3f                mvarh r7
 2072 ea99: 08 30             popr r3
 2073 ea9b: 05                ret
 2074 ea9c:             
 2075 ea9c:             ;
 2076 ea9c:             ; char *const tokenizer_pos(void)
 2077 ea9c:             ;
 2078 ea9c:             ; probably not used
 2079 ea9c:             parse_pos:
 2080 ea9c:             
 2081 ea9c:             ;not used old
 2082 ea9c:             ; char *tokenize(char *program)
 2083 ea9c:             ;
 2084 ea9c:             ; parse:
 2085 ea9c:             
 2086 ea9c:             ;
 2087 ea9c:             ; char *tokenizeLine(char *line)
 2088 ea9c:             ;
 2089 ea9c:             ; assume input text string in parse_input_line
 2090 ea9c:             ;
 2091 ea9c:             
 2092 ea9c:             parse_line:
 2093 ea9c: 04 e9 6a        JSR PARSE_INIT
 2094 ea9f: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2095 eaa2: fb 02 08        str r3,bas_tokcounter
 2096 eaa5: 1b 04 00        MVIW R3,parse_token_buffer
 2097 eaa8:             
 2098 eaa8: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2099 eaaa: 4b              STAVR R3
 2100 eaab: 53              INCR R3
 2101 eaac:             
 2102 eaac: 04 e9 d2        JSR parse_num           ;store line number
 2103 eaaf: ff 02 10        str r7,bas_newlinenum
 2104 eab2: 27              mvrla r7
 2105 eab3: 4b              stavr r3
 2106 eab4: 53              incr r3
 2107 eab5: 2f              mvrha r7
 2108 eab6: 4b              stavr r3
 2109 eab7: 53              incr r3
 2110 eab8:             
 2111 eab8: 53              incr r3                ; skip over line length - fill in later
 2112 eab9: 53              incr r3
 2113 eaba:             
 2114 eaba:             parse_line_loop:
 2115 eaba: 04 e9 88        JSR parse_next
 2116 eabd: 04 e9 84        JSR parse_token
 2117 eac0: 0d 24           ldti TOKENIZER_CR
 2118 eac2: a8 eb 31        BREQ parse_line_done
 2119 eac5:             
 2120 eac5: 4b              STAVR R3
 2121 eac6: 53              INCR R3
 2122 eac7: f5 02 08        ldr r5,bas_tokcounter
 2123 eaca: 55              incr r5
 2124 eacb: fd 02 08        str r5,bas_tokcounter
 2125 eace:             
 2126 eace: 0d 02           ldti TOKENIZER_NUMBER
 2127 ead0: aa ea e7        BRNEQ parse_line1
 2128 ead3: 04 e9 d2        JSR parse_num
 2129 ead6: 27              mvrla r7
 2130 ead7: 4b              stavr r3
 2131 ead8: 53              incr r3
 2132 ead9: 2f              mvrha r7
 2133 eada: 4b              stavr r3
 2134 eadb: 53              incr r3
 2135 eadc: f5 02 08        ldr r5,bas_tokcounter
 2136 eadf: 55              incr r5
 2137 eae0: 55              incr r5
 2138 eae1: fd 02 08        str r5,bas_tokcounter
 2139 eae4: a0 ea ba        BR parse_line_loop
 2140 eae7:             
 2141 eae7:             parse_line1:
 2142 eae7: 0d 03           ldti TOKENIZER_STRING
 2143 eae9: aa eb 18        BRNEQ parse_line2
 2144 eaec: f4 02 02        ldr r4,bas_txtptr
 2145 eaef: 54              incr r4                   ;skip over opening "
 2146 eaf0:             
 2147 eaf0:             parse_line1loop:
 2148 eaf0: 44              ldavr r4
 2149 eaf1: 0d 22           ldti '"'
 2150 eaf3: a8 eb 03        breq parse_line1done
 2151 eaf6: 4b              stavr r3
 2152 eaf7: 53              incr r3
 2153 eaf8: 54              incr r4
 2154 eaf9: f5 02 08        ldr r5,bas_tokcounter
 2155 eafc: 55              incr r5
 2156 eafd: fd 02 08        str r5,bas_tokcounter
 2157 eb00: a0 ea f0        BR parse_line1loop
 2158 eb03:             parse_line1done:
 2159 eb03: 54              incr r4                   ;skip over closing "
 2160 eb04: 0e 00           ldai 0                    ;add null into token buffer
 2161 eb06: 4b              stavr R3
 2162 eb07: 53              incr r3
 2163 eb08: f5 02 08        ldr r5,bas_tokcounter
 2164 eb0b: 55              incr r5
 2165 eb0c: fd 02 08        str r5,bas_tokcounter
 2166 eb0f: fb 02 06        str r3,BAS_TOKPTR
 2167 eb12: fc 02 02        str r4,bas_txtptr
 2168 eb15: a0 ea ba        BR parse_line_loop
 2169 eb18:             
 2170 eb18:             parse_line2:
 2171 eb18: 0d 04           ldti TOKENIZER_VARIABLE
 2172 eb1a: aa ea ba        BRNEQ parse_line_loop
 2173 eb1d: 04 ea 8d        JSR parse_variable_num
 2174 eb20: 27              mvrla r7
 2175 eb21: 4b              stavr r3
 2176 eb22: 53              incr r3
 2177 eb23: 2f              mvrha r7
 2178 eb24: 4b              stavr r3
 2179 eb25: 53              incr r3
 2180 eb26: f5 02 08        ldr r5,bas_tokcounter
 2181 eb29: 55              incr r5
 2182 eb2a: 55              incr r5
 2183 eb2b: fd 02 08        str r5,bas_tokcounter
 2184 eb2e: a0 ea ba        BR parse_line_loop
 2185 eb31:             
 2186 eb31:             parse_line_done:
 2187 eb31: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2188 eb33: 4b              STAVR R3
 2189 eb34: 53              INCR R3
 2190 eb35:             ;    ldr r5,bas_tokcounter
 2191 eb35:             ;    incr r5
 2192 eb35:             ;    str r5,bas_tokcounter
 2193 eb35:             
 2194 eb35: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2195 eb38: 53              incr r3
 2196 eb39: 53              incr r3
 2197 eb3a: 53              incr r3
 2198 eb3b: f7 02 08        ldr r7,bas_tokcounter
 2199 eb3e: ff 02 12        str r7,bas_newlinelen
 2200 eb41: 27              mvrla r7
 2201 eb42: 4b              stavr r3
 2202 eb43: 53              incr r3
 2203 eb44: 2f              mvrha r7
 2204 eb45: 4b              stavr r3
 2205 eb46:             
 2206 eb46:             ;
 2207 eb46:             ; void addLine(char *buff)
 2208 eb46:             ; since addline is only called from parse_tokenizeline where are these
 2209 eb46:             ; values are know, pass them in or
 2210 eb46:             ; maybe merge addLine to bottom of parse_tokenizeline
 2211 eb46:             ;
 2212 eb46:             ; r7 points to line to insert
 2213 eb46:             ; r6 linenumber
 2214 eb46:             ; r5 linelength
 2215 eb46:             ;
 2216 eb46:             parse_addline:
 2217 eb46: f7 02 10          ldr r7,BAS_NEWLINENUM
 2218 eb49: 04 eb ae          JSR parse_removeline      ; if line number already exists delete it
 2219 eb4c: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2220 eb4f: 27                mvrla r7
 2221 eb50: 0d 06             ldti 6
 2222 eb52: aa eb 56          brneq parse_addline1
 2223 eb55: 05                ret
 2224 eb56:             
 2225 eb56:             parse_addline1:                 ;find insert location
 2226 eb56: f7 02 10          ldr r7,BAS_NEWLINENUM
 2227 eb59: f3 02 0c          ldr r3,bas_tokenBuffer
 2228 eb5c:             
 2229 eb5c:             parse_addlineloop:
 2230 eb5c: fb 02 14          str r3,bas_insertptr
 2231 eb5f: 43                ldavr r3
 2232 eb60: 0d 01             ldti TOKENIZER_EOF
 2233 eb62: a8 eb 85          BREQ parse_addroom
 2234 eb65: 53                incr r3                   ;get line number of line in token buffer into r6
 2235 eb66: 43                ldavr r3
 2236 eb67: 36                mvarl r6
 2237 eb68: 53                incr r3
 2238 eb69: 43                ldavr r3
 2239 eb6a: 3e                mvarh r6
 2240 eb6b: 04 ec a8          jsr parse_compare
 2241 eb6e: 0d ff             ldti 0ffh
 2242 eb70: a8 eb 85          breq parse_addroom
 2243 eb73:             
 2244 eb73: 53                incr r3                   ;get line length
 2245 eb74: 43                ldavr r3
 2246 eb75: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2247 eb78: 36                mvarl r6
 2248 eb79: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2249 eb7a: 5e                decr r6
 2250 eb7b: 5e                decr r6
 2251 eb7c:             
 2252 eb7c:             addline_moveptr:              ; advance pointer to next line
 2253 eb7c: 53                incr r3
 2254 eb7d: 5e                decr r6
 2255 eb7e: 26                mvrla r6
 2256 eb7f: a2 eb 7c          brnz addline_moveptr
 2257 eb82: a0 eb 5c          br parse_addlineloop
 2258 eb85:             
 2259 eb85:             
 2260 eb85:             parse_addroom:               ; make room
 2261 eb85: 1f 20 00          mviw r7,BAS_TOK_BUF_END
 2262 eb88:             ;      decr r7
 2263 eb88: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2264 eb8b: 04 ec 5b          jsr parse_sub16
 2265 eb8e: 1d 20 00          mviw r5,BAS_TOK_BUF_END
 2266 eb91:             ;      decr r5
 2267 eb91:             
 2268 eb91:             parse_roomloop:
 2269 eb91: 5f                decr r7
 2270 eb92: 5d                decr r5
 2271 eb93: 47                ldavr r7
 2272 eb94: 4d                stavr r5
 2273 eb95:             
 2274 eb95: f6 02 14          ldr r6,bas_insertptr
 2275 eb98: 04 ec a8          jsr PARSE_COMPARE
 2276 eb9b: a2 eb 91          brnz parse_roomloop
 2277 eb9e:             
 2278 eb9e: f7 02 14          ldr r7,bas_insertptr
 2279 eba1: 1e 04 00          MVIW R6,parse_token_buffer
 2280 eba4:             
 2281 eba4:             parse_insertloop:
 2282 eba4: 46                ldavr r6
 2283 eba5: 4f                stavr r7
 2284 eba6: 56                incr r6
 2285 eba7: 57                incr r7
 2286 eba8: 0d 24             ldti 024h ; sub in actual eol token here
 2287 ebaa: aa eb a4          brneq parse_insertloop
 2288 ebad:             
 2289 ebad: 05                ret
 2290 ebae:             
 2291 ebae:             ;
 2292 ebae:             ; void removeLine(int lineNum)
 2293 ebae:             ;
 2294 ebae:             parse_removeline:
 2295 ebae: 04 eb d6        JSR basu_find
 2296 ebb1: 2f              mvrha R7
 2297 ebb2: a2 eb ba        brnz parse_removeline1
 2298 ebb5: 27              mvrla R7
 2299 ebb6: a2 eb ba        brnz parse_removeline1
 2300 ebb9: 05              ret
 2301 ebba:             parse_removeline1:
 2302 ebba: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2303 ebbc: 57              incr r7
 2304 ebbd: 57              incr r7
 2305 ebbe: 57              incr r7
 2306 ebbf: 47              ldavr r7
 2307 ebc0: 36              mvarl r6        ; R6 = remove length
 2308 ebc1: 57              incr r7
 2309 ebc2: 47              ldavr r7
 2310 ebc3: 3e              mvarh r6
 2311 ebc4:             
 2312 ebc4: 5f              decr r7         ;backup to start of line
 2313 ebc5: 5f              decr r7
 2314 ebc6: 5f              decr r7
 2315 ebc7: 5f              decr r7
 2316 ebc8: 04 ec 4d        JSR parse_add16
 2317 ebcb:             parse_removeloop:
 2318 ebcb: 47              ldavr r7
 2319 ebcc: 4d              stavr r5
 2320 ebcd: 55              incr r5
 2321 ebce: 57              incr r7
 2322 ebcf: 2f              MVRHA r7
 2323 ebd0:             
 2324 ebd0: ee 02 0e        ldt  bas_bufferendhi
 2325 ebd3:             
 2326 ebd3: aa eb cb        brneq parse_removeloop
 2327 ebd6:             ;
 2328 ebd6:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2329 ebd6:             ; since we are moving complete contents of buffer
 2330 ebd6:             ; Make sure it is set during addline
 2331 ebd6:             ;
 2332 ebd6:             
 2333 ebd6:             
 2334 ebd6:             ; run & parse utilites
 2335 ebd6:             ;
 2336 ebd6:             
 2337 ebd6:             ;
 2338 ebd6:             ; find in the token buffer linenum in r7
 2339 ebd6:             ;
 2340 ebd6:             basu_find:
 2341 ebd6: 07 05           pushr r5                  ; save r5
 2342 ebd8: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2343 ebdb:             
 2344 ebdb:             basu_find_loop:
 2345 ebdb: 45              ldavr r5                  ;get token
 2346 ebdc: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2347 ebde: aa eb e8        brneq basu_find_loop1     ;no continue
 2348 ebe1: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2349 ebe4: 27              mvrla r7
 2350 ebe5: 08 50           popr r5
 2351 ebe7: 05              ret
 2352 ebe8:             
 2353 ebe8:             basu_find_loop1:
 2354 ebe8: 55              incr r5                   ;skip past linenum token
 2355 ebe9: 27              mvrla r7                  ;test low byte of linenum
 2356 ebea: 0b              MVAT
 2357 ebeb: 45              ldavr r5
 2358 ebec: aa eb ff        brneq basu_find1          ;not eqaul
 2359 ebef: 55              incr r5
 2360 ebf0: 2f              mvrha r7                  ;test high byte of linenum
 2361 ebf1: 0b              MVAT
 2362 ebf2: 45              ldavr r5
 2363 ebf3: aa ec 00        brneq basu_find2          ;not equal
 2364 ebf6: 5d              decr r5                   ;if equal backup to linenum token
 2365 ebf7: 5d              decr r5
 2366 ebf8: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2367 ebfa: 0e 01           ldai 1                    ;return 1 in accumulator
 2368 ebfc: 08 50           popr r5
 2369 ebfe: 05              ret
 2370 ebff:             
 2371 ebff:             basu_find1:
 2372 ebff: 55              incr r5                   ;skip over linenum high byte
 2373 ec00:             basu_find2:
 2374 ec00: 55              incr r5                   ;get line length
 2375 ec01: 45              ldavr r5
 2376 ec02: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2377 ec05: 36              mvarl r6
 2378 ec06: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2379 ec07: 5e              decr r6
 2380 ec08: 5e              decr r6
 2381 ec09:             basu_find_moveptr:            ; advance pointer to next line
 2382 ec09: 55              incr r5
 2383 ec0a: 5e              decr r6
 2384 ec0b: 26              mvrla r6
 2385 ec0c: a2 ec 09        brnz basu_find_moveptr
 2386 ec0f: a0 eb db        br basu_find_loop
 2387 ec12:             
 2388 ec12:             
 2389 ec12:             ;
 2390 ec12:             ; Multiple numbers in R4 and R5
 2391 ec12:             ;
 2392 ec12:             ; Return in R7
 2393 ec12:             ;
 2394 ec12:             ; R6 = Bit counter
 2395 ec12:             ;
 2396 ec12:             parse_mul16:
 2397 ec12: 07 06               pushr r6
 2398 ec14:             
 2399 ec14: 1f 00 00            MVIW R7,0
 2400 ec17: 1e 00 10            MVIW R6,10h
 2401 ec1a:             ;        jsr showregs
 2402 ec1a:             
 2403 ec1a:             parse_mulloop:
 2404 ec1a:             ;        jsr showregs
 2405 ec1a:             
 2406 ec1a: 25                  mvrla r5
 2407 ec1b: b3 01               andi  01h
 2408 ec1d: a1 ec 23            brz parse_mulskip
 2409 ec20: 04 ec 3f            jsr parse_muladd16
 2410 ec23:             
 2411 ec23:             parse_mulskip:
 2412 ec23:             ;
 2413 ec23:             ; clear carry flag HACK
 2414 ec23:             ;
 2415 ec23: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2416 ec25: e0                  cshl
 2417 ec26: b0 00               addi 0      ; may not be needed
 2418 ec28:             ;
 2419 ec28: 24                  mvrla r4
 2420 ec29:             ;        jsr showcarry
 2421 ec29: e0                  cshl
 2422 ec2a:             ;        jsr showcarry
 2423 ec2a: 34                  mvarl r4
 2424 ec2b: 2c                  mvrha r4
 2425 ec2c:             ;        jsr showcarry
 2426 ec2c: e0                  cshl
 2427 ec2d:             ;        jsr showcarry
 2428 ec2d: 3c                  mvarh r4
 2429 ec2e:             
 2430 ec2e: 0e 00               ldai 0      ;clear carry
 2431 ec30: e0                  cshl
 2432 ec31:             ;        addi 0
 2433 ec31:             
 2434 ec31: 2d                  mvrha r5
 2435 ec32: e1                  cshr
 2436 ec33: 3d                  mvarh r5
 2437 ec34: 25                  mvrla r5
 2438 ec35: e1                  cshr
 2439 ec36: 35                  mvarl r5
 2440 ec37:             
 2441 ec37: 5e                  decr r6
 2442 ec38: 26                  mvrla r6
 2443 ec39: a2 ec 1a            brnz parse_mulloop
 2444 ec3c: 08 60               popr r6
 2445 ec3e: 05                  ret
 2446 ec3f:             
 2447 ec3f:             parse_muladd16:
 2448 ec3f: 0e 00               ldai 0      ;clear carry
 2449 ec41: e0                  cshl
 2450 ec42:             
 2451 ec42: 27                  MVRLA R7
 2452 ec43: 0b                  MVAT
 2453 ec44: 24                  mvrla r4
 2454 ec45: b8                  ADDT
 2455 ec46: 37                  mvarl r7
 2456 ec47:             
 2457 ec47: 2f                  mvrha r7
 2458 ec48: 0b                  MVAT
 2459 ec49: 2c                  mvrha r4
 2460 ec4a: e3                  addtc
 2461 ec4b: 3f                  mvarh r7
 2462 ec4c: 05                  ret
 2463 ec4d:             
 2464 ec4d:             ;
 2465 ec4d:             ; 16 bit ADD r6 and r7, return result in r7
 2466 ec4d:             ;
 2467 ec4d:             parse_add16:
 2468 ec4d:             
 2469 ec4d: 0e 00             ldai 0      ;clear carry
 2470 ec4f: e0                cshl
 2471 ec50: 26                MVRLA R6
 2472 ec51: 0b                MVAT
 2473 ec52: 27                mvrla r7
 2474 ec53: b8                ADDT
 2475 ec54: 37                mvarl r7
 2476 ec55: 2e                mvrha r6
 2477 ec56: 0b                MVAT
 2478 ec57: 2f                mvrha r7
 2479 ec58: e3                addtc
 2480 ec59: 3f                mvarh r7
 2481 ec5a: 05                ret
 2482 ec5b:             
 2483 ec5b:             ;
 2484 ec5b:             ; 16 bit SUB of r6 from r7, return result in r7
 2485 ec5b:             ;
 2486 ec5b:             parse_sub16:
 2487 ec5b: 2e                mvrha r6
 2488 ec5c: b5                inva
 2489 ec5d: 3e                mvarh r6
 2490 ec5e: 26                mvrla r6
 2491 ec5f: b5                inva
 2492 ec60: 36                mvarl r6
 2493 ec61: 56                incr r6
 2494 ec62: a0 ec 4d          br parse_add16
 2495 ec65:             
 2496 ec65:             ;
 2497 ec65:             ; 16 bit AND r6 and r7, return result in r7
 2498 ec65:             ;
 2499 ec65:             parse_and16:
 2500 ec65: 26                MVRLA R6
 2501 ec66: 0b                MVAT
 2502 ec67: 27                mvrla r7
 2503 ec68: bb                ANDT
 2504 ec69: 37                mvarl r7
 2505 ec6a: 2e                mvrha r6
 2506 ec6b: 0b                MVAT
 2507 ec6c: 2f                mvrha r7
 2508 ec6d: bb                ANDT
 2509 ec6e: 3f                mvarh r7
 2510 ec6f: 05                ret
 2511 ec70:             
 2512 ec70:             ;
 2513 ec70:             ; 16 bit OR r6 and r7, return result in r7
 2514 ec70:             ;
 2515 ec70:             parse_or16:
 2516 ec70: 26                MVRLA R6
 2517 ec71: 0b                MVAT
 2518 ec72: 27                mvrla r7
 2519 ec73: ba                ORT
 2520 ec74: 37                mvarl r7
 2521 ec75: 2e                mvrha r6
 2522 ec76: 0b                MVAT
 2523 ec77: 2f                mvrha r7
 2524 ec78: ba                ORT
 2525 ec79: 3f                mvarh r7
 2526 ec7a: 05                ret
 2527 ec7b:             
 2528 ec7b:             
 2529 ec7b:             ;
 2530 ec7b:             ; is digit in accumulator hex
 2531 ec7b:             ; returns 1 if yes and 0 if no
 2532 ec7b:             ;
 2533 ec7b:             ; what about upper/lower case
 2534 ec7b:             ;
 2535 ec7b:             ; destroys tmp register
 2536 ec7b:             parse_ishex:
 2537 ec7b: 0d 30          ldti '0'
 2538 ec7d: a7 ec 95       brlt parse_ishex_no
 2539 ec80: 0d 39          ldti '9'
 2540 ec82: a9 ec 88       brgt parse_ishex_af
 2541 ec85: a0 ec 92       br parse_ishex_yes
 2542 ec88:             
 2543 ec88:             parse_ishex_af:
 2544 ec88: 0d 41           ldti 'A'
 2545 ec8a: a7 ec 95        brlt parse_ishex_no
 2546 ec8d: 0d 46           ldti 'F'
 2547 ec8f: a9 ec 95        brgt parse_ishex_no
 2548 ec92:             
 2549 ec92:             parse_ishex_yes:
 2550 ec92: 0e 01           ldai 1
 2551 ec94: 05              ret
 2552 ec95:             
 2553 ec95:             parse_ishex_no:
 2554 ec95: 0e 00           ldai 0
 2555 ec97: 05              ret
 2556 ec98:             
 2557 ec98:             ;
 2558 ec98:             ; is digit in accumulator decimal
 2559 ec98:             ; returns 1 if yes and 0 if no
 2560 ec98:             ;
 2561 ec98:             ; destroys tmp register
 2562 ec98:             ;
 2563 ec98:             parse_isdigit:
 2564 ec98: 0d 30          ldti '0'
 2565 ec9a: a7 ec a5       brlt parse_isdigit_no
 2566 ec9d: 0d 39          ldti '9'
 2567 ec9f: a9 ec a5       brgt parse_isdigit_no
 2568 eca2:             
 2569 eca2: 0e 01           ldai 1
 2570 eca4: 05              ret
 2571 eca5:             
 2572 eca5:             parse_isdigit_no:
 2573 eca5: 0e 00           ldai 0
 2574 eca7: 05              ret
 2575 eca8:             
 2576 eca8:             ;
 2577 eca8:             ; 16 bit compare r6 and r7
 2578 eca8:             ;
 2579 eca8:             ; returns in accumulator
 2580 eca8:             ; r7=r6 00
 2581 eca8:             ; r7>r6 01
 2582 eca8:             ; r7<r6 ff
 2583 eca8:             ;
 2584 eca8:             ; destory Tmp
 2585 eca8:             ;
 2586 eca8:             parse_compare:
 2587 eca8: 2e            mvrha r6
 2588 eca9: 0b            mvat
 2589 ecaa: 2f            mvrha r7
 2590 ecab: aa ec b7      brneq parse_compareh
 2591 ecae: 26            mvrla r6
 2592 ecaf: 0b            mvat
 2593 ecb0: 27            mvrla r7
 2594 ecb1: aa ec c0      brneq parse_comparel
 2595 ecb4: 0e 00         ldai 0
 2596 ecb6: 05            ret
 2597 ecb7:             
 2598 ecb7:             parse_compareh:
 2599 ecb7: a7 ec bd      brlt parse_compareh1
 2600 ecba: 0e 01         ldai 1
 2601 ecbc: 05            ret
 2602 ecbd:             parse_compareh1:
 2603 ecbd: 0e ff         ldai 0ffh
 2604 ecbf: 05            ret
 2605 ecc0:             
 2606 ecc0:             parse_comparel:
 2607 ecc0: a7 ec c6      brlt parse_comparel1
 2608 ecc3: 0e 01         ldai 1
 2609 ecc5: 05            ret
 2610 ecc6:             parse_comparel1:
 2611 ecc6: 0e ff         ldai 0ffh
 2612 ecc8: 05            ret
 2613 ecc9:             
 2614 ecc9:             ;
 2615 ecc9:             ; STRINGS
 2616 ecc9:             ;
 2617 ecc9: 0a 0d 00    CRLF: DB 0ah,0dh,0
 2618 eccc:             ;
 2619 eccc:             
 2620 eccc:                   ORG 0EE00h
 2621 ee00:             
 2622 ee00:             basic_test:
 2623 ee00:             
 2624 ee00:             ;    DB  25h,0ah,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h,24h,25h,14h,00h
 2625 ee00:             ;    DB  0ah,00h,06h,04h,00h,00h,24h,25h,1eh,00h,11h,00h,04h,00h,00h,23h
 2626 ee00:             ;    DB  04h,00h,00h,17h,02h,01h,00h,24h,25h,28h,00h,13h,00h,07h,04h,00h
 2627 ee00:             ;    DB  00h,21h,02h,0ah,00h,08h,0dh,02h,14h,00h,24h,01h,00h,00h,00h,00h
 2628 ee00:             
 2629 ee00:             ;    DB  25h,0ah,00h,14h,00h,06h,1fh,02h,01h,00h,17h,02h,02h,00h,20h,17h
 2630 ee00:             ;    DB  02h,03h,00h,24h,25h,14h,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h
 2631 ee00:             ;    DB  24h,25h,1eh,00h,0dh,00h,04h,01h,00h,23h,02h,02h,00h,24h,25h,28h
 2632 ee00:             ;    DB  00h,0eh,00h,06h,04h,00h,00h,17h,04h,01h,00h,24h,25h,32h,00h,15h
 2633 ee00:             ;    DB  00h,04h,02h,00h,23h,04h,00h,00h,17h,04h,01h,00h,17h,02h,05h,00h
 2634 ee00:             ;    DB  24h,25h,3ch,00h,0ah,00h,06h,04h,02h,00h,24h,01h,00h,00h,00h,00h
 2635 ee00:             
 2636 ee00: 25 0a 00 0e 
            00 06 03 68 
            65 6c 6c 6f 
            00 24 25 14     DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 2637 ee10: 00 0d 00 04 
            02 00 23 02 
            09 00 24 25 
            1e 00 0a 00     DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 2638 ee20: 06 04 02 00 
            24 25 28 00 
            0d 00 04 04 
            00 23 02 32     DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 2639 ee30: 00 24 25 32 
            00 17 00 06 
            03 68 32 00 
            15 04 02 00     DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 2640 ee40: 15 04 04 00 
            15 02 16 00 
            24 25 3c 00 
            12 00 0a 04     DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 2641 ee50: 03 00 23 02 
            01 00 0b 02 
            05 00 24 25 
            46 00 0a 00     DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 2642 ee60: 06 04 03 00 
            24 25 50 00 
            0a 00 0c 04 
            03 00 24 25     DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 2643 ee70: 51 00 12 00 
            06 03 6e 65 
            78 74 20 64 
            6f 6e 65 00     DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 2644 ee80: 24 25 52 00 
            0a 00 0e 02 
            6e 00 24 25 
            55 00 0a 00     DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 2645 ee90: 0d 02 7d 00 
            24 25 5a 00 
            12 00 06 03 
            6e 65 78 74     DB  0dh,02h,7dh,00h,24h,25h,5ah,0h,12h,00h,06h,03h,6eh,65h,78h,74h
 2646 eea0: 20 64 6f 6e 
            65 00 24 25 
            6e 00 11 00 
            06 03 69 6e     DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 2647 eeb0: 20 67 6f 73 
            75 62 00 24 
            25 70 00 11 
            00 06 03 69     DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 2648 eec0: 6e 20 73 75 
            62 20 32 00 
            24 25 72 00 
            07 00 0f 24     DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 2649 eed0: 25 7d 00 0c 
            00 06 03 65 
            6e 64 00 24 
            25 7e 00 07     DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 2650 eee0: 00 14 24 01 
            00 00 00 00 
            00 00 00 00 
            00 00 00 00     DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 2651 eef0:             
 2652 eef0:             ;
 2653 eef0:             ; The End
 2654 eef0:             ;
 2655 eef0:             ZZZZ:
 2656 eef0: 00            DB   0

eb7ch: ADDLINE_MOVEPTR  - <  2252>   2256 
e54dh: BASIC_LIST       - <  1189>    141 
e46ah: BASIC_RUN        - <  1006>    149 
ee00h: BASIC_TEST       - <  2622>    194 
0100h: BASIC_VARS       - <    62>   1048   1071 
e566h: BASLIST1         - <  1205>   1198 
e606h: BASLIST10        - <  1306>   1300 
e615h: BASLIST11        - <  1314>   1308 
e624h: BASLIST12        - <  1322>   1316 
e633h: BASLIST13        - <  1330>   1324 
e642h: BASLIST14        - <  1338>   1332 
e651h: BASLIST15        - <  1346>   1340 
e660h: BASLIST16        - <  1354>   1348 
e66fh: BASLIST17        - <  1362>   1356 
e67eh: BASLIST18        - <  1370>   1364 
e68dh: BASLIST19        - <  1378>   1372 
e571h: BASLIST2         - <  1211>   1207 
e69ch: BASLIST20        - <  1386>   1380 
e6abh: BASLIST21        - <  1394>   1388 
e6beh: BASLIST22        - <  1404>   1396 
e6d1h: BASLIST23        - <  1414>   1406 
e6e4h: BASLIST24        - <  1424>   1416 
e6f7h: BASLIST25        - <  1434>   1426 
e70ah: BASLIST26        - <  1444>   1436 
e71dh: BASLIST27        - <  1454>   1446 
e730h: BASLIST28        - <  1464>   1456 
e743h: BASLIST29        - <  1474>   1466 
e588h: BASLIST3         - <  1226>   1213 
e756h: BASLIST30        - <  1484>   1476 
e769h: BASLIST31        - <  1494>   1486 
e77ch: BASLIST32        - <  1504>   1496 
e78fh: BASLIST33        - <  1514>   1506 
e7a2h: BASLIST34        - <  1524>   1516 
e7b5h: BASLIST35        - <  1534>   1526 
e7c8h: BASLIST36        - <  1544>   1536 
e7d7h: BASLIST37        - <  1552>   1546 
e7f0h: BASLIST38        - <  1569>   1554 
e5a4h: BASLIST4         - <  1243>   1228 
e5bbh: BASLIST5         - <  1266>   1245 
e5cah: BASLIST6         - <  1274>   1268 
e5d9h: BASLIST7         - <  1282>   1276 
e5e8h: BASLIST8         - <  1290>   1284 
e5f7h: BASLIST9         - <  1298>   1292 
e7fch: BASLIST_DONE     - <  1577>   1202   1208   1573 
e551h: BASLIST_LOOP     - <  1194>   1203   1209   1224   1241   1264   1272 
         1280   1288   1296   1304   1312   1320   1328   1336   1344   1352 
         1360   1368   1376   1384   1392   1402   1412   1422   1432   1442 
         1452   1462   1472   1482   1492   1502   1512   1522   1532   1542 
         1550   1567 
e598h: BASLIST_STRING   - <  1234>   1238 
e5a0h: BASLIST_STRINGEND - <  1239>   1236 
ebd6h: BASU_FIND        - <  2340>    174    552   2295 
ebffh: BASU_FIND1       - <  2371>   2358 
ec00h: BASU_FIND2       - <  2373>   2363 
ebdbh: BASU_FIND_LOOP   - <  2344>   2386 
ebe8h: BASU_FIND_LOOP1  - <  2353>   2347 
ec09h: BASU_FIND_MOVEPTR - <  2381>   2385 
020eh: BAS_BUFFERENDHI  - <    74>    164   2324 
e069h: BAS_COPYLOOP     - <   197>    204    206 
020ah: BAS_CURRENTTOKEN - <    72>   1834   1842   1869   2050 
e4a7h: BAS_ERROR        - <  1085>    267    992 
0282h: BAS_FORSTACK     - <    94>    237 
0280h: BAS_FORSTACKPTR  - <    93> 
02c0h: BAS_GOSUBPTR     - <   103> 
02c2h: BAS_GOSUBSTACK   - <   104>    236 
0214h: BAS_INSERTPTR    - <    81>   2230   2274   2278 
e077h: BAS_MSG1         - <   212>    266 
e093h: BAS_MSG2         - <   213> 
e0a4h: BAS_MSG3         - <   214>    989 
0212h: BAS_NEWLINELEN   - <    80>   2199   2219   2263 
0210h: BAS_NEWLINENUM   - <    79>   2103   2217   2226 
0204h: BAS_NXTPTR       - <    69>   1717   1729   1745   1780   1798   1855 
         1896 
0200h: BAS_RUN_ENDED    - <    67>    238    571    901   1023 
0208h: BAS_TOKCOUNTER   - <    71>   1832   2095   2122   2124   2135   2138 
         2154   2156   2163   2165   2180   2183   2198 
020ch: BAS_TOKENBUFFER  - <    73>    140    162    241   2227   2342 
0206h: BAS_TOKPTR       - <    70>   1830   2166 
2000h: BAS_TOK_BUF_END  - <   121>    163   2261   2265 
1000h: BAS_TOK_BUF_START - <   117>    159    193 
0202h: BAS_TXTPTR       - <    68>   1613   1702   1758   1828   1856   1867 
         1917   1963   2024   2041   2066   2144   2167 
ffc4h: CHAROUT          - <     5>    615 
ecc9h: CRLF             - <  2617>    648   1547 
e0dch: EXE_ACCEPT       - <   251>    290    304    310    313    570    585 
          595    658    664    693    695    700    708    711    713    734 
          764    774    813    824    842    844    855    870    975    999 
e0f1h: EXE_ACCEPT_DONE  - <   269>    259 
e3d4h: EXE_END_STMT     - <   900>    968 
e173h: EXE_EXPR         - <   388>    311    474    490    507    524    586 
          636    696    845    856 
e1b8h: EXE_EXPR_AND     - <   432>    402 
e1dfh: EXE_EXPR_DONE    - <   457>    406 
e17ch: EXE_EXPR_LOOP    - <   395>    418    430    442    454    455 
e1a6h: EXE_EXPR_MINUS   - <   420>    400 
e1cah: EXE_EXPR_OR      - <   444>    404 
e194h: EXE_EXPR_PLUS    - <   408>    398 
e101h: EXE_FACTOR       - <   297>    330    345    359    368 
e10fh: EXE_FACTOR1      - <   307>    301 
e120h: EXE_FACTOR2      - <   316>    309 
e47ch: EXE_FINISHED     - <  1022>   1010 
e48eh: EXE_FINISHED_YES - <  1034>   1026   1030 
e398h: EXE_FOR_STMT     - <   819>    944 
e49ch: EXE_GET_VARIABLE - <  1070>    288    779 
e336h: EXE_GOSUB_STMT   - <   706>    932 
e27fh: EXE_GOTO_STMT    - <   583>    982 
e2edh: EXE_IF_STMT      - <   656>    920 
e306h: EXE_IF_STMT1     - <   672>    668    678 
e315h: EXE_IF_STMT2     - <   681>    676 
e261h: EXE_INDEX_FIND   - <   551>    561 
e0cah: EXE_INIT         - <   234>   1007 
e265h: EXE_JUMP_LINE    - <   560>    587    726 
e27ch: EXE_JUMP_LINE1   - <   575>    563    565 
e319h: EXE_LET_STMT     - <   688>    926    976 
e461h: EXE_LINE_STMT    - <   997>   1016 
e38eh: EXE_NEXT_DONE    - <   807>    797 
e360h: EXE_NEXT_STMT    - <   753>    962 
e4d5h: EXE_NEXT_TOK3_DONE - <  1132>   1128 
e4cdh: EXE_NEXT_TOK3_LOOP - <  1126>   1130 
e4a9h: EXE_NEXT_TOKEN   - <  1094>    270    344    358    367    409    421 
          433    445    489    506    523    608    616    622    650    673 
          682 
e4b3h: EXE_NEXT_TOKEN1  - <  1103>   1097 
e4bch: EXE_NEXT_TOKEN2  - <  1111>   1105 
e4c7h: EXE_NEXT_TOKEN3  - <  1121>   1113 
e4d7h: EXE_NEXT_TOKEN4  - <  1136>   1123 
e4d9h: EXE_NUM          - <  1143>    302    709 
e3d2h: EXE_PEEK_STMT    - <   888>    950 
e3d3h: EXE_POKE_STMT    - <   894>    956 
e28bh: EXE_PRINT_STMT   - <   593>    914 
e2a2h: EXE_PRINT_STMT1  - <   611>    600 
e2b2h: EXE_PRINT_STMT2  - <   619>    613 
e2bdh: EXE_PRINT_STMT3  - <   625>    621 
e2cfh: EXE_PRINT_STMT4  - <   635>    627    629    631 
e2e3h: EXE_PRINT_STMT_DONE - <   647>    633    642    644 
e290h: EXE_PRINT_STMT_LOOP - <   597>    645 
e2d5h: EXE_PRINT_STMT_TEST - <   639>    609    617    623 
e1e6h: EXE_RELATION     - <   470>    660 
e25ah: EXE_RELATION_DONE - <   538>    486 
e23eh: EXE_RELATION_EQ  - <   522>    484 
e220h: EXE_RELATION_GT  - <   505>    482 
e1efh: EXE_RELATION_LOOP - <   477>    500    503    517    520    533    536 
e202h: EXE_RELATION_LT  - <   488>    480 
e254h: EXE_REL_NE       - <   534>    531 
e238h: EXE_REL_NGT      - <   518>    515 
e21ah: EXE_REL_NLT      - <   501>    498 
e352h: EXE_RETURN_STMT  - <   732>    938 
e46dh: EXE_RUN          - <  1009>   1017 
e476h: EXE_RUN_CONT     - <  1015>   1012 
e491h: EXE_SET_VARIABLE - <  1047>    698    782    850 
e3dbh: EXE_STMT         - <   909>    669   1000 
e3e5h: EXE_STMT1        - <   917>    913 
e436h: EXE_STMT10       - <   971>    967 
e444h: EXE_STMT11       - <   979>    973 
e44dh: EXE_STMT12       - <   985>    981 
e3eeh: EXE_STMT2        - <   923>    919 
e3f7h: EXE_STMT3        - <   929>    925 
e400h: EXE_STMT4        - <   935>    931 
e409h: EXE_STMT5        - <   941>    937 
e412h: EXE_STMT6        - <   947>    943 
e41bh: EXE_STMT7        - <   953>    949 
e424h: EXE_STMT8        - <   959>    955 
e42dh: EXE_STMT9        - <   965>    961 
e0c0h: EXE_STMT_MSG     - <   215> 
e124h: EXE_TERM         - <   326>    392    410    422    434    446 
e140h: EXE_TERM_ASTR    - <   343>    336 
e16ch: EXE_TERM_DONE    - <   375>    341 
e12dh: EXE_TERM_LOOP    - <   333>    355    364    373 
e161h: EXE_TERM_MOD     - <   366>    340 
e156h: EXE_TERM_SLASH   - <   357>    338 
e0f5h: EXE_VARFACTOR    - <   282>    317 
e4e2h: EXE_VARIABLE_NUM - <  1158>    283    689    768    828 
e944h: FOUND            - <  1779>   1762 
e94eh: NOKEYOWRDSFOUND  - <  1787>   1759 
e86eh: PARSECHAR1       - <  1621>   1618 
e8b6h: PARSECHAR10      - <  1666>   1663 
e8beh: PARSECHAR11      - <  1671>   1668 
e8c6h: PARSECHAR12      - <  1676>   1673 
e8ceh: PARSECHAR13      - <  1681>   1678 
e8d6h: PARSECHAR14      - <  1686>   1683 
e8deh: PARSECHAR15      - <  1691>   1688 
e876h: PARSECHAR2       - <  1626>   1623 
e87eh: PARSECHAR3       - <  1631>   1628 
e886h: PARSECHAR4       - <  1636>   1633 
e88eh: PARSECHAR5       - <  1641>   1638 
e896h: PARSECHAR6       - <  1646>   1643 
e89eh: PARSECHAR7       - <  1651>   1648 
e8a6h: PARSECHAR8       - <  1656>   1653 
e8aeh: PARSECHAR9       - <  1661>   1658 
ec4dh: PARSE_ADD16      - <  2467>    416   1935   2316   2494 
eb46h: PARSE_ADDLINE    - <  2216> 
eb56h: PARSE_ADDLINE1   - <  2225>   2222 
eb5ch: PARSE_ADDLINELOOP - <  2229>   2257 
eb85h: PARSE_ADDROOM    - <  2260>   2233   2242 
ea55h: PARSE_AF         - <  2006>   2003 
ec65h: PARSE_AND16      - <  2499>    440 
eca8h: PARSE_COMPARE    - <  2586>    496    513    530   2240   2275 
ecb7h: PARSE_COMPAREH   - <  2598>   2590 
ecbdh: PARSE_COMPAREH1  - <  2602>   2599 
ecc0h: PARSE_COMPAREL   - <  2606>   2594 
ecc6h: PARSE_COMPAREL1  - <  2610>   2607   2607 
ea6ch: PARSE_ERROR_PRINT - <  2033> 
ea6dh: PARSE_FINISHED   - <  2039>   1849   1881 
ea88h: PARSE_FINISHED_YES - <  2056>   2043   2049   2052 
ea4bh: PARSE_GETNIBBLE  - <  1999>   1964   1971   1978   1985 
e8e1h: PARSE_GET_NEXT_TOK - <  1700>   1833   1868 
e8e6h: PARSE_GNT1       - <  1708> 
e8edh: PARSE_GNT1LOOP   - <  1712>   1716 
e8fdh: PARSE_GNT2       - <  1724>   1711 
e90bh: PARSE_GNT3       - <  1735>   1727 
e911h: PARSE_GNT3LOOP   - <  1739>   1743 
e921h: PARSE_GNT4       - <  1750>   1738 
e964h: PARSE_GNT_ERROR  - <  1803>   1794   1796 
e96ah: PARSE_INIT       - <  1825>   2093 
0300h: PARSE_INPUT_LINE - <   109> 
eba4h: PARSE_INSERTLOOP - <  2281>   2287 
ec98h: PARSE_ISDIGIT    - <  2563>   1710   1715   1951 
eca5h: PARSE_ISDIGIT_NO - <  2572>   2565   2567 
ec7bh: PARSE_ISHEX      - <  2536> 
ec88h: PARSE_ISHEX_AF   - <  2543>   2540 
ec95h: PARSE_ISHEX_NO   - <  2553>   2538   2545   2547 
ec92h: PARSE_ISHEX_YES  - <  2549>   2541 
e7ffh: PARSE_KEYWORDS   - <  1584>   1755 
ea9ch: PARSE_LINE       - <  2092>    185 
eae7h: PARSE_LINE1      - <  2141>   2127 
eb03h: PARSE_LINE1DONE  - <  2158>   2150 
eaf0h: PARSE_LINE1LOOP  - <  2147>   2157 
eb18h: PARSE_LINE2      - <  2170>   2143 
eb31h: PARSE_LINE_DONE  - <  2186>   2118 
eabah: PARSE_LINE_LOOP  - <  2114>   2139   2168   2172   2184 
ec12h: PARSE_MUL16      - <  2396>    352   1930 
ec3fh: PARSE_MULADD16   - <  2447>   2409 
ec1ah: PARSE_MULLOOP    - <  2403>   2443 
ec23h: PARSE_MULSKIP    - <  2411>   2408 
e988h: PARSE_NEXT       - <  1848>   1897   2115 
e98fh: PARSE_NEXT1      - <  1853>   1850 
e997h: PARSE_NEXT1LOOP  - <  1858>   1863 
e9a1h: PARSE_NEXT2      - <  1866>   1861 
e9b2h: PARSE_NEXT3      - <  1880>   1872   1887 
e9c2h: PARSE_NEXTDONE   - <  1889>   1882   1885 
e9c9h: PARSE_NEXTDONE2  - <  1895>   1892 
e9d2h: PARSE_NUM        - <  1911>   2102   2128 
ea0eh: PARSE_NUM_CHAR   - <  1949>   1918   1922 
ea18h: PARSE_NUM_CHAR1  - <  1955>   1952 
ea02h: PARSE_NUM_DONE   - <  1939>   1926 
e9e4h: PARSE_NUM_LOOP   - <  1921>   1938 
ea1dh: PARSE_NUM_OLD    - <  1961> 
ec70h: PARSE_OR16       - <  2515>    452 
ea9ch: PARSE_POS        - <  2079> 
ebaeh: PARSE_REMOVELINE - <  2294>    177   2218 
ebbah: PARSE_REMOVELINE1 - <  2301>   2297   2299 
ebcbh: PARSE_REMOVELOOP - <  2317>   2326 
eb91h: PARSE_ROOMLOOP   - <  2268>   2276 
e85eh: PARSE_SINGLECHAR - <  1610>   1726 
ea5dh: PARSE_STRING     - <  2016> 
ea66h: PARSE_STRING1    - <  2022>   2019 
ec5bh: PARSE_SUB16      - <  2486>    428   2264 
e984h: PARSE_TOKEN      - <  1841>   2017   2116 
0400h: PARSE_TOKEN_BUFFER - <   113>   1829   2096   2194   2279 
ea8dh: PARSE_VARIABLE_NUM - <  2064>   2173 
e92dh: PCMPLOOP         - <  1760>   1768 
ffcch: SHOWADDR         - <     7>   1201   1572 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    263    986 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9>    172    175    637   1221   1564 
ffdch: SHOWREGS         - <    11>    991 
e93bh: SKIPLOOP         - <  1772>   1775 
e93bh: SKIPTOEND        - <  1770>   1765 
ffc0h: STRINGOUT        - <     4>    607    649    990   1200   1231   1270 
         1278   1286   1294   1302   1310   1318   1326   1334   1342   1350 
         1358   1366   1374   1382   1390   1548   1571 
0019h: TOKENIZER_AND    - <    43>    401   1435   1644 
001bh: TOKENIZER_ASTR   - <    45>    335   1455   1654 
0010h: TOKENIZER_CALL   - <    34>   1355   1596 
0015h: TOKENIZER_COMMA  - <    39>    612   1395   1624 
0024h: TOKENIZER_CR     - <    54>    569    641    675    699    712    812 
          869   1545   1619   2117   2187 
0009h: TOKENIZER_ELSE   - <    27>   1299   1589 
0014h: TOKENIZER_END    - <    38>    966   1387   1600 
0001h: TOKENIZER_EOF    - <    19>    160    643    677   1029   1206   2048 
         2051   2232   2346 
0023h: TOKENIZER_EQ     - <    53>    483    694    843   1535   1689 
0000h: TOKENIZER_ERROR  - <    18>   1197   1601   1805 
000ah: TOKENIZER_FOR    - <    28>    823    942   1307   1590 
000eh: TOKENIZER_GOSUB  - <    32>    707    930   1339   1594 
000dh: TOKENIZER_GOTO   - <    31>    584    980   1331   1593 
0022h: TOKENIZER_GT     - <    52>    481   1525   1684 
001eh: TOKENIZER_HASH   - <    48>   1485   1669 
0007h: TOKENIZER_IF     - <    25>    657    918   1283   1587 
001fh: TOKENIZER_LEFTP  - <    49>    308    630   1495   1664 
0005h: TOKENIZER_LET    - <    23>    972    974   1267   1585 
0025h: TOKENIZER_LINENUM - <    55>    998   1112   1553   2098 
0021h: TOKENIZER_LT     - <    51>    479   1515   1679 
0018h: TOKENIZER_MINUS  - <    42>    399   1425   1639 
001dh: TOKENIZER_MOD    - <    47>    339   1475   1659 
000ch: TOKENIZER_NEXT   - <    30>    763    960   1323   1592 
0002h: TOKENIZER_NUMBER - <    20>    300    628    710   1096   1212   1718 
         2126 
001ah: TOKENIZER_OR     - <    44>    403   1445   1649 
0012h: TOKENIZER_PEEK   - <    36>    948   1371   1598 
0017h: TOKENIZER_PLUS   - <    41>    397   1415   1634 
0013h: TOKENIZER_POKE   - <    37>    954   1379   1599 
0006h: TOKENIZER_PRINT  - <    24>    594    912   1275   1586 
0011h: TOKENIZER_REM    - <    35>   1363   1597   1871 
000fh: TOKENIZER_RETURN - <    33>    733    936   1347   1595 
0020h: TOKENIZER_RIGHTP - <    50>    312   1505   1674 
0016h: TOKENIZER_SEMICOLON - <    40>    620   1405   1629 
001ch: TOKENIZER_SLASH  - <    46>    337   1465 
0003h: TOKENIZER_STRING - <    21>    599   1122   1227   1746   2018   2142 
0008h: TOKENIZER_THEN   - <    26>    663   1291   1588 
000bh: TOKENIZER_TO     - <    29>    854   1315   1591 
0004h: TOKENIZER_VARIABLE - <    22>    289    626    692    773    841    924 
         1104   1244   1799   2171 
e53ch: TOKL_CALL        - <  1185>   1357 
e4fch: TOKL_ELSE        - <  1174>   1301 
e537h: TOKL_END         - <  1184>   1389 
e542h: TOKL_ERROR       - <  1186>   1199   1570 
e502h: TOKL_FOR         - <  1175>   1309 
e517h: TOKL_GOSUB       - <  1179>   1341 
e511h: TOKL_GOTO        - <  1178>   1333 
e4f2h: TOKL_IF          - <  1172>   1285 
e4e6h: TOKL_LET         - <  1170>   1269 
e50bh: TOKL_NEXT        - <  1177>   1325 
e52bh: TOKL_PEEK        - <  1182>   1373 
e531h: TOKL_POKE        - <  1183>   1381 
e4ebh: TOKL_PRINT       - <  1171>   1277 
e526h: TOKL_REM         - <  1181>   1365 
e51eh: TOKL_RETURN      - <  1180>   1349 
e4f6h: TOKL_THEN        - <  1173>   1293 
e507h: TOKL_TO          - <  1176>   1317 
e926h: TOP              - <  1756>   1777 
ffd0h: TOUPPER          - <     8>   2007 
ffc8h: UARTOUT          - <     6>    265    988   1223   1233   1252   1263 
         1398   1400   1408   1410   1418   1420   1428   1430   1438   1440 
         1448   1450   1458   1460   1468   1470   1478   1480   1488   1490 
         1498   1500   1508   1510   1518   1520   1528   1530   1538   1540 
         1566 
eef0h: ZZZZ             - <  2655> 

2656 Lines assembled
0 Errors
317 Labels
Object Code:3471 bytes

