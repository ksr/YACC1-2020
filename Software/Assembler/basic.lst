RC/asm v2.2
by Michael H. Riley

yacc1 -> Native
2 Classes read.
88 Patterns read.
    1 0000:             ;
    2 0000:             ; BIOS Entry Points
    3 0000:             ;
    4 0000:             stringout:  EQU 0ffc0h
    5 0000:             charout:    EQU 0ffc4h
    6 0000:             uartout:    EQU 0ffc8h
    7 0000:             showaddr:   EQU 0ffcch
    8 0000:             toupper:    EQU 0ffd0h
    9 0000:             showr7:     EQU 0ffd4h
   10 0000:             showbyte:   equ 0ffd8h
   11 0000:             showregs:   equ 0ffdch
   12 0000:             showbytea:  equ 0ffe0h
   13 0000:             showcarry:  equ 0ffe4h
   14 0000:             uartin:     equ 0ffe8h
   15 0000:             
   16 0000:             ;
   17 0000:             ; Basic interpreter tokens
   18 0000:             ;
   19 0000:             TOKENIZER_ERROR: EQU 00
   20 0000:             TOKENIZER_EOF: EQU 01
   21 0000:             TOKENIZER_NUMBER: EQU 02
   22 0000:             TOKENIZER_STRING: EQU 03
   23 0000:             TOKENIZER_VARIABLE: EQU 04
   24 0000:             TOKENIZER_LET: EQU 05
   25 0000:             TOKENIZER_PRINT: EQU 06
   26 0000:             TOKENIZER_IF: EQU 07
   27 0000:             TOKENIZER_THEN: EQU 08
   28 0000:             TOKENIZER_ELSE: EQU 09
   29 0000:             TOKENIZER_FOR: EQU 10
   30 0000:             TOKENIZER_TO: EQU 11
   31 0000:             TOKENIZER_NEXT: EQU 12
   32 0000:             TOKENIZER_GOTO: EQU 13
   33 0000:             TOKENIZER_GOSUB: EQU 14
   34 0000:             TOKENIZER_RETURN: EQU 15
   35 0000:             TOKENIZER_CALL: EQU 16
   36 0000:             TOKENIZER_REM: EQU 17
   37 0000:             TOKENIZER_PEEK: EQU 18
   38 0000:             TOKENIZER_POKE: EQU 19
   39 0000:             TOKENIZER_END: EQU 20
   40 0000:             TOKENIZER_COMMA: EQU 21
   41 0000:             TOKENIZER_SEMICOLON: EQU 22
   42 0000:             TOKENIZER_PLUS: EQU 23
   43 0000:             TOKENIZER_MINUS: EQU 24
   44 0000:             TOKENIZER_AND: EQU 25
   45 0000:             TOKENIZER_OR: EQU 26
   46 0000:             TOKENIZER_ASTR: EQU 27
   47 0000:             TOKENIZER_SLASH: EQU 28
   48 0000:             TOKENIZER_MOD: EQU 29
   49 0000:             TOKENIZER_HASH: EQU 30
   50 0000:             TOKENIZER_LEFTP: EQU 31
   51 0000:             TOKENIZER_RIGHTP: EQU 32
   52 0000:             TOKENIZER_LT: EQU 33
   53 0000:             TOKENIZER_GT: EQU 34
   54 0000:             TOKENIZER_EQ: EQU 35
   55 0000:             TOKENIZER_CR: EQU 36
   56 0000:             TOKENIZER_LINENUM: EQU 37
   57 0000:             TOKENIZER_LIST: EQU 38
   58 0000:             TOKENIZER_RUN: EQU 39
   59 0000:             TOKENIZER_NEW: EQU 40
   60 0000:             TOKENIZER_EXIT: EQU 41
   61 0000:             TOKENIZER_INPUT: EQU 42
   62 0000:             
   63 0000:             
   64 0000:             ;
   65 0000:             ; BASIC interpreter user variables area
   66 0000:             ; currently 26 1-byte variables
   67 0000:             ; for now must be 0xAA00 (256 byte) aligned
   68 0000:             ;
   69 0000:             BASIC_VARS: EQU 0100h
   70 0000:             
   71 0000:             ;
   72 0000:             ; Basic interpreter internal variables
   73 0000:             ;
   74 0000:             bas_run_ended:    EQU 0200h ; set to 1 when current "run" is done
   75 0000:             bas_txtptr:       EQU 0202h ; pointer into text line being parse
   76 0000:             bas_nxtptr:       EQU 0204h ;
   77 0000:             bas_tokptr:       EQU 0206h ; pointer into tmp token buffer
   78 0000:             bas_tokcounter:   EQU 0208h ; counter for tmp token buffer
   79 0000:             bas_currenttoken: EQU 020Ah ; used in parsing
   80 0000:             bas_tokenbuffer:  EQU 020Ch ; Pointer to start of token buffer
   81 0000:             bas_bufferendhi:  EQU 020Eh ; HACK, above buffer should end on 0xXXFF boundry
   82 0000:                                         ; this value should be + 1 end of buffer
   83 0000:                                         ; if buffer is 0x1000-0x1fff this is
   84 0000:                                         ; set to 0x2000. Used in moving buffer around
   85 0000:                                         ; in add and remove line
   86 0000:             bas_newlinenum:   EQU 0210h ; line number of new line to be added
   87 0000:             bas_newlinelen:   EQU 0212h ; line length of new line to be added
   88 0000:             bas_insertptr:    EQU 0214H
   89 0000:             bas_negflag:      EQU 0216H ; PROCESS NEGATIVE NUMBER
   90 0000:             
   91 0000:             ;
   92 0000:             ; FOR-NEXT statement stack ptr and stack data
   93 0000:             ;
   94 0000:             ; for next stack data
   95 0000:             ; format
   96 0000:             ;   2 bytes for variable id (only first byte used for now)
   97 0000:             ;   2 bytes to value (upper value) (format HL) (only first byte used for now)
   98 0000:             ;   2 bytes ptr to line after for instruction (format HL)
   99 0000:             ; later add step amount
  100 0000:             ;
  101 0000:             bas_forstackptr: EQU 0280h
  102 0000:             bas_forstack: EQU 0282h
  103 0000:             
  104 0000:             ;
  105 0000:             ; GOSUB stack ptr and data
  106 0000:             ;
  107 0000:             ; gosub STACK
  108 0000:             ; format
  109 0000:             ;   2 bytes return location ptr
  110 0000:             ;
  111 0000:             bas_gosubptr: EQU 02c0h
  112 0000:             bas_gosubstack: EQU 02c2h
  113 0000:             
  114 0000:             ;
  115 0000:             ; Basic interpreter text input line buffer
  116 0000:             ;
  117 0000:             parse_input_line: EQU 300h
  118 0000:             ;
  119 0000:             ; Basic interpreter tmp buffer to build up current token line
  120 0000:             ;
  121 0000:             parse_token_buffer: EQU 400h
  122 0000:             ;
  123 0000:             ; Basic interpreter token buffer
  124 0000:             ;
  125 0000:             bas_tok_buf_start: EQU 1000h
  126 0000:             ;
  127 0000:             ; Basic interpreter token buffer end + 1
  128 0000:             ;
  129 0000:             bas_tok_buf_end: EQU 2000h
  130 0000:             ; OR
  131 0000:             ;bas_tok_buf_end: EQU 1100h ;smaller for easy debugging - 256 byte buffer
  132 0000:             
  133 0000:             ;
  134 0000:             ; basic interpreter, add IO and peek/poke
  135 0000:             ;
  136 0000:             
  137 0000:             ;
  138 0000:             ; Basic Interpreter
  139 0000:             ;
  140 0000:             
  141 0000:             ;
  142 0000:             ; BASIC Entry Points
  143 0000:             ;
  144 0000:               ORG 0e000h
  145 e000:             ;
  146 e000:             ; list
  147 e000:             ;
  148 e000: f7 02 0c          ldr r7,bas_tokenbuffer
  149 e003: 04 e6 a7          JSR  basic_list
  150 e006: 05                Ret
  151 e007:             
  152 e007:             ;
  153 e007:                   ORG 0e010h
  154 e010:             ;
  155 e010:             ; run
  156 e010:             ;
  157 e010: 04 e5 4f          jsr basic_run
  158 e013: 05                Ret
  159 e014:             
  160 e014:             ;
  161 e014:                   ORG 0e020h
  162 e020:             ;
  163 e020:             ; cold start
  164 e020:             ;
  165 e020:             ; Hack later pass in R7
  166 e020:             ;
  167 e020: 1f 10 00          MVIW R7,bas_tok_buf_start
  168 e023: 0e 01             ldai TOKENIZER_EOF          ;write EOF to start of buffer
  169 e025: 4f                stavr r7
  170 e026: ff 02 0c          STR R7,bas_tokenbuffer
  171 e029: 1f 20 00          mviw r7,bas_tok_buf_end
  172 e02c: ff 02 0e          str r7,bas_bufferendhi
  173 e02f: 05                Ret
  174 e030:             
  175 e030:             ;
  176 e030:                   ORG 0e030h
  177 e030:             ;
  178 e030:             ; tests - called from monitor - used to test snippets of code
  179 e030:             ;
  180 e030: 04 e0 77          jsr bigtest
  181 e033: 05                ret
  182 e034:             ;
  183 e034:                   org 0e040h
  184 e040:             ;
  185 e040:             ; very basic cmd line driver
  186 e040:             ;
  187 e040: 04 ee cf          jsr basic_interprter
  188 e043: 05                ret
  189 e044:             ;
  190 e044:                   org 0e050h
  191 e050:             ;
  192 e050:             ; parse line
  193 e050:             ;
  194 e050: 04 eb fe          jsr parse_line
  195 e053: 05                ret
  196 e054:             
  197 e054:             ;
  198 e054:                   ORG 0e060h
  199 e060:             ;
  200 e060:             ; Copy test program into token Buffer, copies 0x0400 bytes
  201 e060:             ;
  202 e060: 1f 10 00          mviw R7,bas_tok_buf_start
  203 e063: 1e ef 00          mviw R6,BASIC_TEST
  204 e066: 1d 04 00          mviw R5,0400h
  205 e069:             
  206 e069:             bas_copyloop:
  207 e069: 46                ldavr R6
  208 e06a: 4f                stavr r7
  209 e06b: 56                incr r6
  210 e06c: 57                incr r7
  211 e06d: 5d                decr r5
  212 e06e: 2d                mvrha r5
  213 e06f: a2 e0 69          brnz bas_copyloop
  214 e072: 25                mvrla r5
  215 e073: a2 e0 69          brnz bas_copyloop
  216 e076: 05                ret
  217 e077:             
  218 e077:             bigtest:
  219 e077: 1d 00 69        mviw r5,0105
  220 e07a: 1c 00 0a        mviw r4,0010
  221 e07d: 04 ed cc        jsr parse_div16
  222 e080: 04 ff dc        jsr showregs
  223 e083: 1f ee f9        mviw r7,CRLF
  224 e086: 04 ff c0        jsr stringout
  225 e089:             
  226 e089: 1d 00 69        mviw r5,0105
  227 e08c: 1c 00 0a        mviw r4,0010
  228 e08f: 04 ed ed        jsr parse_mod16
  229 e092: 04 ff dc        jsr showregs
  230 e095: 1f ee f9        mviw r7,CRLF
  231 e098: 04 ff c0        jsr stringout
  232 e09b:             
  233 e09b: 1f 12 34        mviw r7,01234h
  234 e09e: 04 e5 d5        jsr exe_itoa
  235 e0a1: 1f ee f9        mviw r7,CRLF
  236 e0a4: 04 ff c0        jsr stringout
  237 e0a7:             
  238 e0a7:             
  239 e0a7: 05              ret
  240 e0a8:             
  241 e0a8:             ;
  242 e0a8:             ; basic interpreter messages
  243 e0a8:             ;
  244 e0a8: 41 43 43 45 
            50 54 20 2d 
            20 55 4e 45 
            58 50 45 43 
            54 45 44 20 
            54 4f 4b 45 
            4e 00 0a 0d bas_msg1: db "accept - unexpected token",0,0ah,0dh
  245 e0c4: 4c 49 4e 45 
            20 4e 4f 54 
            20 46 4f 55 
            4e 44 00 0a 
            0d          bas_msg2: db "line not found",0,0ah,0dh
  246 e0d5: 54 4f 4b 45 
            4e 20 4e 4f 
            54 20 53 55 
            50 50 4f 52 
            54 45 44 20 
            0a 0d       bas_msg3: db "token not supported ",0ah,0dh
  247 e0eb: 45 58 45 20 
            53 54 4d 54 
            20 00       exe_stmt_msg: db "EXE STMT ",0
  248 e0f5: 55 4e 4b 4e 
            4f 57 4e 20 
            43 4f 4d 4d 
            41 4e 44 00 
            0a 0d       parse_cmd_error: db "UNKNOWN COMMAND",0,0ah,0DH
  249 e107:             
  250 e107:             ;
  251 e107:             ; Basic interpreter - execution engine
  252 e107:             ; Register Usage
  253 e107:             ; R0 - Program Counter
  254 e107:             ; R1 - Stack Pointer
  255 e107:             ; R2 - Direct addressing mode
  256 e107:             ; R3 - Basic Interpreter Token Buffer ptr
  257 e107:             ; R4 - working register  ; or is this for-next stack ptr
  258 e107:             ; R5 - working register  ; or is this gosub stack ptr
  259 e107:             ; R6 - Working register
  260 e107:             ; R7 - parameter passing & return value
  261 e107:             ;
  262 e107:             ;exe: Is this label needed
  263 e107:             ;
  264 e107:             ; void ubasic_init()
  265 e107:             ;
  266 e107:             ; Setup basic interpreter execution engine
  267 e107:             ;
  268 e107:             exe_init:
  269 e107: 09              push
  270 e108: 1d 02 c2        MVIW R5,bas_gosubstack
  271 e10b: 1c 02 82        MVIW R4,bas_forstack
  272 e10e: 1e 02 00        MVIW R6,bas_run_ended
  273 e111: 0e 00           LDAI 0
  274 e113: 4e              STAVR R6
  275 e114: f3 02 0c        LDR R3,bas_tokenbuffer
  276 e117: 0a              pop
  277 e118: 05              RET
  278 e119:             
  279 e119:             ;
  280 e119:             ; void accept(int)
  281 e119:             ;
  282 e119:             ; compare accumulator with current token then advance to next token in buffer
  283 e119:             ; assume accumulator destroyed
  284 e119:             ;
  285 e119:             exe_accept:
  286 e119: 09              push
  287 e11a:             ;
  288 e11a:             ; get current token into accumulator
  289 e11a:             ;
  290 e11a:             ; FIX: Switch to BRNEQ to error state and save a branch
  291 e11a:             ;
  292 e11a: 43              LDAVR R3
  293 e11b: 0b              MVAT
  294 e11c: 0a              POP
  295 e11d: a8 e1 2e        BREQ exe_accept_done
  296 e120:             ;
  297 e120:             ; debug information
  298 e120:             ;
  299 e120: 04 ff e0        JSR showbytea
  300 e123: 0e 23           ldai '#'
  301 e125: 04 ff c8        JSR uartout
  302 e128: 1f e0 a8        mviw R7,bas_msg1
  303 e12b: 04 e5 8c        JSR bas_error
  304 e12e:             ;
  305 e12e:             exe_accept_done:
  306 e12e: 04 e5 8e        jsr exe_next_token
  307 e131: 05              RET
  308 e132:             
  309 e132:             ;
  310 e132:             ; int varfactor()
  311 e132:             ;
  312 e132:             ; get variable id pointed to by exe_variable_num in token stream
  313 e132:             ; (this is not a value but a variable id)
  314 e132:             ; value returned by exe_get_variable in r7
  315 e132:             ;
  316 e132:             ; return value in R7
  317 e132:             ;
  318 e132:             exe_varfactor:
  319 e132: 04 e5 c7        jsr exe_variable_num    ; get variable number id (one byte for now a-z)
  320 e135:                                         ;into accumulator
  321 e135:             ;
  322 e135:             ; variable id in accumulator, return value in r7
  323 e135:             ;
  324 e135: 04 e5 81        jsr exe_get_variable
  325 e138: 0e 04           LDAI TOKENIZER_VARIABLE
  326 e13a: 04 e1 19        JSR exe_accept
  327 e13d: 05              RET
  328 e13e:             
  329 e13e:             ;
  330 e13e:             ; int factor()
  331 e13e:             ; return value in R7
  332 e13e:             ;
  333 e13e:             ; IS MOVE T TO A NEEDED IN ALL THESE :
  334 e13e:             ;
  335 e13e:             exe_factor:
  336 e13e:             ;
  337 e13e: 43              LDAVR R3               ;get current token into accumulator
  338 e13f: 0d 17           LDTI TOKENIZER_PLUS
  339 e141: aa e1 4c        BRNEQ exe_factor1A
  340 e144: 04 e1 19        JSR exe_accept
  341 e147: 04 e1 3e        JSR EXE_FACTOR
  342 e14a: 0c              MVTA
  343 e14b: 05              RET
  344 e14c:             
  345 e14c:             exe_factor1A:
  346 e14c: 43              LDAVR R3               ;get current token into accumulator
  347 e14d: 0d 18           LDTI TOKENIZER_MINUS
  348 e14f: aa e1 5d        BRNEQ exe_factor1B
  349 e152: 04 e1 19        JSR exe_accept
  350 e155: 04 e1 3e        JSR EXE_FACTOR
  351 e158: 04 ee 5f        JSR PARSE_NEG
  352 e15b: 0c              MVTA
  353 e15c: 05              RET
  354 e15d:             
  355 e15d:             exe_factor1B:
  356 e15d: 43              LDAVR R3               ;get current token into accumulator
  357 e15e: 0d 02           LDTI TOKENIZER_NUMBER
  358 e160: aa e1 6b        BRNEQ exe_factor1
  359 e163: 04 e5 be        JSR exe_num
  360 e166: 0c              MVTA
  361 e167: 04 e1 19        JSR exe_accept
  362 e16a: 05              RET
  363 e16b:             
  364 e16b:             exe_factor1:
  365 e16b: 0d 1f           LDTI TOKENIZER_LEFTP
  366 e16d: aa e1 7c        BRNEQ exe_factor2
  367 e170: 04 e1 19        JSR exe_accept
  368 e173: 04 e1 e5        JSR exe_expr
  369 e176: 0e 20           LDAI TOKENIZER_RIGHTP
  370 e178: 04 e1 19        JSR exe_accept
  371 e17b: 05              RET
  372 e17c:             
  373 e17c:             exe_factor2:
  374 e17c: 04 e1 32        jsr exe_varfactor
  375 e17f: 05              ret
  376 e180:             
  377 e180:             ;
  378 e180:             ; int term()
  379 e180:             ; R5 = F1
  380 e180:             ; R6 = F2
  381 e180:             ; R7 = return value
  382 e180:             ;
  383 e180:             exe_term:
  384 e180: 07 05           pushr r5
  385 e182: 07 06           pushr r6
  386 e184:             
  387 e184: 04 e1 3e        jsr exe_factor
  388 e187: 0f 57           MOVRR r7,r5
  389 e189:             
  390 e189:             exe_term_loop:
  391 e189: 43              LDAVR R3
  392 e18a: 0d 1b           ldti TOKENIZER_ASTR
  393 e18c: a8 e1 9c        BREQ exe_term_astr
  394 e18f: 0d 1c           LDTI TOKENIZER_SLASH
  395 e191: a8 e1 b2        breq exe_term_slash
  396 e194: 0d 1d           ldti TOKENIZER_MOD
  397 e196: a8 e1 c8        breq exe_term_mod
  398 e199: a0 e1 de        br exe_term_done
  399 e19c:             
  400 e19c:             exe_term_astr:
  401 e19c: 04 e5 8e        jsr exe_next_token
  402 e19f: 04 e1 3e        jsr exe_factor
  403 e1a2: 0f 67           movrr r7,r6
  404 e1a4:             ;
  405 e1a4:             ; do mulitply f1 = f1 * f2
  406 e1a4:             ;
  407 e1a4: 07 04           pushr r4
  408 e1a6: 0f 46           movrr r6,r4
  409 e1a8: 04 ee 0c        jsr PARSE_MUL16
  410 e1ab: 0f 57           movrr r7,r5
  411 e1ad: 08 40           popr r4
  412 e1af: a0 e1 89        BR exe_term_loop
  413 e1b2:             
  414 e1b2:             exe_term_slash:
  415 e1b2: 04 e5 8e        jsr exe_next_token
  416 e1b5: 04 e1 3e        jsr exe_factor
  417 e1b8: 0f 67           movrr r7,r6
  418 e1ba:             ;
  419 e1ba:             ; do divide f1 = f1 / f2
  420 e1ba:             ;
  421 e1ba: 07 04           pushr r4
  422 e1bc: 0f 46           movrr r6,r4
  423 e1be: 04 ed cc        jsr PARSE_DIV16
  424 e1c1: 0f 57           movrr r7,r5
  425 e1c3: 08 40           popr r4
  426 e1c5: a0 e1 89        BR exe_term_loop
  427 e1c8:             
  428 e1c8:             exe_term_mod:
  429 e1c8: 04 e5 8e        jsr exe_next_token
  430 e1cb: 04 e1 3e        jsr exe_factor
  431 e1ce: 0f 67           movrr r7,r6
  432 e1d0:             ;
  433 e1d0:             ; f1 = f1 % f2
  434 e1d0:             ;
  435 e1d0: 07 04           pushr r4
  436 e1d2: 0f 46           movrr r6,r4
  437 e1d4: 04 ed ed        jsr PARSE_MOD16
  438 e1d7: 0f 57           movrr r7,r5
  439 e1d9: 08 40           popr r4
  440 e1db: a0 e1 89        BR exe_term_loop
  441 e1de:             
  442 e1de:             exe_term_done:
  443 e1de: 0f 75           MOVRR r5,r7
  444 e1e0: 08 60           popr r6
  445 e1e2: 08 50           popr r5
  446 e1e4: 05              ret
  447 e1e5:             
  448 e1e5:             ;
  449 e1e5:             ; static VARIABLE_TYPE expr()
  450 e1e5:             ;
  451 e1e5:             ; R5 = t1
  452 e1e5:             ; R6 = t2
  453 e1e5:             ; R7 = return value
  454 e1e5:             ;
  455 e1e5:             exe_expr:
  456 e1e5: 07 05           pushr r5
  457 e1e7: 07 06           pushr r6
  458 e1e9:             
  459 e1e9: 04 e1 80        jsr exe_term
  460 e1ec: 0f 57           MOVRR r7,r5
  461 e1ee:             
  462 e1ee:             exe_expr_loop:
  463 e1ee: 43              LDAVR R3
  464 e1ef: 0d 17           ldtI TOKENIZER_PLUS
  465 e1f1: a8 e2 06        BREQ exe_expr_plus
  466 e1f4: 0d 18           ldtI TOKENIZER_MINUS
  467 e1f6: a8 e2 18        breq exe_expr_minus
  468 e1f9: 0d 19           ldtI TOKENIZER_AND
  469 e1fb: a8 e2 2a        breq exe_expr_and
  470 e1fe: 0d 1a           ldti TOKENIZER_OR
  471 e200: a8 e2 3c        breq exe_expr_or
  472 e203:             
  473 e203: a0 e2 51        br exe_expr_done
  474 e206:             
  475 e206:             exe_expr_plus:
  476 e206: 04 e5 8e        jsr exe_next_token
  477 e209: 04 e1 80        jsr exe_term
  478 e20c: 0f 67           movrr r7,r6
  479 e20e:             ;
  480 e20e:             ; t1 = t1 + t2
  481 e20e:             ;
  482 e20e: 0f 75           movrr r5,r7
  483 e210: 04 ee 47        jsr parse_add16
  484 e213: 0f 57           movrr r7,r5
  485 e215: a0 e1 ee        BR exe_expr_loop
  486 e218:             
  487 e218:             exe_expr_minus:
  488 e218: 04 e5 8e        jsr exe_next_token
  489 e21b: 04 e1 80        jsr exe_term
  490 e21e: 0f 67           movrr r7,r6
  491 e220:             ;
  492 e220:             ; t1 = t1 - t2
  493 e220:             ;
  494 e220: 0f 75           movrr r5,r7
  495 e222: 04 ee 55        jsr parse_sub16
  496 e225: 0f 57           movrr r7,r5
  497 e227: a0 e1 ee        BR exe_expr_loop
  498 e22a:             
  499 e22a:             exe_expr_and:
  500 e22a: 04 e5 8e        jsr exe_next_token
  501 e22d: 04 e1 80        jsr exe_term
  502 e230: 0f 67           movrr r7,r6
  503 e232:             ;
  504 e232:             ; t1 = t1 & t2
  505 e232:             ;
  506 e232: 0f 75           movrr r5,r7
  507 e234: 04 ee 67        jsr parse_and16
  508 e237: 0f 57           movrr r7,r5
  509 e239: a0 e1 ee        BR exe_expr_loop
  510 e23c:             
  511 e23c:             exe_expr_or:
  512 e23c: 04 e5 8e        jsr exe_next_token
  513 e23f: 04 e1 80        jsr exe_term
  514 e242: 0f 67           movrr r7,r6
  515 e244:             ;
  516 e244:             ; t1 = t1 | t2
  517 e244:             ;
  518 e244: 0f 75           movrr r5,r7
  519 e246: 04 ee 72        jsr parse_or16
  520 e249: 0f 57           movrr r7,r5
  521 e24b: a0 e1 ee        BR exe_expr_loop
  522 e24e: a0 e1 ee        BR exe_expr_loop
  523 e251:             
  524 e251:             exe_expr_done:
  525 e251: 0f 75           MOVRR r5,r7
  526 e253: 08 60           popr r6
  527 e255: 08 50           popr r5
  528 e257: 05              ret
  529 e258:             
  530 e258:             ;
  531 e258:             ; int relation ()
  532 e258:             ;
  533 e258:             ; R5 = r1
  534 e258:             ; R6 = r2
  535 e258:             ; R7 = return value
  536 e258:             ;
  537 e258:             exe_relation:
  538 e258: 07 05           pushr r5
  539 e25a: 07 06           pushr r6
  540 e25c:             
  541 e25c: 04 e1 e5        jsr exe_expr
  542 e25f: 0f 57           MOVRR r7,r5
  543 e261:             
  544 e261:             exe_relation_loop:
  545 e261: 43              LDAVR R3
  546 e262: 0d 21           LDTI TOKENIZER_LT
  547 e264: a8 e2 74        BREQ exe_relation_lt
  548 e267: 0d 22           ldti TOKENIZER_GT
  549 e269: a8 e2 92        breq exe_relation_gt
  550 e26c: 0d 23           ldti TOKENIZER_EQ
  551 e26e: a8 e2 b0        breq exe_relation_eq
  552 e271:             
  553 e271: a0 e2 cc        br exe_relation_done
  554 e274:             
  555 e274:             exe_relation_lt:
  556 e274: 04 e5 8e        jsr exe_next_token
  557 e277: 04 e1 e5        jsr exe_expr
  558 e27a: 0f 67           movrr r7,r6
  559 e27c:             ;
  560 e27c:             ; r1 = r1 < r2
  561 e27c:             ;
  562 e27c: 0f 75           movrr  r5,r7
  563 e27e: 04 ee aa        jsr parse_compare
  564 e281: 0d ff           ldti 0ffh
  565 e283: aa e2 8c        BRNEQ exe_rel_nlt
  566 e286: 1d 00 01        mviw r5,01h
  567 e289: a0 e2 61        BR exe_relation_loop
  568 e28c:             exe_rel_nlt:
  569 e28c: 1d 00 00        mviw r5,00h
  570 e28f: a0 e2 61        BR exe_relation_loop
  571 e292:             
  572 e292:             exe_relation_gt:
  573 e292: 04 e5 8e        jsr exe_next_token
  574 e295: 04 e1 e5        jsr exe_expr
  575 e298: 0f 67           movrr r7,r6
  576 e29a:             ;
  577 e29a:             ; r1 = r1 > r2
  578 e29a:             ;
  579 e29a: 0f 75           movrr  r5,r7
  580 e29c: 04 ee aa        jsr parse_compare
  581 e29f: 0d 01           ldti 01h
  582 e2a1: aa e2 aa        BRNEQ exe_rel_ngt
  583 e2a4: 1d 00 01        mviw r5,01h
  584 e2a7: a0 e2 61        BR exe_relation_loop
  585 e2aa:             exe_rel_ngt:
  586 e2aa: 1d 00 00        mviw r5,00h
  587 e2ad: a0 e2 61        BR exe_relation_loop
  588 e2b0:             
  589 e2b0:             exe_relation_eq:
  590 e2b0: 04 e5 8e        jsr exe_next_token
  591 e2b3: 04 e1 e5        jsr exe_expr
  592 e2b6: 0f 67           movrr r7,r6
  593 e2b8:             ;
  594 e2b8:             ; r1 = r1 == r2
  595 e2b8:             ;
  596 e2b8: 0f 75           movrr  r5,r7
  597 e2ba: 04 ee aa        jsr parse_compare
  598 e2bd: a2 e2 c6        brnz exe_rel_ne
  599 e2c0: 1d 00 01        mviw r5,01h
  600 e2c3: a0 e2 61        BR exe_relation_loop
  601 e2c6:             exe_rel_ne:
  602 e2c6: 1d 00 00        mviw r5,00h
  603 e2c9: a0 e2 61        BR exe_relation_loop
  604 e2cc:             
  605 e2cc:             exe_relation_done:
  606 e2cc: 0f 75           MOVRR r5,r7
  607 e2ce: 08 60           popr r6
  608 e2d0: 08 50           popr r5
  609 e2d2: 05              ret
  610 e2d3:             
  611 e2d3:             ;
  612 e2d3:             ; char * index_find (int linenum)
  613 e2d3:             ;
  614 e2d3:             ; call with line in R7
  615 e2d3:             ; return with val in R7 - tokenbuffer ptr
  616 e2d3:             ; THIS CAN BE REMOVED SINCE IT IS ONLY A SINGLE CALL
  617 e2d3:             ;
  618 e2d3:             exe_index_find:
  619 e2d3: 04 ed 90        JSR basu_find
  620 e2d6: 05              RET
  621 e2d7:             
  622 e2d7:             ;
  623 e2d7:             ; void jump_linenum(linenum)
  624 e2d7:             ;
  625 e2d7:             ; Linenum in R7
  626 e2d7:             ;
  627 e2d7:             exe_jump_line:
  628 e2d7: 04 e2 d3        JSR exe_index_find
  629 e2da: 2f              MVRHA R7
  630 e2db: a2 e2 ee        BRNZ exe_jump_line1
  631 e2de: 27              MVRLA R7
  632 e2df: a2 e2 ee        BRNZ exe_jump_line1
  633 e2e2:             ;
  634 e2e2:             ; returned 0 line not found
  635 e2e2:             ;
  636 e2e2: 0e 24           LDAI TOKENIZER_CR
  637 e2e4: 04 e1 19        JSR exe_accept
  638 e2e7: 1e 02 00        MVIW r6,bas_run_ended
  639 e2ea: 0e 01           LDAI 1
  640 e2ec: 4e              STAVR R6
  641 e2ed: 05              ret
  642 e2ee:             exe_jump_line1:
  643 e2ee:             ;   jsr tok_goto ; WHAT IS THIS
  644 e2ee: 0f 37           movrr r7,r3
  645 e2f0: 05              ret
  646 e2f1:             
  647 e2f1:             ;
  648 e2f1:             ; void goto_statement()
  649 e2f1:             ;
  650 e2f1:             exe_goto_stmt:
  651 e2f1: 0e 0d           LDAI TOKENIZER_GOTO
  652 e2f3: 04 e1 19        JSR exe_accept
  653 e2f6: 04 e1 e5        JSR exe_expr
  654 e2f9: 04 e2 d7        JSR exe_jump_line
  655 e2fc: 05              RET
  656 e2fd:             
  657 e2fd:             ;
  658 e2fd:             ; void print_statment()
  659 e2fd:             ;
  660 e2fd:             exe_print_stmt:
  661 e2fd: 0e 06           LDAI TOKENIZER_PRINT
  662 e2ff: 04 e1 19        jsr exe_accept
  663 e302:             
  664 e302:             exe_print_stmt_loop:
  665 e302: 43              LDAVR R3
  666 e303: 0d 03           LDTI TOKENIZER_STRING
  667 e305: aa e3 14        BRNEQ exe_print_stmt1
  668 e308:             ;
  669 e308:             ; this should return string to print in r2
  670 e308:             ; exe_string may not be needed tokenbufferptr is at string ?
  671 e308:             ;
  672 e308: 0f 73           movrr r3,r7
  673 e30a: 57              incr r7
  674 e30b: 04 ff c0        jsr stringout
  675 e30e: 04 e5 8e        jsr exe_next_token
  676 e311: a0 e3 47        br exe_print_stmt_test
  677 e314:             
  678 e314:             exe_print_stmt1:
  679 e314: 0d 15           ldti TOKENIZER_COMMA
  680 e316: aa e3 24        BRNEQ exe_print_stmt2
  681 e319: 0e 20           LDAI ' '
  682 e31b: 04 ff c4        JSR charout
  683 e31e: 04 e5 8e        jsr exe_next_token
  684 e321: a0 e3 47        br exe_print_stmt_test
  685 e324:             
  686 e324:             exe_print_stmt2:
  687 e324: 0d 16           ldti TOKENIZER_SEMICOLON
  688 e326: aa e3 2f        BRNEQ exe_print_stmt3
  689 e329: 04 e5 8e        jsr exe_next_token
  690 e32c: a0 e3 47        br exe_print_stmt_test
  691 e32f:             
  692 e32f:             exe_print_stmt3:
  693 e32f: 0d 04           ldti TOKENIZER_VARIABLE
  694 e331: a8 e3 41        BREQ exe_print_stmt4
  695 e334: 0d 02           ldti TOKENIZER_NUMBER
  696 e336: a8 e3 41        breq exe_print_stmt4
  697 e339: 0d 1f           ldti  TOKENIZER_LEFTP
  698 e33b: a8 e3 41        breq exe_print_stmt4
  699 e33e:             
  700 e33e: a0 e3 55        br exe_print_stmt_done
  701 e341:             
  702 e341:             exe_print_stmt4:
  703 e341: 04 e1 e5        jsr exe_expr
  704 e344:                 ;JSR showr7
  705 e344: 04 e5 d5        jsr exe_itoa
  706 e347:             
  707 e347:             exe_print_stmt_test:
  708 e347: 43              LDAVR R3
  709 e348: 0d 24           LDTI TOKENIZER_CR
  710 e34a: a8 e3 55        breq exe_print_stmt_done
  711 e34d: 0d 01           LDTI TOKENIZER_EOF
  712 e34f: a8 e3 55        breq exe_print_stmt_done
  713 e352: a0 e3 02        br exe_print_stmt_loop
  714 e355:             
  715 e355:             exe_print_stmt_done:
  716 e355: 1f ee f9        mviw R7,CRLF
  717 e358: 04 ff c0        jsr stringout
  718 e35b: 04 e5 8e        jsr exe_next_token
  719 e35e: 05              ret
  720 e35f:             
  721 e35f:             ;
  722 e35f:             ; void if_statement()
  723 e35f:             ;
  724 e35f:             exe_if_stmt:
  725 e35f: 0e 07           LDAI TOKENIZER_IF
  726 e361: 04 e1 19        JSR exe_accept
  727 e364:             
  728 e364: 04 e2 58        JSR exe_relation
  729 e367: 27              MVRLA R7
  730 e368: 09              push
  731 e369: 0e 08           LDAI TOKENIZER_THEN
  732 e36b: 04 e1 19        JSR exe_accept
  733 e36e: 0a              pop
  734 e36f:             
  735 e36f: 0d 01           LDTI 1
  736 e371: aa e3 78        BRNEQ exe_if_stmt1
  737 e374: 04 e4 b7        JSR exe_stmt
  738 e377: 05              ret
  739 e378:             
  740 e378:             exe_if_stmt1:
  741 e378: 04 e5 8e        jsr exe_next_token
  742 e37b: 43              LDAVR R3
  743 e37c: 0d 24           LDTI TOKENIZER_CR
  744 e37e: a8 e3 87        BREQ EXE_IF_STMT2
  745 e381: 0d 01           LDTI TOKENIZER_EOF
  746 e383: aa e3 78        BRNEQ EXE_IF_STMT1
  747 e386: 05              RET
  748 e387:             
  749 e387:             exe_if_stmt2:
  750 e387: 04 e5 8e        JSR EXE_NEXT_TOKEN
  751 e38a: 05              RET
  752 e38b:             
  753 e38b:             ;
  754 e38b:             ; void let_statement()
  755 e38b:             ;
  756 e38b:             exe_let_stmt:
  757 e38b: 04 e5 c7        jsr exe_variable_num
  758 e38e: 37              mvarl r7
  759 e38f: 0f 67           movrr r7,r6
  760 e391: 0e 04           ldai TOKENIZER_VARIABLE
  761 e393: 04 e1 19        jsr exe_accept
  762 e396: 0e 23           ldai TOKENIZER_EQ
  763 e398: 04 e1 19        jsr exe_accept
  764 e39b: 04 e1 e5        jsr exe_expr
  765 e39e: 26              mvrla r6
  766 e39f: 04 e5 76        JSR exe_set_variable
  767 e3a2: 0e 24           ldai TOKENIZER_CR
  768 e3a4: 04 e1 19        jsr exe_accept
  769 e3a7: 05              ret
  770 e3a8:             
  771 e3a8:             ;
  772 e3a8:             ; void gosub_statement()
  773 e3a8:             ;
  774 e3a8:             exe_gosub_stmt:
  775 e3a8: 0e 0e           ldai TOKENIZER_GOSUB
  776 e3aa: 04 e1 19        jsr exe_accept
  777 e3ad: 04 e5 be        jsr exe_num
  778 e3b0: 0e 02           ldai TOKENIZER_NUMBER
  779 e3b2: 04 e1 19        jsr exe_accept
  780 e3b5: 0e 24           ldai TOKENIZER_CR
  781 e3b7: 04 e1 19        jsr exe_accept
  782 e3ba:             ;
  783 e3ba:             ; save current token buffer ptr to gosub stack
  784 e3ba:             ;
  785 e3ba: 23             mvrla r3
  786 e3bb: 4d             stavr r5
  787 e3bc: 55             incr r5
  788 e3bd: 2b             mvrha r3
  789 e3be: 4d             stavr r5
  790 e3bf: 55             incr  r5
  791 e3c0:             ;
  792 e3c0:             ; write new gosub stack ptr location back
  793 e3c0:             ;
  794 e3c0: 04 e2 d7       JSR exe_jump_line
  795 e3c3: 05             RET
  796 e3c4:             
  797 e3c4:             ;
  798 e3c4:             ; void return_statment()
  799 e3c4:             ;
  800 e3c4:             exe_return_stmt:
  801 e3c4: 0e 0f           ldai TOKENIZER_RETURN
  802 e3c6: 04 e1 19        jsr exe_accept
  803 e3c9:             ;
  804 e3c9:             ; setup to use for storage area via R4
  805 e3c9:             ;
  806 e3c9: 5d             decr r5
  807 e3ca: 5d             decr r5
  808 e3cb:             
  809 e3cb: 45             ldavr r5
  810 e3cc: 33             mvarl r3
  811 e3cd: 55             incr r5
  812 e3ce: 45             ldavr r5
  813 e3cf: 3b             mvarh r3
  814 e3d0:             
  815 e3d0: 5d             decr r5
  816 e3d1: 05             ret
  817 e3d2:             
  818 e3d2:             ;
  819 e3d2:             ; void next_statement()
  820 e3d2:             ;
  821 e3d2:             exe_next_stmt:
  822 e3d2:             ;
  823 e3d2:             ; backup to the TO Value
  824 e3d2: 5c              decr r4
  825 e3d3: 5c              decr r4
  826 e3d4: 5c              decr r4
  827 e3d5: 5c              decr r4
  828 e3d6:             ;
  829 e3d6:             ; eat next
  830 e3d6:             ;
  831 e3d6: 0e 0c           ldai TOKENIZER_NEXT
  832 e3d8: 04 e1 19        jsr exe_accept
  833 e3db:             ;
  834 e3db:             ; get variable id (in accumulator) and hold in r6 lo
  835 e3db:             ;
  836 e3db: 04 e5 c7        jsr exe_variable_num
  837 e3de: 36              mvarl r6
  838 e3df:             ;
  839 e3df:             ; eat TOKENIZER_VARIABLE id
  840 e3df:             ;
  841 e3df: 0e 04           ldai TOKENIZER_VARIABLE
  842 e3e1: 04 e1 19        jsr exe_accept
  843 e3e4:             ;
  844 e3e4:             ; get variable value, inc by 1 and store - ADD STEP VALUE
  845 e3e4:             ;
  846 e3e4: 26              mvrla r6
  847 e3e5: 04 e5 81        jsr exe_get_variable
  848 e3e8: 57              incr r7
  849 e3e9: 26              mvrla r6
  850 e3ea: 04 e5 76        jsr exe_set_variable
  851 e3ed:             ;
  852 e3ed:             ; get TO value into R6
  853 e3ed: 44              ldavr r4
  854 e3ee: 36              mvarl r6
  855 e3ef: 54              incr r4
  856 e3f0: 44              ldavr r4
  857 e3f1: 3e              mvarh r6
  858 e3f2: 54              incr r4
  859 e3f3:             ;
  860 e3f3:             ; for now only compare low byte HACK use compare code
  861 e3f3:             ; r7=r6 00
  862 e3f3:             ; r7>r6 01
  863 e3f3:             ; r7<r6 ff
  864 e3f3:             ;
  865 e3f3: 04 ee aa         jsr parse_compare
  866 e3f6: 0d 01            ldti 01
  867 e3f8: a8 e4 02         breq exe_next_done
  868 e3fb:             ;    mvrla r6
  869 e3fb:             ;    mvat
  870 e3fb:             ;    mvrla r7
  871 e3fb:             ;    brgt exe_next_done
  872 e3fb:             ;
  873 e3fb: 44              ldavr r4
  874 e3fc: 33              mvarl r3
  875 e3fd: 54              incr r4
  876 e3fe: 44              ldavr r4
  877 e3ff: 3b              mvarh r3
  878 e400: 54              incr r4
  879 e401: 05              ret
  880 e402:             
  881 e402:             exe_next_done:
  882 e402: 5c            decr r4
  883 e403: 5c            decr r4
  884 e404: 5c            decr r4
  885 e405: 5c            decr r4
  886 e406: 0e 24         ldai TOKENIZER_CR
  887 e408: 04 e1 19      jsr exe_accept
  888 e40b: 05            ret
  889 e40c:             
  890 e40c:             ;
  891 e40c:             ; void for_statement()
  892 e40c:             ;
  893 e40c:             exe_for_stmt:
  894 e40c:             ;
  895 e40c:             ; setup to use for storage area via R4
  896 e40c:             ;
  897 e40c: 0e 0a           ldai TOKENIZER_FOR    ; eat FOR
  898 e40e: 04 e1 19        jsr exe_accept
  899 e411:             ;
  900 e411:             ; get variable id (in accumulator) and hold in r6 lo
  901 e411:             ;
  902 e411: 04 e5 c7        jsr exe_variable_num
  903 e414: 36              mvarl r6
  904 e415:             ;
  905 e415:             ; store variable id in FOR storage - hack only lo byte, hi byte 0
  906 e415:             ;
  907 e415: 4c              stavr r4
  908 e416: 54              incr r4
  909 e417: 0e 00           ldai 0
  910 e419: 4c              stavr r4
  911 e41a: 54              incr r4
  912 e41b:             ;
  913 e41b:             ; eat variable id and = then get starting value
  914 e41b:             ;
  915 e41b: 0e 04           ldai TOKENIZER_VARIABLE
  916 e41d: 04 e1 19        jsr exe_accept
  917 e420: 0e 23           ldai TOKENIZER_EQ
  918 e422: 04 e1 19        jsr exe_accept
  919 e425: 04 e1 e5        jsr exe_expr
  920 e428:             ;
  921 e428:             ; set variable to starting value
  922 e428:             ;
  923 e428: 26              mvrla r6
  924 e429: 04 e5 76        JSR exe_set_variable
  925 e42c:             ;
  926 e42c:             ; eat TO and get to value
  927 e42c:             ;
  928 e42c: 0e 0b           ldai TOKENIZER_TO
  929 e42e: 04 e1 19        jsr exe_accept
  930 e431: 04 e1 e5        jsr exe_expr
  931 e434:             ;
  932 e434:             ; store to value in FOR storage area
  933 e434:             ;
  934 e434: 27              mvrla r7
  935 e435: 4c              stavr r4
  936 e436: 54              incr r4
  937 e437: 2f              mvrha r7
  938 e438: 4c              stavr r4
  939 e439: 54              incr r4
  940 e43a:             ;
  941 e43a:             ; EAT EOL
  942 e43a:             ;
  943 e43a: 0e 24           ldai TOKENIZER_CR
  944 e43c: 04 e1 19        jsr exe_accept
  945 e43f:             ;
  946 e43f:             ; store ptr to instruction after FOR in for storage area
  947 e43f:             ;
  948 e43f: 23              mvrla r3
  949 e440: 4c              stavr r4
  950 e441: 54              incr r4
  951 e442: 2b              mvrha r3
  952 e443: 4c              stavr r4
  953 e444: 54              incr r4
  954 e445:             ;
  955 e445:             ;   save for stackptr
  956 e445:             ;
  957 e445: 05              ret
  958 e446:             
  959 e446:             ;
  960 e446:             ; INPUT
  961 e446:             ;
  962 e446:             exe_input_stmt:
  963 e446: 0e 2a           ldai TOKENIZER_INPUT   ; eat INPUT
  964 e448: 04 e1 19        jsr exe_accept
  965 e44b: 04 e5 c7        jsr exe_variable_num
  966 e44e: 09              Push
  967 e44f:             
  968 e44f: 1f 03 00        mviw r7,parse_input_line
  969 e452:             
  970 e452: 04 ee e8        jsr get_inputline
  971 e455:             
  972 e455: 1f 03 00        mviw r7,parse_input_line
  973 e458: ff 02 02        str r7,bas_txtptr
  974 e45b:             
  975 e45b:             
  976 e45b: 04 eb 5f        jsr parse_num
  977 e45e: 0a              pop
  978 e45f: 04 e5 76        jsr  EXE_SET_VARIABLE
  979 e462:             
  980 e462: 0e 04           ldai TOKENIZER_VARIABLE
  981 e464: 04 e1 19        jsr EXE_ACCEPT
  982 e467: 0e 24           ldai TOKENIZER_CR
  983 e469: 04 e1 19        jsr exe_accept
  984 e46c: 05              RET
  985 e46d:             ;
  986 e46d:             ; void peek_statment()
  987 e46d:             ;
  988 e46d:             ;peek_statement(void) {
  989 e46d:             ;
  990 e46d:             exe_peek_stmt:
  991 e46d: 0e 12           ldai TOKENIZER_PEEK   ; eat PEEK
  992 e46f: 04 e1 19        jsr exe_accept
  993 e472: 04 e1 e5        jsr exe_expr
  994 e475: 47              LDAVR R7
  995 e476: 37              MVARL R7
  996 e477: 0e 00           LDAI 0
  997 e479: 3f              MVARH R7
  998 e47a: 07 07           PUSHR R7
  999 e47c:             
 1000 e47c: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
 1001 e47e: 04 e1 19        jsr exe_accept
 1002 e481: 04 e5 c7        jsr exe_variable_num
 1003 e484: 08 70           popr r7
 1004 e486:             
 1005 e486: 04 e5 76        jsr  EXE_SET_VARIABLE
 1006 e489: 0e 04           ldai TOKENIZER_VARIABLE
 1007 e48b: 04 e1 19        jsr EXE_ACCEPT
 1008 e48e: 0e 24           ldai TOKENIZER_CR
 1009 e490: 04 e1 19        jsr exe_accept
 1010 e493: 05              RET
 1011 e494:             
 1012 e494:             ;
 1013 e494:             ; void poke_statement()
 1014 e494:             ;
 1015 e494:             ;poke_statement(void) {
 1016 e494:             ;    VARIABLE_TYPE poke_addr;
 1017 e494:             ;    VARIABLE_TYPE value;
 1018 e494:             ;
 1019 e494:             ;    accept(TOKENIZER_POKE);
 1020 e494:             ;    poke_addr = expr();
 1021 e494:             ;    accept(TOKENIZER_COMMA);
 1022 e494:             ;    value = expr();
 1023 e494:             ;    accept(TOKENIZER_CR);
 1024 e494:             
 1025 e494:             ;    poke_function(poke_addr, value);
 1026 e494:             
 1027 e494:             exe_poke_stmt:
 1028 e494: 0e 13           ldai TOKENIZER_POKE   ; eat PEEK
 1029 e496: 04 e1 19        jsr exe_accept
 1030 e499:             
 1031 e499: 04 e1 e5        jsr exe_expr
 1032 e49c: 07 07           PUSHR R7
 1033 e49e:             
 1034 e49e: 0e 15           ldai TOKENIZER_COMMA   ; eat COMMA
 1035 e4a0: 04 e1 19        jsr exe_accept
 1036 e4a3:             
 1037 e4a3: 04 e1 e5        jsr exe_expr
 1038 e4a6: 27              MVRLA R7
 1039 e4a7:             
 1040 e4a7: 08 70           POPR R7
 1041 e4a9:             
 1042 e4a9: 4f              STAVR R7
 1043 e4aa:             
 1044 e4aa: 0e 24           ldai TOKENIZER_CR
 1045 e4ac: 04 e1 19        jsr exe_accept
 1046 e4af: 05              RET
 1047 e4b0:             
 1048 e4b0:             ;
 1049 e4b0:             ; void end_statement()
 1050 e4b0:             ;
 1051 e4b0:             exe_end_stmt:
 1052 e4b0: 1e 02 00        mviw r6,bas_run_ended
 1053 e4b3: 0e 01           LDAI 1
 1054 e4b5: 4e              STAVR r6
 1055 e4b6: 05              ret
 1056 e4b7:             
 1057 e4b7:             ;
 1058 e4b7:             ; void statment()
 1059 e4b7:             ;
 1060 e4b7:             exe_stmt:
 1061 e4b7: 43              LDAVR R3
 1062 e4b8:             
 1063 e4b8: 0d 06           LDTI TOKENIZER_PRINT
 1064 e4ba: aa e4 c1        BRNEQ exe_stmt1
 1065 e4bd: 04 e2 fd        JSR exe_print_stmt
 1066 e4c0: 05              ret
 1067 e4c1:             
 1068 e4c1:             exe_stmt1:
 1069 e4c1: 0d 07           LDTI TOKENIZER_IF
 1070 e4c3: aa e4 ca        BRNEQ exe_stmt2
 1071 e4c6: 04 e3 5f        JSR exe_if_stmt
 1072 e4c9: 05              ret
 1073 e4ca:             
 1074 e4ca:             exe_stmt2:
 1075 e4ca: 0d 04           LDTI TOKENIZER_VARIABLE
 1076 e4cc: aa e4 d3        BRNEQ exe_stmt3
 1077 e4cf: 04 e3 8b        JSR exe_let_stmt
 1078 e4d2: 05              ret
 1079 e4d3:             
 1080 e4d3:             exe_stmt3:
 1081 e4d3: 0d 0e           LDTI TOKENIZER_GOSUB
 1082 e4d5: aa e4 dc        BRNEQ exe_stmt4
 1083 e4d8: 04 e3 a8        JSR exe_gosub_stmt
 1084 e4db: 05              ret
 1085 e4dc:             
 1086 e4dc:             exe_stmt4:
 1087 e4dc: 0d 0f           LDTI TOKENIZER_RETURN
 1088 e4de: aa e4 e5        BRNEQ exe_stmt5
 1089 e4e1: 04 e3 c4        JSR exe_return_stmt
 1090 e4e4: 05              ret
 1091 e4e5:             
 1092 e4e5:             exe_stmt5:
 1093 e4e5: 0d 0a           LDTI TOKENIZER_FOR
 1094 e4e7: aa e4 ee        BRNEQ exe_stmt6
 1095 e4ea: 04 e4 0c        JSR exe_for_stmt
 1096 e4ed: 05              ret
 1097 e4ee:             
 1098 e4ee:             exe_stmt6:
 1099 e4ee: 0d 12           LDTI TOKENIZER_PEEK
 1100 e4f0: aa e4 f7        BRNEQ exe_stmt7
 1101 e4f3: 04 e4 6d        JSR exe_peek_stmt
 1102 e4f6: 05              ret
 1103 e4f7:             
 1104 e4f7:             exe_stmt7:
 1105 e4f7: 0d 13           LDTI TOKENIZER_POKE
 1106 e4f9: aa e5 00        BRNEQ exe_stmt8
 1107 e4fc: 04 e4 94        JSR exe_poke_stmt
 1108 e4ff: 05              ret
 1109 e500:             
 1110 e500:             exe_stmt8:
 1111 e500: 0d 0c           LDTI TOKENIZER_NEXT
 1112 e502: aa e5 09        BRNEQ exe_stmt9
 1113 e505: 04 e3 d2        JSR exe_next_stmt
 1114 e508: 05              ret
 1115 e509:             
 1116 e509:             exe_stmt9:
 1117 e509: 0d 14           LDTI TOKENIZER_END
 1118 e50b: aa e5 12        BRNEQ exe_stmt10
 1119 e50e: 04 e4 b0        JSR exe_end_stmt
 1120 e511: 05              ret
 1121 e512:             
 1122 e512:             exe_stmt10:
 1123 e512: 0d 05           LDTI TOKENIZER_LET
 1124 e514: aa e5 20        BRNEQ exe_stmt11
 1125 e517: 0e 05           LDAI TOKENIZER_LET
 1126 e519: 04 e1 19        JSR exe_accept
 1127 e51c: 04 e3 8b        JSR exe_let_stmt
 1128 e51f: 05              ret
 1129 e520:             
 1130 e520:             exe_stmt11:
 1131 e520: 0d 0d           LDTI TOKENIZER_GOTO
 1132 e522: aa e5 29        BRNEQ exe_stmt12
 1133 e525: 04 e2 f1        JSR exe_goto_stmt
 1134 e528: 05              ret
 1135 e529:             
 1136 e529:             exe_stmt12:
 1137 e529: 0d 2a           LDTI TOKENIZER_INPUT
 1138 e52b: aa e5 32        BRNEQ exe_stmt13
 1139 e52e: 04 e4 46        JSR exe_input_stmt
 1140 e531: 05              ret
 1141 e532:             
 1142 e532:             exe_stmt13:
 1143 e532: 04 ff e0        jsr showbytea
 1144 e535: 0e 3d           ldai '='
 1145 e537: 04 ff c8        jsr uartout
 1146 e53a: 1f e0 d5        MVIW R7,bas_msg3
 1147 e53d: 04 ff c0        jsr stringout
 1148 e540: 04 ff dc        JSR SHOWREGS
 1149 e543: 04 e5 8c        jsr bas_error
 1150 e546:             
 1151 e546:             ;
 1152 e546:             ; void line_statement (void)
 1153 e546:             ;
 1154 e546:             exe_line_stmt:
 1155 e546: 0e 25           LDAI TOKENIZER_LINENUM
 1156 e548: 04 e1 19        jsr exe_accept
 1157 e54b: 04 e4 b7        jsr exe_stmt
 1158 e54e: 05              ret
 1159 e54f:             
 1160 e54f:             ;
 1161 e54f:             ; void ubasic_run()
 1162 e54f:             ;
 1163 e54f:             basic_run:
 1164 e54f: 04 e1 07        JSR exe_init
 1165 e552:             
 1166 e552:             exe_run:
 1167 e552: 04 e5 61        jsr exe_finished
 1168 e555: 0d 01           LDTI 1
 1169 e557: aa e5 5b        BRNEQ exe_run_cont
 1170 e55a: 05              ret
 1171 e55b:             
 1172 e55b:             exe_run_cont:
 1173 e55b: 04 e5 46        jsr exe_line_stmt
 1174 e55e: a0 e5 52        BR exe_run
 1175 e561:             
 1176 e561:             ;
 1177 e561:             ; int ubasic_finished()
 1178 e561:             ;
 1179 e561:             exe_finished:
 1180 e561: 1a 02 00        MVIW R2,bas_run_ended
 1181 e564: 42              LDAVR R2
 1182 e565: 0d 01           LDTI 1
 1183 e567: a8 e5 73        BREQ exe_finished_yes
 1184 e56a:             
 1185 e56a: 43              ldavr r3
 1186 e56b: 0d 01           ldti TOKENIZER_EOF
 1187 e56d: a8 e5 73        breq exe_finished_yes
 1188 e570: 0e 00           ldai 0
 1189 e572: 05              ret
 1190 e573:             
 1191 e573:             exe_finished_yes:
 1192 e573: 0e 01           LDAI 1
 1193 e575: 05              ret
 1194 e576:             
 1195 e576:             ;
 1196 e576:             ; void ubasic_set_variable(int varnum, VARIABLE_TYPE value)
 1197 e576:             ;
 1198 e576:             ; R7 value (only using low byte)
 1199 e576:             ; ACCUMULATOR Variable ref number
 1200 e576:             ;
 1201 e576:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1202 e576:             ; DANGER USING R2 - NOW FOR MEM-DIRECT ADDRESSING SWITCH TO ANOTHER R ?
 1203 e576:             ;
 1204 e576:             exe_set_variable:
 1205 e576: 1a 01 00        MVIW R2,BASIC_VARS  ; SEE COMMENT below about memory alignment
 1206 e579: b6              SHL                 ; memory location x 2 (2 byte vars)
 1207 e57a: 32              MVARL R2            ; change to add16 to remove align issue
 1208 e57b:             ;
 1209 e57b: 27              MVRLA R7
 1210 e57c: 4a              STAVR R2
 1211 e57d: 52              INCR r2
 1212 e57e: 2f              mvrha r7
 1213 e57f: 4a              stavr r2
 1214 e580:             
 1215 e580: 05              RET
 1216 e581:             ;
 1217 e581:             ; VARIABLE_TYPE ubasic_get_variable(int varnum)
 1218 e581:             ;
 1219 e581:             ; ACCUMULATOR HOLDS VARIABLE REF NUMBER, VALUE RETURN IN R7
 1220 e581:             ;
 1221 e581:             ; HACK for now BASIC_VARS needs to be 256 byte 0xAA00 aligned
 1222 e581:             ; and only 0-25 (var names a-z) supported
 1223 e581:             ; for now values are 1 byte, upper byte of R7 forced to 0
 1224 e581:             ;
 1225 e581:             ; Destroys R2 and accumulator, could be fixed with a push/pop
 1226 e581:             ;
 1227 e581:             exe_get_variable:
 1228 e581: 1a 01 00        MVIW R2,BASIC_VARS
 1229 e584: b6              shl
 1230 e585: 32              MVARL R2
 1231 e586:             ;
 1232 e586: 42              LDAVR R2
 1233 e587: 37              MVARL R7
 1234 e588: 52              INCR R2
 1235 e589: 42              LDAVR R2
 1236 e58a: 3f              MVARH R7
 1237 e58b: 05              RET
 1238 e58c:             
 1239 e58c:             ;
 1240 e58c:             ; hack this needs work
 1241 e58c:             ;
 1242 e58c:             bas_error:
 1243 e58c: 03            HALT
 1244 e58d: 05            RET
 1245 e58e:             
 1246 e58e:             ;
 1247 e58e:             ; Tokenizer execute support code
 1248 e58e:             ;
 1249 e58e:             ; tokenizer_next - exe version
 1250 e58e:             ;
 1251 e58e:             exe_next_token:
 1252 e58e: 43            ldavr r3
 1253 e58f: 0d 02         ldti TOKENIZER_NUMBER
 1254 e591: aa e5 98      BRNEQ exe_next_token1
 1255 e594: 53            incr r3
 1256 e595: 53            incr r3
 1257 e596: 53            incr r3
 1258 e597: 05            RET
 1259 e598:             
 1260 e598:             exe_next_token1:
 1261 e598: 0d 04         ldti TOKENIZER_VARIABLE
 1262 e59a: aa e5 a1      BRNEQ exe_next_token2
 1263 e59d: 53            incr r3
 1264 e59e: 53            incr r3
 1265 e59f: 53            incr r3
 1266 e5a0: 05            RET
 1267 e5a1:             
 1268 e5a1:             exe_next_token2:
 1269 e5a1: 0d 25         ldti TOKENIZER_LINENUM
 1270 e5a3: aa e5 ac      BRNEQ exe_next_token3
 1271 e5a6: 53            incr r3
 1272 e5a7: 53            incr r3
 1273 e5a8: 53            incr r3
 1274 e5a9: 53            incr r3
 1275 e5aa: 53            incr r3
 1276 e5ab: 05            RET
 1277 e5ac:             
 1278 e5ac:             exe_next_token3:
 1279 e5ac: 0d 03         ldti TOKENIZER_STRING
 1280 e5ae: aa e5 bc      BRNEQ exe_next_token4
 1281 e5b1: 53            incr r3
 1282 e5b2:             
 1283 e5b2:             exe_next_tok3_loop:
 1284 e5b2: 43            LDAVR R3
 1285 e5b3: a1 e5 ba      BRZ exe_next_tok3_done
 1286 e5b6: 53            incr r3
 1287 e5b7: a0 e5 b2      BR exe_next_tok3_loop
 1288 e5ba:             
 1289 e5ba:             exe_next_tok3_done:
 1290 e5ba: 53            incr r3
 1291 e5bb: 05            RET
 1292 e5bc:             
 1293 e5bc:             exe_next_token4:
 1294 e5bc: 53            incr r3
 1295 e5bd: 05            ret
 1296 e5be:             
 1297 e5be:             ;
 1298 e5be:             ; numbers stored low byte followed by high byte in memory
 1299 e5be:             ;
 1300 e5be:             exe_num:
 1301 e5be: 53              incr r3
 1302 e5bf: 43              ldavr r3
 1303 e5c0: 37              mvarl r7
 1304 e5c1: 53              incr r3
 1305 e5c2: 43              ldavr r3
 1306 e5c3: 3f              mvarh r7
 1307 e5c4: 5b              decr r3
 1308 e5c5: 5b              decr r3
 1309 e5c6: 05              ret
 1310 e5c7:             
 1311 e5c7:             ;
 1312 e5c7:             ; hack only using low byte of id for now
 1313 e5c7:             ; return in accumulator
 1314 e5c7:             ;
 1315 e5c7:             exe_variable_num:
 1316 e5c7: 53              incr r3
 1317 e5c8: 43              ldavr r3
 1318 e5c9: 5b              decr r3
 1319 e5ca: 05              ret
 1320 e5cb:             
 1321 e5cb:             
 1322 e5cb:             ;
 1323 e5cb:             ; Convert number in r7 to ASCII
 1324 e5cb:             ;
 1325 e5cb:             ; for for negative numbers
 1326 e5cb:             ;
 1327 e5cb: 27 10 03 e8 
            00 64 00 0a 
            00 00       dividers: DW 02710h,03e8h,0064h,000Ah,0000h
 1328 e5d5:             
 1329 e5d5:             exe_itoa:
 1330 e5d5: 09                push
 1331 e5d6: 2f                mvrha r7
 1332 e5d7: b3 80             andi 080h
 1333 e5d9: a1 e5 e8          brz exe_itoa_pos
 1334 e5dc:             
 1335 e5dc: 2f                mvrha r7
 1336 e5dd: b5                inva
 1337 e5de: 3f                mvarh r7
 1338 e5df: 27                mvrla r7
 1339 e5e0: b5                inva
 1340 e5e1: 37                mvarl r7
 1341 e5e2: 57                incr r7
 1342 e5e3: 0e 2d             ldai '-'
 1343 e5e5: 04 ff c4          jsr charout
 1344 e5e8:             
 1345 e5e8:             exe_itoa_pos:
 1346 e5e8: 07 04             pushr r4    ; dividers ptr
 1347 e5ea: 07 05             pushr r5    ; value holder
 1348 e5ec: 1d 00 00          mviw r5,0
 1349 e5ef: 0e 01             ldai 1
 1350 e5f1: 3d                mvarh r5
 1351 e5f2: 07 06             pushr r6    ;
 1352 e5f4: 1c e5 cb          mviw  r4,dividers
 1353 e5f7:             
 1354 e5f7:             exe_itoa_loop:
 1355 e5f7: 44                ldavr r4
 1356 e5f8: 3e                mvarh r6
 1357 e5f9: 54                incr r4
 1358 e5fa: 44                ldavr r4
 1359 e5fb: 36                mvarl r6
 1360 e5fc: 5c                decr r4
 1361 e5fd: 04 ee aa          jsr parse_compare
 1362 e600: 0d ff             ldti 0ffh
 1363 e602: a8 e6 0f          breq exe_itoa_next
 1364 e605: 0e 00             ldai 0
 1365 e607: 3d                mvarh r5
 1366 e608: 04 ee 55          jsr PARSE_SUB16
 1367 e60b: 55                incr r5
 1368 e60c: a0 e5 f7          br exe_itoa_loop
 1369 e60f:             
 1370 e60f:             exe_itoa_next:
 1371 e60f: 2d                mvrha r5
 1372 e610: a2 e6 1c          brnz exe_itoa_notyet
 1373 e613: 25                mvrla r5
 1374 e614: b0 30             addi '0'
 1375 e616: 04 ff c4          JSR charout
 1376 e619: 0e 00             ldai 0
 1377 e61b: 3d                mvarh r5
 1378 e61c:             
 1379 e61c:             exe_itoa_notyet:
 1380 e61c: 0e 00             ldai 0
 1381 e61e: 35                mvarl r5
 1382 e61f: 54                incr r4
 1383 e620: 54                incr r4
 1384 e621: 44                ldavr r4
 1385 e622: a2 e5 f7          brnz exe_itoa_loop
 1386 e625: 54                incr r4
 1387 e626: 44                ldavr r4
 1388 e627: 5c                decr r4
 1389 e628: a2 e5 f7          brnz exe_itoa_loop
 1390 e62b:             
 1391 e62b:             ;      mvrha r5
 1392 e62b:             ;      brz exe_itoa_noones
 1393 e62b: 27                mvrla r7
 1394 e62c: b0 30             addi '0'
 1395 e62e: 04 ff c4          JSR charout
 1396 e631:             exe_itoa_noones:
 1397 e631: 08 60             popr r6
 1398 e633: 08 50             popr r5
 1399 e635: 08 40             popr r4
 1400 e637: 0a                pop
 1401 e638: 05                RET
 1402 e639:             
 1403 e639:             
 1404 e639:             
 1405 e639:             ;
 1406 e639:             ; List out token buffer in human readable form
 1407 e639:             ;
 1408 e639:             ; list out token buffer
 1409 e639:             ; buffer address in r7
 1410 e639:             ;
 1411 e639: 4c 45 54 20 
            00          tokl_let: DB "LET ",0
 1412 e63e: 50 52 49 4e 
            54 20 00    tokl_print: DB "PRINT ",0
 1413 e645: 49 46 20 00 tokl_if: DB "IF ",0
 1414 e649: 54 48 45 4e 
            20 00       tokl_then: DB "THEN ",0
 1415 e64f: 45 4c 53 45 
            20 00       tokl_else: DB "ELSE ",0
 1416 e655: 46 4f 52 20 
            00          tokl_for: DB "FOR ",0
 1417 e65a: 54 4f 20 00 tokl_to: DB "TO ",0
 1418 e65e: 4e 45 58 54 
            20 00       tokl_next: DB "NEXT ",0
 1419 e664: 47 4f 54 4f 
            20 00       tokl_goto: DB "GOTO ",0
 1420 e66a: 47 4f 53 55 
            42 20 00    tokl_gosub: DB "GOSUB ",0
 1421 e671: 52 45 54 55 
            52 4e 20 00 tokl_return: DB "RETURN ",0
 1422 e679: 52 45 4d 20 
            00          tokl_rem: DB "REM ",0
 1423 e67e: 50 45 45 4b 
            20 00       tokl_peek: DB "PEEK ",0
 1424 e684: 50 4f 4b 45 
            20 00       tokl_poke: DB "POKE ",0
 1425 e68a: 45 4e 44 20 
            00          tokl_end: DB "END ",0
 1426 e68f: 43 41 4c 4c 
            20 00       tokl_call: DB "CALL ",0
 1427 e695: 49 4e 50 55 
            54 20 00    tokl_input: DB "INPUT ",0
 1428 e69c: 4c 49 53 54 
            20 45 52 52 
            4f 52 00    tokl_error: DB "LIST ERROR",0
 1429 e6a7:             
 1430 e6a7:             
 1431 e6a7:             basic_list:
 1432 e6a7: 07 03           pushr r3
 1433 e6a9: 0f 37           movrr r7,r3
 1434 e6ab:             
 1435 e6ab:             
 1436 e6ab:             baslist_loop:
 1437 e6ab: 43              ldavr r3
 1438 e6ac:             
 1439 e6ac: 0d 00           LDTI TOKENIZER_ERROR
 1440 e6ae: aa e6 c0        BRNEQ baslist1
 1441 e6b1: 1f e6 9c        MVIW R7,tokl_error
 1442 e6b4: 04 ff c0        JSR stringout
 1443 e6b7: 04 ff cc        JSR showaddr
 1444 e6ba: a0 e9 65        BR baslist_done
 1445 e6bd: a0 e6 ab        BR baslist_loop
 1446 e6c0:             
 1447 e6c0:             baslist1:
 1448 e6c0: 0d 01           LDTI TOKENIZER_EOF
 1449 e6c2: aa e6 cb        BRNEQ baslist2
 1450 e6c5: a0 e9 65        BR baslist_done
 1451 e6c8: a0 e6 ab        BR baslist_loop
 1452 e6cb:             
 1453 e6cb:             baslist2:
 1454 e6cb: 0d 02           LDTI TOKENIZER_NUMBER
 1455 e6cd: aa e6 e2        BRNEQ baslist3
 1456 e6d0: 53              incr r3
 1457 e6d1: 43              ldavr r3
 1458 e6d2: 37              mvarl r7
 1459 e6d3: 53              incr r3
 1460 e6d4: 43              ldavr r3
 1461 e6d5: 3f              mvarh r7
 1462 e6d6: 53              INCR R3
 1463 e6d7:             ;    jsr showr7
 1464 e6d7: 04 e5 d5        jsr exe_itoa
 1465 e6da: 0e 20           ldai ' '
 1466 e6dc: 04 ff c8        jsr uartout
 1467 e6df: a0 e6 ab        BR baslist_loop
 1468 e6e2:             
 1469 e6e2:             baslist3:
 1470 e6e2:             ;
 1471 e6e2:             ; output quotes around string
 1472 e6e2:             ;
 1473 e6e2: 0d 03           LDTI TOKENIZER_STRING
 1474 e6e4: aa e6 fe        BRNEQ baslist4
 1475 e6e7: 53              incr r3
 1476 e6e8: 0f 73           movrr r3,r7
 1477 e6ea: 04 ff c0        jsr stringout
 1478 e6ed: 0e 20           ldai ' '
 1479 e6ef: 04 ff c8        jsr uartout
 1480 e6f2:             
 1481 e6f2:             ;
 1482 e6f2:             ; does r7 point to end of string here?
 1483 e6f2:             ;
 1484 e6f2:             baslist_string:
 1485 e6f2: 43              ldavr r3
 1486 e6f3: a1 e6 fa        brz baslist_stringend
 1487 e6f6: 53              incr r3
 1488 e6f7: a0 e6 f2        br baslist_string
 1489 e6fa:             
 1490 e6fa:             baslist_stringend:
 1491 e6fa: 53              incr r3
 1492 e6fb: a0 e6 ab        BR baslist_loop
 1493 e6fe:             
 1494 e6fe:             baslist4:
 1495 e6fe: 0d 04           LDTI TOKENIZER_VARIABLE
 1496 e700: aa e7 15        BRNEQ baslist5
 1497 e703: 53              incr r3
 1498 e704: 43              ldavr r3
 1499 e705: 0d 41           ldti 'A'
 1500 e707: b8              ADDT
 1501 e708: 53              incr r3
 1502 e709: 53              incr r3
 1503 e70a: 04 ff c8        jsr uartout
 1504 e70d:             
 1505 e70d:             ;    ldavr r3
 1506 e70d:             ;    mvarl r7
 1507 e70d:             ;    incr r3
 1508 e70d:             ;    ldavr r3
 1509 e70d:             ;    mvarh r7
 1510 e70d:             ;    INCR R3
 1511 e70d:             ;    jsr showr7
 1512 e70d:             
 1513 e70d: 0e 20           ldai ' '
 1514 e70f: 04 ff c8        jsr uartout
 1515 e712: a0 e6 ab        BR baslist_loop
 1516 e715:             
 1517 e715:             baslist5:
 1518 e715: 0d 05           LDTI TOKENIZER_LET
 1519 e717: aa e7 24        BRNEQ baslist6
 1520 e71a: 1f e6 39        MVIW R7,tokl_let
 1521 e71d: 04 ff c0        JSR stringout
 1522 e720: 53              INCR R3
 1523 e721: a0 e6 ab        BR baslist_loop
 1524 e724:             
 1525 e724:             baslist6:
 1526 e724: 0d 06           LDTI TOKENIZER_PRINT
 1527 e726: aa e7 33        BRNEQ baslist7
 1528 e729: 1f e6 3e        MVIW R7,tokl_print
 1529 e72c: 04 ff c0        jsr STRINGOUT
 1530 e72f: 53              INCR R3
 1531 e730: a0 e6 ab        BR baslist_loop
 1532 e733:             
 1533 e733:             baslist7:
 1534 e733: 0d 07           LDTI TOKENIZER_IF
 1535 e735: aa e7 42        BRNEQ baslist8
 1536 e738: 1f e6 45        MVIW R7,tokl_if
 1537 e73b: 04 ff c0        JSR stringout
 1538 e73e: 53              INCR R3
 1539 e73f: a0 e6 ab        BR baslist_loop
 1540 e742:             
 1541 e742:             baslist8:
 1542 e742: 0d 08           LDTI TOKENIZER_THEN
 1543 e744: aa e7 51        BRNEQ baslist9
 1544 e747: 1f e6 49        MVIW R7,tokl_then
 1545 e74a: 04 ff c0        JSR stringout
 1546 e74d: 53              INCR R3
 1547 e74e: a0 e6 ab        BR baslist_loop
 1548 e751:             
 1549 e751:             baslist9:
 1550 e751: 0d 09           LDTI TOKENIZER_ELSE
 1551 e753: aa e7 60        BRNEQ baslist10
 1552 e756: 1f e6 4f        MVIW R7,tokl_else
 1553 e759: 04 ff c0        JSR stringout
 1554 e75c: 53              INCR R3
 1555 e75d: a0 e6 ab        BR baslist_loop
 1556 e760:             
 1557 e760:             baslist10:
 1558 e760: 0d 0a           LDTI TOKENIZER_FOR
 1559 e762: aa e7 6f        BRNEQ baslist11
 1560 e765: 1f e6 55        MVIW R7,tokl_for
 1561 e768: 04 ff c0        JSR stringout
 1562 e76b: 53              INCR R3
 1563 e76c: a0 e6 ab        BR baslist_loop
 1564 e76f:             
 1565 e76f:             baslist11:
 1566 e76f: 0d 0b           LDTI TOKENIZER_TO
 1567 e771: aa e7 7e        BRNEQ baslist12
 1568 e774: 1f e6 5a        MVIW R7,tokl_to
 1569 e777: 04 ff c0        JSR stringout
 1570 e77a: 53              INCR R3
 1571 e77b: a0 e6 ab        BR baslist_loop
 1572 e77e:             
 1573 e77e:             baslist12:
 1574 e77e: 0d 0c           LDTI TOKENIZER_NEXT
 1575 e780: aa e7 8d        BRNEQ baslist13
 1576 e783: 1f e6 5e        MVIW R7,tokl_next
 1577 e786: 04 ff c0        JSR stringout
 1578 e789: 53              INCR R3
 1579 e78a: a0 e6 ab        BR baslist_loop
 1580 e78d:             
 1581 e78d:             baslist13:
 1582 e78d: 0d 0d           LDTI TOKENIZER_GOTO
 1583 e78f: aa e7 9c        BRNEQ baslist14
 1584 e792: 1f e6 64        MVIW R7,tokl_goto
 1585 e795: 04 ff c0        JSR stringout
 1586 e798: 53              INCR R3
 1587 e799: a0 e6 ab        BR baslist_loop
 1588 e79c:             
 1589 e79c:             baslist14:
 1590 e79c: 0d 0e           LDTI TOKENIZER_GOSUB
 1591 e79e: aa e7 ab        BRNEQ baslist15
 1592 e7a1: 1f e6 6a        MVIW R7,tokl_gosub
 1593 e7a4: 04 ff c0        JSR stringout
 1594 e7a7: 53              INCR R3
 1595 e7a8: a0 e6 ab        BR baslist_loop
 1596 e7ab:             
 1597 e7ab:             baslist15:
 1598 e7ab: 0d 0f           LDTI TOKENIZER_RETURN
 1599 e7ad: aa e7 ba        BRNEQ baslist16
 1600 e7b0: 1f e6 71        MVIW R7,tokl_return
 1601 e7b3: 04 ff c0        JSR stringout
 1602 e7b6: 53              INCR R3
 1603 e7b7: a0 e6 ab        BR baslist_loop
 1604 e7ba:             
 1605 e7ba:             baslist16:
 1606 e7ba: 0d 10           LDTI TOKENIZER_CALL
 1607 e7bc: aa e7 c9        BRNEQ baslist17
 1608 e7bf: 1f e6 8f        MVIW R7,tokl_call
 1609 e7c2: 04 ff c0        JSR stringout
 1610 e7c5: 53              INCR R3
 1611 e7c6: a0 e6 ab        BR baslist_loop
 1612 e7c9:             
 1613 e7c9:             baslist17:
 1614 e7c9: 0d 11           LDTI TOKENIZER_REM
 1615 e7cb: aa e7 d8        BRNEQ baslist18
 1616 e7ce: 1f e6 79        MVIW R7,tokl_rem
 1617 e7d1: 04 ff c0        JSR stringout
 1618 e7d4: 53              INCR R3
 1619 e7d5: a0 e6 ab        BR baslist_loop
 1620 e7d8:             
 1621 e7d8:             baslist18:
 1622 e7d8: 0d 12           LDTI TOKENIZER_PEEK
 1623 e7da: aa e7 e7        BRNEQ baslist19
 1624 e7dd: 1f e6 7e        MVIW R7,tokl_peek
 1625 e7e0: 04 ff c0        JSR stringout
 1626 e7e3: 53              INCR R3
 1627 e7e4: a0 e6 ab        BR baslist_loop
 1628 e7e7:             
 1629 e7e7:             baslist19:
 1630 e7e7: 0d 13           LDTI TOKENIZER_POKE
 1631 e7e9: aa e7 f6        BRNEQ baslist20
 1632 e7ec: 1f e6 84        MVIW R7,tokl_poke
 1633 e7ef: 04 ff c0        JSR stringout
 1634 e7f2: 53              INCR R3
 1635 e7f3: a0 e6 ab        BR baslist_loop
 1636 e7f6:             
 1637 e7f6:             baslist20:
 1638 e7f6: 0d 14           LDTI TOKENIZER_END
 1639 e7f8: aa e8 05        BRNEQ baslist21
 1640 e7fb: 1f e6 8a        MVIW R7,tokl_end
 1641 e7fe: 04 ff c0        JSR stringout
 1642 e801: 53              INCR R3
 1643 e802: a0 e6 ab        BR baslist_loop
 1644 e805:             
 1645 e805:             baslist21:
 1646 e805: 0d 15           LDTI TOKENIZER_COMMA
 1647 e807: aa e8 18        BRNEQ baslist22
 1648 e80a: 0e 2c           ldai ','
 1649 e80c: 04 ff c8        jsr uartout
 1650 e80f: 0e 20           ldai ' '
 1651 e811: 04 ff c8        jsr uartout
 1652 e814: 53              INCR R3
 1653 e815: a0 e6 ab        BR baslist_loop
 1654 e818:             
 1655 e818:             baslist22:
 1656 e818: 0d 16           LDTI TOKENIZER_SEMICOLON
 1657 e81a: aa e8 2b        BRNEQ baslist23
 1658 e81d: 0e 3b           ldai ';'
 1659 e81f: 04 ff c8        jsr uartout
 1660 e822: 0e 20           ldai ' '
 1661 e824: 04 ff c8        jsr uartout
 1662 e827: 53              INCR R3
 1663 e828: a0 e6 ab        BR baslist_loop
 1664 e82b:             
 1665 e82b:             baslist23:
 1666 e82b: 0d 17           LDTI TOKENIZER_PLUS
 1667 e82d: aa e8 3e        BRNEQ baslist24
 1668 e830: 0e 2b           ldai '+'
 1669 e832: 04 ff c8        jsr uartout
 1670 e835: 0e 20           ldai ' '
 1671 e837: 04 ff c8        jsr uartout
 1672 e83a: 53              INCR R3
 1673 e83b: a0 e6 ab        BR baslist_loop
 1674 e83e:             
 1675 e83e:             baslist24:
 1676 e83e: 0d 18           LDTI TOKENIZER_MINUS
 1677 e840: aa e8 51        BRNEQ baslist25
 1678 e843: 0e 2d           ldai '-'
 1679 e845: 04 ff c8        jsr uartout
 1680 e848: 0e 20           ldai ' '
 1681 e84a: 04 ff c8        jsr uartout
 1682 e84d: 53              INCR R3
 1683 e84e: a0 e6 ab        BR baslist_loop
 1684 e851:             
 1685 e851:             baslist25:
 1686 e851: 0d 19           LDTI TOKENIZER_AND
 1687 e853: aa e8 64        BRNEQ baslist26
 1688 e856: 0e 26           ldai '&'
 1689 e858: 04 ff c8        jsr uartout
 1690 e85b: 0e 20           ldai ' '
 1691 e85d: 04 ff c8        jsr uartout
 1692 e860: 53              INCR R3
 1693 e861: a0 e6 ab        BR baslist_loop
 1694 e864:             
 1695 e864:             baslist26:
 1696 e864: 0d 1a           LDTI TOKENIZER_OR
 1697 e866: aa e8 77        BRNEQ baslist27
 1698 e869: 0e 7c           ldai '|'
 1699 e86b: 04 ff c8        jsr uartout
 1700 e86e: 0e 20           ldai ' '
 1701 e870: 04 ff c8        jsr uartout
 1702 e873: 53              INCR R3
 1703 e874: a0 e6 ab        BR baslist_loop
 1704 e877:             
 1705 e877:             baslist27:
 1706 e877: 0d 1b           LDTI TOKENIZER_ASTR
 1707 e879: aa e8 8a        BRNEQ baslist28
 1708 e87c: 0e 2a           ldai '*'
 1709 e87e: 04 ff c8        jsr uartout
 1710 e881: 0e 20           ldai ' '
 1711 e883: 04 ff c8        jsr uartout
 1712 e886: 53              INCR R3
 1713 e887: a0 e6 ab        BR baslist_loop
 1714 e88a:             
 1715 e88a:             baslist28:
 1716 e88a: 0d 1c           LDTI TOKENIZER_SLASH
 1717 e88c: aa e8 9d        BRNEQ baslist29
 1718 e88f: 0e 2f           ldai '/'
 1719 e891: 04 ff c8        jsr uartout
 1720 e894: 0e 20           ldai ' '
 1721 e896: 04 ff c8        jsr uartout
 1722 e899: 53              INCR R3
 1723 e89a: a0 e6 ab        BR baslist_loop
 1724 e89d:             
 1725 e89d:             baslist29:
 1726 e89d: 0d 1d           LDTI TOKENIZER_MOD
 1727 e89f: aa e8 b0        BRNEQ baslist30
 1728 e8a2: 0e 25           ldai '%'
 1729 e8a4: 04 ff c8        jsr uartout
 1730 e8a7: 0e 20           ldai ' '
 1731 e8a9: 04 ff c8        jsr uartout
 1732 e8ac: 53              INCR R3
 1733 e8ad: a0 e6 ab        BR baslist_loop
 1734 e8b0:             
 1735 e8b0:             baslist30:
 1736 e8b0: 0d 1e           LDTI TOKENIZER_HASH
 1737 e8b2: aa e8 c3        BRNEQ baslist31
 1738 e8b5: 0e 23           ldai '#'
 1739 e8b7: 04 ff c8        jsr uartout
 1740 e8ba: 0e 20           ldai ' '
 1741 e8bc: 04 ff c8        jsr uartout
 1742 e8bf: 53              INCR R3
 1743 e8c0: a0 e6 ab        BR baslist_loop
 1744 e8c3:             
 1745 e8c3:             baslist31:
 1746 e8c3: 0d 1f           LDTI TOKENIZER_LEFTP
 1747 e8c5: aa e8 d6        BRNEQ baslist32
 1748 e8c8: 0e 28           ldai '()'
 1749 e8ca: 04 ff c8        jsr uartout
 1750 e8cd: 0e 20           ldai ' '
 1751 e8cf: 04 ff c8        jsr uartout
 1752 e8d2: 53              INCR R3
 1753 e8d3: a0 e6 ab        BR baslist_loop
 1754 e8d6:             
 1755 e8d6:             baslist32:
 1756 e8d6: 0d 20           LDTI TOKENIZER_RIGHTP
 1757 e8d8: aa e8 e9        BRNEQ baslist33
 1758 e8db: 0e 29           ldai ')'
 1759 e8dd: 04 ff c8        jsr uartout
 1760 e8e0: 0e 20           ldai ' '
 1761 e8e2: 04 ff c8        jsr uartout
 1762 e8e5: 53              INCR R3
 1763 e8e6: a0 e6 ab        BR baslist_loop
 1764 e8e9:             
 1765 e8e9:             baslist33:
 1766 e8e9: 0d 21           LDTI TOKENIZER_LT
 1767 e8eb: aa e8 fc        BRNEQ baslist34
 1768 e8ee: 0e 3c           ldai '<'
 1769 e8f0: 04 ff c8        jsr uartout
 1770 e8f3: 0e 20           ldai ' '
 1771 e8f5: 04 ff c8        jsr uartout
 1772 e8f8: 53              INCR R3
 1773 e8f9: a0 e6 ab        BR baslist_loop
 1774 e8fc:             
 1775 e8fc:             baslist34:
 1776 e8fc: 0d 22           LDTI TOKENIZER_GT
 1777 e8fe: aa e9 0f        BRNEQ baslist35
 1778 e901: 0e 3e           ldai '>'
 1779 e903: 04 ff c8        jsr uartout
 1780 e906: 0e 20           ldai ' '
 1781 e908: 04 ff c8        jsr uartout
 1782 e90b: 53              INCR R3
 1783 e90c: a0 e6 ab        BR baslist_loop
 1784 e90f:             
 1785 e90f:             baslist35:
 1786 e90f: 0d 23           LDTI TOKENIZER_EQ
 1787 e911: aa e9 22        BRNEQ baslist36
 1788 e914: 0e 3d           ldai '='
 1789 e916: 04 ff c8        jsr uartout
 1790 e919: 0e 20           ldai ' '
 1791 e91b: 04 ff c8        jsr uartout
 1792 e91e: 53              INCR R3
 1793 e91f: a0 e6 ab        BR baslist_loop
 1794 e922:             
 1795 e922:             baslist36:
 1796 e922: 0d 24           LDTI TOKENIZER_CR
 1797 e924: aa e9 31        BRNEQ baslist37
 1798 e927: 1f ee f9        mviw R7,CRLF
 1799 e92a: 04 ff c0        jsr stringout
 1800 e92d: 53              INCR R3
 1801 e92e: a0 e6 ab        BR baslist_loop
 1802 e931:             
 1803 e931:             baslist37:
 1804 e931: 0d 25           LDTI TOKENIZER_LINENUM
 1805 e933: aa e9 4a        BRNEQ baslist38
 1806 e936: 53              incr r3
 1807 e937: 43              ldavr r3
 1808 e938: 37              mvarl r7
 1809 e939: 53              incr r3
 1810 e93a: 43              ldavr r3
 1811 e93b: 3f              mvarh r7
 1812 e93c: 53              INCR R3
 1813 e93d: 53              incr r3         ;skip over line length
 1814 e93e: 53              incr r3
 1815 e93f: 04 e5 d5        jsr exe_itoa
 1816 e942:                 ;jsr showr7
 1817 e942: 0e 20           ldai ' '
 1818 e944: 04 ff c8        jsr uartout
 1819 e947: a0 e6 ab        BR baslist_loop
 1820 e94a:             
 1821 e94a:             baslist38:
 1822 e94a: 0d 2a           LDTI TOKENIZER_INPUT
 1823 e94c: aa e9 59        BRNEQ baslist39
 1824 e94f: 1f e6 95        MVIW R7,tokl_input
 1825 e952: 04 ff c0        JSR stringout
 1826 e955: 53              INCR R3
 1827 e956: a0 e6 ab        BR baslist_loop
 1828 e959:             
 1829 e959:             
 1830 e959:             baslist39:
 1831 e959: 1f e6 9c        MVIW R7,tokl_error
 1832 e95c: 04 ff c0        JSR stringout
 1833 e95f: 04 ff cc        JSR showaddr
 1834 e962: a0 e9 65        BR baslist_done
 1835 e965:             ;
 1836 e965:             ; any cleanup
 1837 e965:             ;
 1838 e965:             baslist_done:
 1839 e965: 08 30           popr r3
 1840 e967: 05              ret
 1841 e968:             
 1842 e968:             ;
 1843 e968:             ; BASIC Interpreter Parser
 1844 e968:             ;
 1845 e968:             parse_keywords:
 1846 e968: 4c 45 54 00 
            05                DB "let",0,TOKENIZER_LET
 1847 e96d: 50 52 49 4e 
            54 00 06          DB "print",0,TOKENIZER_PRINT
 1848 e974: 49 46 00 07       DB "if",0,TOKENIZER_IF
 1849 e978: 54 48 45 4e 
            00 08             DB "then",0,TOKENIZER_THEN
 1850 e97e: 45 4c 53 45 
            00 09             DB "else",0,TOKENIZER_ELSE
 1851 e984: 46 4f 52 00 
            0a                DB "for",0,TOKENIZER_FOR
 1852 e989: 54 4f 00 0b       DB "to",0,TOKENIZER_TO
 1853 e98d: 4e 45 58 54 
            00 0c             DB "next",0,TOKENIZER_NEXT
 1854 e993: 47 4f 54 4f 
            00 0d             DB "goto",0,TOKENIZER_GOTO
 1855 e999: 47 4f 53 55 
            42 00 0e          DB "gosub",0,TOKENIZER_GOSUB
 1856 e9a0: 52 45 54 55 
            52 4e 00 0f       DB "return",0,TOKENIZER_RETURN
 1857 e9a8: 43 41 4c 4c 
            00 10             DB "call",0,TOKENIZER_CALL
 1858 e9ae: 52 45 4d 00 
            11                DB "rem",0,TOKENIZER_REM
 1859 e9b3: 50 45 45 4b 
            00 12             DB "peek",0,TOKENIZER_PEEK
 1860 e9b9: 50 4f 4b 45 
            00 13             DB "poke",0,TOKENIZER_POKE
 1861 e9bf: 45 4e 44 00 
            14                DB "end",0,TOKENIZER_END
 1862 e9c4: 4c 49 53 54 
            00 26             DB "list",0,TOKENIZER_LIST
 1863 e9ca: 52 55 4e 00 
            27                DB "run",0,TOKENIZER_RUN
 1864 e9cf: 4e 45 57 00 
            28                DB "new",0,TOKENIZER_NEW
 1865 e9d4: 45 58 49 54 
            00 29             DB "exit",0,TOKENIZER_EXIT
 1866 e9da: 49 4e 50 55 
            54 00 2a          DB "input",0,TOKENIZER_INPUT
 1867 e9e1: 00 00 00          DB 0,0,TOKENIZER_ERROR
 1868 e9e4:             
 1869 e9e4:             ;
 1870 e9e4:             ; int singlechar (void)
 1871 e9e4:             ;
 1872 e9e4:             ; return TOKEN result in accumulator
 1873 e9e4:             ;
 1874 e9e4:             ; ready for testing
 1875 e9e4:             ;
 1876 e9e4:             parse_singlechar:
 1877 e9e4:             ;
 1878 e9e4: 07 03           pushr r3
 1879 e9e6: f3 02 02        LDR r3,bas_txtptr
 1880 e9e9: 43              ldavr r3
 1881 e9ea: 08 30           popr r3
 1882 e9ec:             ;
 1883 e9ec: 0d 0a           ldti 0ah
 1884 e9ee: aa e9 f4        brneq parsechar1
 1885 e9f1: 0e 24           ldai TOKENIZER_CR
 1886 e9f3: 05              ret
 1887 e9f4:             parsechar1:
 1888 e9f4: 0d 2c           ldti ','
 1889 e9f6: aa e9 fc        brneq parsechar2
 1890 e9f9: 0e 15           ldai TOKENIZER_COMMA
 1891 e9fb: 05              ret
 1892 e9fc:             parsechar2:
 1893 e9fc: 0d 3b           ldti ';'
 1894 e9fe: aa ea 04        brneq parsechar3
 1895 ea01: 0e 16           ldai TOKENIZER_SEMICOLON
 1896 ea03: 05              ret
 1897 ea04:             parsechar3:
 1898 ea04: 0d 2b           ldti '+'
 1899 ea06: aa ea 0c        brneq parsechar4
 1900 ea09: 0e 17           ldai TOKENIZER_PLUS
 1901 ea0b: 05              ret
 1902 ea0c:             parsechar4:
 1903 ea0c: 0d 2d           ldti '-'
 1904 ea0e: aa ea 14        brneq parsechar5
 1905 ea11: 0e 18           ldai TOKENIZER_MINUS
 1906 ea13: 05              ret
 1907 ea14:             parsechar5:
 1908 ea14: 0d 26           ldti '&'
 1909 ea16: aa ea 1c        brneq parsechar6
 1910 ea19: 0e 19           ldai TOKENIZER_AND
 1911 ea1b: 05              ret
 1912 ea1c:             parsechar6:
 1913 ea1c: 0d 7c           ldti '|'
 1914 ea1e: aa ea 24        brneq parsechar7
 1915 ea21: 0e 1a           ldai TOKENIZER_OR
 1916 ea23: 05              ret
 1917 ea24:             parsechar7:
 1918 ea24: 0d 2a           ldti '*'
 1919 ea26: aa ea 2c        brneq parsechar7A
 1920 ea29: 0e 1b           ldai TOKENIZER_ASTR
 1921 ea2b: 05              ret
 1922 ea2c:             parsechar7A:
 1923 ea2c: 0d 2f           ldti '/'
 1924 ea2e: aa ea 34        brneq parsechar8
 1925 ea31: 0e 1c           ldai TOKENIZER_SLASH
 1926 ea33: 05              ret
 1927 ea34:             parsechar8:
 1928 ea34: 0d 25           ldti '%'
 1929 ea36: aa ea 3c        brneq parsechar9
 1930 ea39: 0e 1d           ldai TOKENIZER_MOD
 1931 ea3b: 05              ret
 1932 ea3c:             parsechar9:
 1933 ea3c: 0d 28           ldti '('
 1934 ea3e: aa ea 44        brneq parsechar10
 1935 ea41: 0e 1f           ldai TOKENIZER_LEFTP
 1936 ea43: 05              ret
 1937 ea44:             parsechar10:
 1938 ea44: 0d 23           ldti '#'
 1939 ea46: aa ea 4c        brneq parsechar11
 1940 ea49: 0e 1e           ldai TOKENIZER_HASH
 1941 ea4b: 05              ret
 1942 ea4c:             parsechar11:
 1943 ea4c: 0d 29           ldti ')'
 1944 ea4e: aa ea 54        brneq parsechar12
 1945 ea51: 0e 20           ldai TOKENIZER_RIGHTP
 1946 ea53: 05              ret
 1947 ea54:             parsechar12:
 1948 ea54: 0d 3c           ldti '<'
 1949 ea56: aa ea 5c        brneq parsechar13
 1950 ea59: 0e 21           ldai TOKENIZER_LT
 1951 ea5b: 05              ret
 1952 ea5c:             parsechar13:
 1953 ea5c: 0d 3e           ldti '>'
 1954 ea5e: aa ea 64        brneq parsechar14
 1955 ea61: 0e 22           ldai TOKENIZER_GT
 1956 ea63: 05              ret
 1957 ea64:             parsechar14:
 1958 ea64: 0d 3d           ldti '='
 1959 ea66: aa ea 6c        brneq parsechar15
 1960 ea69: 0e 23           ldai TOKENIZER_EQ
 1961 ea6b: 05              ret
 1962 ea6c:             parsechar15:
 1963 ea6c: 0e 00           ldai 0
 1964 ea6e: 05              ret
 1965 ea6f:             
 1966 ea6f:             ;
 1967 ea6f:             ; int get_next_token(void)
 1968 ea6f:             ;
 1969 ea6f:             ; under development fix ptr nextptr
 1970 ea6f:             
 1971 ea6f:             parse_get_next_tok:
 1972 ea6f: 07 03           pushr r3
 1973 ea71: f3 02 02        LDR R3,bas_txtptr
 1974 ea74:             ;
 1975 ea74:             ; is digit
 1976 ea74:             ;
 1977 ea74:             ; chcek for number
 1978 ea74:             ;
 1979 ea74:             parse_gnt1:
 1980 ea74: 43              ldavr r3
 1981 ea75:             ;    ldti '-'
 1982 ea75:             ;    brneq parse_gnt1_chkpos
 1983 ea75:             ;    incr r3
 1984 ea75:             ;    ldavr r3
 1985 ea75:             ;    jsr parse_isdigit
 1986 ea75:             ;    brz parse_gnt1_notneg
 1987 ea75:             ;    br parse_gnt1
 1988 ea75:             
 1989 ea75:             parse_gnt1_chkpos:
 1990 ea75: 04 ee 9a        jsr parse_isdigit
 1991 ea78: a1 ea 8b        brz parse_gnt2
 1992 ea7b:             
 1993 ea7b:             parse_gnt1loop:
 1994 ea7b: 53              incr R3
 1995 ea7c: 43              ldavr r3
 1996 ea7d: 04 ee 9a        jsr parse_isdigit
 1997 ea80: a2 ea 7b        brnz parse_gnt1loop
 1998 ea83: fb 02 04        STR r3,bas_nxtptr
 1999 ea86: 0e 02           ldai TOKENIZER_NUMBER
 2000 ea88: 08 30           popr r3
 2001 ea8a: 05              ret
 2002 ea8b:             
 2003 ea8b:             ;parse_gnt1_notneg:
 2004 ea8b:             ;    decr r3
 2005 ea8b:             
 2006 ea8b:             ;
 2007 ea8b:             ; singlechar
 2008 ea8b:             ;
 2009 ea8b:             parse_gnt2:
 2010 ea8b: 43             ldavr r3
 2011 ea8c: 04 e9 e4       jsr parse_singlechar
 2012 ea8f: a1 ea 99       BRZ parse_gnt3
 2013 ea92: 53             incr r3
 2014 ea93: fb 02 04       STR r3,bas_nxtptr
 2015 ea96: 08 30          popr r3
 2016 ea98: 05             ret
 2017 ea99:             ;
 2018 ea99:             ; quote
 2019 ea99:             ;
 2020 ea99:             parse_gnt3:
 2021 ea99: 43              ldavr R3
 2022 ea9a: 0d 22           ldti '"'
 2023 ea9c: aa ea af        brneq parse_gnt4
 2024 ea9f:             parse_gnt3loop:
 2025 ea9f: 53              incr r3
 2026 eaa0: 43              ldavr R3
 2027 eaa1: 0d 22           ldti '"'
 2028 eaa3: aa ea 9f        brneq parse_gnt3loop
 2029 eaa6: 53              incr r3
 2030 eaa7: fb 02 04        STR r3,bas_nxtptr
 2031 eaaa: 0e 03           ldai TOKENIZER_STRING
 2032 eaac: 08 30           popr r3
 2033 eaae: 05              ret
 2034 eaaf:             ;
 2035 eaaf:             parse_gnt4:
 2036 eaaf:             ;
 2037 eaaf:             ; keyword search
 2038 eaaf:             ;
 2039 eaaf: 07 04           pushr r4
 2040 eab1: 1c e9 68        mviw r4,parse_keywords
 2041 eab4:             top:
 2042 eab4: 44              ldavr r4
 2043 eab5: f3 02 02        LDR r3,bas_txtptr
 2044 eab8: a1 ea dc        brz nokeyowrdsfound
 2045 eabb:             pcmploop:
 2046 eabb: 44              ldavr r4
 2047 eabc: a1 ea d2        brz found
 2048 eabf: 0b              MVAT
 2049 eac0: 43              ldavr r3
 2050 eac1: aa ea c9        brneq skiptoend
 2051 eac4: 54              incr r4
 2052 eac5: 53              incr r3
 2053 eac6: a0 ea bb        br pcmploop
 2054 eac9:             
 2055 eac9:             skiptoend:
 2056 eac9:             ;  skip to end of string and skip over token
 2057 eac9:             skiploop:
 2058 eac9: 44              ldavr r4
 2059 eaca: 54              incr r4
 2060 eacb: a2 ea c9        brnz skiploop
 2061 eace: 54              incr r4
 2062 eacf: a0 ea b4        br top
 2063 ead2:             
 2064 ead2:             found:
 2065 ead2: fb 02 04        str r3,bas_nxtptr
 2066 ead5: 54              incr r4
 2067 ead6: 44              ldavr r4
 2068 ead7: 08 40           popr r4
 2069 ead9: 08 30           popr r3
 2070 eadb: 05              ret
 2071 eadc:             
 2072 eadc:             nokeyowrdsfound:
 2073 eadc: 08 40           popr r4
 2074 eade:             ;
 2075 eade:             ;  check for variables
 2076 eade:             ;
 2077 eade: 43              ldavr r3
 2078 eadf: 0d 41           ldti 'A'
 2079 eae1: a7 ea f2        BRLT parse_gnt_error
 2080 eae4: 0d 5a           ldti 'Z'
 2081 eae6: a9 ea f2        BRGT parse_gnt_error
 2082 eae9: 53              INCR r3
 2083 eaea: fb 02 04        str r3,bas_nxtptr
 2084 eaed: 0e 04           LDAI tokenizer_variable
 2085 eaef: 08 30           popr r3
 2086 eaf1: 05              RET
 2087 eaf2:             
 2088 eaf2:             parse_gnt_error:
 2089 eaf2:             ;    halt
 2090 eaf2: 0e 00           ldai tokenizer_error
 2091 eaf4: 08 30           popr r3
 2092 eaf6: 05              ret
 2093 eaf7:             
 2094 eaf7:             ;
 2095 eaf7:             ; void TOKENIZER_GOTO (char * program)
 2096 eaf7:             ;
 2097 eaf7:             ; under development, may not be needed
 2098 eaf7:             ;
 2099 eaf7:             ;parse_goto:
 2100 eaf7:             ;    str r3,bas_txtptr
 2101 eaf7:             ;    jsr parse_get_next_tok
 2102 eaf7:             ;    sta bas_currenttoken
 2103 eaf7:             ;    ret
 2104 eaf7:             
 2105 eaf7:             ;
 2106 eaf7:             ; void tokenizer_init(int ptr)
 2107 eaf7:             ;
 2108 eaf7:             ; paramater ptr : R7 Points to text input line
 2109 eaf7:             ;
 2110 eaf7:             ; under development
 2111 eaf7:             ;
 2112 eaf7:             parse_init:
 2113 eaf7:             
 2114 eaf7: 07 03           pushr r3
 2115 eaf9: ff 02 02        STR R7,bas_txtptr
 2116 eafc: 1b 04 00        MVIW r3,parse_token_buffer
 2117 eaff: fb 02 06        STR  R3,bas_tokptr
 2118 eb02: 1b 00 00        mviw r3,0
 2119 eb05: fb 02 08        str r3,bas_tokcounter
 2120 eb08: 04 ea 6f        jsr parse_get_next_tok
 2121 eb0b: ed 02 0a        sta bas_currenttoken
 2122 eb0e: 08 30           popr r3
 2123 eb10: 05              ret
 2124 eb11:             
 2125 eb11:             ;
 2126 eb11:             ; int tokenizer_token(void)
 2127 eb11:             :
 2128 eb11:             parse_token:
 2129 eb11: ec 02 0a        lda bas_currenttoken
 2130 eb14: 05              ret
 2131 eb15:             
 2132 eb15:             ;
 2133 eb15:             ; void tokenizer_next(void) parser version
 2134 eb15:             ;
 2135 eb15:             parse_next:
 2136 eb15: 04 eb cf        jsr parse_finished
 2137 eb18: a1 eb 1c        brz parse_next1
 2138 eb1b: 05              ret
 2139 eb1c:             
 2140 eb1c:             parse_next1:
 2141 eb1c: 07 03           pushr r3
 2142 eb1e: f3 02 04        ldr r3,bas_nxtptr
 2143 eb21: fb 02 02        str r3,bas_txtptr
 2144 eb24:             
 2145 eb24:             parse_next1loop:
 2146 eb24: 43              ldavr r3
 2147 eb25: 0d 20           ldti ' '
 2148 eb27: aa eb 2e        brneq parse_next2
 2149 eb2a: 53              incr r3
 2150 eb2b: a0 eb 24        br parse_next1loop
 2151 eb2e:             
 2152 eb2e:             
 2153 eb2e:             parse_next2:
 2154 eb2e: fb 02 02        str r3,bas_txtptr
 2155 eb31: 04 ea 6f        jsr parse_get_next_tok
 2156 eb34: ed 02 0a        sta bas_currenttoken
 2157 eb37:             
 2158 eb37: 0d 11           ldti TOKENIZER_REM
 2159 eb39: a8 eb 3f        breq parse_next3
 2160 eb3c: 08 30           popr r3
 2161 eb3e: 05              ret
 2162 eb3f:             
 2163 eb3f:             ;
 2164 eb3f:             ; this needs to be fixed
 2165 eb3f:             ; if rem return to parsel line then copy into token buffer
 2166 eb3f:             ;
 2167 eb3f:             parse_next3:
 2168 eb3f: 04 eb cf        JSR parse_finished
 2169 eb42: a2 eb 4f        BRNZ parse_nextdone
 2170 eb45: 43              ldavr r3
 2171 eb46: 0d 0a           ldti  0ah
 2172 eb48: a8 eb 4f        breq parse_nextdone
 2173 eb4b: 53              incr r3
 2174 eb4c: a0 eb 3f        br parse_next3
 2175 eb4f:             
 2176 eb4f:             parse_nextdone:
 2177 eb4f: 43              ldavr r3
 2178 eb50: 0d 0a           ldti  0ah
 2179 eb52: aa eb 56        brneq parse_nextdone2
 2180 eb55: 53              incr r3
 2181 eb56:             
 2182 eb56:             parse_nextdone2:
 2183 eb56: fb 02 04        str r3,bas_nxtptr
 2184 eb59: 04 eb 15        jsr parse_next
 2185 eb5c: 08 30           popr r3
 2186 eb5e: 05              ret
 2187 eb5f:             
 2188 eb5f:             ;
 2189 eb5f:             ; VARIABLE_TYPE tokenizer_num(void)
 2190 eb5f:             ;
 2191 eb5f:             ; Hack for now input characters are ascii hex format HHHH
 2192 eb5f:             ;
 2193 eb5f:             ; value returned in R7
 2194 eb5f:             ;
 2195 eb5f:             ; Should this advance the line ptr?
 2196 eb5f:             ;
 2197 eb5f:             
 2198 eb5f:             parse_num:
 2199 eb5f: 07 03           pushr r3
 2200 eb61: 07 04           pushr r4
 2201 eb63: 07 05           pushr r5
 2202 eb65: 07 06           pushr r6
 2203 eb67: 1e 00 00        mviw r6,0           ;accumlate val in r6
 2204 eb6a: f3 02 02        LDR r3,bas_txtptr
 2205 eb6d: 1c 00 00        MVIW R4,0000h
 2206 eb70:             ;    STR R4,bas_negflag
 2207 eb70: 43              LDAVR R3
 2208 eb71:             ;  ldti '-'
 2209 eb71:             ;    brneq parse_num_pos
 2210 eb71:             ;    MVIW R4,0ffffh
 2211 eb71:             ;    STR R4,bas_negflag
 2212 eb71:             ;    incr r3
 2213 eb71:             
 2214 eb71:             parse_num_pos:
 2215 eb71: 04 eb 9f        jsr parse_num_char
 2216 eb74:             ;   jsr SHOWBYTEA
 2217 eb74: 36              mvarl r6
 2218 eb75:             parse_num_loop:
 2219 eb75: 04 eb 9f        jsr parse_num_char
 2220 eb78:             ;   jsr showbytea
 2221 eb78: 09              push
 2222 eb79: 0d ff           ldti 0FFH
 2223 eb7b: a8 eb 93        breq parse_num_done
 2224 eb7e:             
 2225 eb7e: 0f 56           movrr r6,r5
 2226 eb80: 1c 00 0a        mviw r4,0ah
 2227 eb83: 04 ee 0c        jsr parse_mul16
 2228 eb86:             ;    jsr showr7
 2229 eb86: 0a              pop
 2230 eb87: 1e 00 00        mviw r6,0
 2231 eb8a: 36              mvarl r6
 2232 eb8b: 04 ee 47        jsr parse_add16
 2233 eb8e: 0f 67           movrr r7,r6
 2234 eb90:             ;    jsr showr7
 2235 eb90: a0 eb 75        br parse_num_loop
 2236 eb93:             
 2237 eb93:             parse_num_done:
 2238 eb93: 0a              pop
 2239 eb94: 0f 76           movrr r6,r7
 2240 eb96:             ;    ldr r4,bas_negflag
 2241 eb96:             ;    mvrla r4
 2242 eb96:             ;    brz parse_num_done1
 2243 eb96:             ;    jsr parse_neg
 2244 eb96:             parse_num_done1:
 2245 eb96: 08 60           popr r6
 2246 eb98: 08 50           popr r5
 2247 eb9a: 08 40           popr r4
 2248 eb9c: 08 30           popr r3
 2249 eb9e:             
 2250 eb9e:             ;    jsr showr7
 2251 eb9e: 05              ret
 2252 eb9f:             
 2253 eb9f:             parse_num_char:
 2254 eb9f: 43              LDAVR R3
 2255 eba0: 04 ee 9a        JSR parse_isdigit
 2256 eba3: a2 eb a9        BRNZ parse_num_char1
 2257 eba6: 0e ff           ldai 0ffh
 2258 eba8: 05              ret
 2259 eba9:             parse_num_char1:
 2260 eba9: 43              ldavr r3
 2261 ebaa: b1 30           SUBI '0'
 2262 ebac: 53              incr r3
 2263 ebad: 05              RET
 2264 ebae:             
 2265 ebae:             ;
 2266 ebae:             ; add error checking
 2267 ebae:             ;
 2268 ebae:             ; return hex nibble in accumulator
 2269 ebae:             ;
 2270 ebae:             parse_getnibble:
 2271 ebae: 43                LDAVR R3
 2272 ebaf: 53                incr r3
 2273 ebb0: 0d 39             LDTI '9'
 2274 ebb2: a9 eb b8          BRGT parse_af
 2275 ebb5: b1 30             SUBI '0'
 2276 ebb7: 05                RET
 2277 ebb8:             parse_af:
 2278 ebb8: 04 ff d0          JSR toupper
 2279 ebbb: b1 41             SUBI 'A'
 2280 ebbd: b0 0a             ADDI 10
 2281 ebbf: 05                RET
 2282 ebc0:             ;
 2283 ebc0:             ; void tokenizer_string(char *dest, int len)
 2284 ebc0:             ;
 2285 ebc0:             ; not used, in line parse_line
 2286 ebc0:             ;
 2287 ebc0:             parse_string:
 2288 ebc0: 04 eb 11        JSR parse_token
 2289 ebc3: 0d 03           LDTI TOKENIZER_STRING
 2290 ebc5: a8 eb c9        BREQ parse_string1
 2291 ebc8: 05              ret
 2292 ebc9:             
 2293 ebc9:             parse_string1:
 2294 ebc9: 07 03           pushr r3
 2295 ebcb: f3 02 02        LDR r3,bas_txtptr
 2296 ebce: 43              LDAVR R3
 2297 ebcf:             
 2298 ebcf:             
 2299 ebcf:             ;
 2300 ebcf:             ; void tokenizer_error_print(void)
 2301 ebcf:             ;
 2302 ebcf:             ; fix
 2303 ebcf:             ;
 2304 ebcf:             ;parse_error_print:
 2305 ebcf:             ;    halt
 2306 ebcf:             
 2307 ebcf:             ;
 2308 ebcf:             ; int tokenizer_finished(void)
 2309 ebcf:             ;
 2310 ebcf:             parse_finished:
 2311 ebcf: 07 03           pushr r3
 2312 ebd1: f3 02 02        LDR r3,bas_txtptr
 2313 ebd4: 43              ldavr r3
 2314 ebd5: a1 eb ea        brz parse_finished_yes
 2315 ebd8:             ;    ldti 0ah
 2316 ebd8:             ;    breq parse_finished_yes
 2317 ebd8:             ;    ldti 0dh
 2318 ebd8:             ;    breq parse_finished_yes
 2319 ebd8: 0d 01           ldti TOKENIZER_EOF
 2320 ebda: a8 eb ea        breq parse_finished_yes
 2321 ebdd: ec 02 0a        lda bas_currenttoken
 2322 ebe0: 0d 01           ldti TOKENIZER_EOF
 2323 ebe2: a8 eb ea        breq parse_finished_yes
 2324 ebe5: 08 30           popr r3
 2325 ebe7: 0e 00           ldai 0
 2326 ebe9: 05              ret
 2327 ebea:             parse_finished_yes:
 2328 ebea: 0e 01           ldai 1
 2329 ebec: 08 30           popr r3
 2330 ebee: 05              ret
 2331 ebef:             
 2332 ebef:             ;
 2333 ebef:             ; int tokenizer_variable_num(void)
 2334 ebef:             ;
 2335 ebef:             parse_variable_num:
 2336 ebef: 07 03             pushr r3
 2337 ebf1: f3 02 02          LDR r3,bas_txtptr
 2338 ebf4: 43                ldavr r3
 2339 ebf5: b1 41             subi 'A'
 2340 ebf7: 37                mvarl r7
 2341 ebf8: 0e 00             ldai 0
 2342 ebfa: 3f                mvarh r7
 2343 ebfb: 08 30             popr r3
 2344 ebfd: 05                ret
 2345 ebfe:             
 2346 ebfe:             ;
 2347 ebfe:             ; char *const tokenizer_pos(void)
 2348 ebfe:             ;
 2349 ebfe:             ; probably not used
 2350 ebfe:             parse_pos:
 2351 ebfe:             
 2352 ebfe:             ;not used old
 2353 ebfe:             ; char *tokenize(char *program)
 2354 ebfe:             ;
 2355 ebfe:             ; parse:
 2356 ebfe:             
 2357 ebfe:             ;
 2358 ebfe:             ; char *tokenizeLine(char *line)
 2359 ebfe:             ;
 2360 ebfe:             ; assume input text string in parse_input_line
 2361 ebfe:             ;
 2362 ebfe:             
 2363 ebfe:             parse_line:
 2364 ebfe: 04 ea f7        JSR PARSE_INIT
 2365 ec01:             
 2366 ec01: 1b 00 06        MVIW R3,6              ;all lines have a 6 bytes including EOL token
 2367 ec04: fb 02 08        str r3,bas_tokcounter
 2368 ec07: 1b 04 00        MVIW R3,parse_token_buffer
 2369 ec0a:             
 2370 ec0a: 07 03           pushr r3
 2371 ec0c: f3 02 02        LDR r3,bas_txtptr
 2372 ec0f: 43              ldavr r3
 2373 ec10: 04 ee 9a        jsr parse_isdigit
 2374 ec13: 08 30           popr r3
 2375 ec15: 0d 01           ldti 1
 2376 ec17: a8 ec 5e        breq parse_code
 2377 ec1a: 04 ea 6f        jsr parse_get_next_tok
 2378 ec1d:             
 2379 ec1d:             parse_line_list:
 2380 ec1d: 0d 26           ldti tokenizer_list
 2381 ec1f: aa ec 2b        brneq parse_line_exit
 2382 ec22: f7 02 0c        ldr r7,bas_tokenbuffer
 2383 ec25: 04 e6 a7        JSR  basic_list
 2384 ec28: 0e 00           ldai 0
 2385 ec2a: 05              RET
 2386 ec2b:             
 2387 ec2b:             parse_line_exit:
 2388 ec2b: 0d 29           ldti TOKENIZER_EXIT
 2389 ec2d: aa ec 36        brneq parse_line_run
 2390 ec30: 04 e5 4f        jsr basic_run
 2391 ec33: 0e 01           ldai 1
 2392 ec35: 05              RET
 2393 ec36:             
 2394 ec36:             parse_line_run:
 2395 ec36: 0d 27           ldti TOKENIZER_RUN
 2396 ec38: aa ec 41        brneq parse_line_new
 2397 ec3b: 04 e5 4f        jsr basic_run
 2398 ec3e: 0e 00           ldai 0
 2399 ec40: 05              RET
 2400 ec41:             
 2401 ec41:             parse_line_new:
 2402 ec41: 0d 28           ldti TOKENIZER_NEW
 2403 ec43: aa ec 4f        brneq parse_line_error
 2404 ec46: 1f 10 00        MVIW R7,bas_tok_buf_start
 2405 ec49: 0e 01           ldai TOKENIZER_EOF          ;write EOF to start of buffer
 2406 ec4b: 4f              stavr r7
 2407 ec4c: 0e 00           ldai 0
 2408 ec4e: 05              RET
 2409 ec4f:             
 2410 ec4f:             parse_line_error:
 2411 ec4f: 1f e0 f5        mviw r7,parse_cmd_error
 2412 ec52: 04 ff c0        jsr stringout
 2413 ec55: 1f ee f9        mviw r7,CRLF
 2414 ec58: 04 ff c0        jsr stringout
 2415 ec5b: 0e 00           ldai 0
 2416 ec5d: 05              ret
 2417 ec5e:             
 2418 ec5e:             parse_code:
 2419 ec5e: 0e 25           LDAI TOKENIZER_LINENUM ;start with linenum token
 2420 ec60: 4b              STAVR R3
 2421 ec61: 53              INCR R3
 2422 ec62:             
 2423 ec62: 04 eb 5f        JSR parse_num           ;store line number
 2424 ec65: ff 02 10        str r7,bas_newlinenum
 2425 ec68: 27              mvrla r7
 2426 ec69: 4b              stavr r3
 2427 ec6a: 53              incr r3
 2428 ec6b: 2f              mvrha r7
 2429 ec6c: 4b              stavr r3
 2430 ec6d: 53              incr r3
 2431 ec6e:             
 2432 ec6e: 53              incr r3                ; skip over line length - fill in later
 2433 ec6f: 53              incr r3
 2434 ec70:             
 2435 ec70:             parse_line_loop:
 2436 ec70: 04 eb 15        JSR parse_next
 2437 ec73: 04 eb 11        JSR parse_token
 2438 ec76: 0d 24           ldti TOKENIZER_CR
 2439 ec78: a8 ec e7        BREQ parse_line_done
 2440 ec7b:             
 2441 ec7b: 4b              STAVR R3
 2442 ec7c: 53              INCR R3
 2443 ec7d: f5 02 08        ldr r5,bas_tokcounter
 2444 ec80: 55              incr r5
 2445 ec81: fd 02 08        str r5,bas_tokcounter
 2446 ec84:             
 2447 ec84: 0d 02           ldti TOKENIZER_NUMBER
 2448 ec86: aa ec 9d        BRNEQ parse_line1
 2449 ec89: 04 eb 5f        JSR parse_num
 2450 ec8c: 27              mvrla r7
 2451 ec8d: 4b              stavr r3
 2452 ec8e: 53              incr r3
 2453 ec8f: 2f              mvrha r7
 2454 ec90: 4b              stavr r3
 2455 ec91: 53              incr r3
 2456 ec92: f5 02 08        ldr r5,bas_tokcounter
 2457 ec95: 55              incr r5
 2458 ec96: 55              incr r5
 2459 ec97: fd 02 08        str r5,bas_tokcounter
 2460 ec9a: a0 ec 70        BR parse_line_loop
 2461 ec9d:             
 2462 ec9d:             parse_line1:
 2463 ec9d: 0d 03           ldti TOKENIZER_STRING
 2464 ec9f: aa ec ce        BRNEQ parse_line2
 2465 eca2: f4 02 02        ldr r4,bas_txtptr
 2466 eca5: 54              incr r4                   ;skip over opening "
 2467 eca6:             
 2468 eca6:             parse_line1loop:
 2469 eca6: 44              ldavr r4
 2470 eca7: 0d 22           ldti '"'
 2471 eca9: a8 ec b9        breq parse_line1done
 2472 ecac: 4b              stavr r3
 2473 ecad: 53              incr r3
 2474 ecae: 54              incr r4
 2475 ecaf: f5 02 08        ldr r5,bas_tokcounter
 2476 ecb2: 55              incr r5
 2477 ecb3: fd 02 08        str r5,bas_tokcounter
 2478 ecb6: a0 ec a6        BR parse_line1loop
 2479 ecb9:             parse_line1done:
 2480 ecb9: 54              incr r4                   ;skip over closing "
 2481 ecba: 0e 00           ldai 0                    ;add null into token buffer
 2482 ecbc: 4b              stavr R3
 2483 ecbd: 53              incr r3
 2484 ecbe: f5 02 08        ldr r5,bas_tokcounter
 2485 ecc1: 55              incr r5
 2486 ecc2: fd 02 08        str r5,bas_tokcounter
 2487 ecc5: fb 02 06        str r3,BAS_TOKPTR
 2488 ecc8: fc 02 02        str r4,bas_txtptr
 2489 eccb: a0 ec 70        BR parse_line_loop
 2490 ecce:             
 2491 ecce:             parse_line2:
 2492 ecce: 0d 04           ldti TOKENIZER_VARIABLE
 2493 ecd0: aa ec 70        BRNEQ parse_line_loop
 2494 ecd3: 04 eb ef        JSR parse_variable_num
 2495 ecd6: 27              mvrla r7
 2496 ecd7: 4b              stavr r3
 2497 ecd8: 53              incr r3
 2498 ecd9: 2f              mvrha r7
 2499 ecda: 4b              stavr r3
 2500 ecdb: 53              incr r3
 2501 ecdc: f5 02 08        ldr r5,bas_tokcounter
 2502 ecdf: 55              incr r5
 2503 ece0: 55              incr r5
 2504 ece1: fd 02 08        str r5,bas_tokcounter
 2505 ece4: a0 ec 70        BR parse_line_loop
 2506 ece7:             
 2507 ece7:             parse_line_done:
 2508 ece7: 0e 24           ldai TOKENIZER_CR           ;tack CR to end of buffer
 2509 ece9: 4b              STAVR R3
 2510 ecea: 53              INCR R3
 2511 eceb:             ;    ldr r5,bas_tokcounter
 2512 eceb:             ;    incr r5
 2513 eceb:             ;    str r5,bas_tokcounter
 2514 eceb:             
 2515 eceb: 1b 04 00        mviw r3,parse_token_buffer ; write length into token buffer
 2516 ecee: 53              incr r3
 2517 ecef: 53              incr r3
 2518 ecf0: 53              incr r3
 2519 ecf1: f7 02 08        ldr r7,bas_tokcounter
 2520 ecf4: ff 02 12        str r7,bas_newlinelen
 2521 ecf7: 27              mvrla r7
 2522 ecf8: 4b              stavr r3
 2523 ecf9: 53              incr r3
 2524 ecfa: 2f              mvrha r7
 2525 ecfb: 4b              stavr r3
 2526 ecfc:             
 2527 ecfc:             ;
 2528 ecfc:             ; void addLine(char *buff)
 2529 ecfc:             ; since addline is only called from parse_tokenizeline where are these
 2530 ecfc:             ; values are know, pass them in or
 2531 ecfc:             ; maybe merge addLine to bottom of parse_tokenizeline
 2532 ecfc:             ;
 2533 ecfc:             ; r7 points to line to insert
 2534 ecfc:             ; r6 linenumber
 2535 ecfc:             ; r5 linelength
 2536 ecfc:             ;
 2537 ecfc:             parse_addline:
 2538 ecfc: f7 02 10          ldr r7,BAS_NEWLINENUM
 2539 ecff: 04 ed 68          JSR parse_removeline      ; if line number already exists delete it
 2540 ed02: f7 02 12          ldr r7,bas_newlinelen     ; if new line is 6 bytes line just delete nothing to add
 2541 ed05: 27                mvrla r7
 2542 ed06: 0d 06             ldti 6
 2543 ed08: aa ed 0e          brneq parse_addline1
 2544 ed0b: 0e 00             ldai 0
 2545 ed0d: 05                ret
 2546 ed0e:             
 2547 ed0e:             parse_addline1:                 ;find insert location
 2548 ed0e: f7 02 10          ldr r7,BAS_NEWLINENUM
 2549 ed11: f3 02 0c          ldr r3,bas_tokenBuffer
 2550 ed14:             
 2551 ed14:             parse_addlineloop:
 2552 ed14: fb 02 14          str r3,bas_insertptr
 2553 ed17: 43                ldavr r3
 2554 ed18: 0d 01             ldti TOKENIZER_EOF
 2555 ed1a: a8 ed 3d          BREQ parse_addroom
 2556 ed1d: 53                incr r3                   ;get line number of line in token buffer into r6
 2557 ed1e: 43                ldavr r3
 2558 ed1f: 36                mvarl r6
 2559 ed20: 53                incr r3
 2560 ed21: 43                ldavr r3
 2561 ed22: 3e                mvarh r6
 2562 ed23: 04 ee aa          jsr parse_compare
 2563 ed26: 0d ff             ldti 0ffh
 2564 ed28: a8 ed 3d          breq parse_addroom
 2565 ed2b:             
 2566 ed2b: 53                incr r3                   ;get line length
 2567 ed2c: 43                ldavr r3
 2568 ed2d: 1e 00 00          mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2569 ed30: 36                mvarl r6
 2570 ed31: 5e                decr r6                   ;account for 3 bytes of linenum token and linenum
 2571 ed32: 5e                decr r6
 2572 ed33: 5e                decr r6
 2573 ed34:             
 2574 ed34:             addline_moveptr:              ; advance pointer to next line
 2575 ed34: 53                incr r3
 2576 ed35: 5e                decr r6
 2577 ed36: 26                mvrla r6
 2578 ed37: a2 ed 34          brnz addline_moveptr
 2579 ed3a: a0 ed 14          br parse_addlineloop
 2580 ed3d:             
 2581 ed3d:             
 2582 ed3d:             parse_addroom:               ; make room
 2583 ed3d: 1f 20 00          mviw r7,BAS_TOK_BUF_END
 2584 ed40:             ;      decr r7
 2585 ed40: f6 02 12          ldr  r6,BAS_NEWLINELEN
 2586 ed43: 04 ee 55          jsr parse_sub16
 2587 ed46: 1d 20 00          mviw r5,BAS_TOK_BUF_END
 2588 ed49:             ;      decr r5
 2589 ed49:             
 2590 ed49:             parse_roomloop:
 2591 ed49: 5f                decr r7
 2592 ed4a: 5d                decr r5
 2593 ed4b: 47                ldavr r7
 2594 ed4c: 4d                stavr r5
 2595 ed4d:             
 2596 ed4d: f6 02 14          ldr r6,bas_insertptr
 2597 ed50: 04 ee aa          jsr PARSE_COMPARE
 2598 ed53: a2 ed 49          brnz parse_roomloop
 2599 ed56:             
 2600 ed56: f7 02 14          ldr r7,bas_insertptr
 2601 ed59: 1e 04 00          MVIW R6,parse_token_buffer
 2602 ed5c:             
 2603 ed5c:             parse_insertloop:
 2604 ed5c: 46                ldavr r6
 2605 ed5d: 4f                stavr r7
 2606 ed5e: 56                incr r6
 2607 ed5f: 57                incr r7
 2608 ed60: 0d 24             ldti 024h ; sub in actual eol token here
 2609 ed62: aa ed 5c          brneq parse_insertloop
 2610 ed65: 0e 00             ldai 0
 2611 ed67: 05                ret
 2612 ed68:             
 2613 ed68:             ;
 2614 ed68:             ; void removeLine(int lineNum)
 2615 ed68:             ;
 2616 ed68:             parse_removeline:
 2617 ed68: 04 ed 90        JSR basu_find
 2618 ed6b: 2f              mvrha R7
 2619 ed6c: a2 ed 74        brnz parse_removeline1
 2620 ed6f: 27              mvrla R7
 2621 ed70: a2 ed 74        brnz parse_removeline1
 2622 ed73: 05              ret
 2623 ed74:             parse_removeline1:
 2624 ed74: 0f 57           movrr R7,R5     ; R5 = destination ptr
 2625 ed76: 57              incr r7
 2626 ed77: 57              incr r7
 2627 ed78: 57              incr r7
 2628 ed79: 47              ldavr r7
 2629 ed7a: 36              mvarl r6        ; R6 = remove length
 2630 ed7b: 57              incr r7
 2631 ed7c: 47              ldavr r7
 2632 ed7d: 3e              mvarh r6
 2633 ed7e:             
 2634 ed7e: 5f              decr r7         ;backup to start of line
 2635 ed7f: 5f              decr r7
 2636 ed80: 5f              decr r7
 2637 ed81: 5f              decr r7
 2638 ed82: 04 ee 47        JSR parse_add16
 2639 ed85:             parse_removeloop:
 2640 ed85: 47              ldavr r7
 2641 ed86: 4d              stavr r5
 2642 ed87: 55              incr r5
 2643 ed88: 57              incr r7
 2644 ed89: 2f              MVRHA r7
 2645 ed8a:             
 2646 ed8a: ee 02 0e        ldt  bas_bufferendhi
 2647 ed8d:             
 2648 ed8d: aa ed 85        brneq parse_removeloop
 2649 ed90:             ;
 2650 ed90:             ; no need to explicitly set TOKENIZER_ENDOFINPUT should have been copied
 2651 ed90:             ; since we are moving complete contents of buffer
 2652 ed90:             ; Make sure it is set during addline
 2653 ed90:             ;
 2654 ed90:             
 2655 ed90:             
 2656 ed90:             ; run & parse utilites
 2657 ed90:             ;
 2658 ed90:             
 2659 ed90:             ;
 2660 ed90:             ; find in the token buffer linenum in r7
 2661 ed90:             ;
 2662 ed90:             basu_find:
 2663 ed90: 07 05           pushr r5                  ; save r5
 2664 ed92: f5 02 0c        LDR  r5,bas_tokenBuffer   ; r5 ptr to token buffer
 2665 ed95:             
 2666 ed95:             basu_find_loop:
 2667 ed95: 45              ldavr r5                  ;get token
 2668 ed96: 0d 01           ldti TOKENIZER_EOF        ;EOF
 2669 ed98: aa ed a2        brneq basu_find_loop1     ;no continue
 2670 ed9b: 1f 00 00        mviw r7,0                 ;return 0 in r7 and 0 in accumulator (why?)
 2671 ed9e: 27              mvrla r7
 2672 ed9f: 08 50           popr r5
 2673 eda1: 05              ret
 2674 eda2:             
 2675 eda2:             basu_find_loop1:
 2676 eda2: 55              incr r5                   ;skip past linenum token
 2677 eda3: 27              mvrla r7                  ;test low byte of linenum
 2678 eda4: 0b              MVAT
 2679 eda5: 45              ldavr r5
 2680 eda6: aa ed b9        brneq basu_find1          ;not eqaul
 2681 eda9: 55              incr r5
 2682 edaa: 2f              mvrha r7                  ;test high byte of linenum
 2683 edab: 0b              MVAT
 2684 edac: 45              ldavr r5
 2685 edad: aa ed ba        brneq basu_find2          ;not equal
 2686 edb0: 5d              decr r5                   ;if equal backup to linenum token
 2687 edb1: 5d              decr r5
 2688 edb2: 0f 75           movrr r5,r7               ;set r7 to point to start of line
 2689 edb4: 0e 01           ldai 1                    ;return 1 in accumulator
 2690 edb6: 08 50           popr r5
 2691 edb8: 05              ret
 2692 edb9:             
 2693 edb9:             basu_find1:
 2694 edb9: 55              incr r5                   ;skip over linenum high byte
 2695 edba:             basu_find2:
 2696 edba: 55              incr r5                   ;get line length
 2697 edbb: 45              ldavr r5
 2698 edbc: 1e 00 00        mviw r6,0                 ;set r6 to length - assumes < 256 bytes
 2699 edbf: 36              mvarl r6
 2700 edc0: 5e              decr r6                   ;account for 3 bytes of linenum token and linenum
 2701 edc1: 5e              decr r6
 2702 edc2: 5e              decr r6
 2703 edc3:             basu_find_moveptr:            ; advance pointer to next line
 2704 edc3: 55              incr r5
 2705 edc4: 5e              decr r6
 2706 edc5: 26              mvrla r6
 2707 edc6: a2 ed c3        brnz basu_find_moveptr
 2708 edc9: a0 ed 95        br basu_find_loop
 2709 edcc:             
 2710 edcc:             ;
 2711 edcc:             ; Divide r5 by r4 return answer in r7
 2712 edcc:             ;
 2713 edcc:             ; return result in r7
 2714 edcc:             ;
 2715 edcc:             parse_div16:
 2716 edcc: 07 06             pushr r6
 2717 edce: 0f 75             movrr r5,r7
 2718 edd0: 0f 64             movrr r4,r6
 2719 edd2: 1c 00 00          mviw r4,0
 2720 edd5:             ;
 2721 edd5:             ; 16 bit SUB of r6 from r7, return result in r7
 2722 edd5:             ;
 2723 edd5:             ; r7=r6 00
 2724 edd5:             ; r7>r6 01
 2725 edd5:             ; r7<r6 ff
 2726 edd5:             ;
 2727 edd5:             divloop:
 2728 edd5: 04 ee aa        jsr parse_compare
 2729 edd8: 0d ff           ldti 0FFH
 2730 edda: a8 ed e8        breq div_done
 2731 eddd: 07 06           pushr r6
 2732 eddf: 04 ee 55        jsr parse_sub16
 2733 ede2: 08 60           popr r6
 2734 ede4: 54              incr r4
 2735 ede5: a0 ed d5        br divloop
 2736 ede8:             div_done:
 2737 ede8: 08 60           popr r6
 2738 edea: 0f 74           MOVRR r4,r7
 2739 edec: 05              ret
 2740 eded:             
 2741 eded:             ;
 2742 eded:             ; mod r5 by r4 return answer in r7
 2743 eded:             ;
 2744 eded:             ; return result in r7
 2745 eded:             ;
 2746 eded:             parse_mod16:
 2747 eded: 07 06             pushr r6
 2748 edef: 0f 75             movrr r5,r7
 2749 edf1: 0f 64             movrr r4,r6
 2750 edf3: 1c 00 00          mviw r4,0
 2751 edf6:             ;
 2752 edf6:             ; 16 bit SUB of r6 from r7, return result in r7
 2753 edf6:             ;
 2754 edf6:             modloop:
 2755 edf6: 04 ee aa        jsr parse_compare
 2756 edf9: 0d ff           ldti 0FFH
 2757 edfb: a8 ee 09        breq mod_done
 2758 edfe: 07 06           pushr r6
 2759 ee00: 04 ee 55        jsr parse_sub16
 2760 ee03: 08 60           popr r6
 2761 ee05: 54              incr r4
 2762 ee06: a0 ed f6        br modloop
 2763 ee09:             mod_done:
 2764 ee09: 08 60           popr r6
 2765 ee0b: 05              ret
 2766 ee0c:             
 2767 ee0c:             ;
 2768 ee0c:             ; Multiple numbers in R4 and R5
 2769 ee0c:             ;
 2770 ee0c:             ; Return in R7
 2771 ee0c:             ;
 2772 ee0c:             ; R6 = Bit counter
 2773 ee0c:             ;
 2774 ee0c:             parse_mul16:
 2775 ee0c: 07 06               pushr r6
 2776 ee0e:             
 2777 ee0e: 1f 00 00            MVIW R7,0
 2778 ee11: 1e 00 10            MVIW R6,10h
 2779 ee14:             ;        jsr showregs
 2780 ee14:             
 2781 ee14:             parse_mulloop:
 2782 ee14:             ;        jsr showregs
 2783 ee14:             
 2784 ee14: 25                  mvrla r5
 2785 ee15: b3 01               andi  01h
 2786 ee17: a1 ee 1d            brz parse_mulskip
 2787 ee1a: 04 ee 39            jsr parse_muladd16
 2788 ee1d:             
 2789 ee1d:             parse_mulskip:
 2790 ee1d:             ;
 2791 ee1d:             ; clear carry flag HACK
 2792 ee1d:             ;
 2793 ee1d: 0e 00               ldai 0      ;clear carry -  maybe add a clear carry ins
 2794 ee1f: e0                  cshl
 2795 ee20: b0 00               addi 0      ; may not be needed
 2796 ee22:             ;
 2797 ee22: 24                  mvrla r4
 2798 ee23:             ;        jsr showcarry
 2799 ee23: e0                  cshl
 2800 ee24:             ;        jsr showcarry
 2801 ee24: 34                  mvarl r4
 2802 ee25: 2c                  mvrha r4
 2803 ee26:             ;        jsr showcarry
 2804 ee26: e0                  cshl
 2805 ee27:             ;        jsr showcarry
 2806 ee27: 3c                  mvarh r4
 2807 ee28:             
 2808 ee28: 0e 00               ldai 0      ;clear carry
 2809 ee2a: e0                  cshl
 2810 ee2b:             ;        addi 0
 2811 ee2b:             
 2812 ee2b: 2d                  mvrha r5
 2813 ee2c: e1                  cshr
 2814 ee2d: 3d                  mvarh r5
 2815 ee2e: 25                  mvrla r5
 2816 ee2f: e1                  cshr
 2817 ee30: 35                  mvarl r5
 2818 ee31:             
 2819 ee31: 5e                  decr r6
 2820 ee32: 26                  mvrla r6
 2821 ee33: a2 ee 14            brnz parse_mulloop
 2822 ee36: 08 60               popr r6
 2823 ee38: 05                  ret
 2824 ee39:             
 2825 ee39:             parse_muladd16:
 2826 ee39: 0e 00               ldai 0      ;clear carry
 2827 ee3b: e0                  cshl
 2828 ee3c:             
 2829 ee3c: 27                  MVRLA R7
 2830 ee3d: 0b                  MVAT
 2831 ee3e: 24                  mvrla r4
 2832 ee3f: b8                  ADDT
 2833 ee40: 37                  mvarl r7
 2834 ee41:             
 2835 ee41: 2f                  mvrha r7
 2836 ee42: 0b                  MVAT
 2837 ee43: 2c                  mvrha r4
 2838 ee44: e3                  addtc
 2839 ee45: 3f                  mvarh r7
 2840 ee46: 05                  ret
 2841 ee47:             
 2842 ee47:             ;
 2843 ee47:             ; 16 bit ADD r6 and r7, return result in r7
 2844 ee47:             ;
 2845 ee47:             parse_add16:
 2846 ee47:             
 2847 ee47: 0e 00             ldai 0      ;clear carry
 2848 ee49: e0                cshl
 2849 ee4a: 26                MVRLA R6
 2850 ee4b: 0b                MVAT
 2851 ee4c: 27                mvrla r7
 2852 ee4d: b8                ADDT
 2853 ee4e: 37                mvarl r7
 2854 ee4f: 2e                mvrha r6
 2855 ee50: 0b                MVAT
 2856 ee51: 2f                mvrha r7
 2857 ee52: e3                addtc
 2858 ee53: 3f                mvarh r7
 2859 ee54: 05                ret
 2860 ee55:             
 2861 ee55:             ;
 2862 ee55:             ; 16 bit SUB of r6 from r7, return result in r7
 2863 ee55:             ;
 2864 ee55:             parse_sub16:
 2865 ee55: 2e                mvrha r6
 2866 ee56: b5                inva
 2867 ee57: 3e                mvarh r6
 2868 ee58: 26                mvrla r6
 2869 ee59: b5                inva
 2870 ee5a: 36                mvarl r6
 2871 ee5b: 56                incr r6
 2872 ee5c: a0 ee 47          br parse_add16
 2873 ee5f:             
 2874 ee5f:             ;
 2875 ee5f:             ; convert positive in r7 to negative
 2876 ee5f:             ;
 2877 ee5f:             parse_neg:
 2878 ee5f: 2f                mvrha r7
 2879 ee60: b5                inva
 2880 ee61: 3f                mvarh r7
 2881 ee62: 27                mvrla r7
 2882 ee63: b5                inva
 2883 ee64: 37                mvarl r7
 2884 ee65: 57                incr r7
 2885 ee66: 05                ret
 2886 ee67:             
 2887 ee67:             ;
 2888 ee67:             ; 16 bit AND r6 and r7, return result in r7
 2889 ee67:             ;
 2890 ee67:             parse_and16:
 2891 ee67: 26                MVRLA R6
 2892 ee68: 0b                MVAT
 2893 ee69: 27                mvrla r7
 2894 ee6a: bb                ANDT
 2895 ee6b: 37                mvarl r7
 2896 ee6c: 2e                mvrha r6
 2897 ee6d: 0b                MVAT
 2898 ee6e: 2f                mvrha r7
 2899 ee6f: bb                ANDT
 2900 ee70: 3f                mvarh r7
 2901 ee71: 05                ret
 2902 ee72:             
 2903 ee72:             ;
 2904 ee72:             ; 16 bit OR r6 and r7, return result in r7
 2905 ee72:             ;
 2906 ee72:             parse_or16:
 2907 ee72: 26                MVRLA R6
 2908 ee73: 0b                MVAT
 2909 ee74: 27                mvrla r7
 2910 ee75: ba                ORT
 2911 ee76: 37                mvarl r7
 2912 ee77: 2e                mvrha r6
 2913 ee78: 0b                MVAT
 2914 ee79: 2f                mvrha r7
 2915 ee7a: ba                ORT
 2916 ee7b: 3f                mvarh r7
 2917 ee7c: 05                ret
 2918 ee7d:             
 2919 ee7d:             
 2920 ee7d:             ;
 2921 ee7d:             ; is digit in accumulator hex
 2922 ee7d:             ; returns 1 if yes and 0 if no
 2923 ee7d:             ;
 2924 ee7d:             ; what about upper/lower case
 2925 ee7d:             ;
 2926 ee7d:             ; destroys tmp register
 2927 ee7d:             parse_ishex:
 2928 ee7d: 0d 30          ldti '0'
 2929 ee7f: a7 ee 97       brlt parse_ishex_no
 2930 ee82: 0d 39          ldti '9'
 2931 ee84: a9 ee 8a       brgt parse_ishex_af
 2932 ee87: a0 ee 94       br parse_ishex_yes
 2933 ee8a:             
 2934 ee8a:             parse_ishex_af:
 2935 ee8a: 0d 41           ldti 'A'
 2936 ee8c: a7 ee 97        brlt parse_ishex_no
 2937 ee8f: 0d 46           ldti 'F'
 2938 ee91: a9 ee 97        brgt parse_ishex_no
 2939 ee94:             
 2940 ee94:             parse_ishex_yes:
 2941 ee94: 0e 01           ldai 1
 2942 ee96: 05              ret
 2943 ee97:             
 2944 ee97:             parse_ishex_no:
 2945 ee97: 0e 00           ldai 0
 2946 ee99: 05              ret
 2947 ee9a:             
 2948 ee9a:             ;
 2949 ee9a:             ; is digit in accumulator decimal
 2950 ee9a:             ; returns 1 if yes and 0 if no
 2951 ee9a:             ;
 2952 ee9a:             ; destroys tmp register
 2953 ee9a:             ;
 2954 ee9a:             parse_isdigit:
 2955 ee9a: 0d 30          ldti '0'
 2956 ee9c: a7 ee a7       brlt parse_isdigit_no
 2957 ee9f: 0d 39          ldti '9'
 2958 eea1: a9 ee a7       brgt parse_isdigit_no
 2959 eea4:             
 2960 eea4: 0e 01           ldai 1
 2961 eea6: 05              ret
 2962 eea7:             
 2963 eea7:             parse_isdigit_no:
 2964 eea7: 0e 00           ldai 0
 2965 eea9: 05              ret
 2966 eeaa:             
 2967 eeaa:             ;
 2968 eeaa:             ; 16 bit compare r6 and r7
 2969 eeaa:             ;
 2970 eeaa:             ; returns in accumulator
 2971 eeaa:             ; r7=r6 00
 2972 eeaa:             ; r7>r6 01
 2973 eeaa:             ; r7<r6 ff
 2974 eeaa:             ;
 2975 eeaa:             ; destory Tmp
 2976 eeaa:             ;
 2977 eeaa:             parse_compare:
 2978 eeaa: 2e            mvrha r6
 2979 eeab: 0b            mvat
 2980 eeac: 2f            mvrha r7
 2981 eead: aa ee b9      brneq parse_compareh
 2982 eeb0: 26            mvrla r6
 2983 eeb1: 0b            mvat
 2984 eeb2: 27            mvrla r7
 2985 eeb3: aa ee c2      brneq parse_comparel
 2986 eeb6: 0e 00         ldai 0
 2987 eeb8: 05            ret
 2988 eeb9:             
 2989 eeb9:             parse_compareh:
 2990 eeb9: a7 ee bf      brlt parse_compareh1
 2991 eebc: 0e 01         ldai 1
 2992 eebe: 05            ret
 2993 eebf:             parse_compareh1:
 2994 eebf: 0e ff         ldai 0ffh
 2995 eec1: 05            ret
 2996 eec2:             
 2997 eec2:             parse_comparel:
 2998 eec2: a7 ee c8      brlt parse_comparel1
 2999 eec5: 0e 01         ldai 1
 3000 eec7: 05            ret
 3001 eec8:             parse_comparel1:
 3002 eec8: 0e ff         ldai 0ffh
 3003 eeca: 05            ret
 3004 eecb:             
 3005 eecb: 3e 3e 3e 00 basic_prompt: db ">>>",0
 3006 eecf:             basic_interprter:
 3007 eecf:                     ;build input string
 3008 eecf:                     ;point register to BUFFER
 3009 eecf:                     ;loop fetch chars
 3010 eecf:                     ;until CR
 3011 eecf:                     ;be sure line ends with a NULL or CR
 3012 eecf:                     ;what does parse require???
 3013 eecf: 1f ee cb            MVIW R7,basic_prompt
 3014 eed2: 04 ff c0            JSR stringout
 3015 eed5:             
 3016 eed5: 1f 03 00            mviw r7,parse_input_line
 3017 eed8:             
 3018 eed8:             parse_inputloop:
 3019 eed8: 04 ee e8            jsr get_inputline
 3020 eedb:             
 3021 eedb: 1f 03 00            mviw r7,parse_input_line
 3022 eede: 04 eb fe            JSR parse_line
 3023 eee1:             
 3024 eee1: a1 ee cf            BRZ basic_interprter
 3025 eee4: 05                  RET
 3026 eee5:             
 3027 eee5: 1b 03 00            mviw r3,parse_input_line
 3028 eee8:             
 3029 eee8:             get_inputline:
 3030 eee8: 04 ff e8            jsr uartin
 3031 eeeb: 4f                  stavr r7
 3032 eeec: 57                  incr r7
 3033 eeed: 0d 0a               ldti 0ah  ;1 changed from 0a to 0D for new emulator code, changed back
 3034 eeef: aa ee e8            brneq get_inputline
 3035 eef2: 1f ee f9            MVIW R7,CRLF
 3036 eef5: 04 ff c0            JSR STRINGOUT
 3037 eef8: 05                  RET
 3038 eef9:             
 3039 eef9:             ;
 3040 eef9:             ; STRINGS
 3041 eef9:             ;
 3042 eef9: 0a 0d 00    CRLF: DB 0ah,0dh,0
 3043 eefc:             ;
 3044 eefc:             
 3045 eefc:                   ORG 0EF00h
 3046 ef00:             
 3047 ef00:             basic_test:
 3048 ef00:             
 3049 ef00:             ;    DB  25h,0ah,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h,24h,25h,14h,00h
 3050 ef00:             ;    DB  0ah,00h,06h,04h,00h,00h,24h,25h,1eh,00h,11h,00h,04h,00h,00h,23h
 3051 ef00:             ;    DB  04h,00h,00h,17h,02h,01h,00h,24h,25h,28h,00h,13h,00h,07h,04h,00h
 3052 ef00:             ;    DB  00h,21h,02h,0ah,00h,08h,0dh,02h,14h,00h,24h,01h,00h,00h,00h,00h
 3053 ef00:             
 3054 ef00:             ;    DB  25h,0ah,00h,14h,00h,06h,1fh,02h,01h,00h,17h,02h,02h,00h,20h,17h
 3055 ef00:             ;    DB  02h,03h,00h,24h,25h,14h,00h,0dh,00h,04h,00h,00h,23h,02h,01h,00h
 3056 ef00:             ;    DB  24h,25h,1eh,00h,0dh,00h,04h,01h,00h,23h,02h,02h,00h,24h,25h,28h
 3057 ef00:             ;    DB  00h,0eh,00h,06h,04h,00h,00h,17h,04h,01h,00h,24h,25h,32h,00h,15h
 3058 ef00:             ;    DB  00h,04h,02h,00h,23h,04h,00h,00h,17h,04h,01h,00h,17h,02h,05h,00h
 3059 ef00:             ;    DB  24h,25h,3ch,00h,0ah,00h,06h,04h,02h,00h,24h,01h,00h,00h,00h,00h
 3060 ef00:             
 3061 ef00:             ;    DB  25h,0ah,00h,0eh,00h,06h,03h,68h,65h,6ch,6ch,6fh,00h,24h,25h,14h
 3062 ef00:             ;    DB  00h,0dh,00h,04h,02h,00h,23h,02h,09h,00h,24h,25h,1eh,00h,0ah,00h
 3063 ef00:             ;    DB  06h,04h,02h,00h,24h,25h,28h,00h,0dh,00h,04h,04h,00h,23h,02h,32h
 3064 ef00:             ;    DB  00h,24h,25h,32h,00h,17h,00h,06h,03h,68h,32h,00h,15h,04h,02h,00h
 3065 ef00:             ;    DB  15h,04h,04h,00h,15h,02h,16h,00h,24h,25h,3ch,00h,12h,00h,0ah,04h
 3066 ef00:             ;    DB  03h,00h,23h,02h,01h,00h,0bh,02h,05h,00h,24h,25h,46h,00h,0ah,00h
 3067 ef00:             ;    DB  06h,04h,03h,00h,24h,25h,50h,00h,0ah,00h,0ch,04h,03h,00h,24h,25h
 3068 ef00:             ;    DB  51h,00h,12h,00h,06h,03h,6eh,65h,78h,74h,20h,64h,6fh,6eh,65h,00h
 3069 ef00:             ;    DB  24h,25h,52h,00h,0ah,00h,0eh,02h,6eh,00h,24h,25h,55h,00h,0ah,00h
 3070 ef00:             ;    DB  0dh,02h,7dh,00h,24h,25h,5ah,0h,12h,00h,06h,03h,6eh,65h,78h,74h
 3071 ef00:             ;    DB  20h,64h,6fh,6eh,65h,00h,24h,25h,6eh,00h,11h,00h,06h,03h,69h,6eh
 3072 ef00:             ;    DB  20h,67h,6fh,73h,75h,62h,00h,24h,25h,70h,00h,11h,00h,06h,03h,69h
 3073 ef00:             ;    DB  6eh,20h,73h,75h,62h,20h,32h,00h,24h,25h,72h,00h,07h,00h,0fh,24h
 3074 ef00:             ;    DB  25h,7dh,00h,0ch,00h,06h,03h,65h,6eh,64h,00h,24h,25h,7eh,00h,07h
 3075 ef00:             ;    DB  00h,14h,24h,01h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
 3076 ef00:             
 3077 ef00:             ;
 3078 ef00:             ; The End
 3079 ef00:             ;
 3080 ef00:               ORG 0EFFFh
 3081 efff:             ZZZZ:
 3082 efff: 00            DB   0

ed34h: ADDLINE_MOVEPTR  - <  2574>   2578 
eecfh: BASIC_INTERPRTER - <  3006>    187   3024 
e6a7h: BASIC_LIST       - <  1431>    149   2383 
eecbh: BASIC_PROMPT     - <  3005>   3013 
e54fh: BASIC_RUN        - <  1163>    157   2390   2397 
ef00h: BASIC_TEST       - <  3047>    203 
0100h: BASIC_VARS       - <    69>   1205   1228 
e6c0h: BASLIST1         - <  1447>   1440 
e760h: BASLIST10        - <  1557>   1551 
e76fh: BASLIST11        - <  1565>   1559 
e77eh: BASLIST12        - <  1573>   1567 
e78dh: BASLIST13        - <  1581>   1575 
e79ch: BASLIST14        - <  1589>   1583 
e7abh: BASLIST15        - <  1597>   1591 
e7bah: BASLIST16        - <  1605>   1599 
e7c9h: BASLIST17        - <  1613>   1607 
e7d8h: BASLIST18        - <  1621>   1615 
e7e7h: BASLIST19        - <  1629>   1623 
e6cbh: BASLIST2         - <  1453>   1449 
e7f6h: BASLIST20        - <  1637>   1631 
e805h: BASLIST21        - <  1645>   1639 
e818h: BASLIST22        - <  1655>   1647 
e82bh: BASLIST23        - <  1665>   1657 
e83eh: BASLIST24        - <  1675>   1667 
e851h: BASLIST25        - <  1685>   1677 
e864h: BASLIST26        - <  1695>   1687 
e877h: BASLIST27        - <  1705>   1697 
e88ah: BASLIST28        - <  1715>   1707 
e89dh: BASLIST29        - <  1725>   1717 
e6e2h: BASLIST3         - <  1469>   1455 
e8b0h: BASLIST30        - <  1735>   1727 
e8c3h: BASLIST31        - <  1745>   1737 
e8d6h: BASLIST32        - <  1755>   1747 
e8e9h: BASLIST33        - <  1765>   1757 
e8fch: BASLIST34        - <  1775>   1767 
e90fh: BASLIST35        - <  1785>   1777 
e922h: BASLIST36        - <  1795>   1787 
e931h: BASLIST37        - <  1803>   1797 
e94ah: BASLIST38        - <  1821>   1805 
e959h: BASLIST39        - <  1830>   1823 
e6feh: BASLIST4         - <  1494>   1474 
e715h: BASLIST5         - <  1517>   1496 
e724h: BASLIST6         - <  1525>   1519 
e733h: BASLIST7         - <  1533>   1527 
e742h: BASLIST8         - <  1541>   1535 
e751h: BASLIST9         - <  1549>   1543 
e965h: BASLIST_DONE     - <  1838>   1444   1450   1834 
e6abh: BASLIST_LOOP     - <  1436>   1445   1451   1467   1492   1515   1523 
         1531   1539   1547   1555   1563   1571   1579   1587   1595   1603 
         1611   1619   1627   1635   1643   1653   1663   1673   1683   1693 
         1703   1713   1723   1733   1743   1753   1763   1773   1783   1793 
         1801   1819   1827 
e6f2h: BASLIST_STRING   - <  1484>   1488 
e6fah: BASLIST_STRINGEND - <  1490>   1486 
ed90h: BASU_FIND        - <  2662>    619   2617 
edb9h: BASU_FIND1       - <  2693>   2680 
edbah: BASU_FIND2       - <  2695>   2685 
ed95h: BASU_FIND_LOOP   - <  2666>   2708 
eda2h: BASU_FIND_LOOP1  - <  2675>   2669 
edc3h: BASU_FIND_MOVEPTR - <  2703>   2707 
020eh: BAS_BUFFERENDHI  - <    81>    172   2646 
e069h: BAS_COPYLOOP     - <   206>    213    215 
020ah: BAS_CURRENTTOKEN - <    79>   2121   2129   2156   2321 
e58ch: BAS_ERROR        - <  1242>    303   1149 
0282h: BAS_FORSTACK     - <   102>    271 
0280h: BAS_FORSTACKPTR  - <   101> 
02c0h: BAS_GOSUBPTR     - <   111> 
02c2h: BAS_GOSUBSTACK   - <   112>    270 
0214h: BAS_INSERTPTR    - <    88>   2552   2596   2600 
e0a8h: BAS_MSG1         - <   244>    302 
e0c4h: BAS_MSG2         - <   245> 
e0d5h: BAS_MSG3         - <   246>   1146 
0216h: BAS_NEGFLAG      - <    89> 
0212h: BAS_NEWLINELEN   - <    87>   2520   2540   2585 
0210h: BAS_NEWLINENUM   - <    86>   2424   2538   2548 
0204h: BAS_NXTPTR       - <    76>   1998   2014   2030   2065   2083   2142 
         2183 
0200h: BAS_RUN_ENDED    - <    74>    272    638   1052   1180 
0208h: BAS_TOKCOUNTER   - <    78>   2119   2367   2443   2445   2456   2459 
         2475   2477   2484   2486   2501   2504   2519 
020ch: BAS_TOKENBUFFER  - <    80>    148    170    275   2382   2549   2664 
0206h: BAS_TOKPTR       - <    77>   2117   2487 
2000h: BAS_TOK_BUF_END  - <   129>    171   2583   2587 
1000h: BAS_TOK_BUF_START - <   125>    167    202   2404 
0202h: BAS_TXTPTR       - <    75>    973   1879   1973   2043   2115   2143 
         2154   2204   2295   2312   2337   2371   2465   2488 
e077h: BIGTEST          - <   218>    180 
ffc4h: CHAROUT          - <     5>    682   1343   1375   1395 
eef9h: CRLF             - <  3042>    223    230    235    716   1798   2413 
         3035 
e5cbh: DIVIDERS         - <  1327>   1352 
edd5h: DIVLOOP          - <  2727>   2735 
ede8h: DIV_DONE         - <  2736>   2730 
e119h: EXE_ACCEPT       - <   285>    326    340    349    361    367    370 
          637    652    662    726    732    761    763    768    776    779 
          781    802    832    842    887    898    916    918    929    944 
          964    981    983    992   1001   1007   1009   1029   1035   1045 
         1126   1156 
e12eh: EXE_ACCEPT_DONE  - <   305>    295 
e4b0h: EXE_END_STMT     - <  1051>   1119 
e1e5h: EXE_EXPR         - <   455>    368    541    557    574    591    653 
          703    764    919    930    993   1031   1037 
e22ah: EXE_EXPR_AND     - <   499>    469 
e251h: EXE_EXPR_DONE    - <   524>    473 
e1eeh: EXE_EXPR_LOOP    - <   462>    485    497    509    521    522 
e218h: EXE_EXPR_MINUS   - <   487>    467 
e23ch: EXE_EXPR_OR      - <   511>    471 
e206h: EXE_EXPR_PLUS    - <   475>    465 
e13eh: EXE_FACTOR       - <   335>    341    350    387    402    416    430 
e16bh: EXE_FACTOR1      - <   364>    358 
e14ch: EXE_FACTOR1A     - <   345>    339 
e15dh: EXE_FACTOR1B     - <   355>    348 
e17ch: EXE_FACTOR2      - <   373>    366 
e561h: EXE_FINISHED     - <  1179>   1167 
e573h: EXE_FINISHED_YES - <  1191>   1183   1187 
e40ch: EXE_FOR_STMT     - <   893>   1095 
e581h: EXE_GET_VARIABLE - <  1227>    324    847 
e3a8h: EXE_GOSUB_STMT   - <   774>   1083 
e2f1h: EXE_GOTO_STMT    - <   650>   1133 
e35fh: EXE_IF_STMT      - <   724>   1071 
e378h: EXE_IF_STMT1     - <   740>    736    746 
e387h: EXE_IF_STMT2     - <   749>    744 
e2d3h: EXE_INDEX_FIND   - <   618>    628 
e107h: EXE_INIT         - <   268>   1164 
e446h: EXE_INPUT_STMT   - <   962>   1139 
e5d5h: EXE_ITOA         - <  1329>    234    705   1464   1815 
e5f7h: EXE_ITOA_LOOP    - <  1354>   1368   1385   1389 
e60fh: EXE_ITOA_NEXT    - <  1370>   1363 
e631h: EXE_ITOA_NOONES  - <  1396> 
e61ch: EXE_ITOA_NOTYET  - <  1379>   1372 
e5e8h: EXE_ITOA_POS     - <  1345>   1333 
e2d7h: EXE_JUMP_LINE    - <   627>    654    794 
e2eeh: EXE_JUMP_LINE1   - <   642>    630    632 
e38bh: EXE_LET_STMT     - <   756>   1077   1127 
e546h: EXE_LINE_STMT    - <  1154>   1173 
e402h: EXE_NEXT_DONE    - <   881>    867 
e3d2h: EXE_NEXT_STMT    - <   821>   1113 
e5bah: EXE_NEXT_TOK3_DONE - <  1289>   1285 
e5b2h: EXE_NEXT_TOK3_LOOP - <  1283>   1287 
e58eh: EXE_NEXT_TOKEN   - <  1251>    306    401    415    429    476    488 
          500    512    556    573    590    675    683    689    718    741 
          750 
e598h: EXE_NEXT_TOKEN1  - <  1260>   1254 
e5a1h: EXE_NEXT_TOKEN2  - <  1268>   1262 
e5ach: EXE_NEXT_TOKEN3  - <  1278>   1270 
e5bch: EXE_NEXT_TOKEN4  - <  1293>   1280 
e5beh: EXE_NUM          - <  1300>    359    777 
e46dh: EXE_PEEK_STMT    - <   990>   1101 
e494h: EXE_POKE_STMT    - <  1027>   1107 
e2fdh: EXE_PRINT_STMT   - <   660>   1065 
e314h: EXE_PRINT_STMT1  - <   678>    667 
e324h: EXE_PRINT_STMT2  - <   686>    680 
e32fh: EXE_PRINT_STMT3  - <   692>    688 
e341h: EXE_PRINT_STMT4  - <   702>    694    696    698 
e355h: EXE_PRINT_STMT_DONE - <   715>    700    710    712 
e302h: EXE_PRINT_STMT_LOOP - <   664>    713 
e347h: EXE_PRINT_STMT_TEST - <   707>    676    684    690 
e258h: EXE_RELATION     - <   537>    728 
e2cch: EXE_RELATION_DONE - <   605>    553 
e2b0h: EXE_RELATION_EQ  - <   589>    551 
e292h: EXE_RELATION_GT  - <   572>    549 
e261h: EXE_RELATION_LOOP - <   544>    567    570    584    587    600    603 
e274h: EXE_RELATION_LT  - <   555>    547 
e2c6h: EXE_REL_NE       - <   601>    598 
e2aah: EXE_REL_NGT      - <   585>    582 
e28ch: EXE_REL_NLT      - <   568>    565 
e3c4h: EXE_RETURN_STMT  - <   800>   1089 
e552h: EXE_RUN          - <  1166>   1174 
e55bh: EXE_RUN_CONT     - <  1172>   1169 
e576h: EXE_SET_VARIABLE - <  1204>    766    850    924    978   1005 
e4b7h: EXE_STMT         - <  1060>    737   1157 
e4c1h: EXE_STMT1        - <  1068>   1064 
e512h: EXE_STMT10       - <  1122>   1118 
e520h: EXE_STMT11       - <  1130>   1124 
e529h: EXE_STMT12       - <  1136>   1132 
e532h: EXE_STMT13       - <  1142>   1138 
e4cah: EXE_STMT2        - <  1074>   1070 
e4d3h: EXE_STMT3        - <  1080>   1076 
e4dch: EXE_STMT4        - <  1086>   1082 
e4e5h: EXE_STMT5        - <  1092>   1088 
e4eeh: EXE_STMT6        - <  1098>   1094 
e4f7h: EXE_STMT7        - <  1104>   1100 
e500h: EXE_STMT8        - <  1110>   1106 
e509h: EXE_STMT9        - <  1116>   1112 
e0ebh: EXE_STMT_MSG     - <   247> 
e180h: EXE_TERM         - <   383>    459    477    489    501    513 
e19ch: EXE_TERM_ASTR    - <   400>    393 
e1deh: EXE_TERM_DONE    - <   442>    398 
e189h: EXE_TERM_LOOP    - <   390>    412    426    440 
e1c8h: EXE_TERM_MOD     - <   428>    397 
e1b2h: EXE_TERM_SLASH   - <   414>    395 
e132h: EXE_VARFACTOR    - <   318>    374 
e5c7h: EXE_VARIABLE_NUM - <  1315>    319    757    836    902    965   1002 
ead2h: FOUND            - <  2064>   2047 
eee8h: GET_INPUTLINE    - <  3029>    970   3019   3034 
edf6h: MODLOOP          - <  2754>   2762 
ee09h: MOD_DONE         - <  2763>   2757 
eadch: NOKEYOWRDSFOUND  - <  2072>   2044 
e9f4h: PARSECHAR1       - <  1887>   1884 
ea44h: PARSECHAR10      - <  1937>   1934 
ea4ch: PARSECHAR11      - <  1942>   1939 
ea54h: PARSECHAR12      - <  1947>   1944 
ea5ch: PARSECHAR13      - <  1952>   1949 
ea64h: PARSECHAR14      - <  1957>   1954 
ea6ch: PARSECHAR15      - <  1962>   1959 
e9fch: PARSECHAR2       - <  1892>   1889 
ea04h: PARSECHAR3       - <  1897>   1894 
ea0ch: PARSECHAR4       - <  1902>   1899 
ea14h: PARSECHAR5       - <  1907>   1904 
ea1ch: PARSECHAR6       - <  1912>   1909 
ea24h: PARSECHAR7       - <  1917>   1914 
ea2ch: PARSECHAR7A      - <  1922>   1919 
ea34h: PARSECHAR8       - <  1927>   1924 
ea3ch: PARSECHAR9       - <  1932>   1929 
ee47h: PARSE_ADD16      - <  2845>    483   2232   2638   2872 
ecfch: PARSE_ADDLINE    - <  2537> 
ed0eh: PARSE_ADDLINE1   - <  2547>   2543 
ed14h: PARSE_ADDLINELOOP - <  2551>   2579 
ed3dh: PARSE_ADDROOM    - <  2582>   2555   2564 
ebb8h: PARSE_AF         - <  2277>   2274 
ee67h: PARSE_AND16      - <  2890>    507 
e0f5h: PARSE_CMD_ERROR  - <   248>   2411 
ec5eh: PARSE_CODE       - <  2418>   2376 
eeaah: PARSE_COMPARE    - <  2977>    563    580    597    865   1361   2562 
         2597   2728   2755 
eeb9h: PARSE_COMPAREH   - <  2989>   2981 
eebfh: PARSE_COMPAREH1  - <  2993>   2990 
eec2h: PARSE_COMPAREL   - <  2997>   2985 
eec8h: PARSE_COMPAREL1  - <  3001>   2998 
edcch: PARSE_DIV16      - <  2715>    221    423 
ebcfh: PARSE_FINISHED   - <  2310>   2136   2168 
ebeah: PARSE_FINISHED_YES - <  2327>   2314   2320   2323 
ebaeh: PARSE_GETNIBBLE  - <  2270> 
ea6fh: PARSE_GET_NEXT_TOK - <  1971>   2120   2155   2377 
ea74h: PARSE_GNT1       - <  1979> 
ea7bh: PARSE_GNT1LOOP   - <  1993>   1997 
ea75h: PARSE_GNT1_CHKPOS - <  1989> 
ea8bh: PARSE_GNT2       - <  2009>   1991 
ea99h: PARSE_GNT3       - <  2020>   2012 
ea9fh: PARSE_GNT3LOOP   - <  2024>   2028 
eaafh: PARSE_GNT4       - <  2035>   2023 
eaf2h: PARSE_GNT_ERROR  - <  2088>   2079   2081 
eaf7h: PARSE_INIT       - <  2112>   2364 
eed8h: PARSE_INPUTLOOP  - <  3018> 
0300h: PARSE_INPUT_LINE - <   117>    968    972   3016   3021   3027 
ed5ch: PARSE_INSERTLOOP - <  2603>   2609 
ee9ah: PARSE_ISDIGIT    - <  2954>   1990   1996   2255   2373 
eea7h: PARSE_ISDIGIT_NO - <  2963>   2956   2958 
ee7dh: PARSE_ISHEX      - <  2927> 
ee8ah: PARSE_ISHEX_AF   - <  2934>   2931 
ee97h: PARSE_ISHEX_NO   - <  2944>   2929   2936   2938 
ee94h: PARSE_ISHEX_YES  - <  2940>   2932 
e968h: PARSE_KEYWORDS   - <  1845>   2040 
ebfeh: PARSE_LINE       - <  2363>    194   3022 
ec9dh: PARSE_LINE1      - <  2462>   2448 
ecb9h: PARSE_LINE1DONE  - <  2479>   2471 
eca6h: PARSE_LINE1LOOP  - <  2468>   2478 
ecceh: PARSE_LINE2      - <  2491>   2464 
ece7h: PARSE_LINE_DONE  - <  2507>   2439 
ec4fh: PARSE_LINE_ERROR - <  2410>   2403 
ec2bh: PARSE_LINE_EXIT  - <  2387>   2381 
ec1dh: PARSE_LINE_LIST  - <  2379> 
ec70h: PARSE_LINE_LOOP  - <  2435>   2460   2489   2493   2505 
ec41h: PARSE_LINE_NEW   - <  2401>   2396 
ec36h: PARSE_LINE_RUN   - <  2394>   2389 
ededh: PARSE_MOD16      - <  2746>    228    437 
ee0ch: PARSE_MUL16      - <  2774>    409   2227 
ee39h: PARSE_MULADD16   - <  2825>   2787 
ee14h: PARSE_MULLOOP    - <  2781>   2821 
ee1dh: PARSE_MULSKIP    - <  2789>   2786 
ee5fh: PARSE_NEG        - <  2877>    351 
eb15h: PARSE_NEXT       - <  2135>   2184   2436 
eb1ch: PARSE_NEXT1      - <  2140>   2137 
eb24h: PARSE_NEXT1LOOP  - <  2145>   2150 
eb2eh: PARSE_NEXT2      - <  2153>   2148 
eb3fh: PARSE_NEXT3      - <  2167>   2159   2174 
eb4fh: PARSE_NEXTDONE   - <  2176>   2169   2172 
eb56h: PARSE_NEXTDONE2  - <  2182>   2179 
eb5fh: PARSE_NUM        - <  2198>    976   2423   2449 
eb9fh: PARSE_NUM_CHAR   - <  2253>   2215   2219 
eba9h: PARSE_NUM_CHAR1  - <  2259>   2256 
eb93h: PARSE_NUM_DONE   - <  2237>   2223 
eb96h: PARSE_NUM_DONE1  - <  2244> 
eb75h: PARSE_NUM_LOOP   - <  2218>   2235 
eb71h: PARSE_NUM_POS    - <  2214> 
ee72h: PARSE_OR16       - <  2906>    519 
ebfeh: PARSE_POS        - <  2350> 
ed68h: PARSE_REMOVELINE - <  2616>   2539 
ed74h: PARSE_REMOVELINE1 - <  2623>   2619   2621 
ed85h: PARSE_REMOVELOOP - <  2639>   2648 
ed49h: PARSE_ROOMLOOP   - <  2590>   2598 
e9e4h: PARSE_SINGLECHAR - <  1876>   2011 
ebc0h: PARSE_STRING     - <  2287> 
ebc9h: PARSE_STRING1    - <  2293>   2290 
ee55h: PARSE_SUB16      - <  2864>    495   1366   2586   2732   2759 
eb11h: PARSE_TOKEN      - <  2128>   2288   2437 
0400h: PARSE_TOKEN_BUFFER - <   121>   2116   2368   2515   2601 
ebefh: PARSE_VARIABLE_NUM - <  2335>   2494 
eabbh: PCMPLOOP         - <  2045>   2053 
ffcch: SHOWADDR         - <     7>   1443   1833 
ffd8h: SHOWBYTE         - <    10> 
ffe0h: SHOWBYTEA        - <    12>    299   1143 
ffe4h: SHOWCARRY        - <    13> 
ffd4h: SHOWR7           - <     9> 
ffdch: SHOWREGS         - <    11>    222    229   1148 
eac9h: SKIPLOOP         - <  2057>   2060 
eac9h: SKIPTOEND        - <  2055>   2050 
ffc0h: STRINGOUT        - <     4>    224    231    236    674    717   1147 
         1442   1477   1521   1529   1537   1545   1553   1561   1569   1577 
         1585   1593   1601   1609   1617   1625   1633   1641   1799   1825 
         1832   2412   2414   3014   3036   3036 
0019h: TOKENIZER_AND    - <    44>    468   1686   1910 
001bh: TOKENIZER_ASTR   - <    46>    392   1706   1920 
0010h: TOKENIZER_CALL   - <    35>   1606   1857 
0015h: TOKENIZER_COMMA  - <    40>    679   1000   1034   1646   1890 
0024h: TOKENIZER_CR     - <    55>    636    709    743    767    780    886 
          943    982   1008   1044   1796   1885   2438   2508 
0009h: TOKENIZER_ELSE   - <    28>   1550   1850 
0014h: TOKENIZER_END    - <    39>   1117   1638   1861 
0001h: TOKENIZER_EOF    - <    20>    168    711    745   1186   1448   2319 
         2322   2405   2554   2668 
0023h: TOKENIZER_EQ     - <    54>    550    762    917   1786   1960 
0000h: TOKENIZER_ERROR  - <    19>   1439   1867   2090 
0029h: TOKENIZER_EXIT   - <    60>   1865   2388 
000ah: TOKENIZER_FOR    - <    29>    897   1093   1558   1851 
000eh: TOKENIZER_GOSUB  - <    33>    775   1081   1590   1855 
000dh: TOKENIZER_GOTO   - <    32>    651   1131   1582   1854 
0022h: TOKENIZER_GT     - <    53>    548   1776   1955 
001eh: TOKENIZER_HASH   - <    49>   1736   1940 
0007h: TOKENIZER_IF     - <    26>    725   1069   1534   1848 
002ah: TOKENIZER_INPUT  - <    61>    963   1137   1822   1866 
001fh: TOKENIZER_LEFTP  - <    50>    365    697   1746   1935 
0005h: TOKENIZER_LET    - <    24>   1123   1125   1518   1846 
0025h: TOKENIZER_LINENUM - <    56>   1155   1269   1804   2419 
0026h: TOKENIZER_LIST   - <    57>   1862   2380 
0021h: TOKENIZER_LT     - <    52>    546   1766   1950 
0018h: TOKENIZER_MINUS  - <    43>    347    466   1676   1905 
001dh: TOKENIZER_MOD    - <    48>    396   1726   1930 
0028h: TOKENIZER_NEW    - <    59>   1864   2402 
000ch: TOKENIZER_NEXT   - <    31>    831   1111   1574   1853 
0002h: TOKENIZER_NUMBER - <    21>    357    695    778   1253   1454   1999 
         2447 
001ah: TOKENIZER_OR     - <    45>    470   1696   1915 
0012h: TOKENIZER_PEEK   - <    37>    991   1099   1622   1859 
0017h: TOKENIZER_PLUS   - <    42>    338    464   1666   1900 
0013h: TOKENIZER_POKE   - <    38>   1028   1105   1630   1860 
0006h: TOKENIZER_PRINT  - <    25>    661   1063   1526   1847 
0011h: TOKENIZER_REM    - <    36>   1614   1858   2158 
000fh: TOKENIZER_RETURN - <    34>    801   1087   1598   1856 
0020h: TOKENIZER_RIGHTP - <    51>    369   1756   1945 
0027h: TOKENIZER_RUN    - <    58>   1863   2395 
0016h: TOKENIZER_SEMICOLON - <    41>    687   1656   1895 
001ch: TOKENIZER_SLASH  - <    47>    394   1716   1925 
0003h: TOKENIZER_STRING - <    22>    666   1279   1473   2031   2289   2463 
0008h: TOKENIZER_THEN   - <    27>    731   1542   1849 
000bh: TOKENIZER_TO     - <    30>    928   1566   1852 
0004h: TOKENIZER_VARIABLE - <    23>    325    693    760    841    915    980 
         1006   1075   1261   1495   2084   2492 
e68fh: TOKL_CALL        - <  1426>   1608 
e64fh: TOKL_ELSE        - <  1415>   1552 
e68ah: TOKL_END         - <  1425>   1640 
e69ch: TOKL_ERROR       - <  1428>   1441   1831 
e655h: TOKL_FOR         - <  1416>   1560 
e66ah: TOKL_GOSUB       - <  1420>   1592 
e664h: TOKL_GOTO        - <  1419>   1584 
e645h: TOKL_IF          - <  1413>   1536 
e695h: TOKL_INPUT       - <  1427>   1824 
e639h: TOKL_LET         - <  1411>   1520 
e65eh: TOKL_NEXT        - <  1418>   1576 
e67eh: TOKL_PEEK        - <  1423>   1624 
e684h: TOKL_POKE        - <  1424>   1632 
e63eh: TOKL_PRINT       - <  1412>   1528 
e679h: TOKL_REM         - <  1422>   1616 
e671h: TOKL_RETURN      - <  1421>   1600 
e649h: TOKL_THEN        - <  1414>   1544 
e65ah: TOKL_TO          - <  1417>   1568 
eab4h: TOP              - <  2041>   2062 
ffd0h: TOUPPER          - <     8>   2278 
ffe8h: UARTIN           - <    14>   3030 
ffc8h: UARTOUT          - <     6>    301   1145   1466   1479   1503   1514 
         1649   1651   1659   1661   1669   1671   1679   1681   1689   1691 
         1699   1701   1709   1711   1719   1721   1729   1731   1739   1741 
         1749   1751   1759   1761   1769   1771   1779   1781   1789   1791 
         1818 
efffh: ZZZZ             - <  3081> 

3082 Lines assembled
0 Errors
358 Labels
Object Code:3780 bytes

