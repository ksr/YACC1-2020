Command Line Options:
-h      Output in Intel Hex format
-l      Show listing
-s      Show symbols
-t      Suppres trailing information
-Sl     Sort label reference by line
-Sa     Sort label reference alphabetically
-u      Force output to uppercase
-V      Show Version
-v      Verbose output
-x      Show cross reference
-d name Specify assembly definition file
-r	Show rule that provided assembly match
        this is used for debugging def files
-Dsym=val Define a preprocessor symbol

Definition files:
-----------------
The format of a definition file is as follows:

comment
options
class definitions
*
Assembly translations
*

The comment is the very first line of the file.  This line can contain anything
but usually describes what the definition file is for

Options are preceeded by the word OPTION.  Options provide a means to alter
the operation of the assembler.  The currently defined options are:

OPTION 16BIT  - This optin one increments the address pointer once for every
                two bytes output
OPTION BIG    - Use big-endianess when writing out words (Default)
OPTION LITTLE - Ise little-endianess when writing out words

Class definitions allow you to specify multiple entities for an instruction
A common use is for the processor's register set.  A class entry is defined
as follows:

CLASS name
text=value[,text=value ...]

Each text entry is replaced by the value entry when the machine language
instruction is being built.

Assembly translations are each two lines.  The first line specifies the
pattern to be matched for the particular instruction.  The second line
specifies how the machine language instruction is built for the matched
pattern.  For example:

ADD	M
c1

This specifies that when an instruction 'ADD  M' is found in the source
file, a C1 byte is written out to the object file.

The instruction pattern is defined as follows.  The assembly mnemonic
begins the line, a tab is used before the arguments.  All characters
must match one for one, or when a character is preceeded by a \, the 
wildcard function must match.  The following wildcard functions are
currently defined
\N         - Match a nybble (0-15)
\B         - Match a byte (0-255)
\W         - Match a word (0-65535)
\(n)       - Match a value of up to n bits. n is a single hex digit
\D         - Displacement.  If this byte is a label or a number not
             starting with + or -, the value is taken as an address that
             the current instruction pointer should be subtracted from
             In this mode, the value of the instruction pointer is 1
             following the actual displacement byte.  If the number
             begins with + or - it is taken as the relative displacement
             value.
\L         - Remaining text is placed into the list buffer as bytes
\M         - Remaining text is placed into the list buffer as words
\{class}   - Match an entry within the specified class

Each wildcard match places the matched value into a replacement variable
The first wildcard places the match in 1, the second in 2, and so forth.
These replacement variables can then be used in the construction line.

The construction line is used to build the machine language code for the
matched pattern.  The construction function begins with an accumulator of 0.
All characters on the construction line effect the accumulator.  When a blank
is reached the accumulator is output as a byte and then zeroed.  Multiple
byte instructions are built by separating each byte assembly with spaces.
An end of line will terminate the construction for the matched instruction.
The following characters affect the accumulator as follows:
0-f  - Hex digits.  Hex digits shift the accumulator by 1 nybble and then
       the new digit is ORed with the accumulator. Example 1. C5 would 
       produce an output of C5.  C5A would output 5A, this occurs because
       the accumulator is a single byte.
\n   - Use the value in the specified replacement variable.  Example: \1 
       would use the value from the first wildcard match
lo(n) - Get the low byte value of the specified replacement variable.
        Example: lo(2) would get the low order byte from the second
        wildcard replacement.  this will overlay the accumulator
hi(n) - Get the hi byte value of the specified replacement variable.
        Example: hi(2) would get the high order byte from the second
        wildcard replacement.  this will overlay the accumulator
|n    - Or the contents of the n'th replacement variable of the accumulator
        WITHOUT first shifting the accumulatr
|n<v  - This is like |n, except before the value is ORed, it is shifted v
        places to the left. v is a single hex digit.
|n>v  - This is like |n, except before the value is ORed, it is shifted v
        places to the right. v is a single hex digit.
&nn   - The accumulator is ANDed with the hex value nn.
%     - Swap the high and low nybbles
\Bn   - Create a memory buffer.  n specifies which variable holds the size.
\En   - Set last defined label to specified variable contents
        This is used for EQU instructions
\On   - Set assembly origin address to specified variable
        This is used for ORG instructions
\P    - Mark the last symbol as being public.  This generates = lines.
\Q    - This can be used to mark the end of a public procedure when another
        public procedure will not immediately follow.
\R    - Mark the last symbol as being a public procedere.  This generates
        # lines.  All lines up to the next \R command will considered part
        of the procedure
\Sn   - Specify program start address to specified variable
        This is used for END instructions
\X    - Mark the last symbol as being external

Assembler directives:
---------------------
The assembler directives EQU, ORG, DB, DS, END or no long directly
recognized by the assembler.  If these directives are required, they must
be defined in the def file.  Here is the common definition for these 
directives:

DB      \L
\1
DS	\W
\B1
END     \W
\S1
EQU     \W
\E1
ORG     \W
\O1

asm.rc file
-----------
The asm.rc file if it exists, will be read for options to be passed to
the assembler.  Any of the standard command line options may be placed 
into this file, one option per line.  This file is read after the 
initial values are set and before the command line options.

Output file
-----------
The standard output file is an ascii file representing the assembled
machine code.  The first character of each specifies what type of line
the line is.  Any programs designed to read these files should completely
ignore lines beginning with symbols they do not know, since there is the
possiblity of new line types in the future.  The current line types are
currently defined:
: - Data line
    Immediately following the : is a a-4digit hexadecimal number, this is
    the address in memory where the following bytes go.  Following the 
    address are up to 16 2-digit bytes, separated by space.  These bytes
    are to be loaded starting from the specified addres.
* - Start Address
    This symbol specifies where the start address of the program is.  
    Following the * is a 4-digit hexadecimal number representing the 
    starting offset for the program.
? - Missing reference (word)
    This symbol is used to mark where missing references were in the source
    file for which the symbols were declared external.  This can be used
    by a library linker in order to locate where external references need
    to be filled in.  Following the ? is the name of the external symbol.
    The linker should remove this line and modify the first bytes (not
    address) of the following : line.
- - Missing reference (byte)
    This symbol is used to mark where missing references were in the source
    file for which the symbols were declared external.  This can be used
    by a library linker in order to locate where external references need
    to be filled in.  Following the ? is the name of the external symbol.
    The linker should remove this line and modify the first bytes (not
    address) of the following : line.
= - Public symbol
    This line is used to mark where public symbols are.  It is used by
    the linker to provide the value for a symbol.  Immediately following the
    = is the 4-digit value of the symbol followed by a space and the symbol
    name. Unlike the # marker, this specifies a symbol for which no code
    is copied.
# - Public procedure
    This line is used to mark the beginning of a public procedure.  During
    linking, the linker will include in the output file all : lines up
    to the next # line.  The linker will place this procedure at an address
    that is higher than all bytes written to by the source file.  The value
    of the symbol will then be the address it was loaded at.  This symbol
    is normally only used in library files.  Immediately following the #
    is the name of the symbol.
& - Library to search
    These lines are used to specify specific libraries to be searched when
    looking for undefined symbols.  Immediately following the & is the 
    filename of the library to search.

Expression Evaluation:
----------------------
1: .0  .1
2: *   /
3: +   -
4: <<  >>
5: &
6: |   ^

Preprocessor:
-------------
#DEFINE symbol value
#UNDEF symbol
#IFDEF symbol
#IFNDEF symbol
#ELSE
#ENDIF

Embedded .def files:
--------------------
Rc/Asm now supports embedded def files.  These allow you to switch the 
assembly definitions midstream  for example:

		MI=VE (3DD)
		V0:V2=MI
		V0=1E
		V3=0C
; now switch to 1802 assembler
ASMloop:	1802{
		 	ldi 0ch
			plo r4
			seq
			sep r4
			req
		}
; change back to CHIP8 and continue
		I=035E
		V4=18
		V5=18
		DO loop1
		DO math2

This is code for chip-8, but midway through the assembly the 1802 .def file
is used.  When specifiying an embedded .def file, use the name of the .def
file without the .def extension immediately followed by the { charater.
There should be nothing on the line following the { character.

To close the embedded assembly you use the } character.  This character must
be on a line all by itself.


